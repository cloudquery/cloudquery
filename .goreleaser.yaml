before:
  hooks:
    - go mod download
    - go generate ./...
builds:
  - flags:
      - -buildmode=exe
    env:
      - GOGC=off
      - CGO_ENABLED=0
      - GO111MODULE=on
    main: ./main.go
    ldflags:
      - -s -w -X github.com/cloudquery/cloudquery/pkg/client.Version={{.Version}} -X github.com/cloudquery/cloudquery/cmd.Commit={{.Commit}} -X github.com/cloudquery/cloudquery/cmd.Date={{.Date}}
    goos:
      - windows
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64
archives:
  -
    name_template: "{{ .Binary }}_{{ .Os }}_{{ .Arch }}"
    replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      386: i386
      amd64: x86_64
    format: binary
  -
    id: homebrew
    name_template: "{{ .Binary }}_{{ .Os }}_{{ .Arch }}"
    replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      386: i386
      amd64: x86_64
    format: zip
dockers:
  -
    goos: linux
    goarch: amd64
    dockerfile: Dockerfile.goreleaser
    image_templates:
      - "ghcr.io/cloudquery/cloudquery:latest"
      - "ghcr.io/cloudquery/cloudquery:{{.Version}}"
      - "ghcr.io/cloudquery/cloudquery:{{ .Major }}.{{ .Minor }}"
    build_flag_templates:
      - "--label=org.opencontainers.image.source=https://github.com/cloudquery/cloudquery"
checksum:
  name_template: 'checksums.txt'
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'
brews:
  -
    name: cloudquery
    tap:
      owner: cloudquery
      name: homebrew-tap
    url_template: "https://github.com/cloudquery/cloudquery/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
    homepage: "https://cloudquery.io"
    description: "Easily monitor and ask questions about your infrastructure."
    install: |-
      bin.install "cloudquery"
      output = Utils.safe_popen_read("#{bin}/cloudquery", "completion", "bash")
      (bash_completion/"cloudquery").write output
      output = Utils.safe_popen_read("#{bin}/cloudquery", "completion", "zsh")
      (zsh_completion/"_cloudquery").write output
      output = Utils.safe_popen_read("#{bin}/cloudquery", "completion", "fish")
      (fish_completion/"cloudquery.fish").write output
