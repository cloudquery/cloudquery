name: Source Plugin K8S Workflow

on:
  pull_request:
    paths:
      - "plugins/source/k8s/**"
      - ".github/workflows/source_k8s.yml"
  push:
    branches:
      - main
    paths:
      - "plugins/source/k8s/**"
      - ".github/workflows/source_k8s.yml"

jobs:
  resolve-runner:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.resolve.outputs.runner }}
    steps:
      - name: Check if should use large runner
        id: large-runner
        # We want to speed runs on the main branch which prime the cache
        # We allow large runners only in this case to prevent forks from abusing them (it's enforced via runner groups access rules)
        # IF YOU WANT TO USE A LARGE RUNNER YOU NEED TO ADD THE WORKFLOW TO THE `CloudQuery releases` GROUP IN https://github.com/organizations/cloudquery/settings/actions/runner-groups
        if: github.event_name == 'push'
        run: |
          echo "runner=cloudquery-release-runner" >> $GITHUB_OUTPUT
      - name: Resolve runner
        id: resolve
        run: |
          RUNNER=${{ steps.large-runner.outputs.runner }}
          echo "runner=${RUNNER:-"ubuntu-latest"}" >> $GITHUB_OUTPUT
  plugins-source-k8s:
    timeout-minutes: 30
    name: "plugins/source/k8s"
    needs: [resolve-runner]
    runs-on: ${{ needs.resolve-runner.outputs.runner }}
    defaults:
      run:
        working-directory: ./plugins/source/k8s
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Set up Go 1.x
        uses: erezrokah/setup-go@feat/add_cache_prefix
        with:
          go-version-file: plugins/source/k8s/go.mod
          cache: true
          cache-dependency-path: plugins/source/k8s/go.sum
          cache-key-prefix: test-cache-
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2
          working-directory: plugins/source/k8s
          args: "--config ../../.golangci.yml"
          skip-pkg-cache: true
          skip-build-cache: true
      - name: gen
        if: github.event_name == 'pull_request'
        run: make gen
      - name: Fail if generation updated files
        if: github.event_name == 'pull_request'
        run: test "$(git status -s | wc -l)" -eq 0 || (git status -s; exit 1)
      - name: Build
        run: go build .
      - name: Test
        run: make test
  validate-release:
    timeout-minutes: 30
    needs: [resolve-runner]
    runs-on: ${{ needs.resolve-runner.outputs.runner }}
    env:
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        if: startsWith(github.head_ref, 'release-please--branches--main--components') || github.event_name == 'push'
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        if: startsWith(github.head_ref, 'release-please--branches--main--components') || github.event_name == 'push'
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.19.5-release-cache-${{ hashFiles('plugins/source/k8s/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.19.5-release-cache-plugins-source-k8s
      - name: Set up Go
        if: startsWith(github.head_ref, 'release-please--branches--main--components') || github.event_name == 'push'
        uses: actions/setup-go@v3
        with:
          go-version-file: plugins/source/k8s/go.mod
      - name: Install GoReleaser
        if: startsWith(github.head_ref, 'release-please--branches--main--components') || github.event_name == 'push'
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: latest
          install-only: true
      - name: Run GoReleaser Dry-Run
        if: startsWith(github.head_ref, 'release-please--branches--main--components') || github.event_name == 'push'
        run: goreleaser release --snapshot --clean --skip-validate --skip-publish --skip-sign -f ./plugins/source/k8s/.goreleaser.yaml
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  # test-policies:
  #   timeout-minutes: 30
  #   needs: [resolve-runner]
  #   runs-on: ${{ needs.resolve-runner.outputs.runner }}
  #   defaults:
  #     run:
  #       working-directory: ./plugins/source/k8s
  #   services:
  #     postgres:
  #       image: postgres:11
  #       env:
  #         POSTGRES_PASSWORD: pass
  #         POSTGRES_USER: postgres
  #         POSTGRES_DB: postgres
  #       ports:
  #         - 5432:5432
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set up Go 1.x
  #       uses: erezrokah/setup-go@feat/add_cache_prefix
  #       with:
  #         go-version-file: plugins/source/k8s/go.mod
  #         cache: true
  #         cache-dependency-path: plugins/source/k8s/go.sum
  #         cache-key-prefix: policies-cache-
  #     - name: Build
  #       run: go build .
  #     - name: Setup CloudQuery
  #       uses: cloudquery/setup-cloudquery@v3
  #       with:
  #         version: 'v3.5.0'
  #     - name: Migrate DB
  #       run: cloudquery migrate test/policy_cq_config.yml
  #       env:
  #         CQ_DSN: postgresql://postgres:pass@localhost:5432/postgres
  #     - name: Run all policies
  #       run: cd policies && psql -h localhost -p 5432 -U postgres -d postgres -w -f ./policy.sql
  #       env:
  #         PGPASSWORD: pass