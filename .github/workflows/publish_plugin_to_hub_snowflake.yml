name: Publish plugin to Snowflake to hub
on:
  push:
    tags:
      - "plugins-destination-snowflake-v*.*.*"
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      plugin_name: ${{ steps.split.outputs.plugin_name }}
      plugin_kind: ${{ steps.split.outputs.plugin_kind }}
      plugin_version: ${{ steps.split.outputs.plugin_version }}
      plugin_dir: ${{ steps.split.outputs.plugin_dir }}
      prerelease: ${{ steps.semver_parser.outputs.prerelease }}
    steps:
      - name: Split tag
        id: split
        run: |
          tag=${{ github.ref_name }}
          plugin_kind=$(echo $tag | cut -d- -f2)
          plugin_name=$(echo $tag | cut -d- -f3)
          plugin_version=$(echo $tag | cut -d- -f4-)
          echo "plugin_name=${plugin_name}" >> $GITHUB_OUTPUT
          echo "plugin_kind=${plugin_kind}" >> $GITHUB_OUTPUT
          echo "plugin_version=${plugin_version}" >> $GITHUB_OUTPUT
          echo "plugin_dir=plugins/${plugin_kind}/${plugin_name}" >> $GITHUB_OUTPUT
      # Fail if not a valid SemVer string
      - name: Parse semver string
        uses: booxmedialtd/ws-action-parse-semver@7784200024d6b3fc01253e617ec0168daf603de3
        id: semver_parser
        with:
          input_string: ${{steps.split.outputs.plugin_version}}
  publish-plugin-to-hub:
    timeout-minutes: 60
    runs-on: large-ubuntu-monorepo
    container:
      image: ghcr.io/cloudquery/golang-cross:v10.0.0
      env:
        CGO_ENABLED: 1
        CC: /usr/bin/gencc.sh
        CXX: /usr/bin/gencpp.sh
        GOAMD64: v1
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.20.5-publish-plugin-to-hub-cache-${{ hashFiles(format('{0}/{1}', needs.prepare.outputs.plugin_dir, 'go.sum')) }}
          restore-keys: |
            ${{ runner.os }}-go-1.20.5-publish-plugin-to-hub-cache-plugins-${{ needs.prepare.outputs.plugin_kind }}-${{ needs.prepare.outputs.plugin_name }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version-file: ${{ needs.prepare.outputs.plugin_dir }}/go.mod

      - name: Get Release Notes
        id: release-notes
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.repos.getReleaseByTag({
              owner: "cloudquery",
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', ''),
            });
            return data.body;

      - name: Run package command
        working-directory: ${{ needs.prepare.outputs.plugin_dir }}
        run: |
          mkdir -p stubdocs
          touch stubdocs/README.md
          go run main.go package --docs-dir stubdocs -m "${{ steps.release-notes.outputs.result }}" ${{ needs.prepare.outputs.plugin_kind }} ${{ needs.prepare.outputs.plugin_version }} .
      - name: Setup CloudQuery
        uses: cloudquery/setup-cloudquery@v3
        with:
          version: "v3.19.3"

      - name: Publish plugin to hub
        working-directory: ${{ needs.prepare.outputs.plugin_dir }}
        run: |
          mkdir -p ~/.local/share/cloudquery
          echo ${{ secrets.CQ_CI_CLOUDQUERY_HUB_TOKEN }} > ~/.local/share/cloudquery/token
          cloudquery publish cloudquery/${{ needs.prepare.outputs.plugin_name }} --finalize
