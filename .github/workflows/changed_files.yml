on:
  workflow_call:
    inputs:
      files:
        required: false
        type: string
        default: "**/*"
      files_ignore:
        required: false
        type: string
        default: ""
      dir_names:
        required: false
        type: boolean
        default: false
    outputs:
      any_changed:
        description: "Whether any files changed"
        value: ${{ jobs.changed-files.outputs.any_changed }}
      changed_files:
        description: "All changed files"
        value: ${{ jobs.changed-files.outputs.changed_files }}

jobs:
  changed-files:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      any_changed: ${{ fromJson(steps.changed-files.outputs.result).any_changed }}
      changed_files: ${{ fromJson(steps.changed-files.outputs.result).changed_files }}
    steps:
      - uses: actions/checkout@v4
      - name: Install micromatch
        run: npm i -D micromatch@4.0.8
      - uses: actions/github-script@v7
        id: changed-files
        env:
          files: ${{ inputs.files }}
          files_ignore: ${{ inputs.files_ignore }}
          dir_names: ${{ inputs.dir_names }}
        with:
          script: |
            const path = require('path')
            const micromatch = require('micromatch')
            let base, head
            if (context.eventName === 'pull_request') {
              base = context.payload.pull_request.base.sha
              head = context.payload.pull_request.head.sha
            } else if (context.eventName === 'push') {
              base = context.payload.before
              head = context.payload.after
            } else {
              throw new Error('Unsupported event type: ' + context.eventName)
            }
            const patternsToMatch = process.env.files.split('\n').filter(Boolean)
            const patternsToIgnore = process.env.files_ignore.split('\n').filter(Boolean)
            console.log(`Getting changed files between ${base} and ${head}`)
            const { data: { files } } = await github.rest.repos.compareCommits({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              base,
              head,
            })
            const onlyNames = [...new Set(files.map(file => process.env.dir_names == 'true' ? path.dirname(file.filename) : file.filename))]
            console.log('All changed files:', onlyNames)
            const allPatterns = [...patternsToMatch, ...patternsToIgnore.map(pattern => `!${pattern}`)]
            console.log('All patterns:', allPatterns)
            const afterPatterns = micromatch(onlyNames, allPatterns, { dot: true })
            console.log('After patterns:', afterPatterns)
            return {
              any_changed: afterPatterns.length > 0,
              changed_files: afterPatterns.join(' '),
            }
