name: release-plugin
on:
  push:
    tags:
      - "plugins/*/*/v*.*.*"
env:
  CGO_ENABLED: 0

jobs:
  release-plugin-binary:
    runs-on: ubuntu-latest
    steps:
      # Tag format is plugins/<type>/<name>/<version>
      - name: Split tag
        id: split
        run: |
          tag=${{ github.ref_name }}
          plugin_dir=${tag%%v*}
          plugin_type=$(echo $tag | cut -d/ -f2)
          plugin_name=$(echo $tag | cut -d/ -f3)
          plugin_version=$(echo $tag | cut -d/ -f4)
          echo ::set-output name=plugin_dir::${plugin_dir}
          echo ::set-output name=plugin_name::${plugin_name}
          echo ::set-output name=plugin_type::${plugin_type}
          echo ::set-output name=plugin_version::${plugin_version}
      # Fail if not a valid SemVer string
      - name: Parse semver string
        uses: booxmedialtd/ws-action-parse-semver@e4a833cf5d612066a210bd9b62d1c3b20be3b325
        id: semver_parser
        with:
          input_string: ${{steps.split.outputs.plugin_version}}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.1
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: latest
          install-only: true
      - name: Run GoReleaser Dry-Run
        run: goreleaser release --rm-dist --skip-validate --skip-publish --skip-sign -f ./${{steps.split.outputs.plugin_dir}}.goreleaser.yaml
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.PRIVATE_KEY }}
      - name: Run GoReleaser
        run: goreleaser release --rm-dist -f ./${{steps.split.outputs.plugin_dir}}.goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}

      - name: Update version file
        if: steps.semver_parser.outputs.prerelease == ''
        run: 'echo "{ \"latest\": \"${{github.ref_name}}\" }" > ./sites/versions/v1/${{steps.split.outputs.plugin_type}}-${{steps.split.outputs.plugin_name}}.json'

      - name: Create Pull Request
        if: steps.semver_parser.outputs.prerelease == ''
        uses: peter-evans/create-pull-request@v4
        with:
          # required so the PR triggers workflow runs
          token: ${{ secrets.GH_CQ_BOT }}
          branch: chore/update-plugin-${{steps.split.outputs.plugin_type}}-${{steps.split.outputs.plugin_name}}-version
          base: main
          title: "chore: Update plugin `${{steps.split.outputs.plugin_type}}-${{steps.split.outputs.plugin_name}}` version to ${{steps.split.outputs.plugin_version}}"
          commit-message: "chore: Update plugin `${{steps.split.outputs.plugin_type}}-${{steps.split.outputs.plugin_name}}` version to ${{steps.split.outputs.plugin_version}}"
          body: Updates the `${{steps.split.outputs.plugin_type}}-${{steps.split.outputs.plugin_name}}` plugin latest version to ${{steps.split.outputs.plugin_version}}
          labels: automerge
          author: cq-bot <cq-bot@users.noreply.github.com>
