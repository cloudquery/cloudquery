name: Publish UI Directory
on:
  push:
    paths:
      - "plugins/source/**/cloud-config-ui/**"
      - "plugins/destination/**/cloud-config-ui/**"
    branches:
      - main

env:
  ui_dir_name: /cloud-config-ui

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            plugins/source/**/cloud-config-ui/**
            plugins/destination/**/cloud-config-ui/**
          dir_names: "true"
      - name: Generate plugins matrix
        id: matrix
        uses: actions/github-script@v7
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const child_process = require('child_process');
            const allDirs = process.env.ALL_CHANGED_FILES.split(' ').filter(Boolean);
            const uiBuildDirs = Array.from(
              new Set(
                allDirs
                  .filter((dir) => dir.includes('${{ env.ui_dir_name }}'))
                  .map((dir) => dir.split('${{ env.ui_dir_name }}')[0] + '${{ env.ui_dir_name }}')
              )
            );
            const toPluginDataFromUIDir = (uiDir) => {
              const pluginDir = path.join(uiDir, "..");
              const name = path.basename(pluginDir);
              const kind = path.basename(path.join(pluginDir, ".."));
              const tagPrefix = `plugins-${kind}-${name}-`;
              const latestTag = child_process.execSync(`git describe --tags --match "${tagPrefix}*" --abbrev=0`).toString().trim();
              const onlyVersion = latestTag.replace(tagPrefix, '');
              return { dir: pluginDir, ui: uiDir, name, kind, version: onlyVersion };
            };
            const filterByMainFile = (mainFile) => (uiDir) => fs.existsSync(path.join(uiDir, "..", mainFile));
            const filterByGoMainFile = filterByMainFile('main.go');
            const onlyGoPlugins = uiBuildDirs.filter(uiDir => filterByGoMainFile(uiDir)).map(uiDir => toPluginDataFromUIDir(uiDir));
            return { 'matrix-go': { plugin: onlyGoPlugins } };

  publish-config-ui-go:
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ fromJson(needs.prepare.outputs.matrix).matrix-go.plugin != '[]' }}
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix).matrix-go }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ matrix.plugin.dir }}/go.mod
          cache: true
          cache-dependency-path: ${{ matrix.plugin.dir }}/go.sum

      - name: Build
        run: go build .
        working-directory: ${{ matrix.plugin.dir }}

      - name: Use Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          cache-dependency-path: ${{ matrix.plugin.ui }}/package-lock.json

      - name: Install dependencies for ${{ matrix.plugin.dir }}
        run: npm ci
        working-directory: ${{ matrix.plugin.ui }}

      - name: Setup CloudQuery
        uses: cloudquery/setup-cloudquery@v4
        with:
          version: v6.5.0

      - name: Build UI for ${{ matrix.plugin.dir }}
        working-directory: ${{ matrix.plugin.ui }}
        env:
          REACT_APP_PLUGIN_TEAM: cloudquery
          REACT_APP_PLUGIN_KIND: ${{ matrix.plugin.kind }}
          REACT_APP_PLUGIN_NAME: ${{ matrix.plugin.name }}
          REACT_APP_PLUGIN_VERSION: ${{ matrix.plugin.version }}
        run: |
          npm run build

      - name: Update plugin ${{ matrix.plugin.name }}@${{ matrix.plugin.version }} with UI
        working-directory: ${{ matrix.plugin.ui }}
        env:
          CLOUDQUERY_API_KEY: ${{ secrets.CLOUDQUERY_API_KEY }}
        run: |
          cloudquery plugin uiassets upload cloudquery/${{ matrix.plugin.kind }}/${{ matrix.plugin.name }}@${{ matrix.plugin.version }}
