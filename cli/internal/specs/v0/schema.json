{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/cloudquery/cloudquery/cli/internal/specs/v0/spec",
  "$ref": "#/$defs/Spec",
  "$defs": {
    "BackendOptions": {
      "properties": {
        "table_name": {
          "type": "string"
        },
        "connection": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Destination": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the plugin to use"
        },
        "version": {
          "type": "string",
          "description": "Version of the plugin to be used"
        },
        "path": {
          "type": "string",
          "description": "Path is the canonical path to the source plugin in a given registry\nFor example:\n* for `registry: github` the `path` will be: `org/repo`\n* for `registry: local` the `path` will be the path to the binary: `./path/to/binary`\n* for `registry: grpc` the `path` will be the address of the gRPC server: `host:port`"
        },
        "registry": {
          "type": "string",
          "enum": [
            "",
            "github",
            "local",
            "grpc",
            "docker",
            "cloudquery"
          ],
          "description": "Registry can be \"\", \"github\", \"local\", \"grpc\", \"docker\", \"cloudquery\""
        },
        "write_mode": {
          "type": "string",
          "enum": [
            "overwrite-delete-stale",
            "overwrite",
            "append"
          ]
        },
        "migrate_mode": {
          "type": "string",
          "enum": [
            "safe",
            "forced"
          ]
        },
        "pk_mode": {
          "type": "string",
          "enum": [
            "default",
            "cq-id-only"
          ]
        },
        "spec": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "Source": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the plugin to use"
        },
        "version": {
          "type": "string",
          "description": "Version of the plugin to be used"
        },
        "path": {
          "type": "string",
          "description": "Path is the canonical path to the source plugin in a given registry\nFor example:\n* for `registry: github` the `path` will be: `org/repo`\n* for `registry: local` the `path` will be the path to the binary: `./path/to/binary`\n* for `registry: grpc` the `path` will be the address of the gRPC server: `host:port`"
        },
        "registry": {
          "type": "string",
          "enum": [
            "",
            "github",
            "local",
            "grpc",
            "docker",
            "cloudquery"
          ],
          "description": "Registry can be \"\", \"github\", \"local\", \"grpc\", \"docker\", \"cloudquery\""
        },
        "tables": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Tables to sync from the source plugin"
            },
            {
              "type": "null"
            }
          ]
        },
        "skip_tables": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "SkipTables defines tables to skip when syncing data. Useful if a glob pattern is used in Tables"
            },
            {
              "type": "null"
            }
          ]
        },
        "skip_dependent_tables": {
          "type": "boolean",
          "description": "SkipDependentTables changes the matching behavior with regard to dependent tables. If set to true, dependent tables will not be synced unless they are explicitly matched by Tables."
        },
        "destinations": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Destinations are the names of destination plugins to send sync data to"
            },
            {
              "type": "null"
            }
          ]
        },
        "backend_options": {
          "oneOf": [
            {
              "$ref": "#/$defs/BackendOptions",
              "description": "Optional Backend options for sync operation"
            },
            {
              "type": "null"
            }
          ]
        },
        "spec": {
          "oneOf": [
            {
              "type": "object",
              "description": "Spec defines plugin specific configuration\nThis is different in every source plugin."
            },
            {
              "type": "null"
            }
          ]
        },
        "deterministic_cq_id": {
          "type": "boolean",
          "description": "DeterministicCQID is a flag that indicates whether the source plugin should generate a random UUID as the value of _cq_id\nor whether it should calculate a UUID that is a hash of the primary keys (if they exist) or the entire resource."
        },
        "otel_endpoint": {
          "type": "string",
          "description": "If specified this will spawn the plugin with --otel-endpoint"
        },
        "otel_endpoint_insecure": {
          "type": "boolean",
          "description": "If specified this will spawn the plugin with --otel-endpoint-insecure"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Source is the spec for a source plugin"
    },
    "Spec": {
      "allOf": [
        {
          "if": {
            "properties": {
              "kind": {
                "type": "string",
                "const": "source"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/$defs/Source"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "kind": {
                "type": "string",
                "const": "destination"
              }
            }
          },
          "then": {
            "properties": {
              "spec": {
                "$ref": "#/$defs/Destination"
              }
            }
          }
        }
      ],
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "source",
            "destination"
          ]
        },
        "spec": {
          "anyOf": [
            {
              "$ref": "#/$defs/Source"
            },
            {
              "$ref": "#/$defs/Destination"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "kind",
        "spec"
      ]
    }
  }
}
