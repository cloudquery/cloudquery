{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/cloudquery/cloudquery/plugins/destination/postgresql/v8/client/spec/spec",
  "$ref": "#/$defs/Spec",
  "$defs": {
    "Duration": {
      "type": "string",
      "pattern": "^[-+]?([0-9]*(\\.[0-9]*)?[a-z]+)+$",
      "title": "CloudQuery configtype.Duration"
    },
    "LogLevel": {
      "type": "string",
      "enum": [
        "",
        "none",
        "error",
        "warn",
        "info",
        "debug",
        "trace"
      ],
      "title": "PostgreSQL driver log level",
      "description": "Defines what [`pgx`](https://github.com/jackc/pgx) call events should be logged.",
      "default": "error"
    },
    "OpenAIEmbedding": {
      "properties": {
        "api_key": {
          "type": "string",
          "minLength": 1,
          "title": "OpenAI API Key"
        },
        "model_name": {
          "type": "string",
          "minLength": 1
        },
        "dimensions": {
          "type": "integer",
          "minimum": 1
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "api_key",
        "model_name"
      ],
      "description": "OpenAIEmbedding holds embedding provider settings."
    },
    "PgVectorConfig": {
      "properties": {
        "tables": {
          "oneOf": [
            {
              "items": {
                "$ref": "#/$defs/PgVectorTableConfig"
              },
              "type": "array",
              "minItems": 1,
              "description": "Tables to create embeddings for."
            },
            {
              "type": "null"
            }
          ]
        },
        "text_splitter": {
          "oneOf": [
            {
              "$ref": "#/$defs/PgVectorTextSplitter",
              "description": "Optional text splitting configuration. If set, all sub-configurations must be set."
            },
            {
              "type": "null"
            }
          ]
        },
        "openai_embedding": {
          "$ref": "#/$defs/OpenAIEmbedding",
          "description": "OpenAI embedding provider configuration. Required if PgVectorConfig is set."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "tables",
        "openai_embedding"
      ],
      "description": "PgVectorConfig holds configuration for creating embeddings and storing them with pgvector."
    },
    "PgVectorRecursiveText": {
      "properties": {
        "chunk_size": {
          "type": "integer",
          "minimum": 1
        },
        "chunk_overlap": {
          "type": "integer",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "chunk_size",
        "chunk_overlap"
      ]
    },
    "PgVectorTableConfig": {
      "properties": {
        "source_table_name": {
          "type": "string",
          "minLength": 1
        },
        "target_table_name": {
          "type": "string",
          "minLength": 1
        },
        "embed_columns": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array",
              "minItems": 1
            },
            {
              "type": "null"
            }
          ]
        },
        "metadata_columns": {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "source_table_name",
        "target_table_name",
        "embed_columns"
      ],
      "description": "PgVectorTableConfig defines per-source-table embedding configuration."
    },
    "PgVectorTextSplitter": {
      "properties": {
        "recursive_text": {
          "$ref": "#/$defs/PgVectorRecursiveText"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "recursive_text"
      ],
      "description": "PgVectorTextSplitter defines how source text should be split into chunks for embedding."
    },
    "Spec": {
      "properties": {
        "connection_string": {
          "type": "string",
          "minLength": 1,
          "description": "Connection string to connect to the database. This can be a DSN or a URI, for example:\n\n- `\"user=user password=pass host=localhost port=5432 dbname=mydb sslmode=disable\"` DSN format\n- `\"postgres://user:pass@localhost:5432/mydb?sslmode=prefer\"` connect with tcp and prefer TLS\n- `\"postgres://user:pass@localhost:5432/mydb?sslmode=disable\u0026search_path=myschema\"` connect with tcp, disable TLS and use a custom schema",
          "examples": [
            "${POSTGRESQL_CONNECTION_STRING}"
          ]
        },
        "pgx_log_level": {
          "$ref": "#/$defs/LogLevel",
          "description": "Available: `error`, `warn`, `info`, `debug`, `trace`.\nDefines what [`pgx`](https://github.com/jackc/pgx) call events should be logged."
        },
        "batch_size": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum number of items that may be grouped together to be written in a single write.",
          "default": 10000
        },
        "batch_size_bytes": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum size of items that may be grouped together to be written in a single write.",
          "default": 100000000
        },
        "batch_timeout": {
          "$ref": "#/$defs/Duration",
          "description": "Maximum interval between batch writes.",
          "default": "60s"
        },
        "create_performance_indexes": {
          "type": "boolean",
          "description": "Option to create specific indexes to improve deletion performance",
          "default": false
        },
        "pgvector_config": {
          "oneOf": [
            {
              "$ref": "#/$defs/PgVectorConfig",
              "description": "Optional configuration to enable PgVector embedding support."
            },
            {
              "type": "null"
            }
          ]
        },
        "retry_on_deadlock": {
          "type": "integer",
          "description": "Number of times to retry a transaction if a deadlock is detected by Postgres.",
          "default": 0
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "connection_string"
      ]
    }
  }
}
