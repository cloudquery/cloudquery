// Code generated by codegen; DO NOT EDIT.

package services

import (
	"github.com/cloudquery/plugin-sdk/schema"
)

func ServiceBackends() *schema.Table {
	return &schema.Table{
		Name:        "fastly_service_backends",
		Description: `https://developer.fastly.com/reference/api/services/backend/`,
		Resolver:    fetchServiceBackends,
		Columns: []schema.Column{
			{
				Name:     "address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Address"),
			},
			{
				Name:     "auto_loadbalance",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoLoadbalance"),
			},
			{
				Name:     "between_bytes_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("BetweenBytesTimeout"),
			},
			{
				Name:     "comment",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Comment"),
			},
			{
				Name:     "connect_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ConnectTimeout"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "deleted_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("DeletedAt"),
			},
			{
				Name:     "error_threshold",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ErrorThreshold"),
			},
			{
				Name:     "first_byte_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("FirstByteTimeout"),
			},
			{
				Name:     "health_check",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HealthCheck"),
			},
			{
				Name:     "hostname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Hostname"),
			},
			{
				Name:     "max_conn",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxConn"),
			},
			{
				Name:     "max_tls_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MaxTLSVersion"),
			},
			{
				Name:     "min_tls_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MinTLSVersion"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "override_host",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OverrideHost"),
			},
			{
				Name:     "port",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Port"),
			},
			{
				Name:     "request_condition",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RequestCondition"),
			},
			{
				Name:     "sslca_cert",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLCACert"),
			},
			{
				Name:     "ssl_cert_hostname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLCertHostname"),
			},
			{
				Name:     "ssl_check_cert",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SSLCheckCert"),
			},
			{
				Name:     "ssl_ciphers",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLCiphers"),
			},
			{
				Name:     "ssl_client_cert",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLClientCert"),
			},
			{
				Name:     "ssl_client_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLClientKey"),
			},
			{
				Name:     "ssl_hostname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLHostname"),
			},
			{
				Name:     "sslsni_hostname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSLSNIHostname"),
			},
			{
				Name:     "service_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ServiceID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "service_version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ServiceVersion"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "shield",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Shield"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "use_ssl",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UseSSL"),
			},
			{
				Name:     "weight",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Weight"),
			},
		},
	}
}
