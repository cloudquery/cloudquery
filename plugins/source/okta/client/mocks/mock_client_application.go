// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/okta/client (interfaces: ApplicationService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	okta "github.com/okta/okta-sdk-golang/v2/okta"
	query "github.com/okta/okta-sdk-golang/v2/okta/query"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// ListApplicationGroupAssignments mocks base method.
func (m *MockApplicationService) ListApplicationGroupAssignments(arg0 context.Context, arg1 string, arg2 *query.Params) ([]*okta.ApplicationGroupAssignment, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationGroupAssignments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*okta.ApplicationGroupAssignment)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplicationGroupAssignments indicates an expected call of ListApplicationGroupAssignments.
func (mr *MockApplicationServiceMockRecorder) ListApplicationGroupAssignments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGroupAssignments", reflect.TypeOf((*MockApplicationService)(nil).ListApplicationGroupAssignments), arg0, arg1, arg2)
}

// ListApplicationUsers mocks base method.
func (m *MockApplicationService) ListApplicationUsers(arg0 context.Context, arg1 string, arg2 *query.Params) ([]*okta.AppUser, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*okta.AppUser)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplicationUsers indicates an expected call of ListApplicationUsers.
func (mr *MockApplicationServiceMockRecorder) ListApplicationUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationUsers", reflect.TypeOf((*MockApplicationService)(nil).ListApplicationUsers), arg0, arg1, arg2)
}

// ListApplications mocks base method.
func (m *MockApplicationService) ListApplications(arg0 context.Context, arg1 *query.Params) ([]okta.App, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0, arg1)
	ret0, _ := ret[0].([]okta.App)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockApplicationServiceMockRecorder) ListApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockApplicationService)(nil).ListApplications), arg0, arg1)
}
