// Code generated by codegen; DO NOT EDIT.

package conversations

import (
	"github.com/cloudquery/cloudquery/plugins/source/slack/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ConversationHistories() *schema.Table {
	return &schema.Table{
		Name:        "slack_conversation_histories",
		Description: `https://api.slack.com/methods/conversations.history`,
		Resolver:    fetchConversationHistories,
		Multiplex:   client.TeamMultiplex,
		Columns: []schema.Column{
			{
				Name:     "channel_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "team_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("team_id"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "client_msg_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClientMsgID"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "user",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("User"),
			},
			{
				Name:     "text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Text"),
			},
			{
				Name:     "ts",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Timestamp"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "thread_ts",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ThreadTimestamp"),
			},
			{
				Name:     "is_starred",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsStarred"),
			},
			{
				Name:     "pinned_to",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("PinnedTo"),
			},
			{
				Name:     "attachments",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Attachments"),
			},
			{
				Name:     "edited",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Edited"),
			},
			{
				Name:     "last_read",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LastRead"),
			},
			{
				Name:     "subscribed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Subscribed"),
			},
			{
				Name:     "unread_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UnreadCount"),
			},
			{
				Name:     "subtype",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SubType"),
			},
			{
				Name:     "hidden",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Hidden"),
			},
			{
				Name:     "deleted_ts",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DeletedTimestamp"),
			},
			{
				Name:     "event_ts",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EventTimestamp"),
			},
			{
				Name:     "bot_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BotID"),
			},
			{
				Name:     "username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Username"),
			},
			{
				Name:     "icons",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Icons"),
			},
			{
				Name:     "bot_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BotProfile"),
			},
			{
				Name:     "inviter",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Inviter"),
			},
			{
				Name:     "topic",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Topic"),
			},
			{
				Name:     "purpose",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Purpose"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "old_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OldName"),
			},
			{
				Name:     "members",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Members"),
			},
			{
				Name:     "reply_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ReplyCount"),
			},
			{
				Name:     "parent_user_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ParentUserId"),
			},
			{
				Name:     "latest_reply",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LatestReply"),
			},
			{
				Name:     "files",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Files"),
			},
			{
				Name:     "upload",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Upload"),
			},
			{
				Name:     "comment",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Comment"),
			},
			{
				Name:     "item_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ItemType"),
			},
			{
				Name:     "reply_to",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ReplyTo"),
			},
			{
				Name:     "reactions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Reactions"),
			},
			{
				Name:     "response_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResponseType"),
			},
			{
				Name:     "replace_original",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ReplaceOriginal"),
			},
			{
				Name:     "delete_original",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DeleteOriginal"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "permalink",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Permalink"),
			},
		},

		Relations: []*schema.Table{
			ConversationReplies(),
		},
	}
}
