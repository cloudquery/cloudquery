// Code generated by MockGen. DO NOT EDIT.
// Source: slack.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockSlackClient is a mock of SlackClient interface.
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient.
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance.
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// GetAccessLogsContext mocks base method.
func (m *MockSlackClient) GetAccessLogsContext(arg0 context.Context, arg1 slack.AccessLogParameters) ([]slack.Login, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessLogsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Login)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessLogsContext indicates an expected call of GetAccessLogsContext.
func (mr *MockSlackClientMockRecorder) GetAccessLogsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessLogsContext", reflect.TypeOf((*MockSlackClient)(nil).GetAccessLogsContext), arg0, arg1)
}

// GetAuditLogsContext mocks base method.
func (m *MockSlackClient) GetAuditLogsContext(arg0 context.Context, arg1 slack.AuditLogParameters) ([]slack.AuditEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.AuditEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuditLogsContext indicates an expected call of GetAuditLogsContext.
func (mr *MockSlackClientMockRecorder) GetAuditLogsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsContext", reflect.TypeOf((*MockSlackClient)(nil).GetAuditLogsContext), arg0, arg1)
}

// GetBillableInfoContext mocks base method.
func (m *MockSlackClient) GetBillableInfoContext(arg0 context.Context, arg1 string) (map[string]slack.BillingActive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillableInfoContext", arg0, arg1)
	ret0, _ := ret[0].(map[string]slack.BillingActive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillableInfoContext indicates an expected call of GetBillableInfoContext.
func (mr *MockSlackClientMockRecorder) GetBillableInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillableInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetBillableInfoContext), arg0, arg1)
}

// GetBillableInfoForTeamContext mocks base method.
func (m *MockSlackClient) GetBillableInfoForTeamContext(arg0 context.Context) (map[string]slack.BillingActive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillableInfoForTeamContext", arg0)
	ret0, _ := ret[0].(map[string]slack.BillingActive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillableInfoForTeamContext indicates an expected call of GetBillableInfoForTeamContext.
func (mr *MockSlackClientMockRecorder) GetBillableInfoForTeamContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillableInfoForTeamContext", reflect.TypeOf((*MockSlackClient)(nil).GetBillableInfoForTeamContext), arg0)
}

// GetBotInfoContext mocks base method.
func (m *MockSlackClient) GetBotInfoContext(arg0 context.Context, arg1 string) (*slack.Bot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBotInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Bot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBotInfoContext indicates an expected call of GetBotInfoContext.
func (mr *MockSlackClientMockRecorder) GetBotInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBotInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetBotInfoContext), arg0, arg1)
}

// GetConversationHistoryContext mocks base method.
func (m *MockSlackClient) GetConversationHistoryContext(arg0 context.Context, arg1 *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistoryContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistoryContext indicates an expected call of GetConversationHistoryContext.
func (mr *MockSlackClientMockRecorder) GetConversationHistoryContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistoryContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationHistoryContext), arg0, arg1)
}

// GetConversationInfoContext mocks base method.
func (m *MockSlackClient) GetConversationInfoContext(arg0 context.Context, arg1 *slack.GetConversationInfoInput) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfoContext indicates an expected call of GetConversationInfoContext.
func (mr *MockSlackClientMockRecorder) GetConversationInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationInfoContext), arg0, arg1)
}

// GetConversationRepliesContext mocks base method.
func (m *MockSlackClient) GetConversationRepliesContext(arg0 context.Context, arg1 *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationRepliesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetConversationRepliesContext indicates an expected call of GetConversationRepliesContext.
func (mr *MockSlackClientMockRecorder) GetConversationRepliesContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationRepliesContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationRepliesContext), arg0, arg1)
}

// GetConversationsContext mocks base method.
func (m *MockSlackClient) GetConversationsContext(arg0 context.Context, arg1 *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversationsContext indicates an expected call of GetConversationsContext.
func (mr *MockSlackClientMockRecorder) GetConversationsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationsContext), arg0, arg1)
}

// GetConversationsForUserContext mocks base method.
func (m *MockSlackClient) GetConversationsForUserContext(arg0 context.Context, arg1 *slack.GetConversationsForUserParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsForUserContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversationsForUserContext indicates an expected call of GetConversationsForUserContext.
func (mr *MockSlackClientMockRecorder) GetConversationsForUserContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsForUserContext", reflect.TypeOf((*MockSlackClient)(nil).GetConversationsForUserContext), arg0, arg1)
}

// GetDNDInfoContext mocks base method.
func (m *MockSlackClient) GetDNDInfoContext(arg0 context.Context, arg1 *string) (*slack.DNDStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNDInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNDInfoContext indicates an expected call of GetDNDInfoContext.
func (mr *MockSlackClientMockRecorder) GetDNDInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNDInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetDNDInfoContext), arg0, arg1)
}

// GetDNDTeamInfoContext mocks base method.
func (m *MockSlackClient) GetDNDTeamInfoContext(arg0 context.Context, arg1 []string) (map[string]slack.DNDStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNDTeamInfoContext", arg0, arg1)
	ret0, _ := ret[0].(map[string]slack.DNDStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNDTeamInfoContext indicates an expected call of GetDNDTeamInfoContext.
func (mr *MockSlackClientMockRecorder) GetDNDTeamInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNDTeamInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetDNDTeamInfoContext), arg0, arg1)
}

// GetEmojiContext mocks base method.
func (m *MockSlackClient) GetEmojiContext(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiContext", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmojiContext indicates an expected call of GetEmojiContext.
func (mr *MockSlackClientMockRecorder) GetEmojiContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiContext", reflect.TypeOf((*MockSlackClient)(nil).GetEmojiContext), arg0)
}

// GetFileContext mocks base method.
func (m *MockSlackClient) GetFileContext(arg0 context.Context, arg1 string, arg2 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFileContext indicates an expected call of GetFileContext.
func (mr *MockSlackClientMockRecorder) GetFileContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContext", reflect.TypeOf((*MockSlackClient)(nil).GetFileContext), arg0, arg1, arg2)
}

// GetFileInfoContext mocks base method.
func (m *MockSlackClient) GetFileInfoContext(arg0 context.Context, arg1 string, arg2, arg3 int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfoContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfoContext indicates an expected call of GetFileInfoContext.
func (mr *MockSlackClientMockRecorder) GetFileInfoContext(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetFileInfoContext), arg0, arg1, arg2, arg3)
}

// GetFilesContext mocks base method.
func (m *MockSlackClient) GetFilesContext(arg0 context.Context, arg1 slack.GetFilesParameters) ([]slack.File, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.File)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFilesContext indicates an expected call of GetFilesContext.
func (mr *MockSlackClientMockRecorder) GetFilesContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesContext", reflect.TypeOf((*MockSlackClient)(nil).GetFilesContext), arg0, arg1)
}

// GetOtherTeamInfoContext mocks base method.
func (m *MockSlackClient) GetOtherTeamInfoContext(arg0 context.Context, arg1 string) (*slack.TeamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherTeamInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherTeamInfoContext indicates an expected call of GetOtherTeamInfoContext.
func (mr *MockSlackClientMockRecorder) GetOtherTeamInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherTeamInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetOtherTeamInfoContext), arg0, arg1)
}

// GetPermalinkContext mocks base method.
func (m *MockSlackClient) GetPermalinkContext(arg0 context.Context, arg1 *slack.PermalinkParameters) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermalinkContext", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermalinkContext indicates an expected call of GetPermalinkContext.
func (mr *MockSlackClientMockRecorder) GetPermalinkContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermalinkContext", reflect.TypeOf((*MockSlackClient)(nil).GetPermalinkContext), arg0, arg1)
}

// GetReactionsContext mocks base method.
func (m *MockSlackClient) GetReactionsContext(arg0 context.Context, arg1 slack.ItemRef, arg2 slack.GetReactionsParameters) ([]slack.ItemReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactionsContext", arg0, arg1, arg2)
	ret0, _ := ret[0].([]slack.ItemReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactionsContext indicates an expected call of GetReactionsContext.
func (mr *MockSlackClientMockRecorder) GetReactionsContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactionsContext", reflect.TypeOf((*MockSlackClient)(nil).GetReactionsContext), arg0, arg1, arg2)
}

// GetRemoteFileInfoContext mocks base method.
func (m *MockSlackClient) GetRemoteFileInfoContext(arg0 context.Context, arg1, arg2 string) (*slack.RemoteFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteFileInfoContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*slack.RemoteFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteFileInfoContext indicates an expected call of GetRemoteFileInfoContext.
func (mr *MockSlackClientMockRecorder) GetRemoteFileInfoContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteFileInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetRemoteFileInfoContext), arg0, arg1, arg2)
}

// GetScheduledMessagesContext mocks base method.
func (m *MockSlackClient) GetScheduledMessagesContext(arg0 context.Context, arg1 *slack.GetScheduledMessagesParameters) ([]slack.ScheduledMessage, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledMessagesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.ScheduledMessage)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetScheduledMessagesContext indicates an expected call of GetScheduledMessagesContext.
func (mr *MockSlackClientMockRecorder) GetScheduledMessagesContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledMessagesContext", reflect.TypeOf((*MockSlackClient)(nil).GetScheduledMessagesContext), arg0, arg1)
}

// GetStarredContext mocks base method.
func (m *MockSlackClient) GetStarredContext(arg0 context.Context, arg1 slack.StarsParameters) ([]slack.StarredItem, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.StarredItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStarredContext indicates an expected call of GetStarredContext.
func (mr *MockSlackClientMockRecorder) GetStarredContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredContext", reflect.TypeOf((*MockSlackClient)(nil).GetStarredContext), arg0, arg1)
}

// GetTeamInfoContext mocks base method.
func (m *MockSlackClient) GetTeamInfoContext(arg0 context.Context) (*slack.TeamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamInfoContext", arg0)
	ret0, _ := ret[0].(*slack.TeamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamInfoContext indicates an expected call of GetTeamInfoContext.
func (mr *MockSlackClientMockRecorder) GetTeamInfoContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetTeamInfoContext), arg0)
}

// GetTeamProfileContext mocks base method.
func (m *MockSlackClient) GetTeamProfileContext(arg0 context.Context) (*slack.TeamProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamProfileContext", arg0)
	ret0, _ := ret[0].(*slack.TeamProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamProfileContext indicates an expected call of GetTeamProfileContext.
func (mr *MockSlackClientMockRecorder) GetTeamProfileContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamProfileContext", reflect.TypeOf((*MockSlackClient)(nil).GetTeamProfileContext), arg0)
}

// GetUserByEmailContext mocks base method.
func (m *MockSlackClient) GetUserByEmailContext(arg0 context.Context, arg1 string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailContext indicates an expected call of GetUserByEmailContext.
func (mr *MockSlackClientMockRecorder) GetUserByEmailContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserByEmailContext), arg0, arg1)
}

// GetUserGroupMembersContext mocks base method.
func (m *MockSlackClient) GetUserGroupMembersContext(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroupMembersContext", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupMembersContext indicates an expected call of GetUserGroupMembersContext.
func (mr *MockSlackClientMockRecorder) GetUserGroupMembersContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupMembersContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserGroupMembersContext), arg0, arg1)
}

// GetUserGroupsContext mocks base method.
func (m *MockSlackClient) GetUserGroupsContext(arg0 context.Context, arg1 ...slack.GetUserGroupsOption) ([]slack.UserGroup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserGroupsContext", varargs...)
	ret0, _ := ret[0].([]slack.UserGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupsContext indicates an expected call of GetUserGroupsContext.
func (mr *MockSlackClientMockRecorder) GetUserGroupsContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupsContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserGroupsContext), varargs...)
}

// GetUserIdentityContext mocks base method.
func (m *MockSlackClient) GetUserIdentityContext(arg0 context.Context) (*slack.UserIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdentityContext", arg0)
	ret0, _ := ret[0].(*slack.UserIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdentityContext indicates an expected call of GetUserIdentityContext.
func (mr *MockSlackClientMockRecorder) GetUserIdentityContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdentityContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserIdentityContext), arg0)
}

// GetUserInfoContext mocks base method.
func (m *MockSlackClient) GetUserInfoContext(arg0 context.Context, arg1 string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoContext indicates an expected call of GetUserInfoContext.
func (mr *MockSlackClientMockRecorder) GetUserInfoContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserInfoContext), arg0, arg1)
}

// GetUserPrefsContext mocks base method.
func (m *MockSlackClient) GetUserPrefsContext(arg0 context.Context) (*slack.UserPrefsCarrier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrefsContext", arg0)
	ret0, _ := ret[0].(*slack.UserPrefsCarrier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrefsContext indicates an expected call of GetUserPrefsContext.
func (mr *MockSlackClientMockRecorder) GetUserPrefsContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrefsContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserPrefsContext), arg0)
}

// GetUserPresenceContext mocks base method.
func (m *MockSlackClient) GetUserPresenceContext(arg0 context.Context, arg1 string) (*slack.UserPresence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPresenceContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.UserPresence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPresenceContext indicates an expected call of GetUserPresenceContext.
func (mr *MockSlackClientMockRecorder) GetUserPresenceContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPresenceContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserPresenceContext), arg0, arg1)
}

// GetUserProfileContext mocks base method.
func (m *MockSlackClient) GetUserProfileContext(arg0 context.Context, arg1 *slack.GetUserProfileParameters) (*slack.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileContext", arg0, arg1)
	ret0, _ := ret[0].(*slack.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileContext indicates an expected call of GetUserProfileContext.
func (mr *MockSlackClientMockRecorder) GetUserProfileContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileContext", reflect.TypeOf((*MockSlackClient)(nil).GetUserProfileContext), arg0, arg1)
}

// GetUsersContext mocks base method.
func (m *MockSlackClient) GetUsersContext(arg0 context.Context, arg1 ...slack.GetUsersOption) ([]slack.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersContext", varargs...)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersContext indicates an expected call of GetUsersContext.
func (mr *MockSlackClientMockRecorder) GetUsersContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersContext", reflect.TypeOf((*MockSlackClient)(nil).GetUsersContext), varargs...)
}

// GetUsersInConversationContext mocks base method.
func (m *MockSlackClient) GetUsersInConversationContext(arg0 context.Context, arg1 *slack.GetUsersInConversationParameters) ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInConversationContext", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersInConversationContext indicates an expected call of GetUsersInConversationContext.
func (mr *MockSlackClientMockRecorder) GetUsersInConversationContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInConversationContext", reflect.TypeOf((*MockSlackClient)(nil).GetUsersInConversationContext), arg0, arg1)
}

// GetUsersInfoContext mocks base method.
func (m *MockSlackClient) GetUsersInfoContext(arg0 context.Context, arg1 ...string) (*[]slack.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersInfoContext", varargs...)
	ret0, _ := ret[0].(*[]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInfoContext indicates an expected call of GetUsersInfoContext.
func (mr *MockSlackClientMockRecorder) GetUsersInfoContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInfoContext", reflect.TypeOf((*MockSlackClient)(nil).GetUsersInfoContext), varargs...)
}

// ListAllStarsContext mocks base method.
func (m *MockSlackClient) ListAllStarsContext(arg0 context.Context) ([]slack.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllStarsContext", arg0)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllStarsContext indicates an expected call of ListAllStarsContext.
func (mr *MockSlackClientMockRecorder) ListAllStarsContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllStarsContext", reflect.TypeOf((*MockSlackClient)(nil).ListAllStarsContext), arg0)
}

// ListBookmarksContext mocks base method.
func (m *MockSlackClient) ListBookmarksContext(arg0 context.Context, arg1 string) ([]slack.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarksContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarksContext indicates an expected call of ListBookmarksContext.
func (mr *MockSlackClientMockRecorder) ListBookmarksContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarksContext", reflect.TypeOf((*MockSlackClient)(nil).ListBookmarksContext), arg0, arg1)
}

// ListEventAuthorizationsContext mocks base method.
func (m *MockSlackClient) ListEventAuthorizationsContext(arg0 context.Context, arg1 string) ([]slack.EventAuthorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventAuthorizationsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.EventAuthorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventAuthorizationsContext indicates an expected call of ListEventAuthorizationsContext.
func (mr *MockSlackClientMockRecorder) ListEventAuthorizationsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventAuthorizationsContext", reflect.TypeOf((*MockSlackClient)(nil).ListEventAuthorizationsContext), arg0, arg1)
}

// ListFilesContext mocks base method.
func (m *MockSlackClient) ListFilesContext(arg0 context.Context, arg1 slack.ListFilesParameters) ([]slack.File, *slack.ListFilesParameters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.File)
	ret1, _ := ret[1].(*slack.ListFilesParameters)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFilesContext indicates an expected call of ListFilesContext.
func (mr *MockSlackClientMockRecorder) ListFilesContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesContext", reflect.TypeOf((*MockSlackClient)(nil).ListFilesContext), arg0, arg1)
}

// ListPinsContext mocks base method.
func (m *MockSlackClient) ListPinsContext(arg0 context.Context, arg1 string) ([]slack.Item, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPinsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPinsContext indicates an expected call of ListPinsContext.
func (mr *MockSlackClientMockRecorder) ListPinsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPinsContext", reflect.TypeOf((*MockSlackClient)(nil).ListPinsContext), arg0, arg1)
}

// ListReactionsContext mocks base method.
func (m *MockSlackClient) ListReactionsContext(arg0 context.Context, arg1 slack.ListReactionsParameters) ([]slack.ReactedItem, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReactionsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.ReactedItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReactionsContext indicates an expected call of ListReactionsContext.
func (mr *MockSlackClientMockRecorder) ListReactionsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReactionsContext", reflect.TypeOf((*MockSlackClient)(nil).ListReactionsContext), arg0, arg1)
}

// ListRemindersContext mocks base method.
func (m *MockSlackClient) ListRemindersContext(arg0 context.Context) ([]*slack.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemindersContext", arg0)
	ret0, _ := ret[0].([]*slack.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemindersContext indicates an expected call of ListRemindersContext.
func (mr *MockSlackClientMockRecorder) ListRemindersContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemindersContext", reflect.TypeOf((*MockSlackClient)(nil).ListRemindersContext), arg0)
}

// ListRemoteFilesContext mocks base method.
func (m *MockSlackClient) ListRemoteFilesContext(arg0 context.Context, arg1 slack.ListRemoteFilesParameters) ([]slack.RemoteFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteFilesContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.RemoteFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteFilesContext indicates an expected call of ListRemoteFilesContext.
func (mr *MockSlackClientMockRecorder) ListRemoteFilesContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteFilesContext", reflect.TypeOf((*MockSlackClient)(nil).ListRemoteFilesContext), arg0, arg1)
}

// ListStarsContext mocks base method.
func (m *MockSlackClient) ListStarsContext(arg0 context.Context, arg1 slack.StarsParameters) ([]slack.Item, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStarsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Item)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStarsContext indicates an expected call of ListStarsContext.
func (mr *MockSlackClientMockRecorder) ListStarsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStarsContext", reflect.TypeOf((*MockSlackClient)(nil).ListStarsContext), arg0, arg1)
}

// ListTeamsContext mocks base method.
func (m *MockSlackClient) ListTeamsContext(arg0 context.Context, arg1 slack.ListTeamsParameters) ([]slack.Team, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamsContext", arg0, arg1)
	ret0, _ := ret[0].([]slack.Team)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamsContext indicates an expected call of ListTeamsContext.
func (mr *MockSlackClientMockRecorder) ListTeamsContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamsContext", reflect.TypeOf((*MockSlackClient)(nil).ListTeamsContext), arg0, arg1)
}
