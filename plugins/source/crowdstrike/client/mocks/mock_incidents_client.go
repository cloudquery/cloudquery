// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/crowdstrike/client (interfaces: Incidents)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	incidents "github.com/crowdstrike/gofalcon/falcon/client/incidents"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockIncidents is a mock of Incidents interface.
type MockIncidents struct {
	ctrl     *gomock.Controller
	recorder *MockIncidentsMockRecorder
}

// MockIncidentsMockRecorder is the mock recorder for MockIncidents.
type MockIncidentsMockRecorder struct {
	mock *MockIncidents
}

// NewMockIncidents creates a new mock instance.
func NewMockIncidents(ctrl *gomock.Controller) *MockIncidents {
	mock := &MockIncidents{ctrl: ctrl}
	mock.recorder = &MockIncidentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncidents) EXPECT() *MockIncidentsMockRecorder {
	return m.recorder
}

// CrowdScore mocks base method.
func (m *MockIncidents) CrowdScore(arg0 *incidents.CrowdScoreParams, arg1 ...incidents.ClientOption) (*incidents.CrowdScoreOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CrowdScore", varargs...)
	ret0, _ := ret[0].(*incidents.CrowdScoreOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CrowdScore indicates an expected call of CrowdScore.
func (mr *MockIncidentsMockRecorder) CrowdScore(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrowdScore", reflect.TypeOf((*MockIncidents)(nil).CrowdScore), varargs...)
}

// GetBehaviors mocks base method.
func (m *MockIncidents) GetBehaviors(arg0 *incidents.GetBehaviorsParams, arg1 ...incidents.ClientOption) (*incidents.GetBehaviorsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBehaviors", varargs...)
	ret0, _ := ret[0].(*incidents.GetBehaviorsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBehaviors indicates an expected call of GetBehaviors.
func (mr *MockIncidentsMockRecorder) GetBehaviors(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBehaviors", reflect.TypeOf((*MockIncidents)(nil).GetBehaviors), varargs...)
}

// GetIncidents mocks base method.
func (m *MockIncidents) GetIncidents(arg0 *incidents.GetIncidentsParams, arg1 ...incidents.ClientOption) (*incidents.GetIncidentsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIncidents", varargs...)
	ret0, _ := ret[0].(*incidents.GetIncidentsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidents indicates an expected call of GetIncidents.
func (mr *MockIncidentsMockRecorder) GetIncidents(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidents", reflect.TypeOf((*MockIncidents)(nil).GetIncidents), varargs...)
}

// PerformIncidentAction mocks base method.
func (m *MockIncidents) PerformIncidentAction(arg0 *incidents.PerformIncidentActionParams, arg1 ...incidents.ClientOption) (*incidents.PerformIncidentActionOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PerformIncidentAction", varargs...)
	ret0, _ := ret[0].(*incidents.PerformIncidentActionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformIncidentAction indicates an expected call of PerformIncidentAction.
func (mr *MockIncidentsMockRecorder) PerformIncidentAction(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformIncidentAction", reflect.TypeOf((*MockIncidents)(nil).PerformIncidentAction), varargs...)
}

// QueryBehaviors mocks base method.
func (m *MockIncidents) QueryBehaviors(arg0 *incidents.QueryBehaviorsParams, arg1 ...incidents.ClientOption) (*incidents.QueryBehaviorsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBehaviors", varargs...)
	ret0, _ := ret[0].(*incidents.QueryBehaviorsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBehaviors indicates an expected call of QueryBehaviors.
func (mr *MockIncidentsMockRecorder) QueryBehaviors(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBehaviors", reflect.TypeOf((*MockIncidents)(nil).QueryBehaviors), varargs...)
}

// QueryIncidents mocks base method.
func (m *MockIncidents) QueryIncidents(arg0 *incidents.QueryIncidentsParams, arg1 ...incidents.ClientOption) (*incidents.QueryIncidentsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryIncidents", varargs...)
	ret0, _ := ret[0].(*incidents.QueryIncidentsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIncidents indicates an expected call of QueryIncidents.
func (mr *MockIncidentsMockRecorder) QueryIncidents(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIncidents", reflect.TypeOf((*MockIncidents)(nil).QueryIncidents), varargs...)
}

// SetTransport mocks base method.
func (m *MockIncidents) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockIncidentsMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockIncidents)(nil).SetTransport), arg0)
}
