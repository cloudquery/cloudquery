// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/crowdstrike/client (interfaces: Alerts)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	alerts "github.com/crowdstrike/gofalcon/falcon/client/alerts"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockAlerts is a mock of Alerts interface.
type MockAlerts struct {
	ctrl     *gomock.Controller
	recorder *MockAlertsMockRecorder
}

// MockAlertsMockRecorder is the mock recorder for MockAlerts.
type MockAlertsMockRecorder struct {
	mock *MockAlerts
}

// NewMockAlerts creates a new mock instance.
func NewMockAlerts(ctrl *gomock.Controller) *MockAlerts {
	mock := &MockAlerts{ctrl: ctrl}
	mock.recorder = &MockAlertsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlerts) EXPECT() *MockAlertsMockRecorder {
	return m.recorder
}

// GetQueriesAlertsV1 mocks base method.
func (m *MockAlerts) GetQueriesAlertsV1(arg0 *alerts.GetQueriesAlertsV1Params, arg1 ...alerts.ClientOption) (*alerts.GetQueriesAlertsV1OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueriesAlertsV1", varargs...)
	ret0, _ := ret[0].(*alerts.GetQueriesAlertsV1OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueriesAlertsV1 indicates an expected call of GetQueriesAlertsV1.
func (mr *MockAlertsMockRecorder) GetQueriesAlertsV1(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueriesAlertsV1", reflect.TypeOf((*MockAlerts)(nil).GetQueriesAlertsV1), varargs...)
}

// PatchEntitiesAlertsV1 mocks base method.
func (m *MockAlerts) PatchEntitiesAlertsV1(arg0 *alerts.PatchEntitiesAlertsV1Params, arg1 ...alerts.ClientOption) (*alerts.PatchEntitiesAlertsV1OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchEntitiesAlertsV1", varargs...)
	ret0, _ := ret[0].(*alerts.PatchEntitiesAlertsV1OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchEntitiesAlertsV1 indicates an expected call of PatchEntitiesAlertsV1.
func (mr *MockAlertsMockRecorder) PatchEntitiesAlertsV1(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEntitiesAlertsV1", reflect.TypeOf((*MockAlerts)(nil).PatchEntitiesAlertsV1), varargs...)
}

// PatchEntitiesAlertsV2 mocks base method.
func (m *MockAlerts) PatchEntitiesAlertsV2(arg0 *alerts.PatchEntitiesAlertsV2Params, arg1 ...alerts.ClientOption) (*alerts.PatchEntitiesAlertsV2OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchEntitiesAlertsV2", varargs...)
	ret0, _ := ret[0].(*alerts.PatchEntitiesAlertsV2OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchEntitiesAlertsV2 indicates an expected call of PatchEntitiesAlertsV2.
func (mr *MockAlertsMockRecorder) PatchEntitiesAlertsV2(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEntitiesAlertsV2", reflect.TypeOf((*MockAlerts)(nil).PatchEntitiesAlertsV2), varargs...)
}

// PostAggregatesAlertsV1 mocks base method.
func (m *MockAlerts) PostAggregatesAlertsV1(arg0 *alerts.PostAggregatesAlertsV1Params, arg1 ...alerts.ClientOption) (*alerts.PostAggregatesAlertsV1OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAggregatesAlertsV1", varargs...)
	ret0, _ := ret[0].(*alerts.PostAggregatesAlertsV1OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAggregatesAlertsV1 indicates an expected call of PostAggregatesAlertsV1.
func (mr *MockAlertsMockRecorder) PostAggregatesAlertsV1(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAggregatesAlertsV1", reflect.TypeOf((*MockAlerts)(nil).PostAggregatesAlertsV1), varargs...)
}

// PostEntitiesAlertsV1 mocks base method.
func (m *MockAlerts) PostEntitiesAlertsV1(arg0 *alerts.PostEntitiesAlertsV1Params, arg1 ...alerts.ClientOption) (*alerts.PostEntitiesAlertsV1OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostEntitiesAlertsV1", varargs...)
	ret0, _ := ret[0].(*alerts.PostEntitiesAlertsV1OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEntitiesAlertsV1 indicates an expected call of PostEntitiesAlertsV1.
func (mr *MockAlertsMockRecorder) PostEntitiesAlertsV1(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEntitiesAlertsV1", reflect.TypeOf((*MockAlerts)(nil).PostEntitiesAlertsV1), varargs...)
}

// SetTransport mocks base method.
func (m *MockAlerts) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockAlertsMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockAlerts)(nil).SetTransport), arg0)
}
