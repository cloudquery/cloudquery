// Code generated by MockGen. DO NOT EDIT.
// Source: hackernews.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hackernews "github.com/hermanschaaf/hackernews"
)

// MockHackernewsClient is a mock of HackernewsClient interface.
type MockHackernewsClient struct {
	ctrl     *gomock.Controller
	recorder *MockHackernewsClientMockRecorder
}

// MockHackernewsClientMockRecorder is the mock recorder for MockHackernewsClient.
type MockHackernewsClientMockRecorder struct {
	mock *MockHackernewsClient
}

// NewMockHackernewsClient creates a new mock instance.
func NewMockHackernewsClient(ctrl *gomock.Controller) *MockHackernewsClient {
	mock := &MockHackernewsClient{ctrl: ctrl}
	mock.recorder = &MockHackernewsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHackernewsClient) EXPECT() *MockHackernewsClientMockRecorder {
	return m.recorder
}

// AskStories mocks base method.
func (m *MockHackernewsClient) AskStories(arg0 context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskStories", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskStories indicates an expected call of AskStories.
func (mr *MockHackernewsClientMockRecorder) AskStories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskStories", reflect.TypeOf((*MockHackernewsClient)(nil).AskStories), arg0)
}

// BestStories mocks base method.
func (m *MockHackernewsClient) BestStories(arg0 context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestStories", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BestStories indicates an expected call of BestStories.
func (mr *MockHackernewsClientMockRecorder) BestStories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestStories", reflect.TypeOf((*MockHackernewsClient)(nil).BestStories), arg0)
}

// GetItem mocks base method.
func (m *MockHackernewsClient) GetItem(arg0 context.Context, arg1 int) (hackernews.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(hackernews.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockHackernewsClientMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockHackernewsClient)(nil).GetItem), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockHackernewsClient) GetUser(arg0 context.Context, arg1 string) (hackernews.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(hackernews.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockHackernewsClientMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockHackernewsClient)(nil).GetUser), arg0, arg1)
}

// JobStories mocks base method.
func (m *MockHackernewsClient) JobStories(arg0 context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobStories", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobStories indicates an expected call of JobStories.
func (mr *MockHackernewsClientMockRecorder) JobStories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobStories", reflect.TypeOf((*MockHackernewsClient)(nil).JobStories), arg0)
}

// MaxItemID mocks base method.
func (m *MockHackernewsClient) MaxItemID(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxItemID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxItemID indicates an expected call of MaxItemID.
func (mr *MockHackernewsClientMockRecorder) MaxItemID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxItemID", reflect.TypeOf((*MockHackernewsClient)(nil).MaxItemID), arg0)
}

// NewStories mocks base method.
func (m *MockHackernewsClient) NewStories(arg0 context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStories", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStories indicates an expected call of NewStories.
func (mr *MockHackernewsClientMockRecorder) NewStories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStories", reflect.TypeOf((*MockHackernewsClient)(nil).NewStories), arg0)
}

// ShowStories mocks base method.
func (m *MockHackernewsClient) ShowStories(arg0 context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowStories", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowStories indicates an expected call of ShowStories.
func (mr *MockHackernewsClientMockRecorder) ShowStories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowStories", reflect.TypeOf((*MockHackernewsClient)(nil).ShowStories), arg0)
}

// TopStories mocks base method.
func (m *MockHackernewsClient) TopStories(arg0 context.Context) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopStories", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopStories indicates an expected call of TopStories.
func (mr *MockHackernewsClientMockRecorder) TopStories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopStories", reflect.TypeOf((*MockHackernewsClient)(nil).TopStories), arg0)
}

// Updates mocks base method.
func (m *MockHackernewsClient) Updates(arg0 context.Context) (*hackernews.Updates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", arg0)
	ret0, _ := ret[0].(*hackernews.Updates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockHackernewsClientMockRecorder) Updates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockHackernewsClient)(nil).Updates), arg0)
}
