// Code generated by MockGen. DO NOT EDIT.
// Source: hackernews.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	hackernews "github.com/hermanschaaf/hackernews"
	gomock "github.com/golang/mock/gomock"
)

// MockHackerNewsClient is a mock of HackerNewsClient interface.
type MockHackerNewsClient struct {
	ctrl     *gomock.Controller
	recorder *MockHackerNewsClientMockRecorder
}

// MockHackerNewsClientMockRecorder is the mock recorder for MockHackerNewsClient.
type MockHackerNewsClientMockRecorder struct {
	mock *MockHackerNewsClient
}

// NewMockHackerNewsClient creates a new mock instance.
func NewMockHackerNewsClient(ctrl *gomock.Controller) *MockHackerNewsClient {
	mock := &MockHackerNewsClient{ctrl: ctrl}
	mock.recorder = &MockHackerNewsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHackerNewsClient) EXPECT() *MockHackerNewsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHackerNewsClient) Get(arg0 string, arg1 *hackernews.RequestOptions) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHackerNewsClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHackerNewsClient)(nil).Get), arg0, arg1)
}

// GetACL mocks base method.
func (m *MockHackerNewsClient) GetACL(arg0 *hackernews.GetACLInput) (*hackernews.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACL", arg0)
	ret0, _ := ret[0].(*hackernews.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACL indicates an expected call of GetACL.
func (mr *MockHackerNewsClientMockRecorder) GetACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACL", reflect.TypeOf((*MockHackerNewsClient)(nil).GetACL), arg0)
}

// GetACLEntry mocks base method.
func (m *MockHackerNewsClient) GetACLEntry(arg0 *hackernews.GetACLEntryInput) (*hackernews.ACLEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACLEntry", arg0)
	ret0, _ := ret[0].(*hackernews.ACLEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACLEntry indicates an expected call of GetACLEntry.
func (mr *MockHackerNewsClientMockRecorder) GetACLEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACLEntry", reflect.TypeOf((*MockHackerNewsClient)(nil).GetACLEntry), arg0)
}

// GetAPIEvent mocks base method.
func (m *MockHackerNewsClient) GetAPIEvent(arg0 *hackernews.GetAPIEventInput) (*hackernews.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIEvent", arg0)
	ret0, _ := ret[0].(*hackernews.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIEvent indicates an expected call of GetAPIEvent.
func (mr *MockHackerNewsClientMockRecorder) GetAPIEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIEvent", reflect.TypeOf((*MockHackerNewsClient)(nil).GetAPIEvent), arg0)
}

// GetAPIEvents mocks base method.
func (m *MockHackerNewsClient) GetAPIEvents(arg0 *hackernews.GetAPIEventsFilterInput) (hackernews.GetAPIEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIEvents", arg0)
	ret0, _ := ret[0].(hackernews.GetAPIEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIEvents indicates an expected call of GetAPIEvents.
func (mr *MockHackerNewsClientMockRecorder) GetAPIEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIEvents", reflect.TypeOf((*MockHackerNewsClient)(nil).GetAPIEvents), arg0)
}

// GetBackend mocks base method.
func (m *MockHackerNewsClient) GetBackend(arg0 *hackernews.GetBackendInput) (*hackernews.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackend", arg0)
	ret0, _ := ret[0].(*hackernews.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackend indicates an expected call of GetBackend.
func (mr *MockHackerNewsClientMockRecorder) GetBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackend", reflect.TypeOf((*MockHackerNewsClient)(nil).GetBackend), arg0)
}

// GetBigQuery mocks base method.
func (m *MockHackerNewsClient) GetBigQuery(arg0 *hackernews.GetBigQueryInput) (*hackernews.BigQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigQuery", arg0)
	ret0, _ := ret[0].(*hackernews.BigQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigQuery indicates an expected call of GetBigQuery.
func (mr *MockHackerNewsClientMockRecorder) GetBigQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigQuery", reflect.TypeOf((*MockHackerNewsClient)(nil).GetBigQuery), arg0)
}

// GetBilling mocks base method.
func (m *MockHackerNewsClient) GetBilling(arg0 *hackernews.GetBillingInput) (*hackernews.Billing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBilling", arg0)
	ret0, _ := ret[0].(*hackernews.Billing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBilling indicates an expected call of GetBilling.
func (mr *MockHackerNewsClientMockRecorder) GetBilling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBilling", reflect.TypeOf((*MockHackerNewsClient)(nil).GetBilling), arg0)
}

// GetBlobStorage mocks base method.
func (m *MockHackerNewsClient) GetBlobStorage(arg0 *hackernews.GetBlobStorageInput) (*hackernews.BlobStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlobStorage", arg0)
	ret0, _ := ret[0].(*hackernews.BlobStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlobStorage indicates an expected call of GetBlobStorage.
func (mr *MockHackerNewsClientMockRecorder) GetBlobStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlobStorage", reflect.TypeOf((*MockHackerNewsClient)(nil).GetBlobStorage), arg0)
}

// GetBulkCertificate mocks base method.
func (m *MockHackerNewsClient) GetBulkCertificate(arg0 *hackernews.GetBulkCertificateInput) (*hackernews.BulkCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBulkCertificate", arg0)
	ret0, _ := ret[0].(*hackernews.BulkCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBulkCertificate indicates an expected call of GetBulkCertificate.
func (mr *MockHackerNewsClientMockRecorder) GetBulkCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBulkCertificate", reflect.TypeOf((*MockHackerNewsClient)(nil).GetBulkCertificate), arg0)
}

// GetCacheSetting mocks base method.
func (m *MockHackerNewsClient) GetCacheSetting(arg0 *hackernews.GetCacheSettingInput) (*hackernews.CacheSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheSetting", arg0)
	ret0, _ := ret[0].(*hackernews.CacheSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheSetting indicates an expected call of GetCacheSetting.
func (mr *MockHackerNewsClientMockRecorder) GetCacheSetting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheSetting", reflect.TypeOf((*MockHackerNewsClient)(nil).GetCacheSetting), arg0)
}

// GetCloudfiles mocks base method.
func (m *MockHackerNewsClient) GetCloudfiles(arg0 *hackernews.GetCloudfilesInput) (*hackernews.Cloudfiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudfiles", arg0)
	ret0, _ := ret[0].(*hackernews.Cloudfiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudfiles indicates an expected call of GetCloudfiles.
func (mr *MockHackerNewsClientMockRecorder) GetCloudfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudfiles", reflect.TypeOf((*MockHackerNewsClient)(nil).GetCloudfiles), arg0)
}

// GetCondition mocks base method.
func (m *MockHackerNewsClient) GetCondition(arg0 *hackernews.GetConditionInput) (*hackernews.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCondition", arg0)
	ret0, _ := ret[0].(*hackernews.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCondition indicates an expected call of GetCondition.
func (mr *MockHackerNewsClientMockRecorder) GetCondition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCondition", reflect.TypeOf((*MockHackerNewsClient)(nil).GetCondition), arg0)
}

// GetCurrentUser mocks base method.
func (m *MockHackerNewsClient) GetCurrentUser() (*hackernews.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser")
	ret0, _ := ret[0].(*hackernews.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockHackerNewsClientMockRecorder) GetCurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockHackerNewsClient)(nil).GetCurrentUser))
}

// GetCustomTLSCertificate mocks base method.
func (m *MockHackerNewsClient) GetCustomTLSCertificate(arg0 *hackernews.GetCustomTLSCertificateInput) (*hackernews.CustomTLSCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomTLSCertificate", arg0)
	ret0, _ := ret[0].(*hackernews.CustomTLSCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomTLSCertificate indicates an expected call of GetCustomTLSCertificate.
func (mr *MockHackerNewsClientMockRecorder) GetCustomTLSCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomTLSCertificate", reflect.TypeOf((*MockHackerNewsClient)(nil).GetCustomTLSCertificate), arg0)
}

// GetCustomTLSConfiguration mocks base method.
func (m *MockHackerNewsClient) GetCustomTLSConfiguration(arg0 *hackernews.GetCustomTLSConfigurationInput) (*hackernews.CustomTLSConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomTLSConfiguration", arg0)
	ret0, _ := ret[0].(*hackernews.CustomTLSConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomTLSConfiguration indicates an expected call of GetCustomTLSConfiguration.
func (mr *MockHackerNewsClientMockRecorder) GetCustomTLSConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomTLSConfiguration", reflect.TypeOf((*MockHackerNewsClient)(nil).GetCustomTLSConfiguration), arg0)
}

// GetDatadog mocks base method.
func (m *MockHackerNewsClient) GetDatadog(arg0 *hackernews.GetDatadogInput) (*hackernews.Datadog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatadog", arg0)
	ret0, _ := ret[0].(*hackernews.Datadog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatadog indicates an expected call of GetDatadog.
func (mr *MockHackerNewsClientMockRecorder) GetDatadog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatadog", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDatadog), arg0)
}

// GetDictionary mocks base method.
func (m *MockHackerNewsClient) GetDictionary(arg0 *hackernews.GetDictionaryInput) (*hackernews.Dictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionary", arg0)
	ret0, _ := ret[0].(*hackernews.Dictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionary indicates an expected call of GetDictionary.
func (mr *MockHackerNewsClientMockRecorder) GetDictionary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionary", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDictionary), arg0)
}

// GetDictionaryInfo mocks base method.
func (m *MockHackerNewsClient) GetDictionaryInfo(arg0 *hackernews.GetDictionaryInfoInput) (*hackernews.DictionaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionaryInfo", arg0)
	ret0, _ := ret[0].(*hackernews.DictionaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionaryInfo indicates an expected call of GetDictionaryInfo.
func (mr *MockHackerNewsClientMockRecorder) GetDictionaryInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionaryInfo", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDictionaryInfo), arg0)
}

// GetDictionaryItem mocks base method.
func (m *MockHackerNewsClient) GetDictionaryItem(arg0 *hackernews.GetDictionaryItemInput) (*hackernews.DictionaryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionaryItem", arg0)
	ret0, _ := ret[0].(*hackernews.DictionaryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionaryItem indicates an expected call of GetDictionaryItem.
func (mr *MockHackerNewsClientMockRecorder) GetDictionaryItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionaryItem", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDictionaryItem), arg0)
}

// GetDiff mocks base method.
func (m *MockHackerNewsClient) GetDiff(arg0 *hackernews.GetDiffInput) (*hackernews.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiff", arg0)
	ret0, _ := ret[0].(*hackernews.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiff indicates an expected call of GetDiff.
func (mr *MockHackerNewsClientMockRecorder) GetDiff(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiff", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDiff), arg0)
}

// GetDigitalOcean mocks base method.
func (m *MockHackerNewsClient) GetDigitalOcean(arg0 *hackernews.GetDigitalOceanInput) (*hackernews.DigitalOcean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigitalOcean", arg0)
	ret0, _ := ret[0].(*hackernews.DigitalOcean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigitalOcean indicates an expected call of GetDigitalOcean.
func (mr *MockHackerNewsClientMockRecorder) GetDigitalOcean(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigitalOcean", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDigitalOcean), arg0)
}

// GetDirector mocks base method.
func (m *MockHackerNewsClient) GetDirector(arg0 *hackernews.GetDirectorInput) (*hackernews.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirector", arg0)
	ret0, _ := ret[0].(*hackernews.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirector indicates an expected call of GetDirector.
func (mr *MockHackerNewsClientMockRecorder) GetDirector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirector", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDirector), arg0)
}

// GetDirectorBackend mocks base method.
func (m *MockHackerNewsClient) GetDirectorBackend(arg0 *hackernews.GetDirectorBackendInput) (*hackernews.DirectorBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectorBackend", arg0)
	ret0, _ := ret[0].(*hackernews.DirectorBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectorBackend indicates an expected call of GetDirectorBackend.
func (mr *MockHackerNewsClientMockRecorder) GetDirectorBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectorBackend", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDirectorBackend), arg0)
}

// GetDomain mocks base method.
func (m *MockHackerNewsClient) GetDomain(arg0 *hackernews.GetDomainInput) (*hackernews.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(*hackernews.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockHackerNewsClientMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDomain), arg0)
}

// GetDynamicSnippet mocks base method.
func (m *MockHackerNewsClient) GetDynamicSnippet(arg0 *hackernews.GetDynamicSnippetInput) (*hackernews.DynamicSnippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicSnippet", arg0)
	ret0, _ := ret[0].(*hackernews.DynamicSnippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamicSnippet indicates an expected call of GetDynamicSnippet.
func (mr *MockHackerNewsClientMockRecorder) GetDynamicSnippet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicSnippet", reflect.TypeOf((*MockHackerNewsClient)(nil).GetDynamicSnippet), arg0)
}

// GetERL mocks base method.
func (m *MockHackerNewsClient) GetERL(arg0 *hackernews.GetERLInput) (*hackernews.ERL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetERL", arg0)
	ret0, _ := ret[0].(*hackernews.ERL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetERL indicates an expected call of GetERL.
func (mr *MockHackerNewsClientMockRecorder) GetERL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetERL", reflect.TypeOf((*MockHackerNewsClient)(nil).GetERL), arg0)
}

// GetElasticsearch mocks base method.
func (m *MockHackerNewsClient) GetElasticsearch(arg0 *hackernews.GetElasticsearchInput) (*hackernews.Elasticsearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElasticsearch", arg0)
	ret0, _ := ret[0].(*hackernews.Elasticsearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticsearch indicates an expected call of GetElasticsearch.
func (mr *MockHackerNewsClientMockRecorder) GetElasticsearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticsearch", reflect.TypeOf((*MockHackerNewsClient)(nil).GetElasticsearch), arg0)
}

// GetFTP mocks base method.
func (m *MockHackerNewsClient) GetFTP(arg0 *hackernews.GetFTPInput) (*hackernews.FTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFTP", arg0)
	ret0, _ := ret[0].(*hackernews.FTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFTP indicates an expected call of GetFTP.
func (mr *MockHackerNewsClientMockRecorder) GetFTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFTP", reflect.TypeOf((*MockHackerNewsClient)(nil).GetFTP), arg0)
}

// GetGCS mocks base method.
func (m *MockHackerNewsClient) GetGCS(arg0 *hackernews.GetGCSInput) (*hackernews.GCS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCS", arg0)
	ret0, _ := ret[0].(*hackernews.GCS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGCS indicates an expected call of GetGCS.
func (mr *MockHackerNewsClientMockRecorder) GetGCS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCS", reflect.TypeOf((*MockHackerNewsClient)(nil).GetGCS), arg0)
}

// GetGeneratedVCL mocks base method.
func (m *MockHackerNewsClient) GetGeneratedVCL(arg0 *hackernews.GetGeneratedVCLInput) (*hackernews.VCL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneratedVCL", arg0)
	ret0, _ := ret[0].(*hackernews.VCL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneratedVCL indicates an expected call of GetGeneratedVCL.
func (mr *MockHackerNewsClientMockRecorder) GetGeneratedVCL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneratedVCL", reflect.TypeOf((*MockHackerNewsClient)(nil).GetGeneratedVCL), arg0)
}

// GetGzip mocks base method.
func (m *MockHackerNewsClient) GetGzip(arg0 *hackernews.GetGzipInput) (*hackernews.Gzip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGzip", arg0)
	ret0, _ := ret[0].(*hackernews.Gzip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGzip indicates an expected call of GetGzip.
func (mr *MockHackerNewsClientMockRecorder) GetGzip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGzip", reflect.TypeOf((*MockHackerNewsClient)(nil).GetGzip), arg0)
}

// GetHTTPS mocks base method.
func (m *MockHackerNewsClient) GetHTTPS(arg0 *hackernews.GetHTTPSInput) (*hackernews.HTTPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPS", arg0)
	ret0, _ := ret[0].(*hackernews.HTTPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPS indicates an expected call of GetHTTPS.
func (mr *MockHackerNewsClientMockRecorder) GetHTTPS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPS", reflect.TypeOf((*MockHackerNewsClient)(nil).GetHTTPS), arg0)
}

// GetHeader mocks base method.
func (m *MockHackerNewsClient) GetHeader(arg0 *hackernews.GetHeaderInput) (*hackernews.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", arg0)
	ret0, _ := ret[0].(*hackernews.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockHackerNewsClientMockRecorder) GetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockHackerNewsClient)(nil).GetHeader), arg0)
}

// GetHealthCheck mocks base method.
func (m *MockHackerNewsClient) GetHealthCheck(arg0 *hackernews.GetHealthCheckInput) (*hackernews.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheck", arg0)
	ret0, _ := ret[0].(*hackernews.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheck indicates an expected call of GetHealthCheck.
func (mr *MockHackerNewsClientMockRecorder) GetHealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheck", reflect.TypeOf((*MockHackerNewsClient)(nil).GetHealthCheck), arg0)
}

// GetHeroku mocks base method.
func (m *MockHackerNewsClient) GetHeroku(arg0 *hackernews.GetHerokuInput) (*hackernews.Heroku, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeroku", arg0)
	ret0, _ := ret[0].(*hackernews.Heroku)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeroku indicates an expected call of GetHeroku.
func (mr *MockHackerNewsClientMockRecorder) GetHeroku(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeroku", reflect.TypeOf((*MockHackerNewsClient)(nil).GetHeroku), arg0)
}

// GetHoneycomb mocks base method.
func (m *MockHackerNewsClient) GetHoneycomb(arg0 *hackernews.GetHoneycombInput) (*hackernews.Honeycomb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHoneycomb", arg0)
	ret0, _ := ret[0].(*hackernews.Honeycomb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHoneycomb indicates an expected call of GetHoneycomb.
func (mr *MockHackerNewsClientMockRecorder) GetHoneycomb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHoneycomb", reflect.TypeOf((*MockHackerNewsClient)(nil).GetHoneycomb), arg0)
}

// GetKafka mocks base method.
func (m *MockHackerNewsClient) GetKafka(arg0 *hackernews.GetKafkaInput) (*hackernews.Kafka, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKafka", arg0)
	ret0, _ := ret[0].(*hackernews.Kafka)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKafka indicates an expected call of GetKafka.
func (mr *MockHackerNewsClientMockRecorder) GetKafka(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKafka", reflect.TypeOf((*MockHackerNewsClient)(nil).GetKafka), arg0)
}

// GetKinesis mocks base method.
func (m *MockHackerNewsClient) GetKinesis(arg0 *hackernews.GetKinesisInput) (*hackernews.Kinesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKinesis", arg0)
	ret0, _ := ret[0].(*hackernews.Kinesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKinesis indicates an expected call of GetKinesis.
func (mr *MockHackerNewsClientMockRecorder) GetKinesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKinesis", reflect.TypeOf((*MockHackerNewsClient)(nil).GetKinesis), arg0)
}

// GetLogentries mocks base method.
func (m *MockHackerNewsClient) GetLogentries(arg0 *hackernews.GetLogentriesInput) (*hackernews.Logentries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogentries", arg0)
	ret0, _ := ret[0].(*hackernews.Logentries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogentries indicates an expected call of GetLogentries.
func (mr *MockHackerNewsClientMockRecorder) GetLogentries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogentries", reflect.TypeOf((*MockHackerNewsClient)(nil).GetLogentries), arg0)
}

// GetLoggly mocks base method.
func (m *MockHackerNewsClient) GetLoggly(arg0 *hackernews.GetLogglyInput) (*hackernews.Loggly, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggly", arg0)
	ret0, _ := ret[0].(*hackernews.Loggly)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggly indicates an expected call of GetLoggly.
func (mr *MockHackerNewsClientMockRecorder) GetLoggly(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggly", reflect.TypeOf((*MockHackerNewsClient)(nil).GetLoggly), arg0)
}

// GetLogshuttle mocks base method.
func (m *MockHackerNewsClient) GetLogshuttle(arg0 *hackernews.GetLogshuttleInput) (*hackernews.Logshuttle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogshuttle", arg0)
	ret0, _ := ret[0].(*hackernews.Logshuttle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogshuttle indicates an expected call of GetLogshuttle.
func (mr *MockHackerNewsClientMockRecorder) GetLogshuttle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogshuttle", reflect.TypeOf((*MockHackerNewsClient)(nil).GetLogshuttle), arg0)
}

// GetNewRelic mocks base method.
func (m *MockHackerNewsClient) GetNewRelic(arg0 *hackernews.GetNewRelicInput) (*hackernews.NewRelic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewRelic", arg0)
	ret0, _ := ret[0].(*hackernews.NewRelic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewRelic indicates an expected call of GetNewRelic.
func (mr *MockHackerNewsClientMockRecorder) GetNewRelic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewRelic", reflect.TypeOf((*MockHackerNewsClient)(nil).GetNewRelic), arg0)
}

// GetObjectStore mocks base method.
func (m *MockHackerNewsClient) GetObjectStore(arg0 *hackernews.GetObjectStoreInput) (*hackernews.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectStore", arg0)
	ret0, _ := ret[0].(*hackernews.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectStore indicates an expected call of GetObjectStore.
func (mr *MockHackerNewsClientMockRecorder) GetObjectStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectStore", reflect.TypeOf((*MockHackerNewsClient)(nil).GetObjectStore), arg0)
}

// GetObjectStoreKey mocks base method.
func (m *MockHackerNewsClient) GetObjectStoreKey(arg0 *hackernews.GetObjectStoreKeyInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectStoreKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectStoreKey indicates an expected call of GetObjectStoreKey.
func (mr *MockHackerNewsClientMockRecorder) GetObjectStoreKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectStoreKey", reflect.TypeOf((*MockHackerNewsClient)(nil).GetObjectStoreKey), arg0)
}

// GetOpenstack mocks base method.
func (m *MockHackerNewsClient) GetOpenstack(arg0 *hackernews.GetOpenstackInput) (*hackernews.Openstack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenstack", arg0)
	ret0, _ := ret[0].(*hackernews.Openstack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenstack indicates an expected call of GetOpenstack.
func (mr *MockHackerNewsClientMockRecorder) GetOpenstack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenstack", reflect.TypeOf((*MockHackerNewsClient)(nil).GetOpenstack), arg0)
}

// GetOriginMetricsForService mocks base method.
func (m *MockHackerNewsClient) GetOriginMetricsForService(arg0 *hackernews.GetOriginMetricsInput) (*hackernews.OriginInspector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginMetricsForService", arg0)
	ret0, _ := ret[0].(*hackernews.OriginInspector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginMetricsForService indicates an expected call of GetOriginMetricsForService.
func (mr *MockHackerNewsClientMockRecorder) GetOriginMetricsForService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginMetricsForService", reflect.TypeOf((*MockHackerNewsClient)(nil).GetOriginMetricsForService), arg0)
}

// GetOriginMetricsForServiceJSON mocks base method.
func (m *MockHackerNewsClient) GetOriginMetricsForServiceJSON(arg0 *hackernews.GetOriginMetricsInput, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginMetricsForServiceJSON", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOriginMetricsForServiceJSON indicates an expected call of GetOriginMetricsForServiceJSON.
func (mr *MockHackerNewsClientMockRecorder) GetOriginMetricsForServiceJSON(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginMetricsForServiceJSON", reflect.TypeOf((*MockHackerNewsClient)(nil).GetOriginMetricsForServiceJSON), arg0, arg1)
}

// GetPackage mocks base method.
func (m *MockHackerNewsClient) GetPackage(arg0 *hackernews.GetPackageInput) (*hackernews.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0)
	ret0, _ := ret[0].(*hackernews.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockHackerNewsClientMockRecorder) GetPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockHackerNewsClient)(nil).GetPackage), arg0)
}

// GetPapertrail mocks base method.
func (m *MockHackerNewsClient) GetPapertrail(arg0 *hackernews.GetPapertrailInput) (*hackernews.Papertrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPapertrail", arg0)
	ret0, _ := ret[0].(*hackernews.Papertrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPapertrail indicates an expected call of GetPapertrail.
func (mr *MockHackerNewsClientMockRecorder) GetPapertrail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPapertrail", reflect.TypeOf((*MockHackerNewsClient)(nil).GetPapertrail), arg0)
}

// GetPool mocks base method.
func (m *MockHackerNewsClient) GetPool(arg0 *hackernews.GetPoolInput) (*hackernews.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", arg0)
	ret0, _ := ret[0].(*hackernews.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool.
func (mr *MockHackerNewsClientMockRecorder) GetPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockHackerNewsClient)(nil).GetPool), arg0)
}

// GetPrivateKey mocks base method.
func (m *MockHackerNewsClient) GetPrivateKey(arg0 *hackernews.GetPrivateKeyInput) (*hackernews.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey", arg0)
	ret0, _ := ret[0].(*hackernews.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockHackerNewsClientMockRecorder) GetPrivateKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockHackerNewsClient)(nil).GetPrivateKey), arg0)
}

// GetPubsub mocks base method.
func (m *MockHackerNewsClient) GetPubsub(arg0 *hackernews.GetPubsubInput) (*hackernews.Pubsub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPubsub", arg0)
	ret0, _ := ret[0].(*hackernews.Pubsub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPubsub indicates an expected call of GetPubsub.
func (mr *MockHackerNewsClientMockRecorder) GetPubsub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPubsub", reflect.TypeOf((*MockHackerNewsClient)(nil).GetPubsub), arg0)
}

// GetRegions mocks base method.
func (m *MockHackerNewsClient) GetRegions() (*hackernews.RegionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions")
	ret0, _ := ret[0].(*hackernews.RegionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockHackerNewsClientMockRecorder) GetRegions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockHackerNewsClient)(nil).GetRegions))
}

// GetRequestSetting mocks base method.
func (m *MockHackerNewsClient) GetRequestSetting(arg0 *hackernews.GetRequestSettingInput) (*hackernews.RequestSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestSetting", arg0)
	ret0, _ := ret[0].(*hackernews.RequestSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestSetting indicates an expected call of GetRequestSetting.
func (mr *MockHackerNewsClientMockRecorder) GetRequestSetting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestSetting", reflect.TypeOf((*MockHackerNewsClient)(nil).GetRequestSetting), arg0)
}

// GetResponseObject mocks base method.
func (m *MockHackerNewsClient) GetResponseObject(arg0 *hackernews.GetResponseObjectInput) (*hackernews.ResponseObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseObject", arg0)
	ret0, _ := ret[0].(*hackernews.ResponseObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseObject indicates an expected call of GetResponseObject.
func (mr *MockHackerNewsClientMockRecorder) GetResponseObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseObject", reflect.TypeOf((*MockHackerNewsClient)(nil).GetResponseObject), arg0)
}

// GetS3 mocks base method.
func (m *MockHackerNewsClient) GetS3(arg0 *hackernews.GetS3Input) (*hackernews.S3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3", arg0)
	ret0, _ := ret[0].(*hackernews.S3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3 indicates an expected call of GetS3.
func (mr *MockHackerNewsClientMockRecorder) GetS3(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3", reflect.TypeOf((*MockHackerNewsClient)(nil).GetS3), arg0)
}

// GetSFTP mocks base method.
func (m *MockHackerNewsClient) GetSFTP(arg0 *hackernews.GetSFTPInput) (*hackernews.SFTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSFTP", arg0)
	ret0, _ := ret[0].(*hackernews.SFTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSFTP indicates an expected call of GetSFTP.
func (mr *MockHackerNewsClientMockRecorder) GetSFTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSFTP", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSFTP), arg0)
}

// GetScalyr mocks base method.
func (m *MockHackerNewsClient) GetScalyr(arg0 *hackernews.GetScalyrInput) (*hackernews.Scalyr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScalyr", arg0)
	ret0, _ := ret[0].(*hackernews.Scalyr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScalyr indicates an expected call of GetScalyr.
func (mr *MockHackerNewsClientMockRecorder) GetScalyr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScalyr", reflect.TypeOf((*MockHackerNewsClient)(nil).GetScalyr), arg0)
}

// GetSecret mocks base method.
func (m *MockHackerNewsClient) GetSecret(arg0 *hackernews.GetSecretInput) (*hackernews.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0)
	ret0, _ := ret[0].(*hackernews.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockHackerNewsClientMockRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSecret), arg0)
}

// GetSecretStore mocks base method.
func (m *MockHackerNewsClient) GetSecretStore(arg0 *hackernews.GetSecretStoreInput) (*hackernews.SecretStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretStore", arg0)
	ret0, _ := ret[0].(*hackernews.SecretStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretStore indicates an expected call of GetSecretStore.
func (mr *MockHackerNewsClientMockRecorder) GetSecretStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretStore", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSecretStore), arg0)
}

// GetServer mocks base method.
func (m *MockHackerNewsClient) GetServer(arg0 *hackernews.GetServerInput) (*hackernews.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0)
	ret0, _ := ret[0].(*hackernews.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockHackerNewsClientMockRecorder) GetServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockHackerNewsClient)(nil).GetServer), arg0)
}

// GetService mocks base method.
func (m *MockHackerNewsClient) GetService(arg0 *hackernews.GetServiceInput) (*hackernews.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*hackernews.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockHackerNewsClientMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockHackerNewsClient)(nil).GetService), arg0)
}

// GetServiceAuthorization mocks base method.
func (m *MockHackerNewsClient) GetServiceAuthorization(arg0 *hackernews.GetServiceAuthorizationInput) (*hackernews.ServiceAuthorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAuthorization", arg0)
	ret0, _ := ret[0].(*hackernews.ServiceAuthorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAuthorization indicates an expected call of GetServiceAuthorization.
func (mr *MockHackerNewsClientMockRecorder) GetServiceAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAuthorization", reflect.TypeOf((*MockHackerNewsClient)(nil).GetServiceAuthorization), arg0)
}

// GetServiceDetails mocks base method.
func (m *MockHackerNewsClient) GetServiceDetails(arg0 *hackernews.GetServiceInput) (*hackernews.ServiceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceDetails", arg0)
	ret0, _ := ret[0].(*hackernews.ServiceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceDetails indicates an expected call of GetServiceDetails.
func (mr *MockHackerNewsClientMockRecorder) GetServiceDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceDetails", reflect.TypeOf((*MockHackerNewsClient)(nil).GetServiceDetails), arg0)
}

// GetSettings mocks base method.
func (m *MockHackerNewsClient) GetSettings(arg0 *hackernews.GetSettingsInput) (*hackernews.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0)
	ret0, _ := ret[0].(*hackernews.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockHackerNewsClientMockRecorder) GetSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSettings), arg0)
}

// GetSnippet mocks base method.
func (m *MockHackerNewsClient) GetSnippet(arg0 *hackernews.GetSnippetInput) (*hackernews.Snippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnippet", arg0)
	ret0, _ := ret[0].(*hackernews.Snippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnippet indicates an expected call of GetSnippet.
func (mr *MockHackerNewsClientMockRecorder) GetSnippet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnippet", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSnippet), arg0)
}

// GetSplunk mocks base method.
func (m *MockHackerNewsClient) GetSplunk(arg0 *hackernews.GetSplunkInput) (*hackernews.Splunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSplunk", arg0)
	ret0, _ := ret[0].(*hackernews.Splunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSplunk indicates an expected call of GetSplunk.
func (mr *MockHackerNewsClientMockRecorder) GetSplunk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSplunk", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSplunk), arg0)
}

// GetStats mocks base method.
func (m *MockHackerNewsClient) GetStats(arg0 *hackernews.GetStatsInput) (*hackernews.StatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(*hackernews.StatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockHackerNewsClientMockRecorder) GetStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockHackerNewsClient)(nil).GetStats), arg0)
}

// GetStatsField mocks base method.
func (m *MockHackerNewsClient) GetStatsField(arg0 *hackernews.GetStatsInput) (*hackernews.StatsFieldResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsField", arg0)
	ret0, _ := ret[0].(*hackernews.StatsFieldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsField indicates an expected call of GetStatsField.
func (mr *MockHackerNewsClientMockRecorder) GetStatsField(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsField", reflect.TypeOf((*MockHackerNewsClient)(nil).GetStatsField), arg0)
}

// GetStatsJSON mocks base method.
func (m *MockHackerNewsClient) GetStatsJSON(arg0 *hackernews.GetStatsInput, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsJSON", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStatsJSON indicates an expected call of GetStatsJSON.
func (mr *MockHackerNewsClientMockRecorder) GetStatsJSON(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsJSON", reflect.TypeOf((*MockHackerNewsClient)(nil).GetStatsJSON), arg0, arg1)
}

// GetSumologic mocks base method.
func (m *MockHackerNewsClient) GetSumologic(arg0 *hackernews.GetSumologicInput) (*hackernews.Sumologic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumologic", arg0)
	ret0, _ := ret[0].(*hackernews.Sumologic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumologic indicates an expected call of GetSumologic.
func (mr *MockHackerNewsClientMockRecorder) GetSumologic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumologic", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSumologic), arg0)
}

// GetSyslog mocks base method.
func (m *MockHackerNewsClient) GetSyslog(arg0 *hackernews.GetSyslogInput) (*hackernews.Syslog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyslog", arg0)
	ret0, _ := ret[0].(*hackernews.Syslog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyslog indicates an expected call of GetSyslog.
func (mr *MockHackerNewsClientMockRecorder) GetSyslog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyslog", reflect.TypeOf((*MockHackerNewsClient)(nil).GetSyslog), arg0)
}

// GetTLSActivation mocks base method.
func (m *MockHackerNewsClient) GetTLSActivation(arg0 *hackernews.GetTLSActivationInput) (*hackernews.TLSActivation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSActivation", arg0)
	ret0, _ := ret[0].(*hackernews.TLSActivation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSActivation indicates an expected call of GetTLSActivation.
func (mr *MockHackerNewsClientMockRecorder) GetTLSActivation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSActivation", reflect.TypeOf((*MockHackerNewsClient)(nil).GetTLSActivation), arg0)
}

// GetTLSSubscription mocks base method.
func (m *MockHackerNewsClient) GetTLSSubscription(arg0 *hackernews.GetTLSSubscriptionInput) (*hackernews.TLSSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSSubscription", arg0)
	ret0, _ := ret[0].(*hackernews.TLSSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSSubscription indicates an expected call of GetTLSSubscription.
func (mr *MockHackerNewsClientMockRecorder) GetTLSSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSSubscription", reflect.TypeOf((*MockHackerNewsClient)(nil).GetTLSSubscription), arg0)
}

// GetTokenSelf mocks base method.
func (m *MockHackerNewsClient) GetTokenSelf() (*hackernews.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenSelf")
	ret0, _ := ret[0].(*hackernews.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenSelf indicates an expected call of GetTokenSelf.
func (mr *MockHackerNewsClientMockRecorder) GetTokenSelf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenSelf", reflect.TypeOf((*MockHackerNewsClient)(nil).GetTokenSelf))
}

// GetUsage mocks base method.
func (m *MockHackerNewsClient) GetUsage(arg0 *hackernews.GetUsageInput) (*hackernews.UsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage", arg0)
	ret0, _ := ret[0].(*hackernews.UsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockHackerNewsClientMockRecorder) GetUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockHackerNewsClient)(nil).GetUsage), arg0)
}

// GetUsageByService mocks base method.
func (m *MockHackerNewsClient) GetUsageByService(arg0 *hackernews.GetUsageInput) (*hackernews.UsageByServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageByService", arg0)
	ret0, _ := ret[0].(*hackernews.UsageByServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageByService indicates an expected call of GetUsageByService.
func (mr *MockHackerNewsClientMockRecorder) GetUsageByService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageByService", reflect.TypeOf((*MockHackerNewsClient)(nil).GetUsageByService), arg0)
}

// GetUser mocks base method.
func (m *MockHackerNewsClient) GetUser(arg0 *hackernews.GetUserInput) (*hackernews.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*hackernews.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockHackerNewsClientMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockHackerNewsClient)(nil).GetUser), arg0)
}

// GetVCL mocks base method.
func (m *MockHackerNewsClient) GetVCL(arg0 *hackernews.GetVCLInput) (*hackernews.VCL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVCL", arg0)
	ret0, _ := ret[0].(*hackernews.VCL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVCL indicates an expected call of GetVCL.
func (mr *MockHackerNewsClientMockRecorder) GetVCL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCL", reflect.TypeOf((*MockHackerNewsClient)(nil).GetVCL), arg0)
}

// GetVersion mocks base method.
func (m *MockHackerNewsClient) GetVersion(arg0 *hackernews.GetVersionInput) (*hackernews.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0)
	ret0, _ := ret[0].(*hackernews.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockHackerNewsClientMockRecorder) GetVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockHackerNewsClient)(nil).GetVersion), arg0)
}

// GetWAF mocks base method.
func (m *MockHackerNewsClient) GetWAF(arg0 *hackernews.GetWAFInput) (*hackernews.WAF, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWAF", arg0)
	ret0, _ := ret[0].(*hackernews.WAF)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWAF indicates an expected call of GetWAF.
func (mr *MockHackerNewsClientMockRecorder) GetWAF(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWAF", reflect.TypeOf((*MockHackerNewsClient)(nil).GetWAF), arg0)
}

// GetWAFVersion mocks base method.
func (m *MockHackerNewsClient) GetWAFVersion(arg0 *hackernews.GetWAFVersionInput) (*hackernews.WAFVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWAFVersion", arg0)
	ret0, _ := ret[0].(*hackernews.WAFVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWAFVersion indicates an expected call of GetWAFVersion.
func (mr *MockHackerNewsClientMockRecorder) GetWAFVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWAFVersion", reflect.TypeOf((*MockHackerNewsClient)(nil).GetWAFVersion), arg0)
}

// ListACLEntries mocks base method.
func (m *MockHackerNewsClient) ListACLEntries(arg0 *hackernews.ListACLEntriesInput) ([]*hackernews.ACLEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListACLEntries", arg0)
	ret0, _ := ret[0].([]*hackernews.ACLEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListACLEntries indicates an expected call of ListACLEntries.
func (mr *MockHackerNewsClientMockRecorder) ListACLEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListACLEntries", reflect.TypeOf((*MockHackerNewsClient)(nil).ListACLEntries), arg0)
}

// ListACLs mocks base method.
func (m *MockHackerNewsClient) ListACLs(arg0 *hackernews.ListACLsInput) ([]*hackernews.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListACLs", arg0)
	ret0, _ := ret[0].([]*hackernews.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListACLs indicates an expected call of ListACLs.
func (mr *MockHackerNewsClientMockRecorder) ListACLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListACLs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListACLs), arg0)
}

// ListAllWAFActiveRules mocks base method.
func (m *MockHackerNewsClient) ListAllWAFActiveRules(arg0 *hackernews.ListAllWAFActiveRulesInput) (*hackernews.WAFActiveRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWAFActiveRules", arg0)
	ret0, _ := ret[0].(*hackernews.WAFActiveRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWAFActiveRules indicates an expected call of ListAllWAFActiveRules.
func (mr *MockHackerNewsClientMockRecorder) ListAllWAFActiveRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWAFActiveRules", reflect.TypeOf((*MockHackerNewsClient)(nil).ListAllWAFActiveRules), arg0)
}

// ListAllWAFRuleExclusions mocks base method.
func (m *MockHackerNewsClient) ListAllWAFRuleExclusions(arg0 *hackernews.ListAllWAFRuleExclusionsInput) (*hackernews.WAFRuleExclusionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWAFRuleExclusions", arg0)
	ret0, _ := ret[0].(*hackernews.WAFRuleExclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWAFRuleExclusions indicates an expected call of ListAllWAFRuleExclusions.
func (mr *MockHackerNewsClientMockRecorder) ListAllWAFRuleExclusions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWAFRuleExclusions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListAllWAFRuleExclusions), arg0)
}

// ListAllWAFRules mocks base method.
func (m *MockHackerNewsClient) ListAllWAFRules(arg0 *hackernews.ListAllWAFRulesInput) (*hackernews.WAFRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWAFRules", arg0)
	ret0, _ := ret[0].(*hackernews.WAFRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWAFRules indicates an expected call of ListAllWAFRules.
func (mr *MockHackerNewsClientMockRecorder) ListAllWAFRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWAFRules", reflect.TypeOf((*MockHackerNewsClient)(nil).ListAllWAFRules), arg0)
}

// ListAllWAFVersions mocks base method.
func (m *MockHackerNewsClient) ListAllWAFVersions(arg0 *hackernews.ListAllWAFVersionsInput) (*hackernews.WAFVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWAFVersions", arg0)
	ret0, _ := ret[0].(*hackernews.WAFVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWAFVersions indicates an expected call of ListAllWAFVersions.
func (mr *MockHackerNewsClientMockRecorder) ListAllWAFVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWAFVersions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListAllWAFVersions), arg0)
}

// ListBackends mocks base method.
func (m *MockHackerNewsClient) ListBackends(arg0 *hackernews.ListBackendsInput) ([]*hackernews.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackends", arg0)
	ret0, _ := ret[0].([]*hackernews.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackends indicates an expected call of ListBackends.
func (mr *MockHackerNewsClientMockRecorder) ListBackends(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackends", reflect.TypeOf((*MockHackerNewsClient)(nil).ListBackends), arg0)
}

// ListBigQueries mocks base method.
func (m *MockHackerNewsClient) ListBigQueries(arg0 *hackernews.ListBigQueriesInput) ([]*hackernews.BigQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBigQueries", arg0)
	ret0, _ := ret[0].([]*hackernews.BigQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBigQueries indicates an expected call of ListBigQueries.
func (mr *MockHackerNewsClientMockRecorder) ListBigQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBigQueries", reflect.TypeOf((*MockHackerNewsClient)(nil).ListBigQueries), arg0)
}

// ListBlobStorages mocks base method.
func (m *MockHackerNewsClient) ListBlobStorages(arg0 *hackernews.ListBlobStoragesInput) ([]*hackernews.BlobStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlobStorages", arg0)
	ret0, _ := ret[0].([]*hackernews.BlobStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlobStorages indicates an expected call of ListBlobStorages.
func (mr *MockHackerNewsClientMockRecorder) ListBlobStorages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlobStorages", reflect.TypeOf((*MockHackerNewsClient)(nil).ListBlobStorages), arg0)
}

// ListBulkCertificates mocks base method.
func (m *MockHackerNewsClient) ListBulkCertificates(arg0 *hackernews.ListBulkCertificatesInput) ([]*hackernews.BulkCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBulkCertificates", arg0)
	ret0, _ := ret[0].([]*hackernews.BulkCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBulkCertificates indicates an expected call of ListBulkCertificates.
func (mr *MockHackerNewsClientMockRecorder) ListBulkCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBulkCertificates", reflect.TypeOf((*MockHackerNewsClient)(nil).ListBulkCertificates), arg0)
}

// ListCacheSettings mocks base method.
func (m *MockHackerNewsClient) ListCacheSettings(arg0 *hackernews.ListCacheSettingsInput) ([]*hackernews.CacheSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCacheSettings", arg0)
	ret0, _ := ret[0].([]*hackernews.CacheSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCacheSettings indicates an expected call of ListCacheSettings.
func (mr *MockHackerNewsClientMockRecorder) ListCacheSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCacheSettings", reflect.TypeOf((*MockHackerNewsClient)(nil).ListCacheSettings), arg0)
}

// ListCloudfiles mocks base method.
func (m *MockHackerNewsClient) ListCloudfiles(arg0 *hackernews.ListCloudfilesInput) ([]*hackernews.Cloudfiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudfiles", arg0)
	ret0, _ := ret[0].([]*hackernews.Cloudfiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudfiles indicates an expected call of ListCloudfiles.
func (mr *MockHackerNewsClientMockRecorder) ListCloudfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudfiles", reflect.TypeOf((*MockHackerNewsClient)(nil).ListCloudfiles), arg0)
}

// ListConditions mocks base method.
func (m *MockHackerNewsClient) ListConditions(arg0 *hackernews.ListConditionsInput) ([]*hackernews.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConditions", arg0)
	ret0, _ := ret[0].([]*hackernews.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConditions indicates an expected call of ListConditions.
func (mr *MockHackerNewsClientMockRecorder) ListConditions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConditions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListConditions), arg0)
}

// ListCustomTLSCertificates mocks base method.
func (m *MockHackerNewsClient) ListCustomTLSCertificates(arg0 *hackernews.ListCustomTLSCertificatesInput) ([]*hackernews.CustomTLSCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomTLSCertificates", arg0)
	ret0, _ := ret[0].([]*hackernews.CustomTLSCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomTLSCertificates indicates an expected call of ListCustomTLSCertificates.
func (mr *MockHackerNewsClientMockRecorder) ListCustomTLSCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomTLSCertificates", reflect.TypeOf((*MockHackerNewsClient)(nil).ListCustomTLSCertificates), arg0)
}

// ListCustomTLSConfigurations mocks base method.
func (m *MockHackerNewsClient) ListCustomTLSConfigurations(arg0 *hackernews.ListCustomTLSConfigurationsInput) ([]*hackernews.CustomTLSConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomTLSConfigurations", arg0)
	ret0, _ := ret[0].([]*hackernews.CustomTLSConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomTLSConfigurations indicates an expected call of ListCustomTLSConfigurations.
func (mr *MockHackerNewsClientMockRecorder) ListCustomTLSConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomTLSConfigurations", reflect.TypeOf((*MockHackerNewsClient)(nil).ListCustomTLSConfigurations), arg0)
}

// ListCustomerTokens mocks base method.
func (m *MockHackerNewsClient) ListCustomerTokens(arg0 *hackernews.ListCustomerTokensInput) ([]*hackernews.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerTokens", arg0)
	ret0, _ := ret[0].([]*hackernews.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerTokens indicates an expected call of ListCustomerTokens.
func (mr *MockHackerNewsClientMockRecorder) ListCustomerTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerTokens", reflect.TypeOf((*MockHackerNewsClient)(nil).ListCustomerTokens), arg0)
}

// ListCustomerUsers mocks base method.
func (m *MockHackerNewsClient) ListCustomerUsers(arg0 *hackernews.ListCustomerUsersInput) ([]*hackernews.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerUsers", arg0)
	ret0, _ := ret[0].([]*hackernews.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerUsers indicates an expected call of ListCustomerUsers.
func (mr *MockHackerNewsClientMockRecorder) ListCustomerUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerUsers", reflect.TypeOf((*MockHackerNewsClient)(nil).ListCustomerUsers), arg0)
}

// ListDatadog mocks base method.
func (m *MockHackerNewsClient) ListDatadog(arg0 *hackernews.ListDatadogInput) ([]*hackernews.Datadog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatadog", arg0)
	ret0, _ := ret[0].([]*hackernews.Datadog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatadog indicates an expected call of ListDatadog.
func (mr *MockHackerNewsClientMockRecorder) ListDatadog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatadog", reflect.TypeOf((*MockHackerNewsClient)(nil).ListDatadog), arg0)
}

// ListDictionaries mocks base method.
func (m *MockHackerNewsClient) ListDictionaries(arg0 *hackernews.ListDictionariesInput) ([]*hackernews.Dictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDictionaries", arg0)
	ret0, _ := ret[0].([]*hackernews.Dictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDictionaries indicates an expected call of ListDictionaries.
func (mr *MockHackerNewsClientMockRecorder) ListDictionaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDictionaries", reflect.TypeOf((*MockHackerNewsClient)(nil).ListDictionaries), arg0)
}

// ListDictionaryItems mocks base method.
func (m *MockHackerNewsClient) ListDictionaryItems(arg0 *hackernews.ListDictionaryItemsInput) ([]*hackernews.DictionaryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDictionaryItems", arg0)
	ret0, _ := ret[0].([]*hackernews.DictionaryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDictionaryItems indicates an expected call of ListDictionaryItems.
func (mr *MockHackerNewsClientMockRecorder) ListDictionaryItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDictionaryItems", reflect.TypeOf((*MockHackerNewsClient)(nil).ListDictionaryItems), arg0)
}

// ListDigitalOceans mocks base method.
func (m *MockHackerNewsClient) ListDigitalOceans(arg0 *hackernews.ListDigitalOceansInput) ([]*hackernews.DigitalOcean, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDigitalOceans", arg0)
	ret0, _ := ret[0].([]*hackernews.DigitalOcean)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDigitalOceans indicates an expected call of ListDigitalOceans.
func (mr *MockHackerNewsClientMockRecorder) ListDigitalOceans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDigitalOceans", reflect.TypeOf((*MockHackerNewsClient)(nil).ListDigitalOceans), arg0)
}

// ListDirectors mocks base method.
func (m *MockHackerNewsClient) ListDirectors(arg0 *hackernews.ListDirectorsInput) ([]*hackernews.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectors", arg0)
	ret0, _ := ret[0].([]*hackernews.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectors indicates an expected call of ListDirectors.
func (mr *MockHackerNewsClientMockRecorder) ListDirectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectors", reflect.TypeOf((*MockHackerNewsClient)(nil).ListDirectors), arg0)
}

// ListDomains mocks base method.
func (m *MockHackerNewsClient) ListDomains(arg0 *hackernews.ListDomainsInput) ([]*hackernews.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].([]*hackernews.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockHackerNewsClientMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockHackerNewsClient)(nil).ListDomains), arg0)
}

// ListERLs mocks base method.
func (m *MockHackerNewsClient) ListERLs(arg0 *hackernews.ListERLsInput) ([]*hackernews.ERL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListERLs", arg0)
	ret0, _ := ret[0].([]*hackernews.ERL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListERLs indicates an expected call of ListERLs.
func (mr *MockHackerNewsClientMockRecorder) ListERLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListERLs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListERLs), arg0)
}

// ListElasticsearch mocks base method.
func (m *MockHackerNewsClient) ListElasticsearch(arg0 *hackernews.ListElasticsearchInput) ([]*hackernews.Elasticsearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListElasticsearch", arg0)
	ret0, _ := ret[0].([]*hackernews.Elasticsearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListElasticsearch indicates an expected call of ListElasticsearch.
func (mr *MockHackerNewsClientMockRecorder) ListElasticsearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListElasticsearch", reflect.TypeOf((*MockHackerNewsClient)(nil).ListElasticsearch), arg0)
}

// ListFTPs mocks base method.
func (m *MockHackerNewsClient) ListFTPs(arg0 *hackernews.ListFTPsInput) ([]*hackernews.FTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFTPs", arg0)
	ret0, _ := ret[0].([]*hackernews.FTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFTPs indicates an expected call of ListFTPs.
func (mr *MockHackerNewsClientMockRecorder) ListFTPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFTPs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListFTPs), arg0)
}

// ListGCSs mocks base method.
func (m *MockHackerNewsClient) ListGCSs(arg0 *hackernews.ListGCSsInput) ([]*hackernews.GCS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGCSs", arg0)
	ret0, _ := ret[0].([]*hackernews.GCS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGCSs indicates an expected call of ListGCSs.
func (mr *MockHackerNewsClientMockRecorder) ListGCSs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGCSs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListGCSs), arg0)
}

// ListGzips mocks base method.
func (m *MockHackerNewsClient) ListGzips(arg0 *hackernews.ListGzipsInput) ([]*hackernews.Gzip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGzips", arg0)
	ret0, _ := ret[0].([]*hackernews.Gzip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGzips indicates an expected call of ListGzips.
func (mr *MockHackerNewsClientMockRecorder) ListGzips(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGzips", reflect.TypeOf((*MockHackerNewsClient)(nil).ListGzips), arg0)
}

// ListHTTPS mocks base method.
func (m *MockHackerNewsClient) ListHTTPS(arg0 *hackernews.ListHTTPSInput) ([]*hackernews.HTTPS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHTTPS", arg0)
	ret0, _ := ret[0].([]*hackernews.HTTPS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHTTPS indicates an expected call of ListHTTPS.
func (mr *MockHackerNewsClientMockRecorder) ListHTTPS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHTTPS", reflect.TypeOf((*MockHackerNewsClient)(nil).ListHTTPS), arg0)
}

// ListHeaders mocks base method.
func (m *MockHackerNewsClient) ListHeaders(arg0 *hackernews.ListHeadersInput) ([]*hackernews.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHeaders", arg0)
	ret0, _ := ret[0].([]*hackernews.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHeaders indicates an expected call of ListHeaders.
func (mr *MockHackerNewsClientMockRecorder) ListHeaders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHeaders", reflect.TypeOf((*MockHackerNewsClient)(nil).ListHeaders), arg0)
}

// ListHealthChecks mocks base method.
func (m *MockHackerNewsClient) ListHealthChecks(arg0 *hackernews.ListHealthChecksInput) ([]*hackernews.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHealthChecks", arg0)
	ret0, _ := ret[0].([]*hackernews.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHealthChecks indicates an expected call of ListHealthChecks.
func (mr *MockHackerNewsClientMockRecorder) ListHealthChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthChecks", reflect.TypeOf((*MockHackerNewsClient)(nil).ListHealthChecks), arg0)
}

// ListHerokus mocks base method.
func (m *MockHackerNewsClient) ListHerokus(arg0 *hackernews.ListHerokusInput) ([]*hackernews.Heroku, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHerokus", arg0)
	ret0, _ := ret[0].([]*hackernews.Heroku)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHerokus indicates an expected call of ListHerokus.
func (mr *MockHackerNewsClientMockRecorder) ListHerokus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHerokus", reflect.TypeOf((*MockHackerNewsClient)(nil).ListHerokus), arg0)
}

// ListHoneycombs mocks base method.
func (m *MockHackerNewsClient) ListHoneycombs(arg0 *hackernews.ListHoneycombsInput) ([]*hackernews.Honeycomb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoneycombs", arg0)
	ret0, _ := ret[0].([]*hackernews.Honeycomb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoneycombs indicates an expected call of ListHoneycombs.
func (mr *MockHackerNewsClientMockRecorder) ListHoneycombs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoneycombs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListHoneycombs), arg0)
}

// ListKafkas mocks base method.
func (m *MockHackerNewsClient) ListKafkas(arg0 *hackernews.ListKafkasInput) ([]*hackernews.Kafka, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKafkas", arg0)
	ret0, _ := ret[0].([]*hackernews.Kafka)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKafkas indicates an expected call of ListKafkas.
func (mr *MockHackerNewsClientMockRecorder) ListKafkas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKafkas", reflect.TypeOf((*MockHackerNewsClient)(nil).ListKafkas), arg0)
}

// ListKinesis mocks base method.
func (m *MockHackerNewsClient) ListKinesis(arg0 *hackernews.ListKinesisInput) ([]*hackernews.Kinesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKinesis", arg0)
	ret0, _ := ret[0].([]*hackernews.Kinesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKinesis indicates an expected call of ListKinesis.
func (mr *MockHackerNewsClientMockRecorder) ListKinesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKinesis", reflect.TypeOf((*MockHackerNewsClient)(nil).ListKinesis), arg0)
}

// ListLogentries mocks base method.
func (m *MockHackerNewsClient) ListLogentries(arg0 *hackernews.ListLogentriesInput) ([]*hackernews.Logentries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogentries", arg0)
	ret0, _ := ret[0].([]*hackernews.Logentries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogentries indicates an expected call of ListLogentries.
func (mr *MockHackerNewsClientMockRecorder) ListLogentries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogentries", reflect.TypeOf((*MockHackerNewsClient)(nil).ListLogentries), arg0)
}

// ListLoggly mocks base method.
func (m *MockHackerNewsClient) ListLoggly(arg0 *hackernews.ListLogglyInput) ([]*hackernews.Loggly, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggly", arg0)
	ret0, _ := ret[0].([]*hackernews.Loggly)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggly indicates an expected call of ListLoggly.
func (mr *MockHackerNewsClientMockRecorder) ListLoggly(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggly", reflect.TypeOf((*MockHackerNewsClient)(nil).ListLoggly), arg0)
}

// ListLogshuttles mocks base method.
func (m *MockHackerNewsClient) ListLogshuttles(arg0 *hackernews.ListLogshuttlesInput) ([]*hackernews.Logshuttle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogshuttles", arg0)
	ret0, _ := ret[0].([]*hackernews.Logshuttle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogshuttles indicates an expected call of ListLogshuttles.
func (mr *MockHackerNewsClientMockRecorder) ListLogshuttles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogshuttles", reflect.TypeOf((*MockHackerNewsClient)(nil).ListLogshuttles), arg0)
}

// ListNewRelic mocks base method.
func (m *MockHackerNewsClient) ListNewRelic(arg0 *hackernews.ListNewRelicInput) ([]*hackernews.NewRelic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNewRelic", arg0)
	ret0, _ := ret[0].([]*hackernews.NewRelic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNewRelic indicates an expected call of ListNewRelic.
func (mr *MockHackerNewsClientMockRecorder) ListNewRelic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNewRelic", reflect.TypeOf((*MockHackerNewsClient)(nil).ListNewRelic), arg0)
}

// ListObjectStoreKeys mocks base method.
func (m *MockHackerNewsClient) ListObjectStoreKeys(arg0 *hackernews.ListObjectStoreKeysInput) (*hackernews.ListObjectStoreKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectStoreKeys", arg0)
	ret0, _ := ret[0].(*hackernews.ListObjectStoreKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectStoreKeys indicates an expected call of ListObjectStoreKeys.
func (mr *MockHackerNewsClientMockRecorder) ListObjectStoreKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectStoreKeys", reflect.TypeOf((*MockHackerNewsClient)(nil).ListObjectStoreKeys), arg0)
}

// ListObjectStores mocks base method.
func (m *MockHackerNewsClient) ListObjectStores(arg0 *hackernews.ListObjectStoresInput) (*hackernews.ListObjectStoresResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectStores", arg0)
	ret0, _ := ret[0].(*hackernews.ListObjectStoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectStores indicates an expected call of ListObjectStores.
func (mr *MockHackerNewsClientMockRecorder) ListObjectStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectStores", reflect.TypeOf((*MockHackerNewsClient)(nil).ListObjectStores), arg0)
}

// ListOpenstack mocks base method.
func (m *MockHackerNewsClient) ListOpenstack(arg0 *hackernews.ListOpenstackInput) ([]*hackernews.Openstack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOpenstack", arg0)
	ret0, _ := ret[0].([]*hackernews.Openstack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpenstack indicates an expected call of ListOpenstack.
func (mr *MockHackerNewsClientMockRecorder) ListOpenstack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpenstack", reflect.TypeOf((*MockHackerNewsClient)(nil).ListOpenstack), arg0)
}

// ListPapertrails mocks base method.
func (m *MockHackerNewsClient) ListPapertrails(arg0 *hackernews.ListPapertrailsInput) ([]*hackernews.Papertrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPapertrails", arg0)
	ret0, _ := ret[0].([]*hackernews.Papertrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPapertrails indicates an expected call of ListPapertrails.
func (mr *MockHackerNewsClientMockRecorder) ListPapertrails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPapertrails", reflect.TypeOf((*MockHackerNewsClient)(nil).ListPapertrails), arg0)
}

// ListPools mocks base method.
func (m *MockHackerNewsClient) ListPools(arg0 *hackernews.ListPoolsInput) ([]*hackernews.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", arg0)
	ret0, _ := ret[0].([]*hackernews.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPools indicates an expected call of ListPools.
func (mr *MockHackerNewsClientMockRecorder) ListPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockHackerNewsClient)(nil).ListPools), arg0)
}

// ListPrivateKeys mocks base method.
func (m *MockHackerNewsClient) ListPrivateKeys(arg0 *hackernews.ListPrivateKeysInput) ([]*hackernews.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateKeys", arg0)
	ret0, _ := ret[0].([]*hackernews.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateKeys indicates an expected call of ListPrivateKeys.
func (mr *MockHackerNewsClientMockRecorder) ListPrivateKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateKeys", reflect.TypeOf((*MockHackerNewsClient)(nil).ListPrivateKeys), arg0)
}

// ListPubsubs mocks base method.
func (m *MockHackerNewsClient) ListPubsubs(arg0 *hackernews.ListPubsubsInput) ([]*hackernews.Pubsub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPubsubs", arg0)
	ret0, _ := ret[0].([]*hackernews.Pubsub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPubsubs indicates an expected call of ListPubsubs.
func (mr *MockHackerNewsClientMockRecorder) ListPubsubs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPubsubs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListPubsubs), arg0)
}

// ListRequestSettings mocks base method.
func (m *MockHackerNewsClient) ListRequestSettings(arg0 *hackernews.ListRequestSettingsInput) ([]*hackernews.RequestSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRequestSettings", arg0)
	ret0, _ := ret[0].([]*hackernews.RequestSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequestSettings indicates an expected call of ListRequestSettings.
func (mr *MockHackerNewsClientMockRecorder) ListRequestSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequestSettings", reflect.TypeOf((*MockHackerNewsClient)(nil).ListRequestSettings), arg0)
}

// ListResponseObjects mocks base method.
func (m *MockHackerNewsClient) ListResponseObjects(arg0 *hackernews.ListResponseObjectsInput) ([]*hackernews.ResponseObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResponseObjects", arg0)
	ret0, _ := ret[0].([]*hackernews.ResponseObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResponseObjects indicates an expected call of ListResponseObjects.
func (mr *MockHackerNewsClientMockRecorder) ListResponseObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponseObjects", reflect.TypeOf((*MockHackerNewsClient)(nil).ListResponseObjects), arg0)
}

// ListS3s mocks base method.
func (m *MockHackerNewsClient) ListS3s(arg0 *hackernews.ListS3sInput) ([]*hackernews.S3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListS3s", arg0)
	ret0, _ := ret[0].([]*hackernews.S3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListS3s indicates an expected call of ListS3s.
func (mr *MockHackerNewsClientMockRecorder) ListS3s(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListS3s", reflect.TypeOf((*MockHackerNewsClient)(nil).ListS3s), arg0)
}

// ListSFTPs mocks base method.
func (m *MockHackerNewsClient) ListSFTPs(arg0 *hackernews.ListSFTPsInput) ([]*hackernews.SFTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSFTPs", arg0)
	ret0, _ := ret[0].([]*hackernews.SFTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSFTPs indicates an expected call of ListSFTPs.
func (mr *MockHackerNewsClientMockRecorder) ListSFTPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSFTPs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSFTPs), arg0)
}

// ListScalyrs mocks base method.
func (m *MockHackerNewsClient) ListScalyrs(arg0 *hackernews.ListScalyrsInput) ([]*hackernews.Scalyr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScalyrs", arg0)
	ret0, _ := ret[0].([]*hackernews.Scalyr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScalyrs indicates an expected call of ListScalyrs.
func (mr *MockHackerNewsClientMockRecorder) ListScalyrs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScalyrs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListScalyrs), arg0)
}

// ListSecretStores mocks base method.
func (m *MockHackerNewsClient) ListSecretStores(arg0 *hackernews.ListSecretStoresInput) (*hackernews.SecretStores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretStores", arg0)
	ret0, _ := ret[0].(*hackernews.SecretStores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretStores indicates an expected call of ListSecretStores.
func (mr *MockHackerNewsClientMockRecorder) ListSecretStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretStores", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSecretStores), arg0)
}

// ListSecrets mocks base method.
func (m *MockHackerNewsClient) ListSecrets(arg0 *hackernews.ListSecretsInput) (*hackernews.Secrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0)
	ret0, _ := ret[0].(*hackernews.Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockHackerNewsClientMockRecorder) ListSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSecrets), arg0)
}

// ListServers mocks base method.
func (m *MockHackerNewsClient) ListServers(arg0 *hackernews.ListServersInput) ([]*hackernews.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", arg0)
	ret0, _ := ret[0].([]*hackernews.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockHackerNewsClientMockRecorder) ListServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockHackerNewsClient)(nil).ListServers), arg0)
}

// ListServiceAuthorizations mocks base method.
func (m *MockHackerNewsClient) ListServiceAuthorizations(arg0 *hackernews.ListServiceAuthorizationsInput) (*hackernews.ServiceAuthorizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceAuthorizations", arg0)
	ret0, _ := ret[0].(*hackernews.ServiceAuthorizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAuthorizations indicates an expected call of ListServiceAuthorizations.
func (mr *MockHackerNewsClientMockRecorder) ListServiceAuthorizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAuthorizations", reflect.TypeOf((*MockHackerNewsClient)(nil).ListServiceAuthorizations), arg0)
}

// ListServiceDomains mocks base method.
func (m *MockHackerNewsClient) ListServiceDomains(arg0 *hackernews.ListServiceDomainInput) (hackernews.ServiceDomainsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceDomains", arg0)
	ret0, _ := ret[0].(hackernews.ServiceDomainsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceDomains indicates an expected call of ListServiceDomains.
func (mr *MockHackerNewsClientMockRecorder) ListServiceDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceDomains", reflect.TypeOf((*MockHackerNewsClient)(nil).ListServiceDomains), arg0)
}

// ListServices mocks base method.
func (m *MockHackerNewsClient) ListServices(arg0 *hackernews.ListServicesInput) ([]*hackernews.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].([]*hackernews.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockHackerNewsClientMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockHackerNewsClient)(nil).ListServices), arg0)
}

// ListSnippets mocks base method.
func (m *MockHackerNewsClient) ListSnippets(arg0 *hackernews.ListSnippetsInput) ([]*hackernews.Snippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnippets", arg0)
	ret0, _ := ret[0].([]*hackernews.Snippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnippets indicates an expected call of ListSnippets.
func (mr *MockHackerNewsClientMockRecorder) ListSnippets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnippets", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSnippets), arg0)
}

// ListSplunks mocks base method.
func (m *MockHackerNewsClient) ListSplunks(arg0 *hackernews.ListSplunksInput) ([]*hackernews.Splunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSplunks", arg0)
	ret0, _ := ret[0].([]*hackernews.Splunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSplunks indicates an expected call of ListSplunks.
func (mr *MockHackerNewsClientMockRecorder) ListSplunks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSplunks", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSplunks), arg0)
}

// ListSumologics mocks base method.
func (m *MockHackerNewsClient) ListSumologics(arg0 *hackernews.ListSumologicsInput) ([]*hackernews.Sumologic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSumologics", arg0)
	ret0, _ := ret[0].([]*hackernews.Sumologic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSumologics indicates an expected call of ListSumologics.
func (mr *MockHackerNewsClientMockRecorder) ListSumologics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSumologics", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSumologics), arg0)
}

// ListSyslogs mocks base method.
func (m *MockHackerNewsClient) ListSyslogs(arg0 *hackernews.ListSyslogsInput) ([]*hackernews.Syslog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyslogs", arg0)
	ret0, _ := ret[0].([]*hackernews.Syslog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyslogs indicates an expected call of ListSyslogs.
func (mr *MockHackerNewsClientMockRecorder) ListSyslogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyslogs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListSyslogs), arg0)
}

// ListTLSActivations mocks base method.
func (m *MockHackerNewsClient) ListTLSActivations(arg0 *hackernews.ListTLSActivationsInput) ([]*hackernews.TLSActivation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTLSActivations", arg0)
	ret0, _ := ret[0].([]*hackernews.TLSActivation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTLSActivations indicates an expected call of ListTLSActivations.
func (mr *MockHackerNewsClientMockRecorder) ListTLSActivations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTLSActivations", reflect.TypeOf((*MockHackerNewsClient)(nil).ListTLSActivations), arg0)
}

// ListTLSDomains mocks base method.
func (m *MockHackerNewsClient) ListTLSDomains(arg0 *hackernews.ListTLSDomainsInput) ([]*hackernews.TLSDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTLSDomains", arg0)
	ret0, _ := ret[0].([]*hackernews.TLSDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTLSDomains indicates an expected call of ListTLSDomains.
func (mr *MockHackerNewsClientMockRecorder) ListTLSDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTLSDomains", reflect.TypeOf((*MockHackerNewsClient)(nil).ListTLSDomains), arg0)
}

// ListTLSSubscriptions mocks base method.
func (m *MockHackerNewsClient) ListTLSSubscriptions(arg0 *hackernews.ListTLSSubscriptionsInput) ([]*hackernews.TLSSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTLSSubscriptions", arg0)
	ret0, _ := ret[0].([]*hackernews.TLSSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTLSSubscriptions indicates an expected call of ListTLSSubscriptions.
func (mr *MockHackerNewsClientMockRecorder) ListTLSSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTLSSubscriptions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListTLSSubscriptions), arg0)
}

// ListTokens mocks base method.
func (m *MockHackerNewsClient) ListTokens() ([]*hackernews.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens")
	ret0, _ := ret[0].([]*hackernews.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockHackerNewsClientMockRecorder) ListTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockHackerNewsClient)(nil).ListTokens))
}

// ListVCLs mocks base method.
func (m *MockHackerNewsClient) ListVCLs(arg0 *hackernews.ListVCLsInput) ([]*hackernews.VCL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVCLs", arg0)
	ret0, _ := ret[0].([]*hackernews.VCL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVCLs indicates an expected call of ListVCLs.
func (mr *MockHackerNewsClientMockRecorder) ListVCLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVCLs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListVCLs), arg0)
}

// ListVersions mocks base method.
func (m *MockHackerNewsClient) ListVersions(arg0 *hackernews.ListVersionsInput) ([]*hackernews.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", arg0)
	ret0, _ := ret[0].([]*hackernews.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockHackerNewsClientMockRecorder) ListVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListVersions), arg0)
}

// ListWAFActiveRules mocks base method.
func (m *MockHackerNewsClient) ListWAFActiveRules(arg0 *hackernews.ListWAFActiveRulesInput) (*hackernews.WAFActiveRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWAFActiveRules", arg0)
	ret0, _ := ret[0].(*hackernews.WAFActiveRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFActiveRules indicates an expected call of ListWAFActiveRules.
func (mr *MockHackerNewsClientMockRecorder) ListWAFActiveRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFActiveRules", reflect.TypeOf((*MockHackerNewsClient)(nil).ListWAFActiveRules), arg0)
}

// ListWAFRuleExclusions mocks base method.
func (m *MockHackerNewsClient) ListWAFRuleExclusions(arg0 *hackernews.ListWAFRuleExclusionsInput) (*hackernews.WAFRuleExclusionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWAFRuleExclusions", arg0)
	ret0, _ := ret[0].(*hackernews.WAFRuleExclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFRuleExclusions indicates an expected call of ListWAFRuleExclusions.
func (mr *MockHackerNewsClientMockRecorder) ListWAFRuleExclusions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFRuleExclusions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListWAFRuleExclusions), arg0)
}

// ListWAFRules mocks base method.
func (m *MockHackerNewsClient) ListWAFRules(arg0 *hackernews.ListWAFRulesInput) (*hackernews.WAFRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWAFRules", arg0)
	ret0, _ := ret[0].(*hackernews.WAFRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFRules indicates an expected call of ListWAFRules.
func (mr *MockHackerNewsClientMockRecorder) ListWAFRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFRules", reflect.TypeOf((*MockHackerNewsClient)(nil).ListWAFRules), arg0)
}

// ListWAFVersions mocks base method.
func (m *MockHackerNewsClient) ListWAFVersions(arg0 *hackernews.ListWAFVersionsInput) (*hackernews.WAFVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWAFVersions", arg0)
	ret0, _ := ret[0].(*hackernews.WAFVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFVersions indicates an expected call of ListWAFVersions.
func (mr *MockHackerNewsClientMockRecorder) ListWAFVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFVersions", reflect.TypeOf((*MockHackerNewsClient)(nil).ListWAFVersions), arg0)
}

// ListWAFs mocks base method.
func (m *MockHackerNewsClient) ListWAFs(arg0 *hackernews.ListWAFsInput) (*hackernews.WAFResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWAFs", arg0)
	ret0, _ := ret[0].(*hackernews.WAFResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWAFs indicates an expected call of ListWAFs.
func (mr *MockHackerNewsClientMockRecorder) ListWAFs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWAFs", reflect.TypeOf((*MockHackerNewsClient)(nil).ListWAFs), arg0)
}

// NewListACLEntriesPaginator mocks base method.
func (m *MockHackerNewsClient) NewListACLEntriesPaginator(arg0 *hackernews.ListACLEntriesInput) hackernews.PaginatorACLEntries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListACLEntriesPaginator", arg0)
	ret0, _ := ret[0].(hackernews.PaginatorACLEntries)
	return ret0
}

// NewListACLEntriesPaginator indicates an expected call of NewListACLEntriesPaginator.
func (mr *MockHackerNewsClientMockRecorder) NewListACLEntriesPaginator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListACLEntriesPaginator", reflect.TypeOf((*MockHackerNewsClient)(nil).NewListACLEntriesPaginator), arg0)
}

// NewListDictionaryItemsPaginator mocks base method.
func (m *MockHackerNewsClient) NewListDictionaryItemsPaginator(arg0 *hackernews.ListDictionaryItemsInput) hackernews.PaginatorDictionaryItems {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDictionaryItemsPaginator", arg0)
	ret0, _ := ret[0].(hackernews.PaginatorDictionaryItems)
	return ret0
}

// NewListDictionaryItemsPaginator indicates an expected call of NewListDictionaryItemsPaginator.
func (mr *MockHackerNewsClientMockRecorder) NewListDictionaryItemsPaginator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDictionaryItemsPaginator", reflect.TypeOf((*MockHackerNewsClient)(nil).NewListDictionaryItemsPaginator), arg0)
}

// NewListObjectStoreKeysPaginator mocks base method.
func (m *MockHackerNewsClient) NewListObjectStoreKeysPaginator(arg0 *hackernews.ListObjectStoreKeysInput) *hackernews.ListObjectStoreKeysPaginator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListObjectStoreKeysPaginator", arg0)
	ret0, _ := ret[0].(*hackernews.ListObjectStoreKeysPaginator)
	return ret0
}

// NewListObjectStoreKeysPaginator indicates an expected call of NewListObjectStoreKeysPaginator.
func (mr *MockHackerNewsClientMockRecorder) NewListObjectStoreKeysPaginator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListObjectStoreKeysPaginator", reflect.TypeOf((*MockHackerNewsClient)(nil).NewListObjectStoreKeysPaginator), arg0)
}

// NewListObjectStoresPaginator mocks base method.
func (m *MockHackerNewsClient) NewListObjectStoresPaginator(arg0 *hackernews.ListObjectStoresInput) *hackernews.ListObjectStoresPaginator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListObjectStoresPaginator", arg0)
	ret0, _ := ret[0].(*hackernews.ListObjectStoresPaginator)
	return ret0
}

// NewListObjectStoresPaginator indicates an expected call of NewListObjectStoresPaginator.
func (mr *MockHackerNewsClientMockRecorder) NewListObjectStoresPaginator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListObjectStoresPaginator", reflect.TypeOf((*MockHackerNewsClient)(nil).NewListObjectStoresPaginator), arg0)
}

// NewListServicesPaginator mocks base method.
func (m *MockHackerNewsClient) NewListServicesPaginator(arg0 *hackernews.ListServicesInput) hackernews.PaginatorServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListServicesPaginator", arg0)
	ret0, _ := ret[0].(hackernews.PaginatorServices)
	return ret0
}

// NewListServicesPaginator indicates an expected call of NewListServicesPaginator.
func (mr *MockHackerNewsClientMockRecorder) NewListServicesPaginator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListServicesPaginator", reflect.TypeOf((*MockHackerNewsClient)(nil).NewListServicesPaginator), arg0)
}
