// Code generated by MockGen. DO NOT EDIT.
// Source: babacloudsdkgo_services_bssopenapi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bssopenapi "github.com/aliyun/alibaba-cloud-sdk-go/services/bssopenapi"
	gomock "github.com/golang/mock/gomock"
)

// MockBssopenapiClient is a mock of BssopenapiClient interface.
type MockBssopenapiClient struct {
	ctrl     *gomock.Controller
	recorder *MockBssopenapiClientMockRecorder
}

// MockBssopenapiClientMockRecorder is the mock recorder for MockBssopenapiClient.
type MockBssopenapiClientMockRecorder struct {
	mock *MockBssopenapiClient
}

// NewMockBssopenapiClient creates a new mock instance.
func NewMockBssopenapiClient(ctrl *gomock.Controller) *MockBssopenapiClient {
	mock := &MockBssopenapiClient{ctrl: ctrl}
	mock.recorder = &MockBssopenapiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBssopenapiClient) EXPECT() *MockBssopenapiClientMockRecorder {
	return m.recorder
}

// DescribeCostBudgetsSummary mocks base method.
func (m *MockBssopenapiClient) DescribeCostBudgetsSummary(arg0 *bssopenapi.DescribeCostBudgetsSummaryRequest) (*bssopenapi.DescribeCostBudgetsSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCostBudgetsSummary", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeCostBudgetsSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCostBudgetsSummary indicates an expected call of DescribeCostBudgetsSummary.
func (mr *MockBssopenapiClientMockRecorder) DescribeCostBudgetsSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCostBudgetsSummary", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeCostBudgetsSummary), arg0)
}

// DescribeCostBudgetsSummaryWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeCostBudgetsSummaryWithCallback(arg0 *bssopenapi.DescribeCostBudgetsSummaryRequest, arg1 func(*bssopenapi.DescribeCostBudgetsSummaryResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCostBudgetsSummaryWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeCostBudgetsSummaryWithCallback indicates an expected call of DescribeCostBudgetsSummaryWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeCostBudgetsSummaryWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCostBudgetsSummaryWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeCostBudgetsSummaryWithCallback), arg0, arg1)
}

// DescribeCostBudgetsSummaryWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeCostBudgetsSummaryWithChan(arg0 *bssopenapi.DescribeCostBudgetsSummaryRequest) (<-chan *bssopenapi.DescribeCostBudgetsSummaryResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCostBudgetsSummaryWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeCostBudgetsSummaryResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeCostBudgetsSummaryWithChan indicates an expected call of DescribeCostBudgetsSummaryWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeCostBudgetsSummaryWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCostBudgetsSummaryWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeCostBudgetsSummaryWithChan), arg0)
}

// DescribeInstanceAmortizedCostByAmortizationPeriod mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceAmortizedCostByAmortizationPeriod(arg0 *bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodRequest) (*bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAmortizedCostByAmortizationPeriod", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAmortizedCostByAmortizationPeriod indicates an expected call of DescribeInstanceAmortizedCostByAmortizationPeriod.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceAmortizedCostByAmortizationPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAmortizedCostByAmortizationPeriod", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceAmortizedCostByAmortizationPeriod), arg0)
}

// DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback(arg0 *bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodRequest, arg1 func(*bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback indicates an expected call of DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceAmortizedCostByAmortizationPeriodWithCallback), arg0, arg1)
}

// DescribeInstanceAmortizedCostByAmortizationPeriodWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceAmortizedCostByAmortizationPeriodWithChan(arg0 *bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodRequest) (<-chan *bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAmortizedCostByAmortizationPeriodWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeInstanceAmortizedCostByAmortizationPeriodResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeInstanceAmortizedCostByAmortizationPeriodWithChan indicates an expected call of DescribeInstanceAmortizedCostByAmortizationPeriodWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceAmortizedCostByAmortizationPeriodWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAmortizedCostByAmortizationPeriodWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceAmortizedCostByAmortizationPeriodWithChan), arg0)
}

// DescribeInstanceAmortizedCostByConsumePeriod mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceAmortizedCostByConsumePeriod(arg0 *bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodRequest) (*bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAmortizedCostByConsumePeriod", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAmortizedCostByConsumePeriod indicates an expected call of DescribeInstanceAmortizedCostByConsumePeriod.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceAmortizedCostByConsumePeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAmortizedCostByConsumePeriod", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceAmortizedCostByConsumePeriod), arg0)
}

// DescribeInstanceAmortizedCostByConsumePeriodWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceAmortizedCostByConsumePeriodWithCallback(arg0 *bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodRequest, arg1 func(*bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAmortizedCostByConsumePeriodWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeInstanceAmortizedCostByConsumePeriodWithCallback indicates an expected call of DescribeInstanceAmortizedCostByConsumePeriodWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceAmortizedCostByConsumePeriodWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAmortizedCostByConsumePeriodWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceAmortizedCostByConsumePeriodWithCallback), arg0, arg1)
}

// DescribeInstanceAmortizedCostByConsumePeriodWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceAmortizedCostByConsumePeriodWithChan(arg0 *bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodRequest) (<-chan *bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAmortizedCostByConsumePeriodWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeInstanceAmortizedCostByConsumePeriodResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeInstanceAmortizedCostByConsumePeriodWithChan indicates an expected call of DescribeInstanceAmortizedCostByConsumePeriodWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceAmortizedCostByConsumePeriodWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAmortizedCostByConsumePeriodWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceAmortizedCostByConsumePeriodWithChan), arg0)
}

// DescribeInstanceBill mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceBill(arg0 *bssopenapi.DescribeInstanceBillRequest) (*bssopenapi.DescribeInstanceBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeInstanceBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceBill indicates an expected call of DescribeInstanceBill.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceBill", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceBill), arg0)
}

// DescribeInstanceBillWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceBillWithCallback(arg0 *bssopenapi.DescribeInstanceBillRequest, arg1 func(*bssopenapi.DescribeInstanceBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeInstanceBillWithCallback indicates an expected call of DescribeInstanceBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceBillWithCallback), arg0, arg1)
}

// DescribeInstanceBillWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeInstanceBillWithChan(arg0 *bssopenapi.DescribeInstanceBillRequest) (<-chan *bssopenapi.DescribeInstanceBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeInstanceBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeInstanceBillWithChan indicates an expected call of DescribeInstanceBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeInstanceBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeInstanceBillWithChan), arg0)
}

// DescribePricingModule mocks base method.
func (m *MockBssopenapiClient) DescribePricingModule(arg0 *bssopenapi.DescribePricingModuleRequest) (*bssopenapi.DescribePricingModuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePricingModule", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribePricingModuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePricingModule indicates an expected call of DescribePricingModule.
func (mr *MockBssopenapiClientMockRecorder) DescribePricingModule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePricingModule", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribePricingModule), arg0)
}

// DescribePricingModuleWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribePricingModuleWithCallback(arg0 *bssopenapi.DescribePricingModuleRequest, arg1 func(*bssopenapi.DescribePricingModuleResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePricingModuleWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribePricingModuleWithCallback indicates an expected call of DescribePricingModuleWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribePricingModuleWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePricingModuleWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribePricingModuleWithCallback), arg0, arg1)
}

// DescribePricingModuleWithChan mocks base method.
func (m *MockBssopenapiClient) DescribePricingModuleWithChan(arg0 *bssopenapi.DescribePricingModuleRequest) (<-chan *bssopenapi.DescribePricingModuleResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePricingModuleWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribePricingModuleResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribePricingModuleWithChan indicates an expected call of DescribePricingModuleWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribePricingModuleWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePricingModuleWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribePricingModuleWithChan), arg0)
}

// DescribeProductAmortizedCostByAmortizationPeriod mocks base method.
func (m *MockBssopenapiClient) DescribeProductAmortizedCostByAmortizationPeriod(arg0 *bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodRequest) (*bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAmortizedCostByAmortizationPeriod", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductAmortizedCostByAmortizationPeriod indicates an expected call of DescribeProductAmortizedCostByAmortizationPeriod.
func (mr *MockBssopenapiClientMockRecorder) DescribeProductAmortizedCostByAmortizationPeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAmortizedCostByAmortizationPeriod", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeProductAmortizedCostByAmortizationPeriod), arg0)
}

// DescribeProductAmortizedCostByAmortizationPeriodWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeProductAmortizedCostByAmortizationPeriodWithCallback(arg0 *bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodRequest, arg1 func(*bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAmortizedCostByAmortizationPeriodWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeProductAmortizedCostByAmortizationPeriodWithCallback indicates an expected call of DescribeProductAmortizedCostByAmortizationPeriodWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeProductAmortizedCostByAmortizationPeriodWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAmortizedCostByAmortizationPeriodWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeProductAmortizedCostByAmortizationPeriodWithCallback), arg0, arg1)
}

// DescribeProductAmortizedCostByAmortizationPeriodWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeProductAmortizedCostByAmortizationPeriodWithChan(arg0 *bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodRequest) (<-chan *bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAmortizedCostByAmortizationPeriodWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeProductAmortizedCostByAmortizationPeriodResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeProductAmortizedCostByAmortizationPeriodWithChan indicates an expected call of DescribeProductAmortizedCostByAmortizationPeriodWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeProductAmortizedCostByAmortizationPeriodWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAmortizedCostByAmortizationPeriodWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeProductAmortizedCostByAmortizationPeriodWithChan), arg0)
}

// DescribeProductAmortizedCostByConsumePeriod mocks base method.
func (m *MockBssopenapiClient) DescribeProductAmortizedCostByConsumePeriod(arg0 *bssopenapi.DescribeProductAmortizedCostByConsumePeriodRequest) (*bssopenapi.DescribeProductAmortizedCostByConsumePeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAmortizedCostByConsumePeriod", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeProductAmortizedCostByConsumePeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductAmortizedCostByConsumePeriod indicates an expected call of DescribeProductAmortizedCostByConsumePeriod.
func (mr *MockBssopenapiClientMockRecorder) DescribeProductAmortizedCostByConsumePeriod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAmortizedCostByConsumePeriod", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeProductAmortizedCostByConsumePeriod), arg0)
}

// DescribeProductAmortizedCostByConsumePeriodWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeProductAmortizedCostByConsumePeriodWithCallback(arg0 *bssopenapi.DescribeProductAmortizedCostByConsumePeriodRequest, arg1 func(*bssopenapi.DescribeProductAmortizedCostByConsumePeriodResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAmortizedCostByConsumePeriodWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeProductAmortizedCostByConsumePeriodWithCallback indicates an expected call of DescribeProductAmortizedCostByConsumePeriodWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeProductAmortizedCostByConsumePeriodWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAmortizedCostByConsumePeriodWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeProductAmortizedCostByConsumePeriodWithCallback), arg0, arg1)
}

// DescribeProductAmortizedCostByConsumePeriodWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeProductAmortizedCostByConsumePeriodWithChan(arg0 *bssopenapi.DescribeProductAmortizedCostByConsumePeriodRequest) (<-chan *bssopenapi.DescribeProductAmortizedCostByConsumePeriodResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProductAmortizedCostByConsumePeriodWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeProductAmortizedCostByConsumePeriodResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeProductAmortizedCostByConsumePeriodWithChan indicates an expected call of DescribeProductAmortizedCostByConsumePeriodWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeProductAmortizedCostByConsumePeriodWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAmortizedCostByConsumePeriodWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeProductAmortizedCostByConsumePeriodWithChan), arg0)
}

// DescribeResourceCoverageDetail mocks base method.
func (m *MockBssopenapiClient) DescribeResourceCoverageDetail(arg0 *bssopenapi.DescribeResourceCoverageDetailRequest) (*bssopenapi.DescribeResourceCoverageDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceCoverageDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeResourceCoverageDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceCoverageDetail indicates an expected call of DescribeResourceCoverageDetail.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceCoverageDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceCoverageDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceCoverageDetail), arg0)
}

// DescribeResourceCoverageDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeResourceCoverageDetailWithCallback(arg0 *bssopenapi.DescribeResourceCoverageDetailRequest, arg1 func(*bssopenapi.DescribeResourceCoverageDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceCoverageDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeResourceCoverageDetailWithCallback indicates an expected call of DescribeResourceCoverageDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceCoverageDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceCoverageDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceCoverageDetailWithCallback), arg0, arg1)
}

// DescribeResourceCoverageDetailWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeResourceCoverageDetailWithChan(arg0 *bssopenapi.DescribeResourceCoverageDetailRequest) (<-chan *bssopenapi.DescribeResourceCoverageDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceCoverageDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeResourceCoverageDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeResourceCoverageDetailWithChan indicates an expected call of DescribeResourceCoverageDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceCoverageDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceCoverageDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceCoverageDetailWithChan), arg0)
}

// DescribeResourceCoverageTotal mocks base method.
func (m *MockBssopenapiClient) DescribeResourceCoverageTotal(arg0 *bssopenapi.DescribeResourceCoverageTotalRequest) (*bssopenapi.DescribeResourceCoverageTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceCoverageTotal", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeResourceCoverageTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceCoverageTotal indicates an expected call of DescribeResourceCoverageTotal.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceCoverageTotal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceCoverageTotal", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceCoverageTotal), arg0)
}

// DescribeResourceCoverageTotalWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeResourceCoverageTotalWithCallback(arg0 *bssopenapi.DescribeResourceCoverageTotalRequest, arg1 func(*bssopenapi.DescribeResourceCoverageTotalResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceCoverageTotalWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeResourceCoverageTotalWithCallback indicates an expected call of DescribeResourceCoverageTotalWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceCoverageTotalWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceCoverageTotalWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceCoverageTotalWithCallback), arg0, arg1)
}

// DescribeResourceCoverageTotalWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeResourceCoverageTotalWithChan(arg0 *bssopenapi.DescribeResourceCoverageTotalRequest) (<-chan *bssopenapi.DescribeResourceCoverageTotalResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceCoverageTotalWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeResourceCoverageTotalResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeResourceCoverageTotalWithChan indicates an expected call of DescribeResourceCoverageTotalWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceCoverageTotalWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceCoverageTotalWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceCoverageTotalWithChan), arg0)
}

// DescribeResourcePackageProduct mocks base method.
func (m *MockBssopenapiClient) DescribeResourcePackageProduct(arg0 *bssopenapi.DescribeResourcePackageProductRequest) (*bssopenapi.DescribeResourcePackageProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourcePackageProduct", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeResourcePackageProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourcePackageProduct indicates an expected call of DescribeResourcePackageProduct.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourcePackageProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePackageProduct", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourcePackageProduct), arg0)
}

// DescribeResourcePackageProductWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeResourcePackageProductWithCallback(arg0 *bssopenapi.DescribeResourcePackageProductRequest, arg1 func(*bssopenapi.DescribeResourcePackageProductResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourcePackageProductWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeResourcePackageProductWithCallback indicates an expected call of DescribeResourcePackageProductWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourcePackageProductWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePackageProductWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourcePackageProductWithCallback), arg0, arg1)
}

// DescribeResourcePackageProductWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeResourcePackageProductWithChan(arg0 *bssopenapi.DescribeResourcePackageProductRequest) (<-chan *bssopenapi.DescribeResourcePackageProductResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourcePackageProductWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeResourcePackageProductResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeResourcePackageProductWithChan indicates an expected call of DescribeResourcePackageProductWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourcePackageProductWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePackageProductWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourcePackageProductWithChan), arg0)
}

// DescribeResourceUsageDetail mocks base method.
func (m *MockBssopenapiClient) DescribeResourceUsageDetail(arg0 *bssopenapi.DescribeResourceUsageDetailRequest) (*bssopenapi.DescribeResourceUsageDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceUsageDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeResourceUsageDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceUsageDetail indicates an expected call of DescribeResourceUsageDetail.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceUsageDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceUsageDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceUsageDetail), arg0)
}

// DescribeResourceUsageDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeResourceUsageDetailWithCallback(arg0 *bssopenapi.DescribeResourceUsageDetailRequest, arg1 func(*bssopenapi.DescribeResourceUsageDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceUsageDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeResourceUsageDetailWithCallback indicates an expected call of DescribeResourceUsageDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceUsageDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceUsageDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceUsageDetailWithCallback), arg0, arg1)
}

// DescribeResourceUsageDetailWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeResourceUsageDetailWithChan(arg0 *bssopenapi.DescribeResourceUsageDetailRequest) (<-chan *bssopenapi.DescribeResourceUsageDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceUsageDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeResourceUsageDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeResourceUsageDetailWithChan indicates an expected call of DescribeResourceUsageDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceUsageDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceUsageDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceUsageDetailWithChan), arg0)
}

// DescribeResourceUsageTotal mocks base method.
func (m *MockBssopenapiClient) DescribeResourceUsageTotal(arg0 *bssopenapi.DescribeResourceUsageTotalRequest) (*bssopenapi.DescribeResourceUsageTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceUsageTotal", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeResourceUsageTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceUsageTotal indicates an expected call of DescribeResourceUsageTotal.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceUsageTotal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceUsageTotal", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceUsageTotal), arg0)
}

// DescribeResourceUsageTotalWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeResourceUsageTotalWithCallback(arg0 *bssopenapi.DescribeResourceUsageTotalRequest, arg1 func(*bssopenapi.DescribeResourceUsageTotalResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceUsageTotalWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeResourceUsageTotalWithCallback indicates an expected call of DescribeResourceUsageTotalWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceUsageTotalWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceUsageTotalWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceUsageTotalWithCallback), arg0, arg1)
}

// DescribeResourceUsageTotalWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeResourceUsageTotalWithChan(arg0 *bssopenapi.DescribeResourceUsageTotalRequest) (<-chan *bssopenapi.DescribeResourceUsageTotalResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceUsageTotalWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeResourceUsageTotalResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeResourceUsageTotalWithChan indicates an expected call of DescribeResourceUsageTotalWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeResourceUsageTotalWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceUsageTotalWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeResourceUsageTotalWithChan), arg0)
}

// DescribeSavingsPlansCoverageDetail mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansCoverageDetail(arg0 *bssopenapi.DescribeSavingsPlansCoverageDetailRequest) (*bssopenapi.DescribeSavingsPlansCoverageDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansCoverageDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeSavingsPlansCoverageDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlansCoverageDetail indicates an expected call of DescribeSavingsPlansCoverageDetail.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansCoverageDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansCoverageDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansCoverageDetail), arg0)
}

// DescribeSavingsPlansCoverageDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansCoverageDetailWithCallback(arg0 *bssopenapi.DescribeSavingsPlansCoverageDetailRequest, arg1 func(*bssopenapi.DescribeSavingsPlansCoverageDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansCoverageDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeSavingsPlansCoverageDetailWithCallback indicates an expected call of DescribeSavingsPlansCoverageDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansCoverageDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansCoverageDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansCoverageDetailWithCallback), arg0, arg1)
}

// DescribeSavingsPlansCoverageDetailWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansCoverageDetailWithChan(arg0 *bssopenapi.DescribeSavingsPlansCoverageDetailRequest) (<-chan *bssopenapi.DescribeSavingsPlansCoverageDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansCoverageDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeSavingsPlansCoverageDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeSavingsPlansCoverageDetailWithChan indicates an expected call of DescribeSavingsPlansCoverageDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansCoverageDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansCoverageDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansCoverageDetailWithChan), arg0)
}

// DescribeSavingsPlansCoverageTotal mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansCoverageTotal(arg0 *bssopenapi.DescribeSavingsPlansCoverageTotalRequest) (*bssopenapi.DescribeSavingsPlansCoverageTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansCoverageTotal", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeSavingsPlansCoverageTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlansCoverageTotal indicates an expected call of DescribeSavingsPlansCoverageTotal.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansCoverageTotal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansCoverageTotal", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansCoverageTotal), arg0)
}

// DescribeSavingsPlansCoverageTotalWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansCoverageTotalWithCallback(arg0 *bssopenapi.DescribeSavingsPlansCoverageTotalRequest, arg1 func(*bssopenapi.DescribeSavingsPlansCoverageTotalResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansCoverageTotalWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeSavingsPlansCoverageTotalWithCallback indicates an expected call of DescribeSavingsPlansCoverageTotalWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansCoverageTotalWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansCoverageTotalWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansCoverageTotalWithCallback), arg0, arg1)
}

// DescribeSavingsPlansCoverageTotalWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansCoverageTotalWithChan(arg0 *bssopenapi.DescribeSavingsPlansCoverageTotalRequest) (<-chan *bssopenapi.DescribeSavingsPlansCoverageTotalResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansCoverageTotalWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeSavingsPlansCoverageTotalResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeSavingsPlansCoverageTotalWithChan indicates an expected call of DescribeSavingsPlansCoverageTotalWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansCoverageTotalWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansCoverageTotalWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansCoverageTotalWithChan), arg0)
}

// DescribeSavingsPlansUsageDetail mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansUsageDetail(arg0 *bssopenapi.DescribeSavingsPlansUsageDetailRequest) (*bssopenapi.DescribeSavingsPlansUsageDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansUsageDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeSavingsPlansUsageDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlansUsageDetail indicates an expected call of DescribeSavingsPlansUsageDetail.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansUsageDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansUsageDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansUsageDetail), arg0)
}

// DescribeSavingsPlansUsageDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansUsageDetailWithCallback(arg0 *bssopenapi.DescribeSavingsPlansUsageDetailRequest, arg1 func(*bssopenapi.DescribeSavingsPlansUsageDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansUsageDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeSavingsPlansUsageDetailWithCallback indicates an expected call of DescribeSavingsPlansUsageDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansUsageDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansUsageDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansUsageDetailWithCallback), arg0, arg1)
}

// DescribeSavingsPlansUsageDetailWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansUsageDetailWithChan(arg0 *bssopenapi.DescribeSavingsPlansUsageDetailRequest) (<-chan *bssopenapi.DescribeSavingsPlansUsageDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansUsageDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeSavingsPlansUsageDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeSavingsPlansUsageDetailWithChan indicates an expected call of DescribeSavingsPlansUsageDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansUsageDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansUsageDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansUsageDetailWithChan), arg0)
}

// DescribeSavingsPlansUsageTotal mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansUsageTotal(arg0 *bssopenapi.DescribeSavingsPlansUsageTotalRequest) (*bssopenapi.DescribeSavingsPlansUsageTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansUsageTotal", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeSavingsPlansUsageTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlansUsageTotal indicates an expected call of DescribeSavingsPlansUsageTotal.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansUsageTotal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansUsageTotal", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansUsageTotal), arg0)
}

// DescribeSavingsPlansUsageTotalWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansUsageTotalWithCallback(arg0 *bssopenapi.DescribeSavingsPlansUsageTotalRequest, arg1 func(*bssopenapi.DescribeSavingsPlansUsageTotalResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansUsageTotalWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeSavingsPlansUsageTotalWithCallback indicates an expected call of DescribeSavingsPlansUsageTotalWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansUsageTotalWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansUsageTotalWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansUsageTotalWithCallback), arg0, arg1)
}

// DescribeSavingsPlansUsageTotalWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeSavingsPlansUsageTotalWithChan(arg0 *bssopenapi.DescribeSavingsPlansUsageTotalRequest) (<-chan *bssopenapi.DescribeSavingsPlansUsageTotalResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSavingsPlansUsageTotalWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeSavingsPlansUsageTotalResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeSavingsPlansUsageTotalWithChan indicates an expected call of DescribeSavingsPlansUsageTotalWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeSavingsPlansUsageTotalWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansUsageTotalWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSavingsPlansUsageTotalWithChan), arg0)
}

// DescribeSplitItemBill mocks base method.
func (m *MockBssopenapiClient) DescribeSplitItemBill(arg0 *bssopenapi.DescribeSplitItemBillRequest) (*bssopenapi.DescribeSplitItemBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSplitItemBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.DescribeSplitItemBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSplitItemBill indicates an expected call of DescribeSplitItemBill.
func (mr *MockBssopenapiClientMockRecorder) DescribeSplitItemBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSplitItemBill", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSplitItemBill), arg0)
}

// DescribeSplitItemBillWithCallback mocks base method.
func (m *MockBssopenapiClient) DescribeSplitItemBillWithCallback(arg0 *bssopenapi.DescribeSplitItemBillRequest, arg1 func(*bssopenapi.DescribeSplitItemBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSplitItemBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// DescribeSplitItemBillWithCallback indicates an expected call of DescribeSplitItemBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) DescribeSplitItemBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSplitItemBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSplitItemBillWithCallback), arg0, arg1)
}

// DescribeSplitItemBillWithChan mocks base method.
func (m *MockBssopenapiClient) DescribeSplitItemBillWithChan(arg0 *bssopenapi.DescribeSplitItemBillRequest) (<-chan *bssopenapi.DescribeSplitItemBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSplitItemBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.DescribeSplitItemBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DescribeSplitItemBillWithChan indicates an expected call of DescribeSplitItemBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) DescribeSplitItemBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSplitItemBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).DescribeSplitItemBillWithChan), arg0)
}

// GetAccountRelation mocks base method.
func (m *MockBssopenapiClient) GetAccountRelation(arg0 *bssopenapi.GetAccountRelationRequest) (*bssopenapi.GetAccountRelationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRelation", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetAccountRelationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountRelation indicates an expected call of GetAccountRelation.
func (mr *MockBssopenapiClientMockRecorder) GetAccountRelation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRelation", reflect.TypeOf((*MockBssopenapiClient)(nil).GetAccountRelation), arg0)
}

// GetAccountRelationWithCallback mocks base method.
func (m *MockBssopenapiClient) GetAccountRelationWithCallback(arg0 *bssopenapi.GetAccountRelationRequest, arg1 func(*bssopenapi.GetAccountRelationResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRelationWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetAccountRelationWithCallback indicates an expected call of GetAccountRelationWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetAccountRelationWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRelationWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetAccountRelationWithCallback), arg0, arg1)
}

// GetAccountRelationWithChan mocks base method.
func (m *MockBssopenapiClient) GetAccountRelationWithChan(arg0 *bssopenapi.GetAccountRelationRequest) (<-chan *bssopenapi.GetAccountRelationResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRelationWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetAccountRelationResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetAccountRelationWithChan indicates an expected call of GetAccountRelationWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetAccountRelationWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRelationWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetAccountRelationWithChan), arg0)
}

// GetCloseTrace mocks base method.
func (m *MockBssopenapiClient) GetCloseTrace() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloseTrace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetCloseTrace indicates an expected call of GetCloseTrace.
func (mr *MockBssopenapiClientMockRecorder) GetCloseTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloseTrace", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCloseTrace))
}

// GetCustomerAccountInfo mocks base method.
func (m *MockBssopenapiClient) GetCustomerAccountInfo(arg0 *bssopenapi.GetCustomerAccountInfoRequest) (*bssopenapi.GetCustomerAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerAccountInfo", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetCustomerAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerAccountInfo indicates an expected call of GetCustomerAccountInfo.
func (mr *MockBssopenapiClientMockRecorder) GetCustomerAccountInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerAccountInfo", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCustomerAccountInfo), arg0)
}

// GetCustomerAccountInfoWithCallback mocks base method.
func (m *MockBssopenapiClient) GetCustomerAccountInfoWithCallback(arg0 *bssopenapi.GetCustomerAccountInfoRequest, arg1 func(*bssopenapi.GetCustomerAccountInfoResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerAccountInfoWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetCustomerAccountInfoWithCallback indicates an expected call of GetCustomerAccountInfoWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetCustomerAccountInfoWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerAccountInfoWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCustomerAccountInfoWithCallback), arg0, arg1)
}

// GetCustomerAccountInfoWithChan mocks base method.
func (m *MockBssopenapiClient) GetCustomerAccountInfoWithChan(arg0 *bssopenapi.GetCustomerAccountInfoRequest) (<-chan *bssopenapi.GetCustomerAccountInfoResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerAccountInfoWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetCustomerAccountInfoResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetCustomerAccountInfoWithChan indicates an expected call of GetCustomerAccountInfoWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetCustomerAccountInfoWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerAccountInfoWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCustomerAccountInfoWithChan), arg0)
}

// GetCustomerList mocks base method.
func (m *MockBssopenapiClient) GetCustomerList(arg0 *bssopenapi.GetCustomerListRequest) (*bssopenapi.GetCustomerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerList", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetCustomerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerList indicates an expected call of GetCustomerList.
func (mr *MockBssopenapiClientMockRecorder) GetCustomerList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerList", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCustomerList), arg0)
}

// GetCustomerListWithCallback mocks base method.
func (m *MockBssopenapiClient) GetCustomerListWithCallback(arg0 *bssopenapi.GetCustomerListRequest, arg1 func(*bssopenapi.GetCustomerListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetCustomerListWithCallback indicates an expected call of GetCustomerListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetCustomerListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCustomerListWithCallback), arg0, arg1)
}

// GetCustomerListWithChan mocks base method.
func (m *MockBssopenapiClient) GetCustomerListWithChan(arg0 *bssopenapi.GetCustomerListRequest) (<-chan *bssopenapi.GetCustomerListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetCustomerListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetCustomerListWithChan indicates an expected call of GetCustomerListWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetCustomerListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetCustomerListWithChan), arg0)
}

// GetEndpointRules mocks base method.
func (m *MockBssopenapiClient) GetEndpointRules(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointRules", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointRules indicates an expected call of GetEndpointRules.
func (mr *MockBssopenapiClientMockRecorder) GetEndpointRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointRules", reflect.TypeOf((*MockBssopenapiClient)(nil).GetEndpointRules), arg0, arg1)
}

// GetHTTPSInsecure mocks base method.
func (m *MockBssopenapiClient) GetHTTPSInsecure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPSInsecure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHTTPSInsecure indicates an expected call of GetHTTPSInsecure.
func (mr *MockBssopenapiClientMockRecorder) GetHTTPSInsecure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPSInsecure", reflect.TypeOf((*MockBssopenapiClient)(nil).GetHTTPSInsecure))
}

// GetHttpProxy mocks base method.
func (m *MockBssopenapiClient) GetHttpProxy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttpProxy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHttpProxy indicates an expected call of GetHttpProxy.
func (mr *MockBssopenapiClientMockRecorder) GetHttpProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttpProxy", reflect.TypeOf((*MockBssopenapiClient)(nil).GetHttpProxy))
}

// GetHttpsProxy mocks base method.
func (m *MockBssopenapiClient) GetHttpsProxy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttpsProxy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHttpsProxy indicates an expected call of GetHttpsProxy.
func (mr *MockBssopenapiClientMockRecorder) GetHttpsProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttpsProxy", reflect.TypeOf((*MockBssopenapiClient)(nil).GetHttpsProxy))
}

// GetLoggerMsg mocks base method.
func (m *MockBssopenapiClient) GetLoggerMsg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerMsg")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLoggerMsg indicates an expected call of GetLoggerMsg.
func (mr *MockBssopenapiClientMockRecorder) GetLoggerMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerMsg", reflect.TypeOf((*MockBssopenapiClient)(nil).GetLoggerMsg))
}

// GetNoProxy mocks base method.
func (m *MockBssopenapiClient) GetNoProxy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoProxy")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNoProxy indicates an expected call of GetNoProxy.
func (mr *MockBssopenapiClientMockRecorder) GetNoProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoProxy", reflect.TypeOf((*MockBssopenapiClient)(nil).GetNoProxy))
}

// GetOrderDetail mocks base method.
func (m *MockBssopenapiClient) GetOrderDetail(arg0 *bssopenapi.GetOrderDetailRequest) (*bssopenapi.GetOrderDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetOrderDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockBssopenapiClientMockRecorder) GetOrderDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).GetOrderDetail), arg0)
}

// GetOrderDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) GetOrderDetailWithCallback(arg0 *bssopenapi.GetOrderDetailRequest, arg1 func(*bssopenapi.GetOrderDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetOrderDetailWithCallback indicates an expected call of GetOrderDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetOrderDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetOrderDetailWithCallback), arg0, arg1)
}

// GetOrderDetailWithChan mocks base method.
func (m *MockBssopenapiClient) GetOrderDetailWithChan(arg0 *bssopenapi.GetOrderDetailRequest) (<-chan *bssopenapi.GetOrderDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetOrderDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetOrderDetailWithChan indicates an expected call of GetOrderDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetOrderDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetOrderDetailWithChan), arg0)
}

// GetPayAsYouGoPrice mocks base method.
func (m *MockBssopenapiClient) GetPayAsYouGoPrice(arg0 *bssopenapi.GetPayAsYouGoPriceRequest) (*bssopenapi.GetPayAsYouGoPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayAsYouGoPrice", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetPayAsYouGoPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayAsYouGoPrice indicates an expected call of GetPayAsYouGoPrice.
func (mr *MockBssopenapiClientMockRecorder) GetPayAsYouGoPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayAsYouGoPrice", reflect.TypeOf((*MockBssopenapiClient)(nil).GetPayAsYouGoPrice), arg0)
}

// GetPayAsYouGoPriceWithCallback mocks base method.
func (m *MockBssopenapiClient) GetPayAsYouGoPriceWithCallback(arg0 *bssopenapi.GetPayAsYouGoPriceRequest, arg1 func(*bssopenapi.GetPayAsYouGoPriceResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayAsYouGoPriceWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetPayAsYouGoPriceWithCallback indicates an expected call of GetPayAsYouGoPriceWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetPayAsYouGoPriceWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayAsYouGoPriceWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetPayAsYouGoPriceWithCallback), arg0, arg1)
}

// GetPayAsYouGoPriceWithChan mocks base method.
func (m *MockBssopenapiClient) GetPayAsYouGoPriceWithChan(arg0 *bssopenapi.GetPayAsYouGoPriceRequest) (<-chan *bssopenapi.GetPayAsYouGoPriceResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayAsYouGoPriceWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetPayAsYouGoPriceResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetPayAsYouGoPriceWithChan indicates an expected call of GetPayAsYouGoPriceWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetPayAsYouGoPriceWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayAsYouGoPriceWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetPayAsYouGoPriceWithChan), arg0)
}

// GetResourcePackagePrice mocks base method.
func (m *MockBssopenapiClient) GetResourcePackagePrice(arg0 *bssopenapi.GetResourcePackagePriceRequest) (*bssopenapi.GetResourcePackagePriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePackagePrice", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetResourcePackagePriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePackagePrice indicates an expected call of GetResourcePackagePrice.
func (mr *MockBssopenapiClientMockRecorder) GetResourcePackagePrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePackagePrice", reflect.TypeOf((*MockBssopenapiClient)(nil).GetResourcePackagePrice), arg0)
}

// GetResourcePackagePriceWithCallback mocks base method.
func (m *MockBssopenapiClient) GetResourcePackagePriceWithCallback(arg0 *bssopenapi.GetResourcePackagePriceRequest, arg1 func(*bssopenapi.GetResourcePackagePriceResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePackagePriceWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetResourcePackagePriceWithCallback indicates an expected call of GetResourcePackagePriceWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetResourcePackagePriceWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePackagePriceWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetResourcePackagePriceWithCallback), arg0, arg1)
}

// GetResourcePackagePriceWithChan mocks base method.
func (m *MockBssopenapiClient) GetResourcePackagePriceWithChan(arg0 *bssopenapi.GetResourcePackagePriceRequest) (<-chan *bssopenapi.GetResourcePackagePriceResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePackagePriceWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetResourcePackagePriceResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetResourcePackagePriceWithChan indicates an expected call of GetResourcePackagePriceWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetResourcePackagePriceWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePackagePriceWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetResourcePackagePriceWithChan), arg0)
}

// GetSubscriptionPrice mocks base method.
func (m *MockBssopenapiClient) GetSubscriptionPrice(arg0 *bssopenapi.GetSubscriptionPriceRequest) (*bssopenapi.GetSubscriptionPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionPrice", arg0)
	ret0, _ := ret[0].(*bssopenapi.GetSubscriptionPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionPrice indicates an expected call of GetSubscriptionPrice.
func (mr *MockBssopenapiClientMockRecorder) GetSubscriptionPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionPrice", reflect.TypeOf((*MockBssopenapiClient)(nil).GetSubscriptionPrice), arg0)
}

// GetSubscriptionPriceWithCallback mocks base method.
func (m *MockBssopenapiClient) GetSubscriptionPriceWithCallback(arg0 *bssopenapi.GetSubscriptionPriceRequest, arg1 func(*bssopenapi.GetSubscriptionPriceResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionPriceWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// GetSubscriptionPriceWithCallback indicates an expected call of GetSubscriptionPriceWithCallback.
func (mr *MockBssopenapiClientMockRecorder) GetSubscriptionPriceWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionPriceWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).GetSubscriptionPriceWithCallback), arg0, arg1)
}

// GetSubscriptionPriceWithChan mocks base method.
func (m *MockBssopenapiClient) GetSubscriptionPriceWithChan(arg0 *bssopenapi.GetSubscriptionPriceRequest) (<-chan *bssopenapi.GetSubscriptionPriceResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionPriceWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.GetSubscriptionPriceResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetSubscriptionPriceWithChan indicates an expected call of GetSubscriptionPriceWithChan.
func (mr *MockBssopenapiClientMockRecorder) GetSubscriptionPriceWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionPriceWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).GetSubscriptionPriceWithChan), arg0)
}

// GetTemplate mocks base method.
func (m *MockBssopenapiClient) GetTemplate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockBssopenapiClientMockRecorder) GetTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockBssopenapiClient)(nil).GetTemplate))
}

// QueryAccountBalance mocks base method.
func (m *MockBssopenapiClient) QueryAccountBalance(arg0 *bssopenapi.QueryAccountBalanceRequest) (*bssopenapi.QueryAccountBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBalance", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryAccountBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountBalance indicates an expected call of QueryAccountBalance.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBalance", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountBalance), arg0)
}

// QueryAccountBalanceWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryAccountBalanceWithCallback(arg0 *bssopenapi.QueryAccountBalanceRequest, arg1 func(*bssopenapi.QueryAccountBalanceResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBalanceWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryAccountBalanceWithCallback indicates an expected call of QueryAccountBalanceWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountBalanceWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBalanceWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountBalanceWithCallback), arg0, arg1)
}

// QueryAccountBalanceWithChan mocks base method.
func (m *MockBssopenapiClient) QueryAccountBalanceWithChan(arg0 *bssopenapi.QueryAccountBalanceRequest) (<-chan *bssopenapi.QueryAccountBalanceResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBalanceWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryAccountBalanceResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryAccountBalanceWithChan indicates an expected call of QueryAccountBalanceWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountBalanceWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBalanceWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountBalanceWithChan), arg0)
}

// QueryAccountBill mocks base method.
func (m *MockBssopenapiClient) QueryAccountBill(arg0 *bssopenapi.QueryAccountBillRequest) (*bssopenapi.QueryAccountBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryAccountBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountBill indicates an expected call of QueryAccountBill.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBill", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountBill), arg0)
}

// QueryAccountBillWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryAccountBillWithCallback(arg0 *bssopenapi.QueryAccountBillRequest, arg1 func(*bssopenapi.QueryAccountBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryAccountBillWithCallback indicates an expected call of QueryAccountBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountBillWithCallback), arg0, arg1)
}

// QueryAccountBillWithChan mocks base method.
func (m *MockBssopenapiClient) QueryAccountBillWithChan(arg0 *bssopenapi.QueryAccountBillRequest) (<-chan *bssopenapi.QueryAccountBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryAccountBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryAccountBillWithChan indicates an expected call of QueryAccountBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountBillWithChan), arg0)
}

// QueryAccountTransactionDetails mocks base method.
func (m *MockBssopenapiClient) QueryAccountTransactionDetails(arg0 *bssopenapi.QueryAccountTransactionDetailsRequest) (*bssopenapi.QueryAccountTransactionDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTransactionDetails", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryAccountTransactionDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountTransactionDetails indicates an expected call of QueryAccountTransactionDetails.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountTransactionDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTransactionDetails", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountTransactionDetails), arg0)
}

// QueryAccountTransactionDetailsWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryAccountTransactionDetailsWithCallback(arg0 *bssopenapi.QueryAccountTransactionDetailsRequest, arg1 func(*bssopenapi.QueryAccountTransactionDetailsResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTransactionDetailsWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryAccountTransactionDetailsWithCallback indicates an expected call of QueryAccountTransactionDetailsWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountTransactionDetailsWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTransactionDetailsWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountTransactionDetailsWithCallback), arg0, arg1)
}

// QueryAccountTransactionDetailsWithChan mocks base method.
func (m *MockBssopenapiClient) QueryAccountTransactionDetailsWithChan(arg0 *bssopenapi.QueryAccountTransactionDetailsRequest) (<-chan *bssopenapi.QueryAccountTransactionDetailsResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTransactionDetailsWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryAccountTransactionDetailsResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryAccountTransactionDetailsWithChan indicates an expected call of QueryAccountTransactionDetailsWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountTransactionDetailsWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTransactionDetailsWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountTransactionDetailsWithChan), arg0)
}

// QueryAccountTransactions mocks base method.
func (m *MockBssopenapiClient) QueryAccountTransactions(arg0 *bssopenapi.QueryAccountTransactionsRequest) (*bssopenapi.QueryAccountTransactionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTransactions", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryAccountTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccountTransactions indicates an expected call of QueryAccountTransactions.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTransactions", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountTransactions), arg0)
}

// QueryAccountTransactionsWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryAccountTransactionsWithCallback(arg0 *bssopenapi.QueryAccountTransactionsRequest, arg1 func(*bssopenapi.QueryAccountTransactionsResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTransactionsWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryAccountTransactionsWithCallback indicates an expected call of QueryAccountTransactionsWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountTransactionsWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTransactionsWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountTransactionsWithCallback), arg0, arg1)
}

// QueryAccountTransactionsWithChan mocks base method.
func (m *MockBssopenapiClient) QueryAccountTransactionsWithChan(arg0 *bssopenapi.QueryAccountTransactionsRequest) (<-chan *bssopenapi.QueryAccountTransactionsResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccountTransactionsWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryAccountTransactionsResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryAccountTransactionsWithChan indicates an expected call of QueryAccountTransactionsWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryAccountTransactionsWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccountTransactionsWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAccountTransactionsWithChan), arg0)
}

// QueryAvailableInstances mocks base method.
func (m *MockBssopenapiClient) QueryAvailableInstances(arg0 *bssopenapi.QueryAvailableInstancesRequest) (*bssopenapi.QueryAvailableInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAvailableInstances", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryAvailableInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailableInstances indicates an expected call of QueryAvailableInstances.
func (mr *MockBssopenapiClientMockRecorder) QueryAvailableInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableInstances", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAvailableInstances), arg0)
}

// QueryAvailableInstancesWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryAvailableInstancesWithCallback(arg0 *bssopenapi.QueryAvailableInstancesRequest, arg1 func(*bssopenapi.QueryAvailableInstancesResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAvailableInstancesWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryAvailableInstancesWithCallback indicates an expected call of QueryAvailableInstancesWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryAvailableInstancesWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableInstancesWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAvailableInstancesWithCallback), arg0, arg1)
}

// QueryAvailableInstancesWithChan mocks base method.
func (m *MockBssopenapiClient) QueryAvailableInstancesWithChan(arg0 *bssopenapi.QueryAvailableInstancesRequest) (<-chan *bssopenapi.QueryAvailableInstancesResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAvailableInstancesWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryAvailableInstancesResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryAvailableInstancesWithChan indicates an expected call of QueryAvailableInstancesWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryAvailableInstancesWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableInstancesWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryAvailableInstancesWithChan), arg0)
}

// QueryBill mocks base method.
func (m *MockBssopenapiClient) QueryBill(arg0 *bssopenapi.QueryBillRequest) (*bssopenapi.QueryBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBill indicates an expected call of QueryBill.
func (mr *MockBssopenapiClientMockRecorder) QueryBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBill", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBill), arg0)
}

// QueryBillOverview mocks base method.
func (m *MockBssopenapiClient) QueryBillOverview(arg0 *bssopenapi.QueryBillOverviewRequest) (*bssopenapi.QueryBillOverviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillOverview", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryBillOverviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBillOverview indicates an expected call of QueryBillOverview.
func (mr *MockBssopenapiClientMockRecorder) QueryBillOverview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillOverview", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillOverview), arg0)
}

// QueryBillOverviewWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryBillOverviewWithCallback(arg0 *bssopenapi.QueryBillOverviewRequest, arg1 func(*bssopenapi.QueryBillOverviewResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillOverviewWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryBillOverviewWithCallback indicates an expected call of QueryBillOverviewWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryBillOverviewWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillOverviewWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillOverviewWithCallback), arg0, arg1)
}

// QueryBillOverviewWithChan mocks base method.
func (m *MockBssopenapiClient) QueryBillOverviewWithChan(arg0 *bssopenapi.QueryBillOverviewRequest) (<-chan *bssopenapi.QueryBillOverviewResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillOverviewWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryBillOverviewResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryBillOverviewWithChan indicates an expected call of QueryBillOverviewWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryBillOverviewWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillOverviewWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillOverviewWithChan), arg0)
}

// QueryBillToOSSSubscription mocks base method.
func (m *MockBssopenapiClient) QueryBillToOSSSubscription(arg0 *bssopenapi.QueryBillToOSSSubscriptionRequest) (*bssopenapi.QueryBillToOSSSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillToOSSSubscription", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryBillToOSSSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBillToOSSSubscription indicates an expected call of QueryBillToOSSSubscription.
func (mr *MockBssopenapiClientMockRecorder) QueryBillToOSSSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillToOSSSubscription", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillToOSSSubscription), arg0)
}

// QueryBillToOSSSubscriptionWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryBillToOSSSubscriptionWithCallback(arg0 *bssopenapi.QueryBillToOSSSubscriptionRequest, arg1 func(*bssopenapi.QueryBillToOSSSubscriptionResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillToOSSSubscriptionWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryBillToOSSSubscriptionWithCallback indicates an expected call of QueryBillToOSSSubscriptionWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryBillToOSSSubscriptionWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillToOSSSubscriptionWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillToOSSSubscriptionWithCallback), arg0, arg1)
}

// QueryBillToOSSSubscriptionWithChan mocks base method.
func (m *MockBssopenapiClient) QueryBillToOSSSubscriptionWithChan(arg0 *bssopenapi.QueryBillToOSSSubscriptionRequest) (<-chan *bssopenapi.QueryBillToOSSSubscriptionResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillToOSSSubscriptionWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryBillToOSSSubscriptionResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryBillToOSSSubscriptionWithChan indicates an expected call of QueryBillToOSSSubscriptionWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryBillToOSSSubscriptionWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillToOSSSubscriptionWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillToOSSSubscriptionWithChan), arg0)
}

// QueryBillWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryBillWithCallback(arg0 *bssopenapi.QueryBillRequest, arg1 func(*bssopenapi.QueryBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryBillWithCallback indicates an expected call of QueryBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillWithCallback), arg0, arg1)
}

// QueryBillWithChan mocks base method.
func (m *MockBssopenapiClient) QueryBillWithChan(arg0 *bssopenapi.QueryBillRequest) (<-chan *bssopenapi.QueryBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryBillWithChan indicates an expected call of QueryBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryBillWithChan), arg0)
}

// QueryCashCoupons mocks base method.
func (m *MockBssopenapiClient) QueryCashCoupons(arg0 *bssopenapi.QueryCashCouponsRequest) (*bssopenapi.QueryCashCouponsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCashCoupons", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryCashCouponsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCashCoupons indicates an expected call of QueryCashCoupons.
func (mr *MockBssopenapiClientMockRecorder) QueryCashCoupons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCashCoupons", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCashCoupons), arg0)
}

// QueryCashCouponsWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryCashCouponsWithCallback(arg0 *bssopenapi.QueryCashCouponsRequest, arg1 func(*bssopenapi.QueryCashCouponsResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCashCouponsWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryCashCouponsWithCallback indicates an expected call of QueryCashCouponsWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryCashCouponsWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCashCouponsWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCashCouponsWithCallback), arg0, arg1)
}

// QueryCashCouponsWithChan mocks base method.
func (m *MockBssopenapiClient) QueryCashCouponsWithChan(arg0 *bssopenapi.QueryCashCouponsRequest) (<-chan *bssopenapi.QueryCashCouponsResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCashCouponsWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryCashCouponsResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryCashCouponsWithChan indicates an expected call of QueryCashCouponsWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryCashCouponsWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCashCouponsWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCashCouponsWithChan), arg0)
}

// QueryCommodityList mocks base method.
func (m *MockBssopenapiClient) QueryCommodityList(arg0 *bssopenapi.QueryCommodityListRequest) (*bssopenapi.QueryCommodityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCommodityList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryCommodityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCommodityList indicates an expected call of QueryCommodityList.
func (mr *MockBssopenapiClientMockRecorder) QueryCommodityList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCommodityList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCommodityList), arg0)
}

// QueryCommodityListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryCommodityListWithCallback(arg0 *bssopenapi.QueryCommodityListRequest, arg1 func(*bssopenapi.QueryCommodityListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCommodityListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryCommodityListWithCallback indicates an expected call of QueryCommodityListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryCommodityListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCommodityListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCommodityListWithCallback), arg0, arg1)
}

// QueryCommodityListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryCommodityListWithChan(arg0 *bssopenapi.QueryCommodityListRequest) (<-chan *bssopenapi.QueryCommodityListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCommodityListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryCommodityListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryCommodityListWithChan indicates an expected call of QueryCommodityListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryCommodityListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCommodityListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCommodityListWithChan), arg0)
}

// QueryCostUnit mocks base method.
func (m *MockBssopenapiClient) QueryCostUnit(arg0 *bssopenapi.QueryCostUnitRequest) (*bssopenapi.QueryCostUnitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCostUnit", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryCostUnitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCostUnit indicates an expected call of QueryCostUnit.
func (mr *MockBssopenapiClientMockRecorder) QueryCostUnit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCostUnit", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCostUnit), arg0)
}

// QueryCostUnitResource mocks base method.
func (m *MockBssopenapiClient) QueryCostUnitResource(arg0 *bssopenapi.QueryCostUnitResourceRequest) (*bssopenapi.QueryCostUnitResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCostUnitResource", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryCostUnitResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCostUnitResource indicates an expected call of QueryCostUnitResource.
func (mr *MockBssopenapiClientMockRecorder) QueryCostUnitResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCostUnitResource", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCostUnitResource), arg0)
}

// QueryCostUnitResourceWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryCostUnitResourceWithCallback(arg0 *bssopenapi.QueryCostUnitResourceRequest, arg1 func(*bssopenapi.QueryCostUnitResourceResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCostUnitResourceWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryCostUnitResourceWithCallback indicates an expected call of QueryCostUnitResourceWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryCostUnitResourceWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCostUnitResourceWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCostUnitResourceWithCallback), arg0, arg1)
}

// QueryCostUnitResourceWithChan mocks base method.
func (m *MockBssopenapiClient) QueryCostUnitResourceWithChan(arg0 *bssopenapi.QueryCostUnitResourceRequest) (<-chan *bssopenapi.QueryCostUnitResourceResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCostUnitResourceWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryCostUnitResourceResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryCostUnitResourceWithChan indicates an expected call of QueryCostUnitResourceWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryCostUnitResourceWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCostUnitResourceWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCostUnitResourceWithChan), arg0)
}

// QueryCostUnitWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryCostUnitWithCallback(arg0 *bssopenapi.QueryCostUnitRequest, arg1 func(*bssopenapi.QueryCostUnitResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCostUnitWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryCostUnitWithCallback indicates an expected call of QueryCostUnitWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryCostUnitWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCostUnitWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCostUnitWithCallback), arg0, arg1)
}

// QueryCostUnitWithChan mocks base method.
func (m *MockBssopenapiClient) QueryCostUnitWithChan(arg0 *bssopenapi.QueryCostUnitRequest) (<-chan *bssopenapi.QueryCostUnitResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCostUnitWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryCostUnitResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryCostUnitWithChan indicates an expected call of QueryCostUnitWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryCostUnitWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCostUnitWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCostUnitWithChan), arg0)
}

// QueryCustomerAddressList mocks base method.
func (m *MockBssopenapiClient) QueryCustomerAddressList(arg0 *bssopenapi.QueryCustomerAddressListRequest) (*bssopenapi.QueryCustomerAddressListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCustomerAddressList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryCustomerAddressListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCustomerAddressList indicates an expected call of QueryCustomerAddressList.
func (mr *MockBssopenapiClientMockRecorder) QueryCustomerAddressList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCustomerAddressList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCustomerAddressList), arg0)
}

// QueryCustomerAddressListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryCustomerAddressListWithCallback(arg0 *bssopenapi.QueryCustomerAddressListRequest, arg1 func(*bssopenapi.QueryCustomerAddressListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCustomerAddressListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryCustomerAddressListWithCallback indicates an expected call of QueryCustomerAddressListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryCustomerAddressListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCustomerAddressListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCustomerAddressListWithCallback), arg0, arg1)
}

// QueryCustomerAddressListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryCustomerAddressListWithChan(arg0 *bssopenapi.QueryCustomerAddressListRequest) (<-chan *bssopenapi.QueryCustomerAddressListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCustomerAddressListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryCustomerAddressListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryCustomerAddressListWithChan indicates an expected call of QueryCustomerAddressListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryCustomerAddressListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCustomerAddressListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryCustomerAddressListWithChan), arg0)
}

// QueryDPUtilizationDetail mocks base method.
func (m *MockBssopenapiClient) QueryDPUtilizationDetail(arg0 *bssopenapi.QueryDPUtilizationDetailRequest) (*bssopenapi.QueryDPUtilizationDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDPUtilizationDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryDPUtilizationDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDPUtilizationDetail indicates an expected call of QueryDPUtilizationDetail.
func (mr *MockBssopenapiClientMockRecorder) QueryDPUtilizationDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDPUtilizationDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryDPUtilizationDetail), arg0)
}

// QueryDPUtilizationDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryDPUtilizationDetailWithCallback(arg0 *bssopenapi.QueryDPUtilizationDetailRequest, arg1 func(*bssopenapi.QueryDPUtilizationDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDPUtilizationDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryDPUtilizationDetailWithCallback indicates an expected call of QueryDPUtilizationDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryDPUtilizationDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDPUtilizationDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryDPUtilizationDetailWithCallback), arg0, arg1)
}

// QueryDPUtilizationDetailWithChan mocks base method.
func (m *MockBssopenapiClient) QueryDPUtilizationDetailWithChan(arg0 *bssopenapi.QueryDPUtilizationDetailRequest) (<-chan *bssopenapi.QueryDPUtilizationDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDPUtilizationDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryDPUtilizationDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryDPUtilizationDetailWithChan indicates an expected call of QueryDPUtilizationDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryDPUtilizationDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDPUtilizationDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryDPUtilizationDetailWithChan), arg0)
}

// QueryEvaluateList mocks base method.
func (m *MockBssopenapiClient) QueryEvaluateList(arg0 *bssopenapi.QueryEvaluateListRequest) (*bssopenapi.QueryEvaluateListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEvaluateList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryEvaluateListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEvaluateList indicates an expected call of QueryEvaluateList.
func (mr *MockBssopenapiClientMockRecorder) QueryEvaluateList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvaluateList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryEvaluateList), arg0)
}

// QueryEvaluateListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryEvaluateListWithCallback(arg0 *bssopenapi.QueryEvaluateListRequest, arg1 func(*bssopenapi.QueryEvaluateListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEvaluateListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryEvaluateListWithCallback indicates an expected call of QueryEvaluateListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryEvaluateListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvaluateListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryEvaluateListWithCallback), arg0, arg1)
}

// QueryEvaluateListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryEvaluateListWithChan(arg0 *bssopenapi.QueryEvaluateListRequest) (<-chan *bssopenapi.QueryEvaluateListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEvaluateListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryEvaluateListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryEvaluateListWithChan indicates an expected call of QueryEvaluateListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryEvaluateListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvaluateListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryEvaluateListWithChan), arg0)
}

// QueryFinancialAccountInfo mocks base method.
func (m *MockBssopenapiClient) QueryFinancialAccountInfo(arg0 *bssopenapi.QueryFinancialAccountInfoRequest) (*bssopenapi.QueryFinancialAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinancialAccountInfo", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryFinancialAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinancialAccountInfo indicates an expected call of QueryFinancialAccountInfo.
func (mr *MockBssopenapiClientMockRecorder) QueryFinancialAccountInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinancialAccountInfo", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryFinancialAccountInfo), arg0)
}

// QueryFinancialAccountInfoWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryFinancialAccountInfoWithCallback(arg0 *bssopenapi.QueryFinancialAccountInfoRequest, arg1 func(*bssopenapi.QueryFinancialAccountInfoResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinancialAccountInfoWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryFinancialAccountInfoWithCallback indicates an expected call of QueryFinancialAccountInfoWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryFinancialAccountInfoWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinancialAccountInfoWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryFinancialAccountInfoWithCallback), arg0, arg1)
}

// QueryFinancialAccountInfoWithChan mocks base method.
func (m *MockBssopenapiClient) QueryFinancialAccountInfoWithChan(arg0 *bssopenapi.QueryFinancialAccountInfoRequest) (<-chan *bssopenapi.QueryFinancialAccountInfoResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinancialAccountInfoWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryFinancialAccountInfoResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryFinancialAccountInfoWithChan indicates an expected call of QueryFinancialAccountInfoWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryFinancialAccountInfoWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinancialAccountInfoWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryFinancialAccountInfoWithChan), arg0)
}

// QueryInstanceBill mocks base method.
func (m *MockBssopenapiClient) QueryInstanceBill(arg0 *bssopenapi.QueryInstanceBillRequest) (*bssopenapi.QueryInstanceBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryInstanceBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstanceBill indicates an expected call of QueryInstanceBill.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceBill", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceBill), arg0)
}

// QueryInstanceBillWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryInstanceBillWithCallback(arg0 *bssopenapi.QueryInstanceBillRequest, arg1 func(*bssopenapi.QueryInstanceBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryInstanceBillWithCallback indicates an expected call of QueryInstanceBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceBillWithCallback), arg0, arg1)
}

// QueryInstanceBillWithChan mocks base method.
func (m *MockBssopenapiClient) QueryInstanceBillWithChan(arg0 *bssopenapi.QueryInstanceBillRequest) (<-chan *bssopenapi.QueryInstanceBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryInstanceBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryInstanceBillWithChan indicates an expected call of QueryInstanceBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceBillWithChan), arg0)
}

// QueryInstanceByTag mocks base method.
func (m *MockBssopenapiClient) QueryInstanceByTag(arg0 *bssopenapi.QueryInstanceByTagRequest) (*bssopenapi.QueryInstanceByTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceByTag", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryInstanceByTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstanceByTag indicates an expected call of QueryInstanceByTag.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceByTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceByTag", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceByTag), arg0)
}

// QueryInstanceByTagWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryInstanceByTagWithCallback(arg0 *bssopenapi.QueryInstanceByTagRequest, arg1 func(*bssopenapi.QueryInstanceByTagResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceByTagWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryInstanceByTagWithCallback indicates an expected call of QueryInstanceByTagWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceByTagWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceByTagWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceByTagWithCallback), arg0, arg1)
}

// QueryInstanceByTagWithChan mocks base method.
func (m *MockBssopenapiClient) QueryInstanceByTagWithChan(arg0 *bssopenapi.QueryInstanceByTagRequest) (<-chan *bssopenapi.QueryInstanceByTagResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceByTagWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryInstanceByTagResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryInstanceByTagWithChan indicates an expected call of QueryInstanceByTagWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceByTagWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceByTagWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceByTagWithChan), arg0)
}

// QueryInstanceGaapCost mocks base method.
func (m *MockBssopenapiClient) QueryInstanceGaapCost(arg0 *bssopenapi.QueryInstanceGaapCostRequest) (*bssopenapi.QueryInstanceGaapCostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceGaapCost", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryInstanceGaapCostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstanceGaapCost indicates an expected call of QueryInstanceGaapCost.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceGaapCost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceGaapCost", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceGaapCost), arg0)
}

// QueryInstanceGaapCostWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryInstanceGaapCostWithCallback(arg0 *bssopenapi.QueryInstanceGaapCostRequest, arg1 func(*bssopenapi.QueryInstanceGaapCostResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceGaapCostWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryInstanceGaapCostWithCallback indicates an expected call of QueryInstanceGaapCostWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceGaapCostWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceGaapCostWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceGaapCostWithCallback), arg0, arg1)
}

// QueryInstanceGaapCostWithChan mocks base method.
func (m *MockBssopenapiClient) QueryInstanceGaapCostWithChan(arg0 *bssopenapi.QueryInstanceGaapCostRequest) (<-chan *bssopenapi.QueryInstanceGaapCostResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstanceGaapCostWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryInstanceGaapCostResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryInstanceGaapCostWithChan indicates an expected call of QueryInstanceGaapCostWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryInstanceGaapCostWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstanceGaapCostWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInstanceGaapCostWithChan), arg0)
}

// QueryInvoicingCustomerList mocks base method.
func (m *MockBssopenapiClient) QueryInvoicingCustomerList(arg0 *bssopenapi.QueryInvoicingCustomerListRequest) (*bssopenapi.QueryInvoicingCustomerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInvoicingCustomerList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryInvoicingCustomerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInvoicingCustomerList indicates an expected call of QueryInvoicingCustomerList.
func (mr *MockBssopenapiClientMockRecorder) QueryInvoicingCustomerList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvoicingCustomerList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInvoicingCustomerList), arg0)
}

// QueryInvoicingCustomerListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryInvoicingCustomerListWithCallback(arg0 *bssopenapi.QueryInvoicingCustomerListRequest, arg1 func(*bssopenapi.QueryInvoicingCustomerListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInvoicingCustomerListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryInvoicingCustomerListWithCallback indicates an expected call of QueryInvoicingCustomerListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryInvoicingCustomerListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvoicingCustomerListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInvoicingCustomerListWithCallback), arg0, arg1)
}

// QueryInvoicingCustomerListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryInvoicingCustomerListWithChan(arg0 *bssopenapi.QueryInvoicingCustomerListRequest) (<-chan *bssopenapi.QueryInvoicingCustomerListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInvoicingCustomerListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryInvoicingCustomerListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryInvoicingCustomerListWithChan indicates an expected call of QueryInvoicingCustomerListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryInvoicingCustomerListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvoicingCustomerListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryInvoicingCustomerListWithChan), arg0)
}

// QueryOrders mocks base method.
func (m *MockBssopenapiClient) QueryOrders(arg0 *bssopenapi.QueryOrdersRequest) (*bssopenapi.QueryOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrders", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrders indicates an expected call of QueryOrders.
func (mr *MockBssopenapiClientMockRecorder) QueryOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrders", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryOrders), arg0)
}

// QueryOrdersWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryOrdersWithCallback(arg0 *bssopenapi.QueryOrdersRequest, arg1 func(*bssopenapi.QueryOrdersResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrdersWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryOrdersWithCallback indicates an expected call of QueryOrdersWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryOrdersWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrdersWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryOrdersWithCallback), arg0, arg1)
}

// QueryOrdersWithChan mocks base method.
func (m *MockBssopenapiClient) QueryOrdersWithChan(arg0 *bssopenapi.QueryOrdersRequest) (<-chan *bssopenapi.QueryOrdersResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrdersWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryOrdersResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryOrdersWithChan indicates an expected call of QueryOrdersWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryOrdersWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrdersWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryOrdersWithChan), arg0)
}

// QueryPermissionList mocks base method.
func (m *MockBssopenapiClient) QueryPermissionList(arg0 *bssopenapi.QueryPermissionListRequest) (*bssopenapi.QueryPermissionListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPermissionList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryPermissionListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPermissionList indicates an expected call of QueryPermissionList.
func (mr *MockBssopenapiClientMockRecorder) QueryPermissionList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPermissionList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPermissionList), arg0)
}

// QueryPermissionListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryPermissionListWithCallback(arg0 *bssopenapi.QueryPermissionListRequest, arg1 func(*bssopenapi.QueryPermissionListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPermissionListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryPermissionListWithCallback indicates an expected call of QueryPermissionListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryPermissionListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPermissionListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPermissionListWithCallback), arg0, arg1)
}

// QueryPermissionListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryPermissionListWithChan(arg0 *bssopenapi.QueryPermissionListRequest) (<-chan *bssopenapi.QueryPermissionListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPermissionListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryPermissionListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryPermissionListWithChan indicates an expected call of QueryPermissionListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryPermissionListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPermissionListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPermissionListWithChan), arg0)
}

// QueryPrepaidCards mocks base method.
func (m *MockBssopenapiClient) QueryPrepaidCards(arg0 *bssopenapi.QueryPrepaidCardsRequest) (*bssopenapi.QueryPrepaidCardsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPrepaidCards", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryPrepaidCardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPrepaidCards indicates an expected call of QueryPrepaidCards.
func (mr *MockBssopenapiClientMockRecorder) QueryPrepaidCards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPrepaidCards", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPrepaidCards), arg0)
}

// QueryPrepaidCardsWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryPrepaidCardsWithCallback(arg0 *bssopenapi.QueryPrepaidCardsRequest, arg1 func(*bssopenapi.QueryPrepaidCardsResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPrepaidCardsWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryPrepaidCardsWithCallback indicates an expected call of QueryPrepaidCardsWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryPrepaidCardsWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPrepaidCardsWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPrepaidCardsWithCallback), arg0, arg1)
}

// QueryPrepaidCardsWithChan mocks base method.
func (m *MockBssopenapiClient) QueryPrepaidCardsWithChan(arg0 *bssopenapi.QueryPrepaidCardsRequest) (<-chan *bssopenapi.QueryPrepaidCardsResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPrepaidCardsWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryPrepaidCardsResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryPrepaidCardsWithChan indicates an expected call of QueryPrepaidCardsWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryPrepaidCardsWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPrepaidCardsWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPrepaidCardsWithChan), arg0)
}

// QueryPriceEntityList mocks base method.
func (m *MockBssopenapiClient) QueryPriceEntityList(arg0 *bssopenapi.QueryPriceEntityListRequest) (*bssopenapi.QueryPriceEntityListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPriceEntityList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryPriceEntityListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPriceEntityList indicates an expected call of QueryPriceEntityList.
func (mr *MockBssopenapiClientMockRecorder) QueryPriceEntityList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPriceEntityList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPriceEntityList), arg0)
}

// QueryPriceEntityListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryPriceEntityListWithCallback(arg0 *bssopenapi.QueryPriceEntityListRequest, arg1 func(*bssopenapi.QueryPriceEntityListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPriceEntityListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryPriceEntityListWithCallback indicates an expected call of QueryPriceEntityListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryPriceEntityListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPriceEntityListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPriceEntityListWithCallback), arg0, arg1)
}

// QueryPriceEntityListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryPriceEntityListWithChan(arg0 *bssopenapi.QueryPriceEntityListRequest) (<-chan *bssopenapi.QueryPriceEntityListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPriceEntityListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryPriceEntityListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryPriceEntityListWithChan indicates an expected call of QueryPriceEntityListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryPriceEntityListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPriceEntityListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryPriceEntityListWithChan), arg0)
}

// QueryProductList mocks base method.
func (m *MockBssopenapiClient) QueryProductList(arg0 *bssopenapi.QueryProductListRequest) (*bssopenapi.QueryProductListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProductList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryProductListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProductList indicates an expected call of QueryProductList.
func (mr *MockBssopenapiClientMockRecorder) QueryProductList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProductList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryProductList), arg0)
}

// QueryProductListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryProductListWithCallback(arg0 *bssopenapi.QueryProductListRequest, arg1 func(*bssopenapi.QueryProductListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProductListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryProductListWithCallback indicates an expected call of QueryProductListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryProductListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProductListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryProductListWithCallback), arg0, arg1)
}

// QueryProductListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryProductListWithChan(arg0 *bssopenapi.QueryProductListRequest) (<-chan *bssopenapi.QueryProductListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProductListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryProductListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryProductListWithChan indicates an expected call of QueryProductListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryProductListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProductListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryProductListWithChan), arg0)
}

// QueryRIUtilizationDetail mocks base method.
func (m *MockBssopenapiClient) QueryRIUtilizationDetail(arg0 *bssopenapi.QueryRIUtilizationDetailRequest) (*bssopenapi.QueryRIUtilizationDetailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRIUtilizationDetail", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryRIUtilizationDetailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRIUtilizationDetail indicates an expected call of QueryRIUtilizationDetail.
func (mr *MockBssopenapiClientMockRecorder) QueryRIUtilizationDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRIUtilizationDetail", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRIUtilizationDetail), arg0)
}

// QueryRIUtilizationDetailWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryRIUtilizationDetailWithCallback(arg0 *bssopenapi.QueryRIUtilizationDetailRequest, arg1 func(*bssopenapi.QueryRIUtilizationDetailResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRIUtilizationDetailWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryRIUtilizationDetailWithCallback indicates an expected call of QueryRIUtilizationDetailWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryRIUtilizationDetailWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRIUtilizationDetailWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRIUtilizationDetailWithCallback), arg0, arg1)
}

// QueryRIUtilizationDetailWithChan mocks base method.
func (m *MockBssopenapiClient) QueryRIUtilizationDetailWithChan(arg0 *bssopenapi.QueryRIUtilizationDetailRequest) (<-chan *bssopenapi.QueryRIUtilizationDetailResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRIUtilizationDetailWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryRIUtilizationDetailResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryRIUtilizationDetailWithChan indicates an expected call of QueryRIUtilizationDetailWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryRIUtilizationDetailWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRIUtilizationDetailWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRIUtilizationDetailWithChan), arg0)
}

// QueryRedeem mocks base method.
func (m *MockBssopenapiClient) QueryRedeem(arg0 *bssopenapi.QueryRedeemRequest) (*bssopenapi.QueryRedeemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRedeem", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryRedeemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRedeem indicates an expected call of QueryRedeem.
func (mr *MockBssopenapiClientMockRecorder) QueryRedeem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRedeem", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRedeem), arg0)
}

// QueryRedeemWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryRedeemWithCallback(arg0 *bssopenapi.QueryRedeemRequest, arg1 func(*bssopenapi.QueryRedeemResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRedeemWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryRedeemWithCallback indicates an expected call of QueryRedeemWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryRedeemWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRedeemWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRedeemWithCallback), arg0, arg1)
}

// QueryRedeemWithChan mocks base method.
func (m *MockBssopenapiClient) QueryRedeemWithChan(arg0 *bssopenapi.QueryRedeemRequest) (<-chan *bssopenapi.QueryRedeemResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRedeemWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryRedeemResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryRedeemWithChan indicates an expected call of QueryRedeemWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryRedeemWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRedeemWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRedeemWithChan), arg0)
}

// QueryRelationList mocks base method.
func (m *MockBssopenapiClient) QueryRelationList(arg0 *bssopenapi.QueryRelationListRequest) (*bssopenapi.QueryRelationListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryRelationListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationList indicates an expected call of QueryRelationList.
func (mr *MockBssopenapiClientMockRecorder) QueryRelationList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationList", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRelationList), arg0)
}

// QueryRelationListWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryRelationListWithCallback(arg0 *bssopenapi.QueryRelationListRequest, arg1 func(*bssopenapi.QueryRelationListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryRelationListWithCallback indicates an expected call of QueryRelationListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryRelationListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRelationListWithCallback), arg0, arg1)
}

// QueryRelationListWithChan mocks base method.
func (m *MockBssopenapiClient) QueryRelationListWithChan(arg0 *bssopenapi.QueryRelationListRequest) (<-chan *bssopenapi.QueryRelationListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelationListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryRelationListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryRelationListWithChan indicates an expected call of QueryRelationListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryRelationListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryRelationListWithChan), arg0)
}

// QueryResellerAvailableQuota mocks base method.
func (m *MockBssopenapiClient) QueryResellerAvailableQuota(arg0 *bssopenapi.QueryResellerAvailableQuotaRequest) (*bssopenapi.QueryResellerAvailableQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResellerAvailableQuota", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryResellerAvailableQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryResellerAvailableQuota indicates an expected call of QueryResellerAvailableQuota.
func (mr *MockBssopenapiClientMockRecorder) QueryResellerAvailableQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResellerAvailableQuota", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResellerAvailableQuota), arg0)
}

// QueryResellerAvailableQuotaWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryResellerAvailableQuotaWithCallback(arg0 *bssopenapi.QueryResellerAvailableQuotaRequest, arg1 func(*bssopenapi.QueryResellerAvailableQuotaResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResellerAvailableQuotaWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryResellerAvailableQuotaWithCallback indicates an expected call of QueryResellerAvailableQuotaWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryResellerAvailableQuotaWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResellerAvailableQuotaWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResellerAvailableQuotaWithCallback), arg0, arg1)
}

// QueryResellerAvailableQuotaWithChan mocks base method.
func (m *MockBssopenapiClient) QueryResellerAvailableQuotaWithChan(arg0 *bssopenapi.QueryResellerAvailableQuotaRequest) (<-chan *bssopenapi.QueryResellerAvailableQuotaResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResellerAvailableQuotaWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryResellerAvailableQuotaResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryResellerAvailableQuotaWithChan indicates an expected call of QueryResellerAvailableQuotaWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryResellerAvailableQuotaWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResellerAvailableQuotaWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResellerAvailableQuotaWithChan), arg0)
}

// QueryResellerUserAlarmThreshold mocks base method.
func (m *MockBssopenapiClient) QueryResellerUserAlarmThreshold(arg0 *bssopenapi.QueryResellerUserAlarmThresholdRequest) (*bssopenapi.QueryResellerUserAlarmThresholdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResellerUserAlarmThreshold", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryResellerUserAlarmThresholdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryResellerUserAlarmThreshold indicates an expected call of QueryResellerUserAlarmThreshold.
func (mr *MockBssopenapiClientMockRecorder) QueryResellerUserAlarmThreshold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResellerUserAlarmThreshold", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResellerUserAlarmThreshold), arg0)
}

// QueryResellerUserAlarmThresholdWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryResellerUserAlarmThresholdWithCallback(arg0 *bssopenapi.QueryResellerUserAlarmThresholdRequest, arg1 func(*bssopenapi.QueryResellerUserAlarmThresholdResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResellerUserAlarmThresholdWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryResellerUserAlarmThresholdWithCallback indicates an expected call of QueryResellerUserAlarmThresholdWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryResellerUserAlarmThresholdWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResellerUserAlarmThresholdWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResellerUserAlarmThresholdWithCallback), arg0, arg1)
}

// QueryResellerUserAlarmThresholdWithChan mocks base method.
func (m *MockBssopenapiClient) QueryResellerUserAlarmThresholdWithChan(arg0 *bssopenapi.QueryResellerUserAlarmThresholdRequest) (<-chan *bssopenapi.QueryResellerUserAlarmThresholdResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResellerUserAlarmThresholdWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryResellerUserAlarmThresholdResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryResellerUserAlarmThresholdWithChan indicates an expected call of QueryResellerUserAlarmThresholdWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryResellerUserAlarmThresholdWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResellerUserAlarmThresholdWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResellerUserAlarmThresholdWithChan), arg0)
}

// QueryResourcePackageInstances mocks base method.
func (m *MockBssopenapiClient) QueryResourcePackageInstances(arg0 *bssopenapi.QueryResourcePackageInstancesRequest) (*bssopenapi.QueryResourcePackageInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResourcePackageInstances", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryResourcePackageInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryResourcePackageInstances indicates an expected call of QueryResourcePackageInstances.
func (mr *MockBssopenapiClientMockRecorder) QueryResourcePackageInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResourcePackageInstances", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResourcePackageInstances), arg0)
}

// QueryResourcePackageInstancesWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryResourcePackageInstancesWithCallback(arg0 *bssopenapi.QueryResourcePackageInstancesRequest, arg1 func(*bssopenapi.QueryResourcePackageInstancesResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResourcePackageInstancesWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryResourcePackageInstancesWithCallback indicates an expected call of QueryResourcePackageInstancesWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryResourcePackageInstancesWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResourcePackageInstancesWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResourcePackageInstancesWithCallback), arg0, arg1)
}

// QueryResourcePackageInstancesWithChan mocks base method.
func (m *MockBssopenapiClient) QueryResourcePackageInstancesWithChan(arg0 *bssopenapi.QueryResourcePackageInstancesRequest) (<-chan *bssopenapi.QueryResourcePackageInstancesResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResourcePackageInstancesWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryResourcePackageInstancesResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryResourcePackageInstancesWithChan indicates an expected call of QueryResourcePackageInstancesWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryResourcePackageInstancesWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResourcePackageInstancesWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryResourcePackageInstancesWithChan), arg0)
}

// QuerySavingsPlansDeductLog mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansDeductLog(arg0 *bssopenapi.QuerySavingsPlansDeductLogRequest) (*bssopenapi.QuerySavingsPlansDeductLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansDeductLog", arg0)
	ret0, _ := ret[0].(*bssopenapi.QuerySavingsPlansDeductLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySavingsPlansDeductLog indicates an expected call of QuerySavingsPlansDeductLog.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansDeductLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansDeductLog", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansDeductLog), arg0)
}

// QuerySavingsPlansDeductLogWithCallback mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansDeductLogWithCallback(arg0 *bssopenapi.QuerySavingsPlansDeductLogRequest, arg1 func(*bssopenapi.QuerySavingsPlansDeductLogResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansDeductLogWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QuerySavingsPlansDeductLogWithCallback indicates an expected call of QuerySavingsPlansDeductLogWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansDeductLogWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansDeductLogWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansDeductLogWithCallback), arg0, arg1)
}

// QuerySavingsPlansDeductLogWithChan mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansDeductLogWithChan(arg0 *bssopenapi.QuerySavingsPlansDeductLogRequest) (<-chan *bssopenapi.QuerySavingsPlansDeductLogResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansDeductLogWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QuerySavingsPlansDeductLogResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QuerySavingsPlansDeductLogWithChan indicates an expected call of QuerySavingsPlansDeductLogWithChan.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansDeductLogWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansDeductLogWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansDeductLogWithChan), arg0)
}

// QuerySavingsPlansDiscount mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansDiscount(arg0 *bssopenapi.QuerySavingsPlansDiscountRequest) (*bssopenapi.QuerySavingsPlansDiscountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansDiscount", arg0)
	ret0, _ := ret[0].(*bssopenapi.QuerySavingsPlansDiscountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySavingsPlansDiscount indicates an expected call of QuerySavingsPlansDiscount.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansDiscount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansDiscount", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansDiscount), arg0)
}

// QuerySavingsPlansDiscountWithCallback mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansDiscountWithCallback(arg0 *bssopenapi.QuerySavingsPlansDiscountRequest, arg1 func(*bssopenapi.QuerySavingsPlansDiscountResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansDiscountWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QuerySavingsPlansDiscountWithCallback indicates an expected call of QuerySavingsPlansDiscountWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansDiscountWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansDiscountWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansDiscountWithCallback), arg0, arg1)
}

// QuerySavingsPlansDiscountWithChan mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansDiscountWithChan(arg0 *bssopenapi.QuerySavingsPlansDiscountRequest) (<-chan *bssopenapi.QuerySavingsPlansDiscountResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansDiscountWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QuerySavingsPlansDiscountResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QuerySavingsPlansDiscountWithChan indicates an expected call of QuerySavingsPlansDiscountWithChan.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansDiscountWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansDiscountWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansDiscountWithChan), arg0)
}

// QuerySavingsPlansInstance mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansInstance(arg0 *bssopenapi.QuerySavingsPlansInstanceRequest) (*bssopenapi.QuerySavingsPlansInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansInstance", arg0)
	ret0, _ := ret[0].(*bssopenapi.QuerySavingsPlansInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySavingsPlansInstance indicates an expected call of QuerySavingsPlansInstance.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansInstance", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansInstance), arg0)
}

// QuerySavingsPlansInstanceWithCallback mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansInstanceWithCallback(arg0 *bssopenapi.QuerySavingsPlansInstanceRequest, arg1 func(*bssopenapi.QuerySavingsPlansInstanceResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansInstanceWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QuerySavingsPlansInstanceWithCallback indicates an expected call of QuerySavingsPlansInstanceWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansInstanceWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansInstanceWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansInstanceWithCallback), arg0, arg1)
}

// QuerySavingsPlansInstanceWithChan mocks base method.
func (m *MockBssopenapiClient) QuerySavingsPlansInstanceWithChan(arg0 *bssopenapi.QuerySavingsPlansInstanceRequest) (<-chan *bssopenapi.QuerySavingsPlansInstanceResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySavingsPlansInstanceWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QuerySavingsPlansInstanceResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QuerySavingsPlansInstanceWithChan indicates an expected call of QuerySavingsPlansInstanceWithChan.
func (mr *MockBssopenapiClientMockRecorder) QuerySavingsPlansInstanceWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySavingsPlansInstanceWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySavingsPlansInstanceWithChan), arg0)
}

// QuerySettleBill mocks base method.
func (m *MockBssopenapiClient) QuerySettleBill(arg0 *bssopenapi.QuerySettleBillRequest) (*bssopenapi.QuerySettleBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySettleBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.QuerySettleBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySettleBill indicates an expected call of QuerySettleBill.
func (mr *MockBssopenapiClientMockRecorder) QuerySettleBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySettleBill", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySettleBill), arg0)
}

// QuerySettleBillWithCallback mocks base method.
func (m *MockBssopenapiClient) QuerySettleBillWithCallback(arg0 *bssopenapi.QuerySettleBillRequest, arg1 func(*bssopenapi.QuerySettleBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySettleBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QuerySettleBillWithCallback indicates an expected call of QuerySettleBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QuerySettleBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySettleBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySettleBillWithCallback), arg0, arg1)
}

// QuerySettleBillWithChan mocks base method.
func (m *MockBssopenapiClient) QuerySettleBillWithChan(arg0 *bssopenapi.QuerySettleBillRequest) (<-chan *bssopenapi.QuerySettleBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySettleBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QuerySettleBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QuerySettleBillWithChan indicates an expected call of QuerySettleBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) QuerySettleBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySettleBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySettleBillWithChan), arg0)
}

// QuerySkuPriceList mocks base method.
func (m *MockBssopenapiClient) QuerySkuPriceList(arg0 *bssopenapi.QuerySkuPriceListRequest) (*bssopenapi.QuerySkuPriceListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySkuPriceList", arg0)
	ret0, _ := ret[0].(*bssopenapi.QuerySkuPriceListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySkuPriceList indicates an expected call of QuerySkuPriceList.
func (mr *MockBssopenapiClientMockRecorder) QuerySkuPriceList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySkuPriceList", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySkuPriceList), arg0)
}

// QuerySkuPriceListWithCallback mocks base method.
func (m *MockBssopenapiClient) QuerySkuPriceListWithCallback(arg0 *bssopenapi.QuerySkuPriceListRequest, arg1 func(*bssopenapi.QuerySkuPriceListResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySkuPriceListWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QuerySkuPriceListWithCallback indicates an expected call of QuerySkuPriceListWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QuerySkuPriceListWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySkuPriceListWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySkuPriceListWithCallback), arg0, arg1)
}

// QuerySkuPriceListWithChan mocks base method.
func (m *MockBssopenapiClient) QuerySkuPriceListWithChan(arg0 *bssopenapi.QuerySkuPriceListRequest) (<-chan *bssopenapi.QuerySkuPriceListResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySkuPriceListWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QuerySkuPriceListResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QuerySkuPriceListWithChan indicates an expected call of QuerySkuPriceListWithChan.
func (mr *MockBssopenapiClientMockRecorder) QuerySkuPriceListWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySkuPriceListWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySkuPriceListWithChan), arg0)
}

// QuerySplitItemBill mocks base method.
func (m *MockBssopenapiClient) QuerySplitItemBill(arg0 *bssopenapi.QuerySplitItemBillRequest) (*bssopenapi.QuerySplitItemBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySplitItemBill", arg0)
	ret0, _ := ret[0].(*bssopenapi.QuerySplitItemBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySplitItemBill indicates an expected call of QuerySplitItemBill.
func (mr *MockBssopenapiClientMockRecorder) QuerySplitItemBill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySplitItemBill", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySplitItemBill), arg0)
}

// QuerySplitItemBillWithCallback mocks base method.
func (m *MockBssopenapiClient) QuerySplitItemBillWithCallback(arg0 *bssopenapi.QuerySplitItemBillRequest, arg1 func(*bssopenapi.QuerySplitItemBillResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySplitItemBillWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QuerySplitItemBillWithCallback indicates an expected call of QuerySplitItemBillWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QuerySplitItemBillWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySplitItemBillWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySplitItemBillWithCallback), arg0, arg1)
}

// QuerySplitItemBillWithChan mocks base method.
func (m *MockBssopenapiClient) QuerySplitItemBillWithChan(arg0 *bssopenapi.QuerySplitItemBillRequest) (<-chan *bssopenapi.QuerySplitItemBillResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySplitItemBillWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QuerySplitItemBillResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QuerySplitItemBillWithChan indicates an expected call of QuerySplitItemBillWithChan.
func (mr *MockBssopenapiClientMockRecorder) QuerySplitItemBillWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySplitItemBillWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QuerySplitItemBillWithChan), arg0)
}

// QueryUserOmsData mocks base method.
func (m *MockBssopenapiClient) QueryUserOmsData(arg0 *bssopenapi.QueryUserOmsDataRequest) (*bssopenapi.QueryUserOmsDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserOmsData", arg0)
	ret0, _ := ret[0].(*bssopenapi.QueryUserOmsDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserOmsData indicates an expected call of QueryUserOmsData.
func (mr *MockBssopenapiClientMockRecorder) QueryUserOmsData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserOmsData", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryUserOmsData), arg0)
}

// QueryUserOmsDataWithCallback mocks base method.
func (m *MockBssopenapiClient) QueryUserOmsDataWithCallback(arg0 *bssopenapi.QueryUserOmsDataRequest, arg1 func(*bssopenapi.QueryUserOmsDataResponse, error)) <-chan int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserOmsDataWithCallback", arg0, arg1)
	ret0, _ := ret[0].(<-chan int)
	return ret0
}

// QueryUserOmsDataWithCallback indicates an expected call of QueryUserOmsDataWithCallback.
func (mr *MockBssopenapiClientMockRecorder) QueryUserOmsDataWithCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserOmsDataWithCallback", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryUserOmsDataWithCallback), arg0, arg1)
}

// QueryUserOmsDataWithChan mocks base method.
func (m *MockBssopenapiClient) QueryUserOmsDataWithChan(arg0 *bssopenapi.QueryUserOmsDataRequest) (<-chan *bssopenapi.QueryUserOmsDataResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserOmsDataWithChan", arg0)
	ret0, _ := ret[0].(<-chan *bssopenapi.QueryUserOmsDataResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// QueryUserOmsDataWithChan indicates an expected call of QueryUserOmsDataWithChan.
func (mr *MockBssopenapiClientMockRecorder) QueryUserOmsDataWithChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserOmsDataWithChan", reflect.TypeOf((*MockBssopenapiClient)(nil).QueryUserOmsDataWithChan), arg0)
}
