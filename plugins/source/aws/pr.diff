diff --git a/plugins/source/aws/Makefile b/plugins/source/aws/Makefile
index 7a1c60098162..9451d634d3f6 100644
--- a/plugins/source/aws/Makefile
+++ b/plugins/source/aws/Makefile
@@ -30,6 +30,7 @@ gen-docs:
 
 	rm -rf ../../../website/tables/aws
 	go run main.go doc ../../../website/tables/aws
+	go run scripts/example_queries/main.go policies/queries ../../../website/tables/aws
 	sed 's_(\(.*\))_(../../../../../website/tables/aws/\1)_' ../../../website/tables/aws/README.md > ./docs/tables/README.md
 	sed -i.bak -e 's_(\(.*\).md)_(tables/\1)_' ../../../website/tables/aws/README.md
 	mv ../../../website/tables/aws/README.md ../../../website/pages/docs/plugins/sources/aws/tables.md
diff --git a/plugins/source/aws/go.mod b/plugins/source/aws/go.mod
index cb270081cd23..16387269cb2e 100644
--- a/plugins/source/aws/go.mod
+++ b/plugins/source/aws/go.mod
@@ -119,11 +119,13 @@ require (
 	github.com/cloudquery/codegen v0.2.1
 	github.com/cloudquery/plugin-pb-go v1.0.9
 	github.com/cloudquery/plugin-sdk/v3 v3.10.4
+	github.com/cockroachdb/cockroachdb-parser v0.0.0-20221207165326-ea0ac1a4778b
 	github.com/gocarina/gocsv v0.0.0-20230513223533-9ddd7fd60602
 	github.com/golang/mock v1.6.0
 	github.com/google/go-cmp v0.5.9
 	github.com/mitchellh/hashstructure/v2 v2.0.2
 	github.com/mitchellh/mapstructure v1.5.0
+	github.com/mjibson/sqlfmt v0.5.0
 	github.com/pkg/errors v0.9.1
 	github.com/rs/zerolog v1.29.0
 	github.com/stretchr/testify v1.8.4
@@ -183,11 +185,31 @@ require (
 )
 
 require (
+	github.com/biogo/store v0.0.0-20201120204734-aad293a2328f // indirect
+	github.com/cockroachdb/apd/v3 v3.1.0 // indirect
+	github.com/cockroachdb/errors v1.9.0 // indirect
+	github.com/cockroachdb/logtags v0.0.0-20211118104740-dabe8e521a4f // indirect
+	github.com/cockroachdb/redact v1.1.3 // indirect
+	github.com/dustin/go-humanize v1.0.1 // indirect
+	github.com/gogo/protobuf v1.3.2 // indirect
+	github.com/golang/geo v0.0.0-20210211234256-740aa86cb551 // indirect
+	github.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect
+	github.com/kr/pretty v0.3.0 // indirect
+	github.com/kr/text v0.2.0 // indirect
+	github.com/lib/pq v1.10.6 // indirect
+	github.com/petermattis/goid v0.0.0-20211229010228-4d14c490ee36 // indirect
+	github.com/pierrre/geohash v1.0.0 // indirect
+	github.com/rogpeppe/go-internal v1.9.0 // indirect
+	github.com/sasha-s/go-deadlock v0.3.1 // indirect
+	github.com/twpayne/go-geom v1.4.2 // indirect
+	github.com/twpayne/go-kml v1.5.2 // indirect
 	golang.org/x/mod v0.8.0 // indirect
 	golang.org/x/net v0.9.0 // indirect
 	golang.org/x/sys v0.7.0 // indirect
 	golang.org/x/text v0.9.0 // indirect
 	golang.org/x/tools v0.6.0 // indirect
+	google.golang.org/genproto v0.0.0-20230525234025-438c736192d0 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20230525234020-1aefcd67740a // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20230530153820-e85fd2cbaebc // indirect
 	google.golang.org/grpc v1.55.0 // indirect
 	google.golang.org/protobuf v1.30.0 // indirect
diff --git a/plugins/source/aws/go.sum b/plugins/source/aws/go.sum
index b59263a8d76c..b1bc3c4852dc 100644
--- a/plugins/source/aws/go.sum
+++ b/plugins/source/aws/go.sum
@@ -31,13 +31,37 @@ cloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohl
 cloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=
 cloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=
 dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=
+github.com/AndreasBriese/bbloom v0.0.0-20190306092124-e2d15f34fcf9/go.mod h1:bOvUY6CB00SOBii9/FifXqc0awNKxLFCL/+pkDPuyl8=
+github.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=
+github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=
+github.com/CloudyKit/fastprinter v0.0.0-20170127035650-74b38d55f37a/go.mod h1:EFZQ978U7x8IRnstaskI3IysnWY5Ao3QgZUKOXlsAdw=
+github.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53/go.mod h1:+3IMCy2vIlbG1XG/0ggNQv0SvxCAIpPM5b1nCz56Xno=
+github.com/CloudyKit/jet v2.1.3-0.20180809161101-62edd43e4f88+incompatible/go.mod h1:HPYO+50pSWkPoj9Q/eq0aRGByCL6ScRlUmiEX5Zgm+w=
+github.com/CloudyKit/jet/v3 v3.0.0/go.mod h1:HKQPgSJmdK8hdoAbKUUWajkHyHo4RaU5rMdUywE7VMo=
+github.com/Codefor/geohash v0.0.0-20140723084247-1b41c28e3a9d h1:iG9B49Q218F/XxXNRM7k/vWf7MKmLIS8AcJV9cGN4nA=
+github.com/Codefor/geohash v0.0.0-20140723084247-1b41c28e3a9d/go.mod h1:RVnhzAX71far8Kc3TQeA0k/dcaEKUnTDSOyet/JCmGI=
+github.com/DATA-DOG/go-sqlmock v1.5.0 h1:Shsta01QNfFxHCfpW6YH2STWB0MudeXXEWMr20OEh60=
+github.com/DATA-DOG/go-sqlmock v1.5.0/go.mod h1:f/Ixk793poVmq4qj/V1dPUg2JEAKC73Q5eFN3EC/SaM=
 github.com/JohnCGriffin/overflow v0.0.0-20211019200055-46fa312c352c h1:RGWPOewvKIROun94nF7v2cua9qP+thov/7M50KEoeSU=
+github.com/Joker/hpp v1.0.0/go.mod h1:8x5n+M1Hp5hC0g8okX3sR3vFQwynaX/UgSOM9MeBKzY=
+github.com/Joker/jade v1.0.1-0.20190614124447-d475f43051e7/go.mod h1:6E6s8o2AE4KhCrqr6GRJjdC/gNfTdxkIXvuGZZda2VM=
+github.com/Masterminds/goutils v1.1.0/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=
+github.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF078ddwwvV3Y=
+github.com/Masterminds/sprig v2.22.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=
+github.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=
+github.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=
+github.com/Shopify/goreferrer v0.0.0-20181106222321-ec9c9a553398/go.mod h1:a1uqRtAwp2Xwc6WNPJEufxJ7fx3npB4UV/JOLmbu5I0=
+github.com/TomiHiltunen/geohash-golang v0.0.0-20150112065804-b3e4e625abfb h1:wumPkzt4zaxO4rHPBrjDK8iZMR41C1qs7njNqlacwQg=
+github.com/TomiHiltunen/geohash-golang v0.0.0-20150112065804-b3e4e625abfb/go.mod h1:QiYsIBRQEO+Z4Rz7GoI+dsHVneZNONvhczuA+llOZNM=
+github.com/ajg/form v1.5.1/go.mod h1:uL1WgH+h2mgNtvBq0339dVnzXdBETtL2LeUXaIv25UY=
 github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=
 github.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=
+github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
 github.com/apache/thrift v0.16.0 h1:qEy6UW60iVOlUy+b9ZR0d5WzUWYGOo4HfopoyBaNmoY=
 github.com/apache/thrift v0.16.0/go.mod h1:PHK3hniurgQaNMZYaCLEqXKsYK8upmhPbmdP2FXSqgU=
+github.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=
 github.com/aws/aws-sdk-go-v2 v1.17.3/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=
 github.com/aws/aws-sdk-go-v2 v1.17.4/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=
 github.com/aws/aws-sdk-go-v2 v1.17.5/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=
@@ -311,15 +335,23 @@ github.com/aws/aws-sdk-go-v2/service/xray v1.16.0 h1:jLrbk0oHwcL/flkJ2ZIQ1lSp0aK
 github.com/aws/aws-sdk-go-v2/service/xray v1.16.0/go.mod h1:Kkt49F7NMkrNQRa/dK5Twp+UtCRViNXp7Mv7rlfac08=
 github.com/aws/smithy-go v1.13.5 h1:hgz0X/DX0dGqTYpGALqXJoRKRj5oQ7150i5FdTePzO8=
 github.com/aws/smithy-go v1.13.5/go.mod h1:Tg+OJXh4MB2R/uN61Ko2f6hTZwB/ZYGOtib8J3gBHzA=
+github.com/aymerick/raymond v2.0.3-0.20180322193309-b565731e1464+incompatible/go.mod h1:osfaiScAUVup+UC9Nfq76eWqDhXlp+4UYaA8uhTBO6g=
 github.com/basgys/goxml2json v1.1.0 h1:4ln5i4rseYfXNd86lGEB+Vi652IsIXIvggKM/BhUKVw=
 github.com/basgys/goxml2json v1.1.0/go.mod h1:wH7a5Np/Q4QoECFIU8zTQlZwZkrilY0itPfecMw41Dw=
+github.com/biogo/store v0.0.0-20201120204734-aad293a2328f h1:+6okTAeUsUrdQr/qN7fIODzowrjjCrnJDg/gkYqcSXY=
+github.com/biogo/store v0.0.0-20201120204734-aad293a2328f/go.mod h1:z52shMwD6SGwRg2iYFjjDwX5Ene4ENTw6HfXraUy/08=
 github.com/bitly/go-simplejson v0.5.0 h1:6IH+V8/tVMab511d5bn4M7EwGXZf9Hj6i2xSwkNEM+Y=
 github.com/bitly/go-simplejson v0.5.0/go.mod h1:cXHtHw4XUPsvGaxgjIAn8PhEWG9NfngEKAMDJEczWVA=
 github.com/bradleyjkemp/cupaloy/v2 v2.8.0 h1:any4BmKE+jGIaMpnU8YgH/I2LPiLBufr6oMMlVBbn9M=
+github.com/broady/gogeohash v0.0.0-20120525094510-7b2c40d64042 h1:iEdmkrNMLXbM7ecffOAtZJQOQUTE4iMonxrb5opUgE4=
+github.com/broady/gogeohash v0.0.0-20120525094510-7b2c40d64042/go.mod h1:f1L9YvXvlt9JTa+A17trQjSMM6bV40f+tHjB+Pi+Fqk=
+github.com/cenkalti/backoff/v4 v4.1.3/go.mod h1:scbssz8iZGpm3xbr14ovlUdkxfGXNInqkPWOWmG2CLw=
 github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
+github.com/checkpoint-restore/go-criu/v5 v5.3.0/go.mod h1:E/eQpaFtUKGOOSEBZgmKAcn+zUUwWxqcaKZlF54wK8E=
 github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
 github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
 github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
+github.com/cilium/ebpf v0.7.0/go.mod h1:/oI2+1shJiTGAMgl6/RgJr36Eo1jzrRcAWbcXO2usCA=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
 github.com/cloudquery/arrow/go/v13 v13.0.0-20230606001313-88d5dc2ed455 h1:PYZgpqjvE8E9p84h7lwTB5riplw7JcEGzlESBW4Wcrw=
 github.com/cloudquery/arrow/go/v13 v13.0.0-20230606001313-88d5dc2ed455/go.mod h1:/XatdE3kDIBqZKhZ7OBUHwP2jaASDFZHqF4puOWM8po=
@@ -335,32 +367,104 @@ github.com/cloudquery/plugin-sdk/v3 v3.10.4 h1:0k9THffm2w5jRLI4I/lHcZ3Moq5EksdZF
 github.com/cloudquery/plugin-sdk/v3 v3.10.4/go.mod h1:LVmzwjYS3VqgFCarC4adwXfz66gTMlJeJRDGVd/Fh8Y=
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
 github.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=
+github.com/cockroachdb/apd/v3 v3.1.0 h1:MK3Ow7LH0W8zkd5GMKA1PvS9qG3bWFI95WaVNfyZJ/w=
+github.com/cockroachdb/apd/v3 v3.1.0/go.mod h1:6qgPBMXjATAdD/VefbRP9NoSLKjbB4LCoA7gN4LpHs4=
+github.com/cockroachdb/cockroachdb-parser v0.0.0-20221207165326-ea0ac1a4778b h1:o4bq379Y+BxcGWyof56Wc2jMnqrUavvG17QVhITERBY=
+github.com/cockroachdb/cockroachdb-parser v0.0.0-20221207165326-ea0ac1a4778b/go.mod h1:xfSU5qFpqIxEicpm/yRZc6Xz50/OrBEnrkPhU2vhNi8=
+github.com/cockroachdb/datadriven v1.0.1-0.20211007161720-b558070c3be0/go.mod h1:5Ib8Meh+jk1RlHIXej6Pzevx/NLlNvQB9pmSBZErGA4=
+github.com/cockroachdb/datadriven v1.0.1-0.20220214170620-9913f5bc19b7/go.mod h1:hi0MtSY3AYDQNDi83kDkMH5/yqM/CsIrsOITkSoH7KI=
+github.com/cockroachdb/errors v1.6.1/go.mod h1:tm6FTP5G81vwJ5lC0SizQo374JNCOPrHyXGitRJoDqM=
+github.com/cockroachdb/errors v1.8.8/go.mod h1:z6VnEL3hZ/2ONZEvG7S5Ym0bU2AqPcEKnIiA1wbsSu0=
+github.com/cockroachdb/errors v1.9.0 h1:B48dYem5SlAY7iU8AKsgedb4gH6mo+bDkbtLIvM/a88=
+github.com/cockroachdb/errors v1.9.0/go.mod h1:vaNcEYYqbIqB5JhKBhFV9CneUqeuEbB2OYJBK4GBNYQ=
+github.com/cockroachdb/logtags v0.0.0-20190617123548-eb05cc24525f/go.mod h1:i/u985jwjWRlyHXQbwatDASoW0RMlZ/3i9yJHE2xLkI=
+github.com/cockroachdb/logtags v0.0.0-20211118104740-dabe8e521a4f h1:6jduT9Hfc0njg5jJ1DdKCFPdMBrp/mdZfCpa5h+WM74=
+github.com/cockroachdb/logtags v0.0.0-20211118104740-dabe8e521a4f/go.mod h1:Vz9DsVWQQhf3vs21MhPMZpMGSht7O/2vFW2xusFUVOs=
+github.com/cockroachdb/redact v1.1.3 h1:AKZds10rFSIj7qADf0g46UixK8NNLwWTNdCIGS5wfSQ=
+github.com/cockroachdb/redact v1.1.3/go.mod h1:BVNblN9mBWFyMyqK1k3AAiSxhvhfK2oOZZ2lK+dpvRg=
+github.com/cockroachdb/sentry-go v0.6.1-cockroachdb.2/go.mod h1:8BT+cPK6xvFOcRlk0R8eg+OTkcqI6baNH4xAkpiYVvQ=
+github.com/codegangsta/inject v0.0.0-20150114235600-33e0aa1cb7c0/go.mod h1:4Zcjuz89kmFXt9morQgcfYZAYZ5n8WHjt81YYWIwtTM=
+github.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=
+github.com/containerd/continuity v0.3.0/go.mod h1:wJEAIwKOm/pBZuBd0JmeTvnLquTB1Ag8espWhkykbPM=
+github.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
+github.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=
+github.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
 github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
+github.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
 github.com/coreos/go-systemd/v22 v22.3.3-0.20220203105225-a9a7ef127534/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
+github.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=
+github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
 github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
+github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
+github.com/creack/pty v1.1.11/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
+github.com/cyphar/filepath-securejoin v0.2.3/go.mod h1:aPGpWjXOXUn2NCNjFvBE6aRxGGx79pTxQpKOJNYHHl4=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/dgraph-io/badger v1.6.0/go.mod h1:zwt7syl517jmP8s94KqSxTlM6IMsdhYy6psNgSztDR4=
+github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=
+github.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=
+github.com/docker/cli v20.10.14+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=
+github.com/docker/cli v20.10.17+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=
+github.com/docker/docker v20.10.7+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
+github.com/docker/docker v20.10.17+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
+github.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=
+github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
+github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
+github.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=
+github.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=
+github.com/eknkc/amber v0.0.0-20171010120322-cdade1c07385/go.mod h1:0vRUJqYpeSZifjYj7uP3BG/gKcuzL9xWVV/Y+cK33KM=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+github.com/etcd-io/bbolt v1.3.3/go.mod h1:ZF2nL25h33cCyBtcyWeZ2/I3HQOfTP+0PIEvHjkjCrw=
+github.com/fanixk/geohash v0.0.0-20150324002647-c1f9b5fa157a h1:Fyfh/dsHFrC6nkX7H7+nFdTd1wROlX/FxEIWVpKYf1U=
+github.com/fanixk/geohash v0.0.0-20150324002647-c1f9b5fa157a/go.mod h1:UgNw+PTmmGN8rV7RvjvnBMsoTU8ZXXnaT3hYsDTBlgQ=
+github.com/fasthttp-contrib/websocket v0.0.0-20160511215533-1f3b11f56072/go.mod h1:duJ4Jxv5lDcvg4QuQr0oowTf7dz4/CR8NtyCooz9HL8=
+github.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=
+github.com/flosch/pongo2 v0.0.0-20190707114632-bbf5a6c351f4/go.mod h1:T9YF2M40nIgbVgp3rreNmTged+9HrbNTIQf1PsaIiTA=
+github.com/frankban/quicktest v1.11.3/go.mod h1:wRf/ReqHper53s+kmmSZizM8NamnL3IM0I9ntUbOk+k=
 github.com/frankban/quicktest v1.14.3 h1:FJKSZTDHjyhriyC81FLQ0LY93eSai0ZyR/ZIkd3ZUKE=
+github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
+github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
+github.com/gavv/httpexpect v2.0.0+incompatible/go.mod h1:x+9tiU1YnrOvnB725RkpoLv1M62hOWzwo5OXotisrKc=
+github.com/getsentry/sentry-go v0.12.0/go.mod h1:NSap0JBYWzHND8oMbyi0+XZhUalc1TBdRL1M71JZW2c=
 github.com/getsentry/sentry-go v0.20.0 h1:bwXW98iMRIWxn+4FgPW7vMrjmbym6HblXALmhjHmQaQ=
 github.com/getsentry/sentry-go v0.20.0/go.mod h1:lc76E2QywIyW8WuBnwl8Lc4bkmQH4+w1gwTf25trprY=
 github.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=
 github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
+github.com/gin-contrib/sse v0.0.0-20190301062529-5545eab6dad3/go.mod h1:VJ0WA2NBN22VlZ2dKZQPAPnyWw5XTlK1KymzLKsr59s=
+github.com/gin-gonic/gin v1.4.0/go.mod h1:OW2EZn3DO8Ln9oIKOvM++LBO+5UPHJJDH72/q/3rZdM=
+github.com/go-check/check v0.0.0-20180628173108-788fd7840127/go.mod h1:9ES+weclKsC9YodN5RgxqK/VD9HM9JsCSh7rNhMZE98=
+github.com/go-errors/errors v1.0.1/go.mod h1:f4zRHt4oKfwPJE5k8C9vpYG+aDHdBFUsgrm6/TyX73Q=
 github.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=
 github.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=
 github.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
 github.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
+github.com/go-martini/martini v0.0.0-20170121215854-22fa46961aab/go.mod h1:/P9AEU963A2AYjv4d1V5eVL1CQbEJq6aCNHDDjibzu8=
+github.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
+github.com/gobwas/httphead v0.0.0-20180130184737-2c6c146eadee/go.mod h1:L0fX3K22YWvt/FAX9NnzrNzcI4wNYi9Yku4O0LKYflo=
+github.com/gobwas/pool v0.2.0/go.mod h1:q8bcK0KcYlCgd9e7WYLm9LpyS+YeLd8JVDW6WezmKEw=
+github.com/gobwas/ws v1.0.2/go.mod h1:szmBTxLgaFppYjEmNtny/v3w89xOydFnnZMcgRRu/EM=
 github.com/gocarina/gocsv v0.0.0-20230513223533-9ddd7fd60602 h1:HSpPf+lPYwzoJNup34uegmOQk5Qm83S+wpu8anTDJkg=
 github.com/gocarina/gocsv v0.0.0-20230513223533-9ddd7fd60602/go.mod h1:5YoVOkjYAQumqlV356Hj3xeYh4BdZuLE0/nRkf2NKkI=
 github.com/goccy/go-json v0.9.11 h1:/pAaQDLHEoCq/5FFmSKBswWmK6H0e8g4159Kc/X/nqk=
 github.com/goccy/go-json v0.9.11/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
 github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
+github.com/godbus/dbus/v5 v5.0.6/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
+github.com/gogo/googleapis v0.0.0-20180223154316-0cd9801be74a/go.mod h1:gf4bu3Q80BeJ6H1S1vYPm8/ELATdvryBaNFGgqEef3s=
+github.com/gogo/googleapis v1.4.1/go.mod h1:2lpHqI5OcWCtVElxXnPt+s8oJvMpySlOyM6xDCrzib4=
+github.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
 github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=
+github.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
+github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
+github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
+github.com/gogo/status v1.1.0/go.mod h1:BFv9nrluPLmrS0EmGVvLaPNmRosr9KapBYd5/hpY1WM=
+github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
+github.com/golang/geo v0.0.0-20210211234256-740aa86cb551 h1:gtexQ/VGyN+VVFRXSFiguSNcXmS6rkKT+X7FdIrTtfo=
+github.com/golang/geo v0.0.0-20210211234256-740aa86cb551/go.mod h1:QZ0nwyI2jOfgRAoBvP+ab5aRr7c9x7lhGEJrKvBwjWI=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
@@ -394,6 +498,7 @@ github.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg
 github.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
 github.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=
 github.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
+github.com/gomodule/redigo v1.7.1-0.20190724094224-574c33c3df38/go.mod h1:B4C85qUVwatsJoIUNIfCRsp7qO0iAmpGFZ4EELWSbC4=
 github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/flatbuffers v2.0.8+incompatible h1:ivUb1cGomAB101ZM1T0nOiWz9pSrTMoa9+EiY7igmkM=
@@ -405,10 +510,13 @@ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/
 github.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
 github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=
+github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
 github.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=
 github.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
@@ -419,91 +527,274 @@ github.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hf
 github.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
 github.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
 github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
+github.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=
+github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=
 github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=
 github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=
+github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
+github.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
+github.com/gorilla/websocket v1.4.1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
 github.com/grpc-ecosystem/go-grpc-middleware/providers/zerolog/v2 v2.0.0-rc.3 h1:hRcWZ7716+E1tkMSZJ/QeeC2dPGGB1R/4z4m9RsL8Qg=
 github.com/grpc-ecosystem/go-grpc-middleware/providers/zerolog/v2 v2.0.0-rc.3/go.mod h1:54asssGY3Bohr5FRbew+bjfuQTT2WS9V7hW7gPqmcKM=
 github.com/grpc-ecosystem/go-grpc-middleware/v2 v2.0.0-rc.2.0.20201002093600-73cf2ae9d891/go.mod h1:GhphxcdlaRyAuBSvo6rV71BvQcvB/vuX8ugCyybuS2k=
 github.com/grpc-ecosystem/go-grpc-middleware/v2 v2.0.0-rc.3 h1:o95KDiV/b1xdkumY5YbLR0/n2+wBxUpgf3HgfKgTyLI=
 github.com/grpc-ecosystem/go-grpc-middleware/v2 v2.0.0-rc.3/go.mod h1:hTxjzRcX49ogbTGVJ1sM5mz5s+SSgiGIyL3jjPxl32E=
+github.com/grpc-ecosystem/grpc-gateway v1.16.0 h1:gmcG1KaJ57LophUzW0Hy8NmPhnMZb4M0+kPpLofRdBo=
+github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
+github.com/hashicorp/go-version v1.2.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
 github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
 github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
+github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
+github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
+github.com/huandu/xstrings v1.3.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=
+github.com/hydrogen18/memlistener v0.0.0-20141126152155-54553eb933fb/go.mod h1:qEIFzExnS6016fRpRfxrExeVn2gbClQA99gQhnIcdhE=
+github.com/hydrogen18/memlistener v0.0.0-20200120041712-dcc25e7acd91/go.mod h1:qEIFzExnS6016fRpRfxrExeVn2gbClQA99gQhnIcdhE=
 github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
+github.com/imdario/mergo v0.3.9/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=
+github.com/imdario/mergo v0.3.12/go.mod h1:jmQim1M+e3UYxmgPu/WyfjB3N3VflVyUjjjwH0dnCYA=
+github.com/imdario/mergo v0.3.13/go.mod h1:4lJ1jqUDcsbIECGy0RUJAXNIhg+6ocWgb1ALK2O4oXg=
+github.com/imkira/go-interpol v1.1.0/go.mod h1:z0h2/2T3XF8kyEPpRgJ3kmNv+C43p+I/CoI+jC3w2iA=
+github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
 github.com/inconshreveable/mousetrap v1.0.1/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
 github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
 github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
+github.com/iris-contrib/blackfriday v2.0.0+incompatible/go.mod h1:UzZ2bDEoaSGPbkg6SAB4att1aAwTmVIx/5gCVqeyUdI=
+github.com/iris-contrib/go.uuid v2.0.0+incompatible/go.mod h1:iz2lgM/1UnEf1kP0L/+fafWORmlnuysV2EMP8MW+qe0=
+github.com/iris-contrib/i18n v0.0.0-20171121225848-987a633949d0/go.mod h1:pMCz62A0xJL6I+umB2YTlFRwWXaDFA0jy+5HzGiJjqI=
+github.com/iris-contrib/jade v1.1.3/go.mod h1:H/geBymxJhShH5kecoiOCSssPX7QWYH7UaeZTSWddIk=
+github.com/iris-contrib/pongo2 v0.0.1/go.mod h1:Ssh+00+3GAZqSQb30AvBRNxBx7rf0GqwkjqxNd0u65g=
+github.com/iris-contrib/schema v0.0.1/go.mod h1:urYA3uvUNG1TIIjOSCzHr9/LmbQo8LrOcOqfqxa4hXw=
 github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=
 github.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=
 github.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=
+github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
+github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
 github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=
+github.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=
+github.com/juju/errors v0.0.0-20181118221551-089d3ea4e4d5/go.mod h1:W54LbzXuIE0boCoNJfwqpmkKJ1O4TCTZMetAt6jGk7Q=
+github.com/juju/loggo v0.0.0-20180524022052-584905176618/go.mod h1:vgyd7OREkbtVEN/8IXZe5Ooef3LQePvuBm9UWj6ZL8U=
+github.com/juju/testing v0.0.0-20180920084828-472a3e8b2073/go.mod h1:63prj8cnj0tU0S9OHjGJn+b1h0ZghCndfnbQolrYTwA=
+github.com/k0kubun/colorstring v0.0.0-20150214042306-9440f1994b88/go.mod h1:3w7q1U84EfirKl04SVQ/s7nPm1ZPhiXd34z40TNz36k=
+github.com/kataras/golog v0.0.9/go.mod h1:12HJgwBIZFNGL0EJnMRhmvGA0PQGx8VFwrZtM4CqbAk=
+github.com/kataras/golog v0.0.10/go.mod h1:yJ8YKCmyL+nWjERB90Qwn+bdyBZsaQwU3bTVFgkFIp8=
+github.com/kataras/iris/v12 v12.0.1/go.mod h1:udK4vLQKkdDqMGJJVd/msuMtN6hpYJhg/lSzuxjhO+U=
+github.com/kataras/iris/v12 v12.1.8/go.mod h1:LMYy4VlP67TQ3Zgriz8RE2h2kMZV2SgMYbq3UhfoFmE=
+github.com/kataras/neffos v0.0.10/go.mod h1:ZYmJC07hQPW67eKuzlfY7SO3bC0mw83A3j6im82hfqw=
+github.com/kataras/neffos v0.0.14/go.mod h1:8lqADm8PnbeFfL7CLXh1WHw53dG27MC3pgi2R1rmoTE=
+github.com/kataras/pio v0.0.0-20190103105442-ea782b38602d/go.mod h1:NV88laa9UiiDuX9AhMbDPkGYSPugBOV6yTZB1l2K9Z0=
+github.com/kataras/pio v0.0.2/go.mod h1:hAoW0t9UmXi4R5Oyq5Z4irTbaTsOemSrDGUtaTl7Dro=
+github.com/kataras/sitemap v0.0.5/go.mod h1:KY2eugMKiPwsJgx7+U103YZehfvNGOXURubcGyk0Bz8=
 github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=
+github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=
+github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/klauspost/asmfmt v1.3.2 h1:4Ri7ox3EwapiOjCki+hw14RyKk201CN4rzyCJRFLpK4=
 github.com/klauspost/asmfmt v1.3.2/go.mod h1:AG8TuvYojzulgDAMCnYn50l/5QV3Bs/tp6j0HLHbNSE=
+github.com/klauspost/compress v1.8.2/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=
+github.com/klauspost/compress v1.9.0/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=
+github.com/klauspost/compress v1.9.7/go.mod h1:RyIbtBH6LamlWaDj8nUwkbUhJ87Yi3uG0guNDohfE1A=
 github.com/klauspost/compress v1.16.0 h1:iULayQNOReoYUe+1qtKOqw9CwJv3aNQu8ivo7lw1HU4=
 github.com/klauspost/compress v1.16.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
+github.com/klauspost/cpuid v1.2.1/go.mod h1:Pj4uuM528wm8OyEC2QMXAi2YiTZ96dNQPGgoMS4s3ek=
 github.com/klauspost/cpuid/v2 v2.0.9 h1:lgaqFMSdTdQYdZ04uHyN2d/eKdOMyi2YLSvlQIBFYa4=
 github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
+github.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
+github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
 github.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=
+github.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
+github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/labstack/echo/v4 v4.1.11/go.mod h1:i541M3Fj6f76NZtHSj7TXnyM8n2gaodfvfxNnFqi74g=
+github.com/labstack/echo/v4 v4.5.0/go.mod h1:czIriw4a0C1dFun+ObrXp7ok03xON0N1awStJ6ArI7Y=
+github.com/labstack/gommon v0.3.0/go.mod h1:MULnywXg0yavhxWKc+lOruYdAhDwPK9wf0OL7NoOu+k=
+github.com/lib/pq v0.0.0-20180327071824-d34b9ff171c2/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
+github.com/lib/pq v1.10.6 h1:jbk+ZieJ0D7EVGJYpL9QTz7/YW6UHbmdnZWYyK5cdBs=
+github.com/lib/pq v1.10.6/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
+github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
+github.com/mattn/go-colorable v0.1.2/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
+github.com/mattn/go-colorable v0.1.8/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
+github.com/mattn/go-colorable v0.1.11/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
 github.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
 github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
 github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
+github.com/mattn/go-isatty v0.0.7/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
+github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
+github.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=
+github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
 github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
 github.com/mattn/go-isatty v0.0.18 h1:DOKFKCQ7FNG2L1rbrmstDN4QVRdS89Nkh85u68Uwp98=
 github.com/mattn/go-isatty v0.0.18/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+github.com/mattn/goveralls v0.0.2/go.mod h1:8d1ZMHsd7fW6IRPKQh46F2WRpyib5/X4FOpevwGNQEw=
+github.com/mediocregopher/mediocre-go-lib v0.0.0-20181029021733-cb65787f37ed/go.mod h1:dSsfyI2zABAdhcbvkXqgxOxrCsbYeHCPgrZkku60dSg=
+github.com/mediocregopher/radix/v3 v3.3.0/go.mod h1:EmfVyvspXz1uZEyPBMyGK+kjWiKQGvsUt6O3Pj+LDCQ=
+github.com/mediocregopher/radix/v3 v3.4.2/go.mod h1:8FL3F6UQRXHXIBSPUs5h0RybMF8i4n7wVopoX3x7Bv8=
+github.com/microcosm-cc/bluemonday v1.0.2/go.mod h1:iVP4YcDBq+n/5fb23BhYFvIMq/leAFZyRl6bYmGDlGc=
 github.com/minio/asm2plan9s v0.0.0-20200509001527-cdd76441f9d8 h1:AMFGa4R4MiIpspGNG7Z948v4n35fFGB3RR3G/ry4FWs=
 github.com/minio/asm2plan9s v0.0.0-20200509001527-cdd76441f9d8/go.mod h1:mC1jAcsrzbxHt8iiaC+zU4b1ylILSosueou12R++wfY=
 github.com/minio/c2goasm v0.0.0-20190812172519-36a3d3bbc4f3 h1:+n/aFZefKZp7spd8DFdX7uMikMLXX4oubIzJF4kv/wI=
 github.com/minio/c2goasm v0.0.0-20190812172519-36a3d3bbc4f3/go.mod h1:RagcQ7I8IeTMnF8JTXieKnO4Z6JCsikNEzj0DwauVzE=
+github.com/mitchellh/copystructure v1.0.0/go.mod h1:SNtv71yrdKgLRyLFxmLdkAbkKEFWgYaq1OVrnRcwhnw=
+github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
 github.com/mitchellh/hashstructure/v2 v2.0.2 h1:vGKWl0YJqUNxE8d+h8f6NJLcCJrgbhC4NcD46KavDd4=
 github.com/mitchellh/hashstructure/v2 v2.0.2/go.mod h1:MG3aRVU/N29oo/V/IhBX8GR/zz4kQkprJgF2EVszyDE=
+github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
+github.com/mitchellh/mapstructure v1.4.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
 github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
+github.com/mitchellh/reflectwalk v1.0.0/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
+github.com/mjibson/sqlfmt v0.5.0 h1:AT70M83T9WmktAttH9C6ryNydPxzHjGykzgTxEp/P9Q=
+github.com/mjibson/sqlfmt v0.5.0/go.mod h1:GUmjWlPlIy+iVFYX4Ya8ACAjaOoH6ruGjIlG0yqqElk=
+github.com/mmcloughlin/geohash v0.9.0 h1:FihR004p/aE1Sju6gcVq5OLDqGcMnpBY+8moBqIsVOs=
+github.com/mmcloughlin/geohash v0.9.0/go.mod h1:oNZxQo5yWJh0eMQEP/8hwQuVx9Z9tjwFUqcTB1SmG0c=
+github.com/moby/sys/mountinfo v0.5.0/go.mod h1:3bMD3Rg+zkqx8MRYPi7Pyb0Ie97QEBmdxbhnCLlSvSU=
+github.com/moby/term v0.0.0-20201216013528-df9cb8a40635/go.mod h1:FBS0z0QWA44HXygs7VXDUOGoN/1TV3RuWkLO04am3wc=
+github.com/moby/term v0.0.0-20210619224110-3f7ff695adc6/go.mod h1:E2VnQOmVuvZB6UYnnDB0qG5Nq/1tD9acaOpo6xmt0Kw=
+github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
+github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
+github.com/moul/http2curl v1.0.0/go.mod h1:8UbvGypXm98wA/IqH45anm5Y2Z6ep6O31QGOAZ3H0fQ=
+github.com/mrunalp/fileutils v0.5.0/go.mod h1:M1WthSahJixYnrXQl/DFQuteStB1weuxD2QJNHXfbSQ=
+github.com/nats-io/jwt v0.3.0/go.mod h1:fRYCDE99xlTsqUzISS1Bi75UBJ6ljOJQOAAu5VglpSg=
+github.com/nats-io/nats.go v1.8.1/go.mod h1:BrFz9vVn0fU3AcH9Vn4Kd7W0NpJ651tD5omQ3M8LwxM=
+github.com/nats-io/nats.go v1.9.1/go.mod h1:ZjDU1L/7fJ09jvUSRVBR2e7+RnLiiIQyqyzEE/Zbp4w=
+github.com/nats-io/nkeys v0.0.2/go.mod h1:dab7URMsZm6Z/jp9Z5UGa87Uutgc2mVpXLC4B7TDb/4=
+github.com/nats-io/nkeys v0.1.0/go.mod h1:xpnFELMwJABBLVhffcfd1MZx6VsNRFpEugbxziKVo7w=
+github.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=
+github.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=
+github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
+github.com/onsi/ginkgo v1.10.3/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
+github.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=
+github.com/onsi/ginkgo v1.13.0/go.mod h1:+REjRxOmWfHCjfv9TTWB1jD1Frx4XydAD3zm1lskyM0=
+github.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=
+github.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=
+github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
+github.com/opencontainers/image-spec v1.0.2/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
+github.com/opencontainers/runc v1.1.2/go.mod h1:Tj1hFw6eFWp/o33uxGf5yF2BX5yz2Z6iptFpuvbbKqc=
+github.com/opencontainers/runc v1.1.3/go.mod h1:1J5XiS+vdZ3wCyZybsuxXZWGrgSr8fFJHLXuG2PsnNg=
+github.com/opencontainers/runtime-spec v1.0.3-0.20210326190908-1c3f411f0417/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=
+github.com/opencontainers/selinux v1.10.0/go.mod h1:2i0OySw99QjzBBQByd1Gr9gSjvuho1lHsJxIJ3gGbJI=
 github.com/opentracing/opentracing-go v1.1.0/go.mod h1:UkNAQd3GIcIGf0SeVgPpRdFStlNbqXla1AfSYxPUl2o=
+github.com/ory/dockertest/v3 v3.9.1/go.mod h1:42Ir9hmvaAPm0Mgibk6mBPi7SFvTXxEcnztDYOJ//uM=
+github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
+github.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5/go.mod h1:jvVRKCrJTQWu0XVbaOlby/2lO20uSCHEMzzplHXte1o=
+github.com/petermattis/goid v0.0.0-20211229010228-4d14c490ee36 h1:64bxqeTEN0/xoEqhKGowgihNuzISS9rEG6YUMU4bzJo=
+github.com/petermattis/goid v0.0.0-20211229010228-4d14c490ee36/go.mod h1:pxMtw7cyUw6B2bRH0ZBANSPg+AoSud1I1iyJHI69jH4=
 github.com/pierrec/lz4/v4 v4.1.15 h1:MO0/ucJhngq7299dKLwIMtgTfbkoSPF6AoMYDd8Q4q0=
 github.com/pierrec/lz4/v4 v4.1.15/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=
+github.com/pierrre/compare v1.0.2 h1:k4IUsHgh+dbcAOIWCfxVa/7G6STjADH2qmhomv+1quc=
+github.com/pierrre/compare v1.0.2/go.mod h1:8UvyRHH+9HS8Pczdd2z5x/wvv67krDwVxoOndaIIDVU=
+github.com/pierrre/geohash v1.0.0 h1:f/zfjdV4rVofTCz1FhP07T+EMQAvcMM2ioGZVt+zqjI=
+github.com/pierrre/geohash v1.0.0/go.mod h1:atytaeVa21hj5F6kMebHYPf8JbIrGxK2FSzN2ajKXms=
 github.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=
+github.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=
+github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
+github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
 github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
+github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=
+github.com/rogpeppe/go-internal v1.8.1/go.mod h1:JeRgkft04UBgHMgCIwADu4Pn6Mtm5d4nPKWu0nJ5d+o=
 github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=
+github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=
 github.com/rs/xid v1.4.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=
 github.com/rs/zerolog v1.19.0/go.mod h1:IzD0RJ65iWH0w97OQQebJEvTZYvsCUm9WVLWBQrJRjo=
 github.com/rs/zerolog v1.29.0 h1:Zes4hju04hjbvkVkOhdl2HpZa+0PmVwigmo8XoORE5w=
 github.com/rs/zerolog v1.29.0/go.mod h1:NILgTygv/Uej1ra5XxGf82ZFSLk58MFGAUS2o6usyD0=
+github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=
+github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
+github.com/ryanuber/columnize v2.1.0+incompatible/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
+github.com/sasha-s/go-deadlock v0.3.1 h1:sqv7fDNShgjcaxkO0JNcOAlr8B9+cV5Ey/OB71efZx0=
+github.com/sasha-s/go-deadlock v0.3.1/go.mod h1:F73l+cr82YSh10GxyRI6qZiCgK64VaZjwesgfQ1/iLM=
+github.com/schollz/closestmatch v2.1.0+incompatible/go.mod h1:RtP1ddjLong6gTkbtmuhtR2uUrrJOpYzYRvbcPAid+g=
+github.com/sclevine/agouti v3.0.0+incompatible/go.mod h1:b4WX9W9L1sfQKXeJf1mUTLZKJ48R1S7H23Ji7oFO5Bw=
+github.com/seccomp/libseccomp-golang v0.9.2-0.20210429002308-3879420cc921/go.mod h1:JA8cRccbGaA1s33RQf7Y1+q9gHmZX1yB/z9WDN1C6fg=
+github.com/seccomp/libseccomp-golang v0.9.2-0.20220502022130-f33da4d89646/go.mod h1:JA8cRccbGaA1s33RQf7Y1+q9gHmZX1yB/z9WDN1C6fg=
+github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
+github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
+github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
+github.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
+github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
+github.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
+github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=
+github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=
+github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
+github.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
 github.com/spf13/cast v1.5.0 h1:rj3WzYc11XZaIZMPKmwP96zkFEnnAmV8s6XbB2aY32w=
 github.com/spf13/cast v1.5.0/go.mod h1:SpXXQ5YoyJw6s3/6cMTQuxvgRl3PCJiyaX9p6b155UU=
+github.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=
 github.com/spf13/cobra v1.6.1 h1:o94oiPyS4KD1mPy2fmcYYHHfCxLqYjJOhGsCHFZtEzA=
 github.com/spf13/cobra v1.6.1/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=
+github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=
+github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
 github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
 github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
+github.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
+github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
+github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
 github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
 github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
+github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=
 github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
+github.com/syndtr/gocapability v0.0.0-20200815063812-42c35b437635/go.mod h1:hkRG7XYTFWNJGYcbNJQlaLq0fg1yr4J4t/NcTQtrfww=
+github.com/the42/cartconvert v0.0.0-20131203171324-aae784c392b8 h1:I4DY8wLxJXCrMYzDM6lKCGc3IQwJX0PlTLsd3nQqI3c=
+github.com/the42/cartconvert v0.0.0-20131203171324-aae784c392b8/go.mod h1:fWO/msnJVhHqN1yX6OBoxSyfj7TEj1hHiL8bJSQsK30=
 github.com/thoas/go-funk v0.9.3 h1:7+nAEx3kn5ZJcnDm2Bh23N2yOtweO14bi//dvRtgLpw=
 github.com/thoas/go-funk v0.9.3/go.mod h1:+IWnUfUmFO1+WVYQWQtIJHeRRdaIyyYglZN7xzUPe4Q=
+github.com/twpayne/go-geom v1.4.2 h1:I2MtC83UDniuTVzGWZOyhMn9hDPrjLm0jsUbohimtZQ=
+github.com/twpayne/go-geom v1.4.2/go.mod h1:zrqClsxeaIieScWGuas1Cm/5Nr/9i1xk9+0t+2ec9g8=
+github.com/twpayne/go-kml v1.5.2 h1:rFMw2/EwgkVssGS2MT6YfWSPZz6BgcJkLxQ53jnE8rQ=
+github.com/twpayne/go-kml v1.5.2/go.mod h1:kz8jAiIz6FIdU2Zjce9qGlVtgFYES9vt7BTPBHf5jl4=
+github.com/twpayne/go-polyline v1.0.0/go.mod h1:ICh24bcLYBX8CknfvNPKqoTbe+eg+MX1NPyJmSBo7pU=
+github.com/twpayne/go-waypoint v0.0.0-20200706203930-b263a7f6e4e8/go.mod h1:qj5pHncxKhu9gxtZEYWypA/z097sxhFlbTyOyt9gcnU=
+github.com/ugorji/go v1.1.4/go.mod h1:uQMGLiO92mf5W77hV/PUCpI3pbzQx3CRekS0kk+RGrc=
+github.com/ugorji/go v1.1.7/go.mod h1:kZn38zHttfInRq0xu/PH0az30d+z6vm202qpg1oXVMw=
+github.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=
+github.com/ugorji/go/codec v1.1.7/go.mod h1:Ax+UKWsSmolVDwsd+7N3ZtXu+yMGCf907BLYF3GoBXY=
+github.com/urfave/cli v1.22.1/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=
+github.com/urfave/negroni v1.0.0/go.mod h1:Meg73S6kFm/4PpbYdq35yYWoCZ9mS/YSx+lKnmiohz4=
+github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
+github.com/valyala/fasthttp v1.6.0/go.mod h1:FstJa9V+Pj9vQ7OJie2qMHdwemEDaDiSdBnvPM1Su9w=
+github.com/valyala/fasttemplate v1.0.1/go.mod h1:UQGH1tvbgY+Nz5t2n7tXsz52dQxojPUpymEIMZ47gx8=
+github.com/valyala/fasttemplate v1.2.1/go.mod h1:KHLXt3tVN2HBp8eijSv/kGJopbvo7S+qRAEEKiv+SiQ=
+github.com/valyala/tcplisten v0.0.0-20161114210144-ceec8f93295a/go.mod h1:v3UYOV9WzVtRmSR+PDvWpU/qWl4Wa5LApYYX4ZtKbio=
+github.com/vishvananda/netlink v1.1.0/go.mod h1:cTgwzPIzzgDAYoQrMm0EdrjRUBkTqKYppBueQtXaqoE=
+github.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df/go.mod h1:JP3t17pCcGlemwknint6hfoeCVQrEMVwxRLRjXpq+BU=
+github.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=
+github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=
+github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=
+github.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=
+github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
+github.com/yalp/jsonpath v0.0.0-20180802001716-5cc68e5049a0/go.mod h1:/LWChgwKmvncFJFHJ7Gvn9wZArjbV5/FppcK2fKk/tI=
+github.com/yudai/gojsondiff v1.0.0/go.mod h1:AY32+k2cwILAkW1fbgxQ5mUmMiZFgLIV+FBNExI05xg=
+github.com/yudai/golcs v0.0.0-20170316035057-ecda9a501e82/go.mod h1:lgjkn3NuSvDfVJdfcVVdX+jpBxNmX4rDAzaS45IcYoM=
+github.com/yudai/pp v2.0.1+incompatible/go.mod h1:PuxR/8QJ7cyCkFp/aUDS+JY727OFEZkTdatxwunjIkc=
 github.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 github.com/zeebo/assert v1.3.0 h1:g7C04CbJuIDKNPFHmsk4hwZDO5O+kntRxzaUoNXj+IQ=
 github.com/zeebo/xxh3 v1.0.2 h1:xZmwmqxHZA8AI603jOQ0tMqmBr9lPeFwGg6d+xy9DC0=
@@ -513,11 +804,17 @@ go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
 go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
 go.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
+golang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20191227163750-53104e6ec876/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20200323165209-0ec3e9974c59/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=
+golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
@@ -542,6 +839,7 @@ golang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHl
 golang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=
 golang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
 golang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
+golang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
 golang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=
 golang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=
 golang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=
@@ -555,9 +853,12 @@ golang.org/x/mod v0.8.0 h1:LUYupSeNrTNCGzR/hVBk2NHZO4hXcVaW1k4Qx7rjPx8=
 golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190327091125-710a502c58a2/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
@@ -565,6 +866,7 @@ golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
@@ -575,12 +877,18 @@ golang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/
 golang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+golang.org/x/net v0.0.0-20201224014010-6772e930b67b/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
 golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=
+golang.org/x/net v0.0.0-20211008194852-3b03d305991f/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
+golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
 golang.org/x/net v0.9.0 h1:aWJ/m6xSmxWBx+V0XRHTlrYrPG56jKsLdTFmsSsCzOM=
 golang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
@@ -597,22 +905,35 @@ golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=
 golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190606203320-7fc4e5ec1444/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190626221950-04f50cda93cb/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191115151921-52ab43148777/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -623,42 +944,69 @@ golang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200519105757-fe76b779f299/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200831180312-196b9ba8737a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210906170528-6f6e22806c34/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211025201205-69cdffdb9359/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211116061358-0a5406a5449c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220209214540-3681064d5158/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220405210540-1e041c57c461/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220412211240-33da011f77ad/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.7.0 h1:3jlCCIQZPdOYu1h8BkNvLz8Kgwtae2cagcG/VamtZRU=
 golang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
+golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
 golang.org/x/text v0.9.0 h1:2sjJmO8cDvYveuX97RDLsxlyUxLl+GHoLxBiRdHllBE=
 golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
 golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/time v0.0.0-20201208040808-7e3f01d25324/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20181221001348-537d06c36207/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190327201419-c70d86f8b7cf/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
+golang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
 golang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20190828213141-aed303cbaa74/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
@@ -686,10 +1034,14 @@ golang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roY
 golang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
+golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
+golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
 golang.org/x/tools v0.1.1/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
+golang.org/x/tools v0.1.3/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
 golang.org/x/tools v0.6.0 h1:BOw41kyTf3PuCW1pVQf8+Cyg8pMlkYB1oo9iJ6D/lKM=
 golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
@@ -721,6 +1073,7 @@ google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7
 google.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=
 google.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
 google.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
+google.golang.org/genproto v0.0.0-20180518175338-11a468237815/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
 google.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
@@ -744,6 +1097,7 @@ google.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfG
 google.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
 google.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=
@@ -751,8 +1105,14 @@ google.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6D
 google.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200806141610-86f49bd18e98/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
 google.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+google.golang.org/genproto v0.0.0-20210624195500-8bfb893ecb84/go.mod h1:SzzZ/N+nwJDaO1kznhnlzqS8ocJICar6hYhVyhi++24=
+google.golang.org/genproto v0.0.0-20230525234025-438c736192d0 h1:x1vNwUhVOcsYoKyEGCZBH694SBmmBjA2EfauFVEI2+M=
+google.golang.org/genproto v0.0.0-20230525234025-438c736192d0/go.mod h1:9ExIQyXL5hZrHzQceCwuSYwZZ5QZBazOcprJ5rgs3lY=
+google.golang.org/genproto/googleapis/api v0.0.0-20230525234020-1aefcd67740a h1:HiYVD+FGJkTo+9zj1gqz0anapsa1JxjiSrN+BJKyUmE=
+google.golang.org/genproto/googleapis/api v0.0.0-20230525234020-1aefcd67740a/go.mod h1:ts19tUU+Z0ZShN1y3aPyq2+O3d5FUNNgT6FtOzmrNn8=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20230530153820-e85fd2cbaebc h1:XSJ8Vk1SWuNr8S18z1NZSziL0CPIXLCCMDOEFtHBOFc=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20230530153820-e85fd2cbaebc/go.mod h1:66JfowdXAEgad5O9NnYcsNPLCPZJD++2L9X0PCMODrA=
+google.golang.org/grpc v1.12.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=
 google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=
@@ -765,7 +1125,9 @@ google.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKa
 google.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=
 google.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
 google.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
+google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
 google.golang.org/grpc v1.37.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=
+google.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=
 google.golang.org/grpc v1.55.0 h1:3Oj82/tFSCeUrRTg/5E/7d/W5A1tj6Ky1ABAuZuv5ag=
 google.golang.org/grpc v1.55.0/go.mod h1:iYEXKGkEBhg1PjZQvoYEVPTDkHo1/bjTnfwTeGONTY8=
 google.golang.org/grpc/examples v0.0.0-20210424002626-9572fd6faeae/go.mod h1:Ly7ZA/ARzg8fnPU9TyZIxoz33sEUuWX7txiqs8lPTgE=
@@ -781,19 +1143,35 @@ google.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGj
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
+google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.30.0 h1:kPPoIgf3TsEvrm0PFe15JQ+570QVxYzEvvHqChK+cng=
 google.golang.org/protobuf v1.30.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
 gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=
+gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
+gopkg.in/go-playground/assert.v1 v1.2.1/go.mod h1:9RXL0bg/zibRAgZUYszZSwO/z8Y/a8bDuhia5mkpMnE=
+gopkg.in/go-playground/validator.v8 v8.18.2/go.mod h1:RX2a/7Ha8BgOhfk7j780h4/u/RRjR0eouCJSH80/M2Y=
+gopkg.in/ini.v1 v1.51.1/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
+gopkg.in/mgo.v2 v2.0.0-20180705113604-9856a29383ce/go.mod h1:yeKp02qBN3iKW1OzL3MGk2IdtZzaj7SFntXj72NppTA=
+gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
 gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
+gopkg.in/yaml.v3 v3.0.0-20191120175047-4206685974f2/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.0/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=
+gotest.tools/v3 v3.2.0/go.mod h1:Mcr9QNxkg0uMvy/YElmo4SpXgJKWgQvYrT7Kw5RzJ1A=
 honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
 honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
diff --git a/plugins/source/aws/scripts/example_queries/main.go b/plugins/source/aws/scripts/example_queries/main.go
new file mode 100644
index 000000000000..52a12a5566a7
--- /dev/null
+++ b/plugins/source/aws/scripts/example_queries/main.go
@@ -0,0 +1,201 @@
+package main
+
+import (
+	"fmt"
+	"log"
+	"os"
+	"path/filepath"
+	"regexp"
+	"sort"
+	"strings"
+	"unicode"
+
+	"github.com/cockroachdb/cockroachdb-parser/pkg/sql/sem/tree"
+	"github.com/mjibson/sqlfmt"
+)
+
+// Add example queries to the generated table docs from the policies/queries
+// directory.
+func main() {
+	if len(os.Args) < 3 {
+		log.Fatalf("Usage: %s <path to queries directory> <path to table docs directory>", os.Args[0])
+	}
+	queriesDir := os.Args[1]
+	tablesDir := os.Args[2]
+
+	tables, err := readTables(tablesDir)
+	if err != nil {
+		log.Fatalf("error reading tables: %v", err)
+	}
+	queries, err := readQueries(queriesDir, tables)
+	if err != nil {
+		log.Fatalf("error reading queries: %v", err)
+	}
+	tableQueries := map[string][]query{}
+	for _, q := range queries {
+		if len(q.tables) == 0 {
+			continue
+		}
+		for _, t := range q.tables {
+			if _, ok := tableQueries[t]; !ok {
+				tableQueries[t] = []query{}
+			}
+			tableQueries[t] = append(tableQueries[t], q)
+		}
+	}
+	for t, qs := range tableQueries {
+		var tbl table
+		for _, tt := range tables {
+			if tt.name == t {
+				tbl = tt
+				break
+			}
+		}
+		err = addQueriesToTable(tbl, qs)
+		if err != nil {
+			log.Println("error adding queries to table:", err)
+		}
+	}
+}
+
+func addQueriesToTable(t table, qs []query) error {
+	b, err := os.ReadFile(t.path)
+	if err != nil {
+		return err
+	}
+	s := string(b)
+	if strings.Contains(s, "## Example Queries") {
+		s = strings.Split(s, "## Example Queries")[0]
+	}
+	s += "\n\n## Example Queries\n\n"
+	s += "These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.\n\n"
+	for _, q := range qs {
+		if q.title == "" {
+			// Skip queries without titles
+			log.Println("Skipping query without title:", q.source)
+			continue
+		}
+		smp, err := q.Simplify()
+		if err != nil {
+			log.Println("Skipping query due to error:", err)
+			continue
+		}
+		s += fmt.Sprintf("### %s\n\n", q.title)
+		s += fmt.Sprintf("```sql\n%s\n```\n\n", smp)
+	}
+	s += "\n"
+	return os.WriteFile(t.path, []byte(s), 0644)
+}
+
+type table struct {
+	name string
+	path string
+}
+
+func readTables(dir string) ([]table, error) {
+	files, err := os.ReadDir(dir)
+	if err != nil {
+		return nil, err
+	}
+	ts := make([]table, 0, len(files))
+	for _, f := range files {
+		if f.IsDir() {
+			continue
+		}
+		if filepath.Ext(f.Name()) != ".md" {
+			continue
+		}
+		ts = append(ts, table{
+			name: strings.TrimSuffix(f.Name(), ".md"),
+			path: filepath.Join(dir, f.Name()),
+		})
+	}
+	return ts, nil
+}
+
+type query struct {
+	tables []string
+	query  string
+	title  string
+	source string
+}
+
+func (q query) Simplify() (string, error) {
+	qs := q.query
+	qs = regexp.MustCompile(`[ \t]+`).ReplaceAllString(qs, " ")
+	qs = regexp.MustCompile(`(?i)insert into aws_policy_results`).ReplaceAllString(qs, "")
+	qs = strings.Trim(qs, "\n ")
+	qs = regexp.MustCompile(`(?i):'execution_time'::timestamp as execution_time,`).ReplaceAllString(qs, "")
+	qs = regexp.MustCompile(`(?i):'execution_time' as execution_time,`).ReplaceAllString(qs, "")
+	qs = regexp.MustCompile(`(?i):'framework' as framework,`).ReplaceAllString(qs, "")
+	qs = regexp.MustCompile(`(?i):'check_id' as check_id,`).ReplaceAllString(qs, "")
+	n, err := sqlfmt.FmtSQL(tree.PrettyCfg{
+		LineWidth:                80,
+		TabWidth:                 2,
+		DoNotNewLineAfterColName: false,
+		Align:                    0,
+		UseTabs:                  false,
+		Simplify:                 true,
+		Case:                     nil,
+		JSONFmt:                  false,
+	}, []string{qs})
+	if err != nil {
+		return "", err
+	}
+	return n, nil
+}
+
+func readQueries(dir string, tables []table) ([]query, error) {
+	queries := []query{}
+	err := filepath.WalkDir(dir, func(path string, d os.DirEntry, err error) error {
+		if err != nil {
+			return err
+		}
+		if d.IsDir() {
+			return nil
+		}
+		q, err := readQuery(path, tables)
+		if err != nil {
+			return err
+		}
+		queries = append(queries, q)
+		return nil
+	})
+	return queries, err
+}
+
+func readQuery(path string, tables []table) (query, error) {
+	b, err := os.ReadFile(path)
+	if err != nil {
+		return query{}, err
+	}
+	q := query{
+		tables: []string{},
+		query:  string(b),
+		title:  extractTitleFromQuery(string(b)),
+		source: path,
+	}
+	m := map[string]struct{}{}
+	for _, t := range tables {
+		if strings.Contains(q.query, t.name) {
+			if _, ok := m[t.name]; ok {
+				continue
+			}
+			m[t.name] = struct{}{}
+			q.tables = append(q.tables, t.name)
+		}
+	}
+	sort.Strings(q.tables)
+	return q, nil
+}
+
+func extractTitleFromQuery(q string) string {
+	r := regexp.MustCompile(`(?i)'(.+)' as title,`)
+	matches := r.FindStringSubmatch(q)
+	if len(matches) == 0 {
+		return ""
+	}
+	title := matches[1]
+	title = string(unicode.ToUpper(rune(title[0]))) + title[1:]
+	return title
+}
diff --git a/website/tables/aws/aws_accessanalyzer_analyzers.md b/website/tables/aws/aws_accessanalyzer_analyzers.md
index 5fd04b9f0354..ce178f88ce9b 100644
--- a/website/tables/aws/aws_accessanalyzer_analyzers.md
+++ b/website/tables/aws/aws_accessanalyzer_analyzers.md
@@ -30,4 +30,41 @@ The following tables depend on aws_accessanalyzer_analyzers:
 |last_resource_analyzed|`utf8`|
 |last_resource_analyzed_at|`timestamp[us, tz=UTC]`|
 |status_reason|`json`|
-|tags|`json`|
\ No newline at end of file
+|tags|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure that IAM Access analyzer is enabled for all regions (Automated)
+
+```sql
+WITH
+  regions_with_enabled_accessanalyzer
+    AS (
+      SELECT
+        ar.region AS analyzed_region
+      FROM
+        aws_regions AS ar
+        LEFT JOIN aws_accessanalyzer_analyzers AS aaaa ON
+            ar.region = aaaa.region
+      WHERE
+        aaaa.status = 'ACTIVE'
+    )
+SELECT
+  'Ensure that IAM Access analyzer is enabled for all regions (Automated)'
+    AS title,
+  account_id,
+  region AS resource_id,
+  CASE
+  WHEN aregion.analyzed_region IS NULL AND ar.enabled = true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_regions AS ar
+  LEFT JOIN regions_with_enabled_accessanalyzer AS aregion ON
+      ar.region = aregion.analyzed_region;
+```
+
+
diff --git a/website/tables/aws/aws_acm_certificates.md b/website/tables/aws/aws_acm_certificates.md
index 4d951aefa77b..054043a0b1d6 100644
--- a/website/tables/aws/aws_acm_certificates.md
+++ b/website/tables/aws/aws_acm_certificates.md
@@ -42,4 +42,62 @@ The primary key for this table is **arn**.
 |status|`utf8`|
 |subject|`utf8`|
 |subject_alternative_names|`list<item: utf8, nullable>`|
-|type|`utf8`|
\ No newline at end of file
+|type|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Certificate has less than 30 days to be renewed
+
+```sql
+SELECT
+  'certificate has less than 30 days to be renewed' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN not_after < timezone('UTC', now()) + '30'::INTERVAL DAY THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_acm_certificates;
+```
+
+### Unused ACM certificate
+
+```sql
+SELECT
+  'Unused ACM certificate' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_acm_certificates
+WHERE
+  array_length(in_use_by, 1) = 0;
+```
+
+### Classic Load Balancers with SSL/HTTPS listeners should use a certificate provided by AWS Certificate Manager
+
+```sql
+SELECT
+  'Classic Load Balancers with SSL/HTTPS listeners should use a certificate provided by AWS Certificate Manager'
+    AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN li->'Listener'->>'Protocol' = 'HTTPS'
+  AND aws_acm_certificates.arn IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv1_load_balancers AS lb,
+  jsonb_array_elements(lb.listener_descriptions) AS li
+  LEFT JOIN aws_acm_certificates ON
+      aws_acm_certificates.arn = li->'Listener'->>'SSLCertificateId';
+```
+
+
diff --git a/website/tables/aws/aws_apigateway_api_keys.md b/website/tables/aws/aws_apigateway_api_keys.md
index 1a4faa4dc439..32d978d91d9d 100644
--- a/website/tables/aws/aws_apigateway_api_keys.md
+++ b/website/tables/aws/aws_apigateway_api_keys.md
@@ -26,4 +26,24 @@ The primary key for this table is **arn**.
 |name|`utf8`|
 |stage_keys|`list<item: utf8, nullable>`|
 |tags|`json`|
-|value|`utf8`|
\ No newline at end of file
+|value|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused API Gateway API key
+
+```sql
+SELECT
+  'Unused API Gateway API key' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_apigateway_api_keys
+WHERE
+  enabled = false;
+```
+
+
diff --git a/website/tables/aws/aws_apigateway_rest_apis.md b/website/tables/aws/aws_apigateway_rest_apis.md
index d86c2adb1343..58ea544aaf61 100644
--- a/website/tables/aws/aws_apigateway_rest_apis.md
+++ b/website/tables/aws/aws_apigateway_rest_apis.md
@@ -42,4 +42,62 @@ The following tables depend on aws_apigateway_rest_apis:
 |policy|`utf8`|
 |tags|`json`|
 |version|`utf8`|
-|warnings|`list<item: utf8, nullable>`|
\ No newline at end of file
+|warnings|`list<item: utf8, nullable>`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### API Gateway REST and WebSocket API logging should be enabled
+
+```sql
+(
+  SELECT
+    DISTINCT
+    'API Gateway REST and WebSocket API logging should be enabled' AS title,
+    r.account_id,
+    'arn:' || 'aws' || ':apigateway:' || r.region || ':/restapis/' || r.id
+      AS resource_id,
+    CASE
+    WHEN s.logging_level NOT IN ('"ERROR"', '"INFO"') THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    view_aws_apigateway_method_settings AS s
+    LEFT JOIN aws_apigateway_rest_apis AS r ON s.rest_api_arn = r.arn
+)
+UNION
+  (
+    SELECT
+      DISTINCT
+      'API Gateway REST and WebSocket API logging should be enabled' AS title,
+      a.account_id,
+      'arn:' || 'aws' || ':apigateway:' || a.region || ':/apis/' || a.id
+        AS resource_id,
+      CASE
+      WHEN s.default_route_settings->>'LoggingLevel' IN (NULL, 'OFF')
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_apigatewayv2_api_stages AS s
+      LEFT JOIN aws_apigatewayv2_apis AS a ON s.api_arn = a.arn
+  );
+```
+
+### Find all API Gateway instances that are publicly accessible
+
+```sql
+SELECT
+  'Find all API Gateway instances that are publicly accessible' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN NOT ('{PRIVATE}' = t) THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_apigateway_rest_apis,
+  jsonb_array_elements_text(endpoint_configuration->'Types') AS t;
+```
+
+
diff --git a/website/tables/aws/aws_apigatewayv2_api_stages.md b/website/tables/aws/aws_apigatewayv2_api_stages.md
index 7015c90a81ce..77c51a87b740 100644
--- a/website/tables/aws/aws_apigatewayv2_api_stages.md
+++ b/website/tables/aws/aws_apigatewayv2_api_stages.md
@@ -36,4 +36,49 @@ This table depends on [aws_apigatewayv2_apis](aws_apigatewayv2_apis).
 |last_updated_date|`timestamp[us, tz=UTC]`|
 |route_settings|`json`|
 |stage_variables|`json`|
-|tags|`json`|
\ No newline at end of file
+|tags|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### API Gateway REST and WebSocket API logging should be enabled
+
+```sql
+(
+  SELECT
+    DISTINCT
+    'API Gateway REST and WebSocket API logging should be enabled' AS title,
+    r.account_id,
+    'arn:' || 'aws' || ':apigateway:' || r.region || ':/restapis/' || r.id
+      AS resource_id,
+    CASE
+    WHEN s.logging_level NOT IN ('"ERROR"', '"INFO"') THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    view_aws_apigateway_method_settings AS s
+    LEFT JOIN aws_apigateway_rest_apis AS r ON s.rest_api_arn = r.arn
+)
+UNION
+  (
+    SELECT
+      DISTINCT
+      'API Gateway REST and WebSocket API logging should be enabled' AS title,
+      a.account_id,
+      'arn:' || 'aws' || ':apigateway:' || a.region || ':/apis/' || a.id
+        AS resource_id,
+      CASE
+      WHEN s.default_route_settings->>'LoggingLevel' IN (NULL, 'OFF')
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_apigatewayv2_api_stages AS s
+      LEFT JOIN aws_apigatewayv2_apis AS a ON s.api_arn = a.arn
+  );
+```
+
+
diff --git a/website/tables/aws/aws_apigatewayv2_apis.md b/website/tables/aws/aws_apigatewayv2_apis.md
index b48c1eefd6d6..7b2ff5b7b608 100644
--- a/website/tables/aws/aws_apigatewayv2_apis.md
+++ b/website/tables/aws/aws_apigatewayv2_apis.md
@@ -43,4 +43,62 @@ The following tables depend on aws_apigatewayv2_apis:
 |import_info|`list<item: utf8, nullable>`|
 |tags|`json`|
 |version|`utf8`|
-|warnings|`list<item: utf8, nullable>`|
\ No newline at end of file
+|warnings|`list<item: utf8, nullable>`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### API Gateway REST and WebSocket API logging should be enabled
+
+```sql
+(
+  SELECT
+    DISTINCT
+    'API Gateway REST and WebSocket API logging should be enabled' AS title,
+    r.account_id,
+    'arn:' || 'aws' || ':apigateway:' || r.region || ':/restapis/' || r.id
+      AS resource_id,
+    CASE
+    WHEN s.logging_level NOT IN ('"ERROR"', '"INFO"') THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    view_aws_apigateway_method_settings AS s
+    LEFT JOIN aws_apigateway_rest_apis AS r ON s.rest_api_arn = r.arn
+)
+UNION
+  (
+    SELECT
+      DISTINCT
+      'API Gateway REST and WebSocket API logging should be enabled' AS title,
+      a.account_id,
+      'arn:' || 'aws' || ':apigateway:' || a.region || ':/apis/' || a.id
+        AS resource_id,
+      CASE
+      WHEN s.default_route_settings->>'LoggingLevel' IN (NULL, 'OFF')
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_apigatewayv2_api_stages AS s
+      LEFT JOIN aws_apigatewayv2_apis AS a ON s.api_arn = a.arn
+  );
+```
+
+### Find all API Gateway V2 instances (HTTP and Webhook) that are publicly accessible
+
+```sql
+SELECT
+  'Find all API Gateway V2 instances (HTTP and Webhook) that are publicly accessible'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_apigatewayv2_apis;
+```
+
+
diff --git a/website/tables/aws/aws_applicationautoscaling_policies.md b/website/tables/aws/aws_applicationautoscaling_policies.md
index 0c3e925c9a4f..8ca949857115 100644
--- a/website/tables/aws/aws_applicationautoscaling_policies.md
+++ b/website/tables/aws/aws_applicationautoscaling_policies.md
@@ -26,4 +26,49 @@ The primary key for this table is **arn**.
 |service_namespace|`utf8`|
 |alarms|`json`|
 |step_scaling_policy_configuration|`json`|
-|target_tracking_scaling_policy_configuration|`json`|
\ No newline at end of file
+|target_tracking_scaling_policy_configuration|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### DynamoDB tables should automatically scale capacity with demand
+
+```sql
+SELECT
+  'DynamoDB tables should automatically scale capacity with demand' AS title,
+  t.account_id,
+  pr.arn AS resource_id,
+  CASE
+  WHEN t.billing_mode_summary->>'BillingMode' IS DISTINCT FROM 'PAY_PER_REQUEST'
+  AND (
+      (
+        s.replica_provisioned_read_capacity_auto_scaling_settings->>'AutoScalingDisabled'
+      )::BOOL
+      IS NOT false
+      OR (
+          s.replica_provisioned_write_capacity_auto_scaling_settings->>'AutoScalingDisabled'
+        )::BOOL
+        IS NOT false
+    )
+  AND (pr._cq_id IS NULL OR pw._cq_id IS NULL)
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_dynamodb_tables AS t
+  LEFT JOIN aws_dynamodb_table_replica_auto_scalings AS s ON s.table_arn = t.arn
+  LEFT JOIN aws_applicationautoscaling_policies AS pr ON
+      pr.service_namespace = 'dynamodb'
+      AND pr.resource_id = concat('table/', t.table_name)
+      AND pr.policy_type = 'TargetTrackingScaling'
+      AND pr.scalable_dimension = 'dynamodb:table:ReadCapacityUnits'
+  LEFT JOIN aws_applicationautoscaling_policies AS pw ON
+      pw.service_namespace = 'dynamodb'
+      AND pw.resource_id = concat('table/', t.table_name)
+      AND pw.policy_type = 'TargetTrackingScaling'
+      AND pw.scalable_dimension = 'dynamodb:table:WriteCapacityUnits';
+```
+
+
diff --git a/website/tables/aws/aws_autoscaling_groups.md b/website/tables/aws/aws_autoscaling_groups.md
index 0a20ec25d102..4931ca6cbf8e 100644
--- a/website/tables/aws/aws_autoscaling_groups.md
+++ b/website/tables/aws/aws_autoscaling_groups.md
@@ -60,4 +60,29 @@ The following tables depend on aws_autoscaling_groups:
 |vpc_zone_identifier|`utf8`|
 |warm_pool_configuration|`json`|
 |warm_pool_size|`int64`|
-|notification_configurations|`json`|
\ No newline at end of file
+|notification_configurations|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Auto Scaling groups associated with a load balancer should use health checks
+
+```sql
+SELECT
+  'Auto Scaling groups associated with a load balancer should use health checks'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN array_length(load_balancer_names, 1) > 0
+  AND health_check_type IS DISTINCT FROM 'ELB'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_autoscaling_groups;
+```
+
+
diff --git a/website/tables/aws/aws_backup_vault_recovery_points.md b/website/tables/aws/aws_backup_vault_recovery_points.md
index 69f5a0ace56f..4e765a9f1db3 100644
--- a/website/tables/aws/aws_backup_vault_recovery_points.md
+++ b/website/tables/aws/aws_backup_vault_recovery_points.md
@@ -43,4 +43,26 @@ This table depends on [aws_backup_vaults](aws_backup_vaults).
 |resource_type|`utf8`|
 |source_backup_vault_arn|`utf8`|
 |status|`utf8`|
-|status_message|`utf8`|
\ No newline at end of file
+|status_message|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Vaults with no recovery points
+
+```sql
+WITH
+  "point" AS (SELECT DISTINCT vault_arn FROM aws_backup_vault_recovery_points)
+SELECT
+  'Vaults with no recovery points' AS title,
+  vault.account_id,
+  vault.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_backup_vaults AS vault LEFT JOIN "point" ON "point".vault_arn = vault.arn
+WHERE
+  "point".vault_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_backup_vaults.md b/website/tables/aws/aws_backup_vaults.md
index 161738df745e..0d1d6d00b217 100644
--- a/website/tables/aws/aws_backup_vaults.md
+++ b/website/tables/aws/aws_backup_vaults.md
@@ -34,4 +34,26 @@ The following tables depend on aws_backup_vaults:
 |locked|`bool`|
 |max_retention_days|`int64`|
 |min_retention_days|`int64`|
-|number_of_recovery_points|`int64`|
\ No newline at end of file
+|number_of_recovery_points|`int64`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Vaults with no recovery points
+
+```sql
+WITH
+  "point" AS (SELECT DISTINCT vault_arn FROM aws_backup_vault_recovery_points)
+SELECT
+  'Vaults with no recovery points' AS title,
+  vault.account_id,
+  vault.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_backup_vaults AS vault LEFT JOIN "point" ON "point".vault_arn = vault.arn
+WHERE
+  "point".vault_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_cloudfront_distributions.md b/website/tables/aws/aws_cloudfront_distributions.md
index 63b77bb18a1f..c6a18908bd31 100644
--- a/website/tables/aws/aws_cloudfront_distributions.md
+++ b/website/tables/aws/aws_cloudfront_distributions.md
@@ -25,4 +25,183 @@ The primary key for this table is **arn**.
 |status|`utf8`|
 |active_trusted_key_groups|`json`|
 |active_trusted_signers|`json`|
-|alias_icp_recordals|`json`|
\ No newline at end of file
+|alias_icp_recordals|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### CloudFront distributions should have logging enabled
+
+```sql
+SELECT
+  'CloudFront distributions should have logging enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (distribution_config->'Logging'->>'Enabled')::BOOL IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudfront_distributions;
+```
+
+### Find all CloudFront distributions
+
+```sql
+SELECT
+  'Find all CloudFront distributions' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_cloudfront_distributions;
+```
+
+### API Gateway should be associated with an AWS WAF web ACL
+
+```sql
+SELECT
+  'API Gateway should be associated with an AWS WAF web ACL' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN distribution_config->>'WebACLId' = '' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudfront_distributions;
+```
+
+### CloudFront distributions should have a default root object configured
+
+```sql
+SELECT
+  'CloudFront distributions should have a default root object configured'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN distribution_config->>'DefaultRootObject' = '' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudfront_distributions;
+```
+
+### Disabled CloudFront distribution
+
+```sql
+SELECT
+  'Disabled CloudFront distribution' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_cloudfront_distributions
+WHERE
+  (distribution_config->>'Enabled')::BOOL IS NOT true;
+```
+
+### CloudFront distributions should have origin access identity enabled
+
+```sql
+SELECT
+  'CloudFront distributions should have origin access identity enabled'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN o->>'DomainName' LIKE '%s3.amazonaws.com'
+  AND o->'S3OriginConfig'->>'OriginAccessIdentity' = ''
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudfront_distributions,
+  jsonb_array_elements(distribution_config->'Origins'->'Items') AS o;
+```
+
+### CloudFront distributions should have origin failover configured
+
+```sql
+WITH
+  origin_groups
+    AS (
+      SELECT
+        acd.arn, distribution_config->'OriginGroups'->'Items' AS ogs
+      FROM
+        aws_cloudfront_distributions AS acd
+    ),
+  oids
+    AS (
+      SELECT
+        DISTINCT
+        account_id,
+        acd.arn AS resource_id,
+        CASE
+        WHEN o.ogs = 'null'
+        OR o.ogs->'Members'->'Items' = 'null'
+        OR jsonb_array_length(o.ogs->'Members'->'Items') = 0
+        THEN 'fail'
+        ELSE 'pass'
+        END
+          AS status
+      FROM
+        aws_cloudfront_distributions AS acd
+        LEFT JOIN origin_groups AS o ON o.arn = acd.arn
+    )
+SELECT
+  'CloudFront distributions should have origin failover configured' AS title,
+  account_id,
+  resource_id,
+  status
+FROM
+  oids;
+```
+
+### CloudFront distributions should require encryption in transit
+
+```sql
+WITH
+  cachebeviors
+    AS (
+      SELECT
+        DISTINCT arn, account_id
+      FROM
+        (
+          SELECT
+            arn, account_id, d AS cachebehavior
+          FROM
+            aws_cloudfront_distributions,
+            jsonb_array_elements(distribution_config->'CacheBehaviors'->'Items')
+              AS d
+          WHERE
+            distribution_config->'CacheBehaviors'->'Items' != 'null'
+          UNION
+            SELECT
+              arn,
+              account_id,
+              distribution_config->'DefaultCacheBehavior' AS cachebehavior
+            FROM
+              aws_cloudfront_distributions
+        )
+          AS cachebeviors
+      WHERE
+        cachebehavior->>'ViewerProtocolPolicy' = 'allow-all'
+    )
+SELECT
+  'CloudFront distributions should require encryption in transit' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  cachebeviors;
+```
+
+
diff --git a/website/tables/aws/aws_cloudtrail_trail_event_selectors.md b/website/tables/aws/aws_cloudtrail_trail_event_selectors.md
index 0c36d1e1d551..ee2ef45abe4d 100644
--- a/website/tables/aws/aws_cloudtrail_trail_event_selectors.md
+++ b/website/tables/aws/aws_cloudtrail_trail_event_selectors.md
@@ -24,4 +24,37 @@ This table depends on [aws_cloudtrail_trails](aws_cloudtrail_trails).
 |data_resources|`json`|
 |exclude_management_event_sources|`list<item: utf8, nullable>`|
 |include_management_events|`bool`|
-|read_write_type|`utf8`|
\ No newline at end of file
+|read_write_type|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure CloudTrail is enabled in all regions
+
+```sql
+SELECT
+  'Ensure CloudTrail is enabled in all regions' AS title,
+  aws_cloudtrail_trails.account_id,
+  arn AS resource_id,
+  CASE
+  WHEN is_multi_region_trail = false
+  OR (
+      is_multi_region_trail = true
+      AND (read_write_type != 'All' OR include_management_events = false)
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudtrail_trails
+  INNER JOIN aws_cloudtrail_trail_event_selectors ON
+      aws_cloudtrail_trails.arn = aws_cloudtrail_trail_event_selectors.trail_arn
+      AND aws_cloudtrail_trails.region
+        = aws_cloudtrail_trail_event_selectors.region
+      AND aws_cloudtrail_trails.account_id
+        = aws_cloudtrail_trail_event_selectors.account_id;
+```
+
+
diff --git a/website/tables/aws/aws_cloudtrail_trails.md b/website/tables/aws/aws_cloudtrail_trails.md
index 363124fb1317..eb2ae516d8d4 100644
--- a/website/tables/aws/aws_cloudtrail_trails.md
+++ b/website/tables/aws/aws_cloudtrail_trails.md
@@ -40,4 +40,103 @@ The following tables depend on aws_cloudtrail_trails:
 |sns_topic_arn|`utf8`|
 |sns_topic_name|`utf8`|
 |trail_arn|`utf8`|
-|tags|`json`|
\ No newline at end of file
+|tags|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket
+
+```sql
+SELECT
+  'Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket'
+    AS title,
+  t.account_id,
+  t.arn AS resource_id,
+  CASE
+  WHEN b.logging_target_bucket IS NULL OR b.logging_target_prefix IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudtrail_trails AS t
+  INNER JOIN aws_s3_buckets AS b ON t.s3_bucket_name = b.name;
+```
+
+### Ensure CloudTrail is enabled in all regions
+
+```sql
+SELECT
+  'Ensure CloudTrail is enabled in all regions' AS title,
+  aws_cloudtrail_trails.account_id,
+  arn AS resource_id,
+  CASE
+  WHEN is_multi_region_trail = false
+  OR (
+      is_multi_region_trail = true
+      AND (read_write_type != 'All' OR include_management_events = false)
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudtrail_trails
+  INNER JOIN aws_cloudtrail_trail_event_selectors ON
+      aws_cloudtrail_trails.arn = aws_cloudtrail_trail_event_selectors.trail_arn
+      AND aws_cloudtrail_trails.region
+        = aws_cloudtrail_trail_event_selectors.region
+      AND aws_cloudtrail_trails.account_id
+        = aws_cloudtrail_trail_event_selectors.account_id;
+```
+
+### CloudTrail trails should be integrated with CloudWatch Logs
+
+```sql
+SELECT
+  'CloudTrail trails should be integrated with CloudWatch Logs' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN cloud_watch_logs_log_group_arn IS NULL
+  OR (status->>'LatestCloudWatchLogsDeliveryTime')::TIMESTAMP
+    < (now() - '1 days'::INTERVAL)
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudtrail_trails;
+```
+
+### Ensure CloudTrail log file validation is enabled
+
+```sql
+SELECT
+  'Ensure CloudTrail log file validation is enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN log_file_validation_enabled = false THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudtrail_trails;
+```
+
+### CloudTrail should have encryption at rest enabled
+
+```sql
+SELECT
+  'CloudTrail should have encryption at rest enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN kms_key_id IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_cloudtrail_trails;
+```
+
+
diff --git a/website/tables/aws/aws_cloudwatch_alarms.md b/website/tables/aws/aws_cloudwatch_alarms.md
index 3a13c2e5a639..e6022a3ecabf 100644
--- a/website/tables/aws/aws_cloudwatch_alarms.md
+++ b/website/tables/aws/aws_cloudwatch_alarms.md
@@ -46,4 +46,24 @@ The primary key for this table is **arn**.
 |threshold|`float64`|
 |threshold_metric_id|`utf8`|
 |treat_missing_data|`utf8`|
-|unit|`utf8`|
\ No newline at end of file
+|unit|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Disabled CloudWatch alarm
+
+```sql
+SELECT
+  'Disabled CloudWatch alarm' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_cloudwatch_alarms
+WHERE
+  actions_enabled = false OR array_length(alarm_actions, 1) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_codebuild_projects.md b/website/tables/aws/aws_codebuild_projects.md
index 45aaf4a335c4..79061748c0ea 100644
--- a/website/tables/aws/aws_codebuild_projects.md
+++ b/website/tables/aws/aws_codebuild_projects.md
@@ -43,4 +43,54 @@ The primary key for this table is **arn**.
 |source_version|`utf8`|
 |timeout_in_minutes|`int64`|
 |vpc_config|`json`|
-|webhook|`json`|
\ No newline at end of file
+|webhook|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### CodeBuild project environment variables should not contain clear text credentials
+
+```sql
+SELECT
+  DISTINCT
+  'CodeBuild project environment variables should not contain clear text credentials'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN e->>'Type' = 'PLAINTEXT'
+  AND (
+      upper(e->>'Name') LIKE '%ACCESS_KEY%'
+      OR upper(e->>'Name') LIKE '%SECRET%'
+      OR upper(e->>'Name') LIKE '%PASSWORD%'
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_codebuild_projects,
+  jsonb_array_elements(environment->'EnvironmentVariables') AS e;
+```
+
+### CodeBuild GitHub or Bitbucket source repository URLs should use OAuth
+
+```sql
+SELECT
+  'CodeBuild GitHub or Bitbucket source repository URLs should use OAuth'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN source->>'Type' IN ('GITHUB', 'BITBUCKET')
+  AND source->'Auth'->>'Type' != 'OAUTH'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_codebuild_projects;
+```
+
+
diff --git a/website/tables/aws/aws_config_configuration_recorders.md b/website/tables/aws/aws_config_configuration_recorders.md
index 92a0477a7841..d9ed9593dd07 100644
--- a/website/tables/aws/aws_config_configuration_recorders.md
+++ b/website/tables/aws/aws_config_configuration_recorders.md
@@ -26,4 +26,30 @@ The primary key for this table is **arn**.
 |status_last_status|`utf8`|
 |status_last_status_change_time|`timestamp[us, tz=UTC]`|
 |status_last_stop_time|`timestamp[us, tz=UTC]`|
-|status_recording|`bool`|
\ No newline at end of file
+|status_recording|`bool`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### AWS Config should be enabled
+
+```sql
+SELECT
+  'AWS Config should be enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (recording_group->>'IncludeGlobalResourceTypes')::BOOL IS NOT true
+  OR (recording_group->>'AllSupported')::BOOL IS NOT true
+  OR status_recording IS NOT true
+  OR status_last_status IS DISTINCT FROM 'SUCCESS'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_config_configuration_recorders;
+```
+
+
diff --git a/website/tables/aws/aws_dax_clusters.md b/website/tables/aws/aws_dax_clusters.md
index 24a88f082101..4f216b1d3073 100644
--- a/website/tables/aws/aws_dax_clusters.md
+++ b/website/tables/aws/aws_dax_clusters.md
@@ -35,4 +35,26 @@ The primary key for this table is **arn**.
 |security_groups|`json`|
 |status|`utf8`|
 |subnet_group|`utf8`|
-|total_nodes|`int64`|
\ No newline at end of file
+|total_nodes|`int64`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### DynamoDB Accelerator (DAX) clusters should be encrypted at rest
+
+```sql
+SELECT
+  'DynamoDB Accelerator (DAX) clusters should be encrypted at rest' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN sse_description->>'Status' IS DISTINCT FROM 'ENABLED' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_dax_clusters;
+```
+
+
diff --git a/website/tables/aws/aws_directconnect_connections.md b/website/tables/aws/aws_directconnect_connections.md
index eb3455d28197..03561c441739 100644
--- a/website/tables/aws/aws_directconnect_connections.md
+++ b/website/tables/aws/aws_directconnect_connections.md
@@ -38,4 +38,24 @@ The composite primary key for this table is (**arn**, **id**).
 |partner_name|`utf8`|
 |port_encryption_status|`utf8`|
 |provider_name|`utf8`|
-|vlan|`int64`|
\ No newline at end of file
+|vlan|`int64`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Direct Connect connections in "down" state
+
+```sql
+SELECT
+  'Direct Connect connections in "down" state' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_directconnect_connections
+WHERE
+  connection_state = 'down';
+```
+
+
diff --git a/website/tables/aws/aws_directconnect_lags.md b/website/tables/aws/aws_directconnect_lags.md
index cae4323a6682..d07e169897e3 100644
--- a/website/tables/aws/aws_directconnect_lags.md
+++ b/website/tables/aws/aws_directconnect_lags.md
@@ -37,4 +37,24 @@ The primary key for this table is **arn**.
 |minimum_links|`int64`|
 |number_of_connections|`int64`|
 |owner_account|`utf8`|
-|provider_name|`utf8`|
\ No newline at end of file
+|provider_name|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Direct Connect LAGs with no connections
+
+```sql
+SELECT
+  'Direct Connect LAGs with no connections' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_directconnect_lags
+WHERE
+  number_of_connections = 0 OR COALESCE(jsonb_array_length(connections), 0) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_dms_replication_instances.md b/website/tables/aws/aws_dms_replication_instances.md
index a753b0fd9d31..b6f73dafcbc9 100644
--- a/website/tables/aws/aws_dms_replication_instances.md
+++ b/website/tables/aws/aws_dms_replication_instances.md
@@ -42,4 +42,23 @@ The primary key for this table is **arn**.
 |replication_subnet_group|`json`|
 |secondary_availability_zone|`utf8`|
 |vpc_security_groups|`json`|
-|tags|`json`|
\ No newline at end of file
+|tags|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### AWS Database Migration Service replication instances should not be public
+
+```sql
+SELECT
+  'AWS Database Migration Service replication instances should not be public'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN publicly_accessible IS true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_dms_replication_instances;
+```
+
+
diff --git a/website/tables/aws/aws_dynamodb_table_continuous_backups.md b/website/tables/aws/aws_dynamodb_table_continuous_backups.md
index 7d07f3431a40..4ae7f0e0a347 100644
--- a/website/tables/aws/aws_dynamodb_table_continuous_backups.md
+++ b/website/tables/aws/aws_dynamodb_table_continuous_backups.md
@@ -22,4 +22,29 @@ This table depends on [aws_dynamodb_tables](aws_dynamodb_tables).
 |region|`utf8`|
 |table_arn|`utf8`|
 |continuous_backups_status|`utf8`|
-|point_in_time_recovery_description|`json`|
\ No newline at end of file
+|point_in_time_recovery_description|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### DynamoDB tables should have point-in-time recovery enabled
+
+```sql
+SELECT
+  'DynamoDB tables should have point-in-time recovery enabled' AS title,
+  t.account_id,
+  t.arn AS resource_id,
+  CASE
+  WHEN b.point_in_time_recovery_description->>'PointInTimeRecoveryStatus'
+  IS DISTINCT FROM 'ENABLED'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_dynamodb_tables AS t
+  LEFT JOIN aws_dynamodb_table_continuous_backups AS b ON b.table_arn = t.arn;
+```
+
+
diff --git a/website/tables/aws/aws_dynamodb_table_replica_auto_scalings.md b/website/tables/aws/aws_dynamodb_table_replica_auto_scalings.md
index 2653de0bcc85..c8f2bb155100 100644
--- a/website/tables/aws/aws_dynamodb_table_replica_auto_scalings.md
+++ b/website/tables/aws/aws_dynamodb_table_replica_auto_scalings.md
@@ -25,4 +25,49 @@ This table depends on [aws_dynamodb_tables](aws_dynamodb_tables).
 |region_name|`utf8`|
 |replica_provisioned_read_capacity_auto_scaling_settings|`json`|
 |replica_provisioned_write_capacity_auto_scaling_settings|`json`|
-|replica_status|`utf8`|
\ No newline at end of file
+|replica_status|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### DynamoDB tables should automatically scale capacity with demand
+
+```sql
+SELECT
+  'DynamoDB tables should automatically scale capacity with demand' AS title,
+  t.account_id,
+  pr.arn AS resource_id,
+  CASE
+  WHEN t.billing_mode_summary->>'BillingMode' IS DISTINCT FROM 'PAY_PER_REQUEST'
+  AND (
+      (
+        s.replica_provisioned_read_capacity_auto_scaling_settings->>'AutoScalingDisabled'
+      )::BOOL
+      IS NOT false
+      OR (
+          s.replica_provisioned_write_capacity_auto_scaling_settings->>'AutoScalingDisabled'
+        )::BOOL
+        IS NOT false
+    )
+  AND (pr._cq_id IS NULL OR pw._cq_id IS NULL)
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_dynamodb_tables AS t
+  LEFT JOIN aws_dynamodb_table_replica_auto_scalings AS s ON s.table_arn = t.arn
+  LEFT JOIN aws_applicationautoscaling_policies AS pr ON
+      pr.service_namespace = 'dynamodb'
+      AND pr.resource_id = concat('table/', t.table_name)
+      AND pr.policy_type = 'TargetTrackingScaling'
+      AND pr.scalable_dimension = 'dynamodb:table:ReadCapacityUnits'
+  LEFT JOIN aws_applicationautoscaling_policies AS pw ON
+      pw.service_namespace = 'dynamodb'
+      AND pw.resource_id = concat('table/', t.table_name)
+      AND pw.policy_type = 'TargetTrackingScaling'
+      AND pw.scalable_dimension = 'dynamodb:table:WriteCapacityUnits';
+```
+
+
diff --git a/website/tables/aws/aws_dynamodb_tables.md b/website/tables/aws/aws_dynamodb_tables.md
index 436b63e5757f..67dc12b0777b 100644
--- a/website/tables/aws/aws_dynamodb_tables.md
+++ b/website/tables/aws/aws_dynamodb_tables.md
@@ -45,4 +45,82 @@ The following tables depend on aws_dynamodb_tables:
 |table_id|`utf8`|
 |table_name|`utf8`|
 |table_size_bytes|`int64`|
-|table_status|`utf8`|
\ No newline at end of file
+|table_status|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### DynamoDB tables should automatically scale capacity with demand
+
+```sql
+SELECT
+  'DynamoDB tables should automatically scale capacity with demand' AS title,
+  t.account_id,
+  pr.arn AS resource_id,
+  CASE
+  WHEN t.billing_mode_summary->>'BillingMode' IS DISTINCT FROM 'PAY_PER_REQUEST'
+  AND (
+      (
+        s.replica_provisioned_read_capacity_auto_scaling_settings->>'AutoScalingDisabled'
+      )::BOOL
+      IS NOT false
+      OR (
+          s.replica_provisioned_write_capacity_auto_scaling_settings->>'AutoScalingDisabled'
+        )::BOOL
+        IS NOT false
+    )
+  AND (pr._cq_id IS NULL OR pw._cq_id IS NULL)
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_dynamodb_tables AS t
+  LEFT JOIN aws_dynamodb_table_replica_auto_scalings AS s ON s.table_arn = t.arn
+  LEFT JOIN aws_applicationautoscaling_policies AS pr ON
+      pr.service_namespace = 'dynamodb'
+      AND pr.resource_id = concat('table/', t.table_name)
+      AND pr.policy_type = 'TargetTrackingScaling'
+      AND pr.scalable_dimension = 'dynamodb:table:ReadCapacityUnits'
+  LEFT JOIN aws_applicationautoscaling_policies AS pw ON
+      pw.service_namespace = 'dynamodb'
+      AND pw.resource_id = concat('table/', t.table_name)
+      AND pw.policy_type = 'TargetTrackingScaling'
+      AND pw.scalable_dimension = 'dynamodb:table:WriteCapacityUnits';
+```
+
+### DynamoDB tables should have point-in-time recovery enabled
+
+```sql
+SELECT
+  'DynamoDB tables should have point-in-time recovery enabled' AS title,
+  t.account_id,
+  t.arn AS resource_id,
+  CASE
+  WHEN b.point_in_time_recovery_description->>'PointInTimeRecoveryStatus'
+  IS DISTINCT FROM 'ENABLED'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_dynamodb_tables AS t
+  LEFT JOIN aws_dynamodb_table_continuous_backups AS b ON b.table_arn = t.arn;
+```
+
+### DynamoDB table with no items
+
+```sql
+SELECT
+  'DynamoDB table with no items' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_dynamodb_tables
+WHERE
+  item_count = 0;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_ebs_snapshot_attributes.md b/website/tables/aws/aws_ec2_ebs_snapshot_attributes.md
index 1118330f44c1..43560b97574d 100644
--- a/website/tables/aws/aws_ec2_ebs_snapshot_attributes.md
+++ b/website/tables/aws/aws_ec2_ebs_snapshot_attributes.md
@@ -23,4 +23,40 @@ This table depends on [aws_ec2_ebs_snapshots](aws_ec2_ebs_snapshots).
 |snapshot_arn (PK)|`utf8`|
 |create_volume_permissions|`json`|
 |product_codes|`json`|
-|snapshot_id|`utf8`|
\ No newline at end of file
+|snapshot_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon EBS snapshots should not be public, determined by the ability to be restorable by anyone
+
+```sql
+WITH
+  snapshot_access_groups
+    AS (
+      SELECT
+        account_id,
+        region,
+        snapshot_id,
+        jsonb_array_elements(create_volume_permissions)->>'Group' AS group,
+        jsonb_array_elements(create_volume_permissions)->>'UserId' AS user_id
+      FROM
+        aws_ec2_ebs_snapshot_attributes
+    )
+SELECT
+  DISTINCT
+  'Amazon EBS snapshots should not be public, determined by the ability to be restorable by anyone'
+    AS title,
+  account_id,
+  snapshot_id AS resource_id,
+  CASE
+  WHEN "group" = 'all' OR user_id IS DISTINCT FROM '' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  snapshot_access_groups;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_ebs_volumes.md b/website/tables/aws/aws_ec2_ebs_volumes.md
index d6bfe18385be..935ca6e9ada9 100644
--- a/website/tables/aws/aws_ec2_ebs_volumes.md
+++ b/website/tables/aws/aws_ec2_ebs_volumes.md
@@ -32,4 +32,36 @@ The primary key for this table is **arn**.
 |state|`utf8`|
 |throughput|`int64`|
 |volume_id|`utf8`|
-|volume_type|`utf8`|
\ No newline at end of file
+|volume_type|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Detached EBS volume
+
+```sql
+SELECT
+  'Detached EBS volume' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_ebs_volumes
+WHERE
+  COALESCE(jsonb_array_length(attachments), 0) = 0;
+```
+
+### Attached EBS volumes should be encrypted at rest
+
+```sql
+SELECT
+  'Attached EBS volumes should be encrypted at rest' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN encrypted IS false THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_ec2_ebs_volumes;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_eips.md b/website/tables/aws/aws_ec2_eips.md
index 1d54416295d3..ad50c91295ce 100644
--- a/website/tables/aws/aws_ec2_eips.md
+++ b/website/tables/aws/aws_ec2_eips.md
@@ -29,4 +29,22 @@ The primary key for this table is **_cq_id**.
 |network_interface_owner_id|`utf8`|
 |private_ip_address|`utf8`|
 |public_ip|`utf8`|
-|public_ipv4_pool|`utf8`|
\ No newline at end of file
+|public_ipv4_pool|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused EC2 EIPs should be removed
+
+```sql
+SELECT
+  'Unused EC2 EIPs should be removed' AS title,
+  account_id,
+  public_ip AS resource_id,
+  CASE WHEN instance_id IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_ec2_eips;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_flow_logs.md b/website/tables/aws/aws_ec2_flow_logs.md
index 2ecdc16f66f6..98e924e63017 100644
--- a/website/tables/aws/aws_ec2_flow_logs.md
+++ b/website/tables/aws/aws_ec2_flow_logs.md
@@ -32,4 +32,27 @@ The primary key for this table is **arn**.
 |log_group_name|`utf8`|
 |max_aggregation_interval|`int64`|
 |resource_id|`utf8`|
-|traffic_type|`utf8`|
\ No newline at end of file
+|traffic_type|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### VPC flow logging should be enabled in all VPCs
+
+```sql
+SELECT
+  'VPC flow logging should be enabled in all VPCs' AS title,
+  aws_ec2_vpcs.account_id,
+  aws_ec2_vpcs.arn,
+  CASE
+  WHEN aws_ec2_flow_logs.resource_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_ec2_vpcs
+  LEFT JOIN aws_ec2_flow_logs ON
+      aws_ec2_vpcs.vpc_id = aws_ec2_flow_logs.resource_id;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_hosts.md b/website/tables/aws/aws_ec2_hosts.md
index c3a486d43a7f..3981c12c1c0e 100644
--- a/website/tables/aws/aws_ec2_hosts.md
+++ b/website/tables/aws/aws_ec2_hosts.md
@@ -34,4 +34,24 @@ The primary key for this table is **arn**.
 |outpost_arn|`utf8`|
 |owner_id|`utf8`|
 |release_time|`timestamp[us, tz=UTC]`|
-|state|`utf8`|
\ No newline at end of file
+|state|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused dedicated host
+
+```sql
+SELECT
+  'Unused dedicated host' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_hosts
+WHERE
+  COALESCE(jsonb_array_length(instances), 0) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_images.md b/website/tables/aws/aws_ec2_images.md
index 48573ad20b65..80797a872090 100644
--- a/website/tables/aws/aws_ec2_images.md
+++ b/website/tables/aws/aws_ec2_images.md
@@ -51,4 +51,40 @@ The following tables depend on aws_ec2_images:
 |state_reason|`json`|
 |tpm_support|`utf8`|
 |usage_operation|`utf8`|
-|virtualization_type|`utf8`|
\ No newline at end of file
+|virtualization_type|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### AMIs should require IMDSv2
+
+```sql
+SELECT
+  'AMIs should require IMDSv2' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN imds_support IS DISTINCT FROM 'v2.0' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_images;
+```
+
+### Unused own EC2 image
+
+```sql
+SELECT
+  'Unused own EC2 image' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_images
+WHERE
+  COALESCE(jsonb_array_length(block_device_mappings), 0) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_instances.md b/website/tables/aws/aws_ec2_instances.md
index d904a4f7caba..69849b3e994b 100644
--- a/website/tables/aws/aws_ec2_instances.md
+++ b/website/tables/aws/aws_ec2_instances.md
@@ -73,4 +73,213 @@ The primary key for this table is **arn**.
 |usage_operation|`utf8`|
 |usage_operation_update_time|`timestamp[us, tz=UTC]`|
 |virtualization_type|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### EC2 instances should not use multiple ENIs
+
+```sql
+WITH
+  data
+    AS (
+      SELECT
+        account_id, instance_id, count(nics->>'Status') AS cnt
+      FROM
+        aws_ec2_instances
+        LEFT JOIN jsonb_array_elements(aws_ec2_instances.network_interfaces)
+            AS nics ON true
+      GROUP BY
+        account_id, instance_id
+    )
+SELECT
+  'EC2 instances should not use multiple ENIs' AS title,
+  account_id,
+  instance_id AS resource_id,
+  CASE WHEN cnt > 1 THEN 'fail' ELSE 'pass' END AS status
+FROM
+  data;
+```
+
+### EC2 instances should not have a public IP address
+
+```sql
+SELECT
+  'EC2 instances should not have a public IP address' AS title,
+  account_id,
+  instance_id AS resource_id,
+  CASE WHEN public_ip_address IS NOT NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_ec2_instances;
+```
+
+### Security group is not currently in use so it should be deleted
+
+```sql
+WITH
+  interface_groups
+    AS (
+      SELECT
+        DISTINCT g->>'GroupId' AS id
+      FROM
+        aws_ec2_instances AS i,
+        jsonb_array_elements(network_interfaces) AS a,
+        jsonb_array_elements(a->'Groups') AS g
+    )
+SELECT
+  'security group is not currently in use so it should be deleted' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN interface_groups.id IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_ec2_security_groups
+  LEFT JOIN interface_groups ON
+      aws_ec2_security_groups.group_id = interface_groups.id;
+```
+
+### EC2 instances should use IMDSv2
+
+```sql
+SELECT
+  'EC2 instances should use IMDSv2' AS title,
+  account_id,
+  instance_id AS resource_id,
+  CASE
+  WHEN metadata_options->>'HttpTokens' IS DISTINCT FROM 'required' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_instances;
+```
+
+### Find all ec2 instances that have unrestricted access to the internet with a wide open security group and routing
+
+```sql
+-- Find all AWS instances that are in a subnet that includes a catchall route
+SELECT
+  'Find all ec2 instances that have unrestricted access to the internet with a wide open security group and routing'
+    AS title,
+  account_id,
+  instance_id AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_instances
+WHERE
+  subnet_id
+  IN (
+      SELECT
+        a->>'SubnetId'
+      FROM
+        aws_ec2_route_tables AS t,
+        jsonb_array_elements(t.associations) AS a,
+        jsonb_array_elements(t.routes) AS r
+      WHERE
+        r->>'DestinationCidrBlock' = '0.0.0.0/0'
+        OR r->>'DestinationIpv6CidrBlock' = '::/0'
+    )
+  AND instance_id
+    IN (
+        SELECT
+          instance_id
+        FROM
+          aws_ec2_instances,
+          jsonb_array_elements(security_groups) AS sg
+          INNER JOIN view_aws_security_group_egress_rules ON id = sg->>'GroupId'
+        WHERE
+          ip = '0.0.0.0/0' OR ip6 = '::/0'
+      );
+```
+
+### All ec2 instances that have unrestricted access to the internet via a security group
+
+```sql
+-- Find all AWS instances that have a security group that allows unrestricted egress
+SELECT
+  'All ec2 instances that have unrestricted access to the internet via a security group'
+    AS title,
+  aws_ec2_instances.account_id,
+  instance_id AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_instances,
+  jsonb_array_elements(security_groups) AS sg
+  INNER JOIN view_aws_security_group_egress_rules ON id = sg->>'GroupId'
+WHERE
+  ip = '0.0.0.0/0' OR ip6 = '::/0';
+```
+
+### Find all instances with a public IP address
+
+```sql
+SELECT
+  'Find all instances with a public IP address' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN public_ip_address IS NOT NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_ec2_instances;
+```
+
+### Unused EC2 security group
+
+```sql
+WITH
+  interface_groups
+    AS (
+      SELECT
+        DISTINCT a->>'GroupId' AS group_id
+      FROM
+        aws_ec2_instances, jsonb_array_elements(security_groups) AS a
+    )
+SELECT
+  'Unused EC2 security group' AS title,
+  sg.account_id,
+  sg.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_security_groups AS sg
+  LEFT JOIN interface_groups ON interface_groups.group_id = sg.group_id
+WHERE
+  interface_groups.group_id IS NULL;
+```
+
+### Stopped EC2 instances should be removed after a specified time period
+
+```sql
+SELECT
+  'Stopped EC2 instances should be removed after a specified time period'
+    AS title,
+  account_id,
+  instance_id AS resource_id,
+  CASE
+  WHEN state->>'Name' = 'stopped'
+  AND now() - state_transition_reason_time > '30'::INTERVAL DAY
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_ec2_instances;
+```
+
+### EC2 instances should be managed by AWS Systems Manager
+
+```sql
+SELECT
+  'EC2 instances should be managed by AWS Systems Manager' AS title,
+  aws_ec2_instances.account_id,
+  aws_ec2_instances.arn AS resource_id,
+  CASE
+  WHEN aws_ssm_instances.instance_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_instances
+  LEFT JOIN aws_ssm_instances ON
+      aws_ec2_instances.instance_id = aws_ssm_instances.instance_id;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_internet_gateways.md b/website/tables/aws/aws_ec2_internet_gateways.md
index a8c2c1095fe8..10e0e804ef11 100644
--- a/website/tables/aws/aws_ec2_internet_gateways.md
+++ b/website/tables/aws/aws_ec2_internet_gateways.md
@@ -20,4 +20,24 @@ The primary key for this table is **arn**.
 |tags|`json`|
 |attachments|`json`|
 |internet_gateway_id|`utf8`|
-|owner_id|`utf8`|
\ No newline at end of file
+|owner_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused internet gateway
+
+```sql
+SELECT
+  'Unused internet gateway' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_internet_gateways
+WHERE
+  COALESCE(jsonb_array_length(attachments), 0) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_network_acls.md b/website/tables/aws/aws_ec2_network_acls.md
index 50c394007bf0..7530da7370f6 100644
--- a/website/tables/aws/aws_ec2_network_acls.md
+++ b/website/tables/aws/aws_ec2_network_acls.md
@@ -23,4 +23,53 @@ The primary key for this table is **arn**.
 |is_default|`bool`|
 |network_acl_id|`utf8`|
 |owner_id|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused network access control list
+
+```sql
+SELECT
+  'Unused network access control list' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_network_acls
+WHERE
+  COALESCE(jsonb_array_length(associations), 0) = 0;
+```
+
+### Unused network access control lists should be removed
+
+```sql
+WITH
+  results
+    AS (
+      SELECT
+        DISTINCT
+        account_id,
+        network_acl_id AS resource_id,
+        CASE
+        WHEN (a->>'NetworkAclAssociationId') IS NULL THEN 'pass'
+        ELSE 'fail'
+        END
+          AS status
+      FROM
+        aws_ec2_network_acls
+        LEFT JOIN jsonb_array_elements(aws_ec2_network_acls.associations)
+            AS a ON true
+    )
+SELECT
+  'Unused network access control lists should be removed' AS title,
+  account_id,
+  resource_id,
+  status
+FROM
+  results;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_regional_configs.md b/website/tables/aws/aws_ec2_regional_configs.md
index 367779493429..a11a303bda27 100644
--- a/website/tables/aws/aws_ec2_regional_configs.md
+++ b/website/tables/aws/aws_ec2_regional_configs.md
@@ -15,4 +15,26 @@ The composite primary key for this table is (**account_id**, **region**).
 |account_id (PK)|`utf8`|
 |region (PK)|`utf8`|
 |ebs_encryption_enabled_by_default|`bool`|
-|ebs_default_kms_key_id|`utf8`|
\ No newline at end of file
+|ebs_default_kms_key_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### EBS default encryption should be enabled
+
+```sql
+SELECT
+  'EBS default encryption should be enabled' AS title,
+  account_id,
+  concat(account_id, ':', region) AS resource_id,
+  CASE
+  WHEN ebs_encryption_enabled_by_default IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_regional_configs;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_route_tables.md b/website/tables/aws/aws_ec2_route_tables.md
index 372b9bb671d8..a8a610312c55 100644
--- a/website/tables/aws/aws_ec2_route_tables.md
+++ b/website/tables/aws/aws_ec2_route_tables.md
@@ -23,4 +23,113 @@ The primary key for this table is **arn**.
 |propagating_vgws|`json`|
 |route_table_id|`utf8`|
 |routes|`json`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Find all ec2 instances that have unrestricted access to the internet with a wide open security group and routing
+
+```sql
+-- Find all AWS instances that are in a subnet that includes a catchall route
+SELECT
+  'Find all ec2 instances that have unrestricted access to the internet with a wide open security group and routing'
+    AS title,
+  account_id,
+  instance_id AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_instances
+WHERE
+  subnet_id
+  IN (
+      SELECT
+        a->>'SubnetId'
+      FROM
+        aws_ec2_route_tables AS t,
+        jsonb_array_elements(t.associations) AS a,
+        jsonb_array_elements(t.routes) AS r
+      WHERE
+        r->>'DestinationCidrBlock' = '0.0.0.0/0'
+        OR r->>'DestinationIpv6CidrBlock' = '::/0'
+    )
+  AND instance_id
+    IN (
+        SELECT
+          instance_id
+        FROM
+          aws_ec2_instances,
+          jsonb_array_elements(security_groups) AS sg
+          INNER JOIN view_aws_security_group_egress_rules ON id = sg->>'GroupId'
+        WHERE
+          ip = '0.0.0.0/0' OR ip6 = '::/0'
+      );
+```
+
+### Unused route table
+
+```sql
+SELECT
+  'Unused route table' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_route_tables
+WHERE
+  COALESCE(jsonb_array_length(associations), 0) = 0;
+```
+
+### Find all lambda functions that have unrestricted access to the internet
+
+```sql
+SELECT
+  DISTINCT
+  'Find all lambda functions that have unrestricted access to the internet'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lambda_functions,
+  jsonb_array_elements_text(configuration->'VpcConfig'->'SecurityGroupIds')
+    AS sgs,
+  jsonb_array_elements_text(configuration->'VpcConfig'->' SubnetIds') AS sns
+WHERE
+  sns
+  IN (
+      SELECT
+        a->>'SubnetId'
+      FROM
+        public.aws_ec2_route_tables,
+        jsonb_array_elements(associations) AS a,
+        jsonb_array_elements(routes) AS r
+      WHERE
+        r->>'DestinationCidrBlock' = '0.0.0.0/0'
+        OR r->>'DestinationIpv6CidrBlock' = '::/0'
+    )
+  AND sgs
+    IN (
+        SELECT
+          id
+        FROM
+          view_aws_security_group_egress_rules
+        WHERE
+          ip = '0.0.0.0/0' OR ip6 = '::/0'
+      )
+UNION
+  SELECT
+    DISTINCT
+    'Find all lambda functions that have unrestricted access to the internet'
+      AS title,
+    account_id,
+    arn AS resource_id,
+    'fail' AS status
+  FROM
+    aws_lambda_functions
+  WHERE
+    (configuration->'VpcConfig'->>'VpcId') IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_security_groups.md b/website/tables/aws/aws_ec2_security_groups.md
index 802c7e1b89fc..e6d5b3663687 100644
--- a/website/tables/aws/aws_ec2_security_groups.md
+++ b/website/tables/aws/aws_ec2_security_groups.md
@@ -24,4 +24,78 @@ The primary key for this table is **arn**.
 |ip_permissions|`json`|
 |ip_permissions_egress|`json`|
 |owner_id|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### The VPC default security group should not allow inbound and outbound traffic
+
+```sql
+SELECT
+  'The VPC default security group should not allow inbound and outbound traffic'
+    AS title,
+  account_id,
+  arn,
+  CASE
+  WHEN group_name = 'default'
+  AND (
+      jsonb_array_length(ip_permissions) > 0
+      OR jsonb_array_length(ip_permissions_egress) > 0
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_ec2_security_groups;
+```
+
+### Security group is not currently in use so it should be deleted
+
+```sql
+WITH
+  interface_groups
+    AS (
+      SELECT
+        DISTINCT g->>'GroupId' AS id
+      FROM
+        aws_ec2_instances AS i,
+        jsonb_array_elements(network_interfaces) AS a,
+        jsonb_array_elements(a->'Groups') AS g
+    )
+SELECT
+  'security group is not currently in use so it should be deleted' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN interface_groups.id IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_ec2_security_groups
+  LEFT JOIN interface_groups ON
+      aws_ec2_security_groups.group_id = interface_groups.id;
+```
+
+### Unused EC2 security group
+
+```sql
+WITH
+  interface_groups
+    AS (
+      SELECT
+        DISTINCT a->>'GroupId' AS group_id
+      FROM
+        aws_ec2_instances, jsonb_array_elements(security_groups) AS a
+    )
+SELECT
+  'Unused EC2 security group' AS title,
+  sg.account_id,
+  sg.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_security_groups AS sg
+  LEFT JOIN interface_groups ON interface_groups.group_id = sg.group_id
+WHERE
+  interface_groups.group_id IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_subnets.md b/website/tables/aws/aws_ec2_subnets.md
index 989d24cb71e7..301f29b8769e 100644
--- a/website/tables/aws/aws_ec2_subnets.md
+++ b/website/tables/aws/aws_ec2_subnets.md
@@ -38,4 +38,46 @@ The composite primary key for this table is (**request_account_id**, **request_r
 |state|`utf8`|
 |subnet_arn|`utf8`|
 |subnet_id|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### EC2 subnets should not automatically assign public IP addresses
+
+```sql
+SELECT
+  'EC2 subnets should not automatically assign public IP addresses' AS title,
+  owner_id AS account_id,
+  arn AS resource_id,
+  CASE
+  WHEN map_public_ip_on_launch IS true THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_ec2_subnets;
+```
+
+### EMR clusters should not have public IP addresses
+
+```sql
+SELECT
+  'EMR clusters should not have public IP addresses' AS title,
+  aws_emr_clusters.account_id,
+  aws_emr_clusters.arn AS resource_id,
+  CASE
+  WHEN aws_ec2_subnets.map_public_ip_on_launch
+  AND aws_emr_clusters.status->>'State' IN ('RUNNING', 'WAITING')
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_emr_clusters
+  LEFT JOIN aws_ec2_subnets ON
+      aws_emr_clusters.ec2_instance_attributes->>'Ec2SubnetId'
+      = aws_ec2_subnets.subnet_id;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_transit_gateway_attachments.md b/website/tables/aws/aws_ec2_transit_gateway_attachments.md
index 42d74d3b275a..cbe65519b6d0 100644
--- a/website/tables/aws/aws_ec2_transit_gateway_attachments.md
+++ b/website/tables/aws/aws_ec2_transit_gateway_attachments.md
@@ -30,4 +30,33 @@ This table depends on [aws_ec2_transit_gateways](aws_ec2_transit_gateways).
 |state|`utf8`|
 |transit_gateway_attachment_id|`utf8`|
 |transit_gateway_id|`utf8`|
-|transit_gateway_owner_id|`utf8`|
\ No newline at end of file
+|transit_gateway_owner_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused transit gateway
+
+```sql
+WITH
+  attachment
+    AS (
+      SELECT
+        DISTINCT transit_gateway_arn
+      FROM
+        aws_ec2_transit_gateway_attachments
+    )
+SELECT
+  'Unused transit gateway' AS title,
+  gateway.account_id,
+  gateway.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_transit_gateways AS gateway
+  LEFT JOIN attachment ON attachment.transit_gateway_arn = gateway.arn
+WHERE
+  attachment.transit_gateway_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_transit_gateways.md b/website/tables/aws/aws_ec2_transit_gateways.md
index 5b44d578bd9e..6472ba452a37 100644
--- a/website/tables/aws/aws_ec2_transit_gateways.md
+++ b/website/tables/aws/aws_ec2_transit_gateways.md
@@ -34,4 +34,33 @@ The following tables depend on aws_ec2_transit_gateways:
 |owner_id|`utf8`|
 |state|`utf8`|
 |transit_gateway_arn|`utf8`|
-|transit_gateway_id|`utf8`|
\ No newline at end of file
+|transit_gateway_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused transit gateway
+
+```sql
+WITH
+  attachment
+    AS (
+      SELECT
+        DISTINCT transit_gateway_arn
+      FROM
+        aws_ec2_transit_gateway_attachments
+    )
+SELECT
+  'Unused transit gateway' AS title,
+  gateway.account_id,
+  gateway.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ec2_transit_gateways AS gateway
+  LEFT JOIN attachment ON attachment.transit_gateway_arn = gateway.arn
+WHERE
+  attachment.transit_gateway_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_vpc_endpoints.md b/website/tables/aws/aws_ec2_vpc_endpoints.md
index 84a2eccdeea6..657002f454da 100644
--- a/website/tables/aws/aws_ec2_vpc_endpoints.md
+++ b/website/tables/aws/aws_ec2_vpc_endpoints.md
@@ -35,4 +35,39 @@ The primary key for this table is **arn**.
 |subnet_ids|`list<item: utf8, nullable>`|
 |vpc_endpoint_id|`utf8`|
 |vpc_endpoint_type|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service
+
+```sql
+WITH
+  endpoints
+    AS (
+      SELECT
+        vpc_endpoint_id
+      FROM
+        aws_ec2_vpc_endpoints
+      WHERE
+        vpc_endpoint_type = 'Interface'
+        AND service_name ~ concat('com.amazonaws.', region, '.ec2')
+    )
+SELECT
+  'Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service'
+    AS title,
+  account_id,
+  vpc_id AS resource_id,
+  CASE
+  WHEN endpoints.vpc_endpoint_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_vpcs
+  LEFT JOIN endpoints ON aws_ec2_vpcs.vpc_id = endpoints.vpc_endpoint_id;
+```
+
+
diff --git a/website/tables/aws/aws_ec2_vpcs.md b/website/tables/aws/aws_ec2_vpcs.md
index 25621b34629b..c48ef4f06be6 100644
--- a/website/tables/aws/aws_ec2_vpcs.md
+++ b/website/tables/aws/aws_ec2_vpcs.md
@@ -26,4 +26,56 @@ The primary key for this table is **arn**.
 |is_default|`bool`|
 |owner_id|`utf8`|
 |state|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### VPC flow logging should be enabled in all VPCs
+
+```sql
+SELECT
+  'VPC flow logging should be enabled in all VPCs' AS title,
+  aws_ec2_vpcs.account_id,
+  aws_ec2_vpcs.arn,
+  CASE
+  WHEN aws_ec2_flow_logs.resource_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_ec2_vpcs
+  LEFT JOIN aws_ec2_flow_logs ON
+      aws_ec2_vpcs.vpc_id = aws_ec2_flow_logs.resource_id;
+```
+
+### Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service
+
+```sql
+WITH
+  endpoints
+    AS (
+      SELECT
+        vpc_endpoint_id
+      FROM
+        aws_ec2_vpc_endpoints
+      WHERE
+        vpc_endpoint_type = 'Interface'
+        AND service_name ~ concat('com.amazonaws.', region, '.ec2')
+    )
+SELECT
+  'Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service'
+    AS title,
+  account_id,
+  vpc_id AS resource_id,
+  CASE
+  WHEN endpoints.vpc_endpoint_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_vpcs
+  LEFT JOIN endpoints ON aws_ec2_vpcs.vpc_id = endpoints.vpc_endpoint_id;
+```
+
+
diff --git a/website/tables/aws/aws_ecr_repositories.md b/website/tables/aws/aws_ecr_repositories.md
index 12b4f1c2babe..8efc92ac057f 100644
--- a/website/tables/aws/aws_ecr_repositories.md
+++ b/website/tables/aws/aws_ecr_repositories.md
@@ -31,4 +31,32 @@ The following tables depend on aws_ecr_repositories:
 |registry_id|`utf8`|
 |repository_arn|`utf8`|
 |repository_name|`utf8`|
-|repository_uri|`utf8`|
\ No newline at end of file
+|repository_uri|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused ECR repository
+
+```sql
+WITH
+  image
+    AS (
+      SELECT DISTINCT account_id, repository_name FROM aws_ecr_repository_images
+    )
+SELECT
+  'Unused ECR repository' AS title,
+  repository.account_id,
+  repository.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ecr_repositories AS repository
+  LEFT JOIN image ON
+      image.account_id = repository.account_id
+      AND image.repository_name = repository.repository_name
+WHERE
+  image.repository_name IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_ecr_repository_images.md b/website/tables/aws/aws_ecr_repository_images.md
index 2b84bd5b96ac..6cc5be617695 100644
--- a/website/tables/aws/aws_ecr_repository_images.md
+++ b/website/tables/aws/aws_ecr_repository_images.md
@@ -34,4 +34,32 @@ The following tables depend on aws_ecr_repository_images:
 |image_tags|`list<item: utf8, nullable>`|
 |last_recorded_pull_time|`timestamp[us, tz=UTC]`|
 |registry_id|`utf8`|
-|repository_name|`utf8`|
\ No newline at end of file
+|repository_name|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused ECR repository
+
+```sql
+WITH
+  image
+    AS (
+      SELECT DISTINCT account_id, repository_name FROM aws_ecr_repository_images
+    )
+SELECT
+  'Unused ECR repository' AS title,
+  repository.account_id,
+  repository.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_ecr_repositories AS repository
+  LEFT JOIN image ON
+      image.account_id = repository.account_id
+      AND image.repository_name = repository.repository_name
+WHERE
+  image.repository_name IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_ecs_cluster_services.md b/website/tables/aws/aws_ecs_cluster_services.md
index 3f5e95cc15b0..d2d52821d46d 100644
--- a/website/tables/aws/aws_ecs_cluster_services.md
+++ b/website/tables/aws/aws_ecs_cluster_services.md
@@ -54,4 +54,29 @@ The following tables depend on aws_ecs_cluster_services:
 |service_registries|`json`|
 |status|`utf8`|
 |task_definition|`utf8`|
-|task_sets|`json`|
\ No newline at end of file
+|task_sets|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon ECS services should not have public IP addresses assigned to them automatically
+
+```sql
+SELECT
+  'Amazon ECS services should not have public IP addresses assigned to them automatically'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN network_configuration->'AwsvpcConfiguration'->>'AssignPublicIp'
+  IS DISTINCT FROM 'DISABLED'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ecs_cluster_services;
+```
+
+
diff --git a/website/tables/aws/aws_ecs_task_definitions.md b/website/tables/aws/aws_ecs_task_definitions.md
index b8fe6f0dd570..aba680bf85c3 100644
--- a/website/tables/aws/aws_ecs_task_definitions.md
+++ b/website/tables/aws/aws_ecs_task_definitions.md
@@ -41,4 +41,31 @@ The primary key for this table is **arn**.
 |status|`utf8`|
 |task_definition_arn|`utf8`|
 |task_role_arn|`utf8`|
-|volumes|`json`|
\ No newline at end of file
+|volumes|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon ECS task definitions should have secure networking modes and user definitions
+
+```sql
+SELECT
+  'Amazon ECS task definitions should have secure networking modes and user definitions'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN network_mode = 'host'
+  AND (c->>'Privileged')::BOOL IS NOT true
+  AND (c->>'User' = 'root' OR (c->>'User') IS NULL)
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ecs_task_definitions,
+  jsonb_array_elements(aws_ecs_task_definitions.container_definitions) AS c;
+```
+
+
diff --git a/website/tables/aws/aws_efs_filesystems.md b/website/tables/aws/aws_efs_filesystems.md
index e31afba89849..0290384f5025 100644
--- a/website/tables/aws/aws_efs_filesystems.md
+++ b/website/tables/aws/aws_efs_filesystems.md
@@ -34,4 +34,57 @@ The primary key for this table is **arn**.
 |kms_key_id|`utf8`|
 |name|`utf8`|
 |provisioned_throughput_in_mibps|`float64`|
-|throughput_mode|`utf8`|
\ No newline at end of file
+|throughput_mode|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon EFS volumes should be in backup plans
+
+```sql
+SELECT
+  'Amazon EFS volumes should be in backup plans' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN backup_policy_status IS DISTINCT FROM 'ENABLED' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_efs_filesystems;
+```
+
+### Unused EFS filesystem
+
+```sql
+SELECT
+  'Unused EFS filesystem' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_efs_filesystems
+WHERE
+  number_of_mount_targets = 0;
+```
+
+### Amazon EFS should be configured to encrypt file data at rest using AWS KMS
+
+```sql
+SELECT
+  'Amazon EFS should be configured to encrypt file data at rest using AWS KMS'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN encrypted IS NOT true OR kms_key_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_efs_filesystems;
+```
+
+
diff --git a/website/tables/aws/aws_elasticbeanstalk_configuration_settings.md b/website/tables/aws/aws_elasticbeanstalk_configuration_settings.md
index f2a7a5aa0934..35f6c14a379b 100644
--- a/website/tables/aws/aws_elasticbeanstalk_configuration_settings.md
+++ b/website/tables/aws/aws_elasticbeanstalk_configuration_settings.md
@@ -31,4 +31,32 @@ This table depends on [aws_elasticbeanstalk_environments](aws_elasticbeanstalk_e
 |platform_arn|`utf8`|
 |solution_stack_name|`utf8`|
 |template_name|`utf8`|
-|application_arn|`utf8`|
\ No newline at end of file
+|application_arn|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Elastic Beanstalk managed platform updates should be enabled
+
+```sql
+SELECT
+  'Elastic Beanstalk managed platform updates should be enabled' AS title,
+  account_id,
+  application_arn AS resource_id,
+  CASE
+  WHEN s->>'OptionName' = 'ManagedActionsEnabled'
+  AND (s->>'Value')::BOOL = true IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticbeanstalk_configuration_settings,
+  jsonb_array_elements(
+    aws_elasticbeanstalk_configuration_settings.option_settings
+  )
+    AS s;
+```
+
+
diff --git a/website/tables/aws/aws_elasticbeanstalk_environments.md b/website/tables/aws/aws_elasticbeanstalk_environments.md
index 8cbcc122fa85..0406efc8c785 100644
--- a/website/tables/aws/aws_elasticbeanstalk_environments.md
+++ b/website/tables/aws/aws_elasticbeanstalk_environments.md
@@ -46,4 +46,27 @@ The following tables depend on aws_elasticbeanstalk_environments:
 |status|`utf8`|
 |template_name|`utf8`|
 |tier|`json`|
-|version_label|`utf8`|
\ No newline at end of file
+|version_label|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Elastic Beanstalk environments should have enhanced health reporting enabled
+
+```sql
+SELECT
+  'Elastic Beanstalk environments should have enhanced health reporting enabled'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN health_status IS NULL OR health IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticbeanstalk_environments;
+```
+
+
diff --git a/website/tables/aws/aws_elasticsearch_domains.md b/website/tables/aws/aws_elasticsearch_domains.md
index d9b1a114e763..08608b5fe376 100644
--- a/website/tables/aws/aws_elasticsearch_domains.md
+++ b/website/tables/aws/aws_elasticsearch_domains.md
@@ -42,4 +42,158 @@ The primary key for this table is **arn**.
 |service_software_options|`json`|
 |snapshot_options|`json`|
 |upgrade_processing|`bool`|
-|vpc_options|`json`|
\ No newline at end of file
+|vpc_options|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Connections to Elasticsearch domains should be encrypted using TLS 1.2
+
+```sql
+SELECT
+  'Connections to Elasticsearch domains should be encrypted using TLS 1.2'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN domain_endpoint_options->>'TLSSecurityPolicy'
+  IS DISTINCT FROM 'Policy-Min-TLS-1-2-2019-07'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domain error logging to CloudWatch Logs should be enabled
+
+```sql
+SELECT
+  'Elasticsearch domain error logging to CloudWatch Logs should be enabled'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN log_publishing_options->'ES_APPLICATION_LOGS'->'Enabled'
+  IS DISTINCT FROM 'true'
+  OR (
+      log_publishing_options->'ES_APPLICATION_LOGS'->'CloudWatchLogsLogGroupArn'
+    ) IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domains should be configured with at least three dedicated master nodes
+
+```sql
+SELECT
+  'Elasticsearch domains should be configured with at least three dedicated master nodes'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (elasticsearch_cluster_config->>'DedicatedMasterEnabled')::BOOL
+  IS NOT true
+  OR (elasticsearch_cluster_config->>'DedicatedMasterCount')::INT8 IS NULL
+  OR (elasticsearch_cluster_config->>'DedicatedMasterCount')::INT8 < 3
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domains should be in a VPC
+
+```sql
+SELECT
+  'Elasticsearch domains should be in a VPC' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (vpc_options->>'VPCId') IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domains should encrypt data sent between nodes
+
+```sql
+SELECT
+  'Elasticsearch domains should encrypt data sent between nodes' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (node_to_node_encryption_options->>'Enabled')::BOOL IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domains should have at least three data nodes
+
+```sql
+SELECT
+  'Elasticsearch domains should have at least three data nodes' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN NOT (elasticsearch_cluster_config->>'ZoneAwarenessEnabled')::BOOL
+  OR (elasticsearch_cluster_config->>'InstanceCount')::INT8 IS NULL
+  OR (elasticsearch_cluster_config->>'InstanceCount')::INT8 < 3
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domains should have audit logging enabled
+
+```sql
+SELECT
+  'Elasticsearch domains should have audit logging enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN log_publishing_options->'AUDIT_LOGS'->'Enabled' IS DISTINCT FROM 'true'
+  OR (log_publishing_options->'AUDIT_LOGS'->'CloudWatchLogsLogGroupArn') IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+### Elasticsearch domains should have encryption at rest enabled
+
+```sql
+SELECT
+  'Elasticsearch domains should have encryption at rest enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (encryption_at_rest_options->>'Enabled')::BOOL IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elasticsearch_domains;
+```
+
+
diff --git a/website/tables/aws/aws_elbv1_load_balancers.md b/website/tables/aws/aws_elbv1_load_balancers.md
index 51a9c6905a72..e6c37885aeab 100644
--- a/website/tables/aws/aws_elbv1_load_balancers.md
+++ b/website/tables/aws/aws_elbv1_load_balancers.md
@@ -39,4 +39,137 @@ The following tables depend on aws_elbv1_load_balancers:
 |subnets|`list<item: utf8, nullable>`|
 |vpc_id|`utf8`|
 |tags|`json`|
-|attributes|`json`|
\ No newline at end of file
+|attributes|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Application and Classic Load Balancers logging should be enabled
+
+```sql
+(
+  SELECT
+    'Application and Classic Load Balancers logging should be enabled' AS title,
+    lb.account_id,
+    lb.arn AS resource_id,
+    CASE
+    WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_elbv2_load_balancers AS lb
+    INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+        a.load_balancer_arn = lb.arn AND a.key = 'access_logs.s3.enabled'
+)
+UNION
+  (
+    SELECT
+      'Application and Classic Load Balancers logging should be enabled'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN (attributes->'AccessLog'->>'Enabled')::BOOL IS NOT true THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_elbv1_load_balancers
+  );
+```
+
+### Classic Load Balancers with SSL/HTTPS listeners should use a certificate provided by AWS Certificate Manager
+
+```sql
+SELECT
+  'Classic Load Balancers with SSL/HTTPS listeners should use a certificate provided by AWS Certificate Manager'
+    AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN li->'Listener'->>'Protocol' = 'HTTPS'
+  AND aws_acm_certificates.arn IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv1_load_balancers AS lb,
+  jsonb_array_elements(lb.listener_descriptions) AS li
+  LEFT JOIN aws_acm_certificates ON
+      aws_acm_certificates.arn = li->'Listener'->>'SSLCertificateId';
+```
+
+### Classic Load Balancers should have connection draining enabled
+
+```sql
+SELECT
+  'Classic Load Balancers should have connection draining enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (attributes->'ConnectionDraining'->>'Enabled')::BOOL IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv1_load_balancers;
+```
+
+### Classic Load Balancer listeners should be configured with HTTPS or TLS termination
+
+```sql
+SELECT
+  'Classic Load Balancer listeners should be configured with HTTPS or TLS termination'
+    AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN li->'Listener'->>'Protocol' NOT IN ('HTTPS', 'SSL') THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv1_load_balancers AS lb,
+  jsonb_array_elements(lb.listener_descriptions) AS li;
+```
+
+### Classic Load Balancers with HTTPS/SSL listeners should use a predefined security policy that has strong configuration
+
+```sql
+SELECT
+  'Classic Load Balancers with HTTPS/SSL listeners should use a predefined security policy that has strong configuration'
+    AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN li->'Listener'->>'Protocol' IN ('HTTPS', 'SSL')
+  AND 'ELBSecurityPolicy-TLS-1-2-2017-01'
+    != ANY (
+        ARRAY (SELECT jsonb_array_elements_text(lb.policies->'OtherPolicies'))
+      )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv1_load_balancers AS lb,
+  jsonb_array_elements(lb.listener_descriptions) AS li;
+```
+
+### Find all Classic ELBs that are Internet Facing
+
+```sql
+SELECT
+  'Find all Classic ELBs that are Internet Facing' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN scheme = 'internet-facing' THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_elbv1_load_balancers;
+```
+
+
diff --git a/website/tables/aws/aws_elbv2_listeners.md b/website/tables/aws/aws_elbv2_listeners.md
index f5ee6fd7634d..fdcae57370df 100644
--- a/website/tables/aws/aws_elbv2_listeners.md
+++ b/website/tables/aws/aws_elbv2_listeners.md
@@ -33,4 +33,57 @@ The following tables depend on aws_elbv2_listeners:
 |load_balancer_arn|`utf8`|
 |port|`int64`|
 |protocol|`utf8`|
-|ssl_policy|`utf8`|
\ No newline at end of file
+|ssl_policy|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Application Load Balancer should be configured to redirect all HTTP requests to HTTPS
+
+```sql
+SELECT
+  'Application Load Balancer should be configured to redirect all HTTP requests to HTTPS'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN protocol = 'HTTP'
+  AND (
+      da->>'Type' != 'REDIRECT'
+      OR da->'RedirectConfig'->>'Protocol' != 'HTTPS'
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv2_listeners, jsonb_array_elements(default_actions) AS da;
+```
+
+### Unused ELB load balancer
+
+```sql
+WITH
+  listener AS (SELECT DISTINCT load_balancer_arn FROM aws_elbv2_listeners),
+  target_group
+    AS (
+      SELECT
+        DISTINCT unnest(load_balancer_arns) AS load_balancer_arn
+      FROM
+        aws_elbv2_target_groups
+    )
+SELECT
+  'Unused ELB load balancer' AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  LEFT JOIN listener ON listener.load_balancer_arn = lb.arn
+  LEFT JOIN target_group ON target_group.load_balancer_arn = lb.arn
+WHERE
+  listener.load_balancer_arn IS NULL OR target_group.load_balancer_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_elbv2_load_balancer_attributes.md b/website/tables/aws/aws_elbv2_load_balancer_attributes.md
index 0731fc3f8b3c..3e808aa80ba1 100644
--- a/website/tables/aws/aws_elbv2_load_balancer_attributes.md
+++ b/website/tables/aws/aws_elbv2_load_balancer_attributes.md
@@ -22,4 +22,83 @@ This table depends on [aws_elbv2_load_balancers](aws_elbv2_load_balancers).
 |region|`utf8`|
 |load_balancer_arn|`utf8`|
 |key|`utf8`|
-|value|`utf8`|
\ No newline at end of file
+|value|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Application Load Balancer deletion protection should be enabled
+
+```sql
+SELECT
+  'Application Load Balancer deletion protection should be enabled' AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+      a.load_balancer_arn = lb.arn AND a.key = 'deletion_protection.enabled';
+```
+
+### Application load balancers should be configured to drop HTTP headers
+
+```sql
+SELECT
+  'Application load balancers should be configured to drop HTTP headers'
+    AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+      a.load_balancer_arn = lb.arn
+      AND a.key = 'routing.http.drop_invalid_header_fields.enabled';
+```
+
+### Application and Classic Load Balancers logging should be enabled
+
+```sql
+(
+  SELECT
+    'Application and Classic Load Balancers logging should be enabled' AS title,
+    lb.account_id,
+    lb.arn AS resource_id,
+    CASE
+    WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_elbv2_load_balancers AS lb
+    INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+        a.load_balancer_arn = lb.arn AND a.key = 'access_logs.s3.enabled'
+)
+UNION
+  (
+    SELECT
+      'Application and Classic Load Balancers logging should be enabled'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN (attributes->'AccessLog'->>'Enabled')::BOOL IS NOT true THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_elbv1_load_balancers
+  );
+```
+
+
diff --git a/website/tables/aws/aws_elbv2_load_balancers.md b/website/tables/aws/aws_elbv2_load_balancers.md
index 3a90bf4ec2db..fb64836f9ab8 100644
--- a/website/tables/aws/aws_elbv2_load_balancers.md
+++ b/website/tables/aws/aws_elbv2_load_balancers.md
@@ -37,4 +37,120 @@ The following tables depend on aws_elbv2_load_balancers:
 |security_groups|`list<item: utf8, nullable>`|
 |state|`json`|
 |type|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Application Load Balancer deletion protection should be enabled
+
+```sql
+SELECT
+  'Application Load Balancer deletion protection should be enabled' AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+      a.load_balancer_arn = lb.arn AND a.key = 'deletion_protection.enabled';
+```
+
+### Application load balancers should be configured to drop HTTP headers
+
+```sql
+SELECT
+  'Application load balancers should be configured to drop HTTP headers'
+    AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  CASE
+  WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+      a.load_balancer_arn = lb.arn
+      AND a.key = 'routing.http.drop_invalid_header_fields.enabled';
+```
+
+### Application and Classic Load Balancers logging should be enabled
+
+```sql
+(
+  SELECT
+    'Application and Classic Load Balancers logging should be enabled' AS title,
+    lb.account_id,
+    lb.arn AS resource_id,
+    CASE
+    WHEN lb.type = 'application' AND (a.value)::BOOL IS NOT true THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_elbv2_load_balancers AS lb
+    INNER JOIN aws_elbv2_load_balancer_attributes AS a ON
+        a.load_balancer_arn = lb.arn AND a.key = 'access_logs.s3.enabled'
+)
+UNION
+  (
+    SELECT
+      'Application and Classic Load Balancers logging should be enabled'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN (attributes->'AccessLog'->>'Enabled')::BOOL IS NOT true THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_elbv1_load_balancers
+  );
+```
+
+### Find all ELB V2s that are Internet Facing
+
+```sql
+SELECT
+  'Find all ELB V2s that are Internet Facing' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN scheme = 'internet-facing' THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_elbv2_load_balancers;
+```
+
+### Unused ELB load balancer
+
+```sql
+WITH
+  listener AS (SELECT DISTINCT load_balancer_arn FROM aws_elbv2_listeners),
+  target_group
+    AS (
+      SELECT
+        DISTINCT unnest(load_balancer_arns) AS load_balancer_arn
+      FROM
+        aws_elbv2_target_groups
+    )
+SELECT
+  'Unused ELB load balancer' AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  LEFT JOIN listener ON listener.load_balancer_arn = lb.arn
+  LEFT JOIN target_group ON target_group.load_balancer_arn = lb.arn
+WHERE
+  listener.load_balancer_arn IS NULL OR target_group.load_balancer_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_elbv2_target_groups.md b/website/tables/aws/aws_elbv2_target_groups.md
index 109b6c37c156..ed51c5d84608 100644
--- a/website/tables/aws/aws_elbv2_target_groups.md
+++ b/website/tables/aws/aws_elbv2_target_groups.md
@@ -40,4 +40,49 @@ The following tables depend on aws_elbv2_target_groups:
 |target_group_name|`utf8`|
 |target_type|`utf8`|
 |unhealthy_threshold_count|`int64`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused ELB load balancer
+
+```sql
+WITH
+  listener AS (SELECT DISTINCT load_balancer_arn FROM aws_elbv2_listeners),
+  target_group
+    AS (
+      SELECT
+        DISTINCT unnest(load_balancer_arns) AS load_balancer_arn
+      FROM
+        aws_elbv2_target_groups
+    )
+SELECT
+  'Unused ELB load balancer' AS title,
+  lb.account_id,
+  lb.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_elbv2_load_balancers AS lb
+  LEFT JOIN listener ON listener.load_balancer_arn = lb.arn
+  LEFT JOIN target_group ON target_group.load_balancer_arn = lb.arn
+WHERE
+  listener.load_balancer_arn IS NULL OR target_group.load_balancer_arn IS NULL;
+```
+
+### Unused ELB target group
+
+```sql
+SELECT
+  'Unused ELB target group' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_elbv2_target_groups
+WHERE
+  array_length(load_balancer_arns, 1) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_emr_clusters.md b/website/tables/aws/aws_emr_clusters.md
index 8b8ec824e0a7..9bf7977da816 100644
--- a/website/tables/aws/aws_emr_clusters.md
+++ b/website/tables/aws/aws_emr_clusters.md
@@ -54,4 +54,31 @@ The following tables depend on aws_emr_clusters:
 |status|`json`|
 |step_concurrency_level|`int64`|
 |termination_protected|`bool`|
-|visible_to_all_users|`bool`|
\ No newline at end of file
+|visible_to_all_users|`bool`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### EMR clusters should not have public IP addresses
+
+```sql
+SELECT
+  'EMR clusters should not have public IP addresses' AS title,
+  aws_emr_clusters.account_id,
+  aws_emr_clusters.arn AS resource_id,
+  CASE
+  WHEN aws_ec2_subnets.map_public_ip_on_launch
+  AND aws_emr_clusters.status->>'State' IN ('RUNNING', 'WAITING')
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_emr_clusters
+  LEFT JOIN aws_ec2_subnets ON
+      aws_emr_clusters.ec2_instance_attributes->>'Ec2SubnetId'
+      = aws_ec2_subnets.subnet_id;
+```
+
+
diff --git a/website/tables/aws/aws_guardduty_detectors.md b/website/tables/aws/aws_guardduty_detectors.md
index bbeadd22d530..59f876905cbc 100644
--- a/website/tables/aws/aws_guardduty_detectors.md
+++ b/website/tables/aws/aws_guardduty_detectors.md
@@ -35,4 +35,56 @@ The following tables depend on aws_guardduty_detectors:
 |finding_publishing_frequency|`utf8`|
 |tags|`json`|
 |updated_at|`timestamp[us, tz=UTC]`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### GuardDuty should be enabled
+
+```sql
+WITH
+  enabled_detector_regions
+    AS (
+      SELECT
+        account_id, region
+      FROM
+        aws_guardduty_detectors
+      WHERE
+        status = 'ENABLED'
+    )
+SELECT
+  'GuardDuty should be enabled' AS title,
+  r.account_id,
+  r.region AS resource_id,
+  CASE
+  WHEN enabled = true AND e.region IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_regions AS r
+  LEFT JOIN enabled_detector_regions AS e ON
+      e.region = r.region AND e.account_id = r.account_id
+UNION
+  SELECT
+    'GuardDuty should be enabled (detectors)' AS title,
+    account_id,
+    region AS resource_id,
+    CASE
+    WHEN data_sources->'S3Logs'->>'Status' != 'ENABLED'
+    AND data_sources->'DNSLogs'->>'Status' != 'ENABLED'
+    AND data_sources->'CloudTrail'->>'Status' != 'ENABLED'
+    AND data_sources->'FlowLogs'->>'Status' != 'ENABLED'
+    THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_guardduty_detectors
+  WHERE
+    status = 'ENABLED';
+```
+
+
diff --git a/website/tables/aws/aws_iam_accounts.md b/website/tables/aws/aws_iam_accounts.md
index 7892d2fb100e..feed05a75480 100644
--- a/website/tables/aws/aws_iam_accounts.md
+++ b/website/tables/aws/aws_iam_accounts.md
@@ -39,4 +39,52 @@ The primary key for this table is **account_id**.
 |policy_versions_in_use_quota|`int64`|
 |versions_per_policy_quota|`int64`|
 |global_endpoint_token_version|`int64`|
-|aliases|`list<item: utf8, nullable>`|
\ No newline at end of file
+|aliases|`list<item: utf8, nullable>`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### S3 Block Public Access setting should be enabled
+
+```sql
+SELECT
+  'S3 Block Public Access setting should be enabled' AS title,
+  aws_iam_accounts.account_id,
+  aws_iam_accounts.account_id AS resource_id,
+  CASE
+  WHEN config_exists IS NOT true
+  OR block_public_acls IS NOT true
+  OR block_public_policy IS NOT true
+  OR ignore_public_acls IS NOT true
+  OR restrict_public_buckets IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_accounts
+  LEFT JOIN aws_s3_accounts ON
+      aws_iam_accounts.account_id = aws_s3_accounts.account_id;
+```
+
+### SSM documents should not be public
+
+```sql
+SELECT
+  'SSM documents should not be public' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN 'all' = ANY (ARRAY (SELECT jsonb_array_elements_text(p->'AccountIds')))
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ssm_documents, jsonb_array_elements(aws_ssm_documents.permissions) AS p
+WHERE
+  owner IN (SELECT account_id FROM aws_iam_accounts);
+```
+
+
diff --git a/website/tables/aws/aws_iam_credential_reports.md b/website/tables/aws/aws_iam_credential_reports.md
index 8aa367d75f52..6aaadb67cdda 100644
--- a/website/tables/aws/aws_iam_credential_reports.md
+++ b/website/tables/aws/aws_iam_credential_reports.md
@@ -34,4 +34,131 @@ The composite primary key for this table is (**arn**, **user_creation_time**).
 |access_key1_last_used_region|`utf8`|
 |access_key1_last_used_service|`utf8`|
 |access_key2_last_used_region|`utf8`|
-|access_key2_last_used_service|`utf8`|
\ No newline at end of file
+|access_key2_last_used_service|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure hardware MFA is enabled for the "root" account (Scored)
+
+```sql
+SELECT
+  'Ensure hardware MFA is enabled for the "root" account (Scored)' AS title,
+  split_part(cr.arn, ':', 5) AS account_id,
+  cr.arn AS resource_id,
+  CASE
+  WHEN mfa.serial_number IS NULL OR cr.mfa_active = false THEN 'fail'
+  WHEN mfa.serial_number IS NOT NULL AND cr.mfa_active = true THEN 'pass'
+  END
+    AS status
+FROM
+  aws_iam_credential_reports AS cr
+  LEFT JOIN aws_iam_virtual_mfa_devices AS mfa ON mfa.user->>'Arn' = cr.arn
+WHERE
+  cr.user = '<root_account>'
+GROUP BY
+  mfa.serial_number, cr.mfa_active, cr.arn;
+```
+
+### Ensure MFA is enabled for all IAM users that have a console password (Scored)
+
+```sql
+SELECT
+  'Ensure MFA is enabled for all IAM users that have a console password (Scored)'
+    AS title,
+  split_part(arn, ':', 5) AS account_id,
+  arn AS resource_id,
+  CASE
+  WHEN password_status IN ('TRUE', 'true') AND NOT mfa_active THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_credential_reports;
+```
+
+### Ensure MFA is enabled for the "root" account
+
+```sql
+SELECT
+  'Ensure MFA is enabled for the "root" account' AS title,
+  split_part(arn, ':', 5) AS account_id,
+  arn AS resource_id,
+  CASE
+  WHEN current_user() = '<root_account>' AND NOT mfa_active THEN 'fail'
+  WHEN current_user() = '<root_account>' AND mfa_active THEN 'pass'
+  END
+    AS status
+FROM
+  aws_iam_credential_reports;
+```
+
+### Ensure credentials unused for 90 days or greater are disabled (Scored)
+
+```sql
+SELECT
+  'Ensure credentials unused for 90 days or greater are disabled (Scored)'
+    AS title,
+  split_part(r.arn, ':', 5) AS account_id,
+  r.arn,
+  CASE
+  WHEN (
+    r.password_status IN ('TRUE', 'true')
+    AND r.password_last_used < (now() - '90 days'::INTERVAL)
+    OR k.last_used < (now() - '90 days'::INTERVAL)
+  )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_credential_reports AS r
+  LEFT JOIN aws_iam_user_access_keys AS k ON k.user_arn = r.arn;
+```
+
+### Ensure credentials unused for 45 days or greater are disabled (Automated)
+
+```sql
+SELECT
+  'Ensure credentials unused for 45 days or greater are disabled (Automated)'
+    AS title,
+  split_part(r.arn, ':', 5) AS account_id,
+  r.arn,
+  CASE
+  WHEN (
+    r.password_status IN ('TRUE', 'true')
+    AND r.password_last_used < (now() - '45 days'::INTERVAL)
+    OR (
+        r.password_status IN ('TRUE', 'true')
+        AND r.password_last_used IS NULL
+        AND r.password_last_changed < (now() - '45 days'::INTERVAL)
+      )
+    OR k.last_used < (now() - '45 days'::INTERVAL)
+  )
+  OR (
+      r.access_key1_active
+      AND r.access_key_1_last_used_date < (now() - '45 days'::INTERVAL)
+    )
+  OR (
+      r.access_key1_active
+      AND r.access_key_1_last_used_date IS NULL
+      AND access_key_1_last_rotated < (now() - '45 days'::INTERVAL)
+    )
+  OR (
+      r.access_key2_active
+      AND r.access_key_2_last_used_date < (now() - '45 days'::INTERVAL)
+    )
+  OR (
+      r.access_key2_active
+      AND r.access_key_2_last_used_date IS NULL
+      AND access_key_2_last_rotated < (now() - '45 days'::INTERVAL)
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_credential_reports AS r
+  LEFT JOIN aws_iam_user_access_keys AS k ON k.user_arn = r.arn;
+```
+
+
diff --git a/website/tables/aws/aws_iam_group_policies.md b/website/tables/aws/aws_iam_group_policies.md
index 0206f347c9a3..db4eb367fef9 100644
--- a/website/tables/aws/aws_iam_group_policies.md
+++ b/website/tables/aws/aws_iam_group_policies.md
@@ -23,4 +23,82 @@ This table depends on [aws_iam_groups](aws_iam_groups).
 |policy_document|`json`|
 |group_name|`utf8`|
 |policy_name (PK)|`utf8`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys
+
+```sql
+SELECT
+  'IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      statement, aws_iam_users.account_id, arn, policy_name
+    FROM
+      aws_iam_user_policies
+      CROSS JOIN LATERAL jsonb_array_elements(
+          CASE jsonb_typeof(policy_document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+          WHEN 'array' THEN policy_document->'Statement'
+          END
+        )
+          AS statement
+      INNER JOIN aws_iam_users ON
+          aws_iam_users.account_id = aws_iam_user_policies.account_id
+          AND aws_iam_users.arn = aws_iam_user_policies.user_arn
+    UNION
+      SELECT
+        statement, aws_iam_roles.account_id, arn, policy_name
+      FROM
+        aws_iam_role_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_roles ON
+            aws_iam_roles.account_id = aws_iam_role_policies.account_id
+            AND aws_iam_roles.arn = aws_iam_role_policies.role_arn
+      WHERE
+        lower(arn) NOT LIKE 'arn:aws:iam::%:role/aws-service-role/%'
+    UNION
+      SELECT
+        statement, aws_iam_groups.account_id, arn, policy_name
+      FROM
+        aws_iam_group_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_groups ON
+            aws_iam_groups.account_id = aws_iam_group_policies.account_id
+            AND aws_iam_groups.arn = aws_iam_group_policies.group_arn
+  )
+    AS t
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND lower(statement::STRING)::JSONB->'resource'
+    ?| ARRAY[
+        '*',
+        'arn:aws:kms:*:*:key/*',
+        'arn:aws:kms:*:' || account_id || ':key/*arn:aws:kms:*:*:alias/*',
+        'arn:aws:kms:*:' || account_id || ':alias/*'
+      ]
+  AND lower(statement::STRING)::JSONB->'action'
+    ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:encrypt*', 'kms:reencryptfrom'];
+```
+
+
diff --git a/website/tables/aws/aws_iam_groups.md b/website/tables/aws/aws_iam_groups.md
index 0b9b0b850e06..91a6712def65 100644
--- a/website/tables/aws/aws_iam_groups.md
+++ b/website/tables/aws/aws_iam_groups.md
@@ -26,4 +26,82 @@ The following tables depend on aws_iam_groups:
 |create_date|`timestamp[us, tz=UTC]`|
 |group_id|`utf8`|
 |group_name|`utf8`|
-|path|`utf8`|
\ No newline at end of file
+|path|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys
+
+```sql
+SELECT
+  'IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      statement, aws_iam_users.account_id, arn, policy_name
+    FROM
+      aws_iam_user_policies
+      CROSS JOIN LATERAL jsonb_array_elements(
+          CASE jsonb_typeof(policy_document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+          WHEN 'array' THEN policy_document->'Statement'
+          END
+        )
+          AS statement
+      INNER JOIN aws_iam_users ON
+          aws_iam_users.account_id = aws_iam_user_policies.account_id
+          AND aws_iam_users.arn = aws_iam_user_policies.user_arn
+    UNION
+      SELECT
+        statement, aws_iam_roles.account_id, arn, policy_name
+      FROM
+        aws_iam_role_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_roles ON
+            aws_iam_roles.account_id = aws_iam_role_policies.account_id
+            AND aws_iam_roles.arn = aws_iam_role_policies.role_arn
+      WHERE
+        lower(arn) NOT LIKE 'arn:aws:iam::%:role/aws-service-role/%'
+    UNION
+      SELECT
+        statement, aws_iam_groups.account_id, arn, policy_name
+      FROM
+        aws_iam_group_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_groups ON
+            aws_iam_groups.account_id = aws_iam_group_policies.account_id
+            AND aws_iam_groups.arn = aws_iam_group_policies.group_arn
+  )
+    AS t
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND lower(statement::STRING)::JSONB->'resource'
+    ?| ARRAY[
+        '*',
+        'arn:aws:kms:*:*:key/*',
+        'arn:aws:kms:*:' || account_id || ':key/*arn:aws:kms:*:*:alias/*',
+        'arn:aws:kms:*:' || account_id || ':alias/*'
+      ]
+  AND lower(statement::STRING)::JSONB->'action'
+    ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:encrypt*', 'kms:reencryptfrom'];
+```
+
+
diff --git a/website/tables/aws/aws_iam_password_policies.md b/website/tables/aws/aws_iam_password_policies.md
index bda08bc4af54..14e73c452898 100644
--- a/website/tables/aws/aws_iam_password_policies.md
+++ b/website/tables/aws/aws_iam_password_policies.md
@@ -25,4 +25,150 @@ The primary key for this table is **account_id**.
 |require_numbers|`bool`|
 |require_symbols|`bool`|
 |require_uppercase_characters|`bool`|
-|policy_exists|`bool`|
\ No newline at end of file
+|policy_exists|`bool`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure IAM password policy expires passwords within 90 days or less
+
+```sql
+SELECT
+  'Ensure IAM password policy expires passwords within 90 days or less'
+    AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN (max_password_age IS NULL OR max_password_age > 90)
+  OR policy_exists = false
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_password_policies;
+```
+
+### Ensure IAM password policy requires minimum length of 14 or greater
+
+```sql
+SELECT
+  'Ensure IAM password policy requires minimum length of 14 or greater'
+    AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN minimum_password_length < 14 OR policy_exists = false THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_password_policies;
+```
+
+### Ensure IAM password policy requires at least one lowercase letter
+
+```sql
+SELECT
+  'Ensure IAM password policy requires at least one lowercase letter' AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN require_lowercase_characters = false OR policy_exists = false THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_password_policies;
+```
+
+### Ensure IAM password policy requires at least one number
+
+```sql
+SELECT
+  'Ensure IAM password policy requires at least one number' AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN require_numbers = false OR policy_exists = false THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_password_policies;
+```
+
+### Ensure IAM password policy requires at least one symbol
+
+```sql
+SELECT
+  'Ensure IAM password policy requires at least one symbol' AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN require_symbols = false OR policy_exists = false THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_password_policies;
+```
+
+### Ensure IAM password policy requires at least one uppercase letter
+
+```sql
+SELECT
+  'Ensure IAM password policy requires at least one uppercase letter' AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN require_uppercase_characters IS NOT true OR policy_exists IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_password_policies;
+```
+
+### Ensure IAM password policy prevents password reuse
+
+```sql
+SELECT
+  'Ensure IAM password policy prevents password reuse' AS title,
+  account_id,
+  account_id,
+  CASE
+  WHEN (password_reuse_prevention IS NULL OR password_reuse_prevention > 24)
+  OR policy_exists = false
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_password_policies;
+```
+
+### Password policies for IAM users should have strong configurations
+
+```sql
+SELECT
+  'Password policies for IAM users should have strong configurations' AS title,
+  account_id,
+  account_id AS resource_id,
+  CASE
+  WHEN (
+    require_uppercase_characters IS NOT true
+    OR require_lowercase_characters IS NOT true
+    OR require_numbers IS NOT true
+    OR minimum_password_length < 14
+    OR password_reuse_prevention IS NULL
+    OR max_password_age IS NULL
+    OR policy_exists IS NOT true
+  )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_password_policies;
+```
+
+
diff --git a/website/tables/aws/aws_iam_policies.md b/website/tables/aws/aws_iam_policies.md
index b3ca5ec151e0..a530fae6243c 100644
--- a/website/tables/aws/aws_iam_policies.md
+++ b/website/tables/aws/aws_iam_policies.md
@@ -33,4 +33,236 @@ The following tables depend on aws_iam_policies:
 |permissions_boundary_usage_count|`int64`|
 |policy_id|`utf8`|
 |policy_name|`utf8`|
-|update_date|`timestamp[us, tz=UTC]`|
\ No newline at end of file
+|update_date|`timestamp[us, tz=UTC]`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM policies should not allow full ''*'' administrative privileges
+
+```sql
+WITH
+  pvs
+    AS (
+      SELECT
+        id, (v->>'Document')::JSONB AS document
+      FROM
+        aws_iam_policies,
+        jsonb_array_elements(aws_iam_policies.policy_version_list) AS v
+    ),
+  violations
+    AS (
+      SELECT
+        id, count(*) AS violations
+      FROM
+        pvs,
+        jsonb_array_elements(
+          CASE jsonb_typeof(document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(document->>'Statement')
+          WHEN 'array' THEN document->'Statement'
+          END
+        )
+          AS statement,
+        jsonb_array_elements_text(
+          CASE jsonb_typeof(statement->'Resource')
+          WHEN 'string' THEN jsonb_build_array(statement->>'Resource')
+          WHEN 'array' THEN statement->'Resource'
+          END
+        )
+          AS resource,
+        jsonb_array_elements_text(
+          CASE jsonb_typeof(statement->'Action')
+          WHEN 'string' THEN jsonb_build_array(statement->>'Action')
+          WHEN 'array' THEN statement->'Action'
+          END
+        )
+          AS action
+      WHERE
+        statement->>'Effect' = 'Allow'
+        AND resource = '*'
+        AND (action = '*' OR action = '*:*')
+      GROUP BY
+        id
+    )
+SELECT
+  DISTINCT
+  e'IAM policies should not allow full \'*\' administrative privileges'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN violations.id IS NOT NULL AND violations.violations > 0 THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_policies LEFT JOIN violations ON violations.id = aws_iam_policies.id;
+```
+
+### IAM policies should not allow full ''*'' administrative privileges
+
+```sql
+WITH
+  iam_policies
+    AS (
+      SELECT
+        id, (v->>'Document')::JSONB AS document
+      FROM
+        aws_iam_policies,
+        jsonb_array_elements(aws_iam_policies.policy_version_list) AS v
+      WHERE
+        aws_iam_policies.default_version_id = v->>'VersionId'
+        AND arn NOT LIKE 'arn:aws:iam::aws:policy%'
+    ),
+  policy_statements
+    AS (
+      SELECT
+        id,
+        jsonb_array_elements(
+          CASE jsonb_typeof(document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(document->>'Statement')
+          WHEN 'array' THEN document->'Statement'
+          END
+        )
+          AS statement
+      FROM
+        iam_policies
+    ),
+  allow_all_statements
+    AS (
+      SELECT
+        id, count(statement) AS statements_count
+      FROM
+        policy_statements
+      WHERE
+        (statement->>'Action' = '*' OR statement->>'Action' LIKE '%"*"%')
+        AND statement->>'Effect' = 'Allow'
+        AND (
+            statement->>'Resource' = '*'
+            OR statement->>'Resource' LIKE '%"*"%'
+          )
+      GROUP BY
+        id
+    )
+SELECT
+  DISTINCT
+  e'IAM policies should not allow full \'*\' administrative privileges'
+    AS title,
+  aws_iam_policies.account_id,
+  aws_iam_policies.arn AS resource_id,
+  CASE WHEN statements_count > 0 THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_iam_policies
+  LEFT JOIN allow_all_statements ON
+      aws_iam_policies.id = allow_all_statements.id;
+```
+
+### IAM customer managed policies that you create should not allow wildcard actions for services
+
+```sql
+WITH
+  policy_statements
+    AS (
+      SELECT
+        aws_iam_policies.id,
+        jsonb_array_elements(
+          CASE jsonb_typeof((v->>'Document')::JSONB->'Statement')
+          WHEN 'string'
+          THEN jsonb_build_array((v->>'Document')::JSONB->>'Statement')
+          WHEN 'array' THEN (v->>'Document')::JSONB->'Statement'
+          END
+        )
+          AS statement
+      FROM
+        aws_iam_policies,
+        jsonb_array_elements(aws_iam_policies.policy_version_list) AS v
+      WHERE
+        aws_iam_policies.arn NOT LIKE 'arn:aws:iam::aws:policy%'
+    ),
+  allow_all_statements
+    AS (
+      SELECT
+        id, count(statement) AS statements_count
+      FROM
+        policy_statements
+      WHERE
+        statement->>'Effect' = 'Allow'
+        AND (
+            statement->>'Action' LIKE '%*%'
+            OR statement->>'NotAction' LIKE '%*%'
+          )
+      GROUP BY
+        id
+    )
+SELECT
+  DISTINCT
+  'IAM customer managed policies that you create should not allow wildcard actions for services'
+    AS title,
+  aws_iam_policies.account_id,
+  aws_iam_policies.arn AS resource_id,
+  CASE WHEN statements_count > 0 THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_iam_policies
+  LEFT JOIN allow_all_statements ON
+      aws_iam_policies.id = allow_all_statements.id;
+```
+
+### IAM customer managed policies should not allow decryption and re-encryption actions on all KMS keys
+
+```sql
+WITH
+  iam_policies
+    AS (
+      SELECT
+        (v->>'Document')::JSONB AS document, account_id, arn, id
+      FROM
+        aws_iam_policies,
+        jsonb_array_elements(aws_iam_policies.policy_version_list) AS v
+    ),
+  violations
+    AS (
+      SELECT
+        DISTINCT id
+      FROM
+        iam_policies,
+        jsonb_array_elements(
+          CASE jsonb_typeof(document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(document->>'Statement')
+          WHEN 'array' THEN document->'Statement'
+          END
+        )
+          AS statement
+      WHERE
+        NOT
+          (
+            arn LIKE 'arn:aws:iam::aws:policy%'
+            OR arn LIKE 'arn:aws-us-gov:iam::aws:policy%'
+          )
+        AND statement->>'Effect' = 'Allow'
+        AND statement->'Resource'
+          ?| ARRAY[
+              '*',
+              'arn:aws:kms:*:' || account_id || ':key/*',
+              'arn:aws:kms:*:' || account_id || ':alias/*'
+            ]
+        AND statement->'Action'
+          ?| ARRAY[
+              '*',
+              'kms:*',
+              'kms:decrypt',
+              'kms:reencryptfrom',
+              'kms:reencrypt*'
+            ]
+    )
+SELECT
+  'IAM customer managed policies should not allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN violations.id IS NOT NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_iam_policies LEFT JOIN violations ON violations.id = aws_iam_policies.id;
+```
+
+
diff --git a/website/tables/aws/aws_iam_role_policies.md b/website/tables/aws/aws_iam_role_policies.md
index 73e5e89c5926..ac9ee18a634a 100644
--- a/website/tables/aws/aws_iam_role_policies.md
+++ b/website/tables/aws/aws_iam_role_policies.md
@@ -23,4 +23,82 @@ This table depends on [aws_iam_roles](aws_iam_roles).
 |policy_document|`json`|
 |policy_name (PK)|`utf8`|
 |role_name|`utf8`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys
+
+```sql
+SELECT
+  'IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      statement, aws_iam_users.account_id, arn, policy_name
+    FROM
+      aws_iam_user_policies
+      CROSS JOIN LATERAL jsonb_array_elements(
+          CASE jsonb_typeof(policy_document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+          WHEN 'array' THEN policy_document->'Statement'
+          END
+        )
+          AS statement
+      INNER JOIN aws_iam_users ON
+          aws_iam_users.account_id = aws_iam_user_policies.account_id
+          AND aws_iam_users.arn = aws_iam_user_policies.user_arn
+    UNION
+      SELECT
+        statement, aws_iam_roles.account_id, arn, policy_name
+      FROM
+        aws_iam_role_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_roles ON
+            aws_iam_roles.account_id = aws_iam_role_policies.account_id
+            AND aws_iam_roles.arn = aws_iam_role_policies.role_arn
+      WHERE
+        lower(arn) NOT LIKE 'arn:aws:iam::%:role/aws-service-role/%'
+    UNION
+      SELECT
+        statement, aws_iam_groups.account_id, arn, policy_name
+      FROM
+        aws_iam_group_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_groups ON
+            aws_iam_groups.account_id = aws_iam_group_policies.account_id
+            AND aws_iam_groups.arn = aws_iam_group_policies.group_arn
+  )
+    AS t
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND lower(statement::STRING)::JSONB->'resource'
+    ?| ARRAY[
+        '*',
+        'arn:aws:kms:*:*:key/*',
+        'arn:aws:kms:*:' || account_id || ':key/*arn:aws:kms:*:*:alias/*',
+        'arn:aws:kms:*:' || account_id || ':alias/*'
+      ]
+  AND lower(statement::STRING)::JSONB->'action'
+    ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:encrypt*', 'kms:reencryptfrom'];
+```
+
+
diff --git a/website/tables/aws/aws_iam_roles.md b/website/tables/aws/aws_iam_roles.md
index 6aacdc58de51..126902fae342 100644
--- a/website/tables/aws/aws_iam_roles.md
+++ b/website/tables/aws/aws_iam_roles.md
@@ -32,4 +32,82 @@ The following tables depend on aws_iam_roles:
 |description|`utf8`|
 |max_session_duration|`int64`|
 |permissions_boundary|`json`|
-|role_last_used|`json`|
\ No newline at end of file
+|role_last_used|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys
+
+```sql
+SELECT
+  'IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      statement, aws_iam_users.account_id, arn, policy_name
+    FROM
+      aws_iam_user_policies
+      CROSS JOIN LATERAL jsonb_array_elements(
+          CASE jsonb_typeof(policy_document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+          WHEN 'array' THEN policy_document->'Statement'
+          END
+        )
+          AS statement
+      INNER JOIN aws_iam_users ON
+          aws_iam_users.account_id = aws_iam_user_policies.account_id
+          AND aws_iam_users.arn = aws_iam_user_policies.user_arn
+    UNION
+      SELECT
+        statement, aws_iam_roles.account_id, arn, policy_name
+      FROM
+        aws_iam_role_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_roles ON
+            aws_iam_roles.account_id = aws_iam_role_policies.account_id
+            AND aws_iam_roles.arn = aws_iam_role_policies.role_arn
+      WHERE
+        lower(arn) NOT LIKE 'arn:aws:iam::%:role/aws-service-role/%'
+    UNION
+      SELECT
+        statement, aws_iam_groups.account_id, arn, policy_name
+      FROM
+        aws_iam_group_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_groups ON
+            aws_iam_groups.account_id = aws_iam_group_policies.account_id
+            AND aws_iam_groups.arn = aws_iam_group_policies.group_arn
+  )
+    AS t
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND lower(statement::STRING)::JSONB->'resource'
+    ?| ARRAY[
+        '*',
+        'arn:aws:kms:*:*:key/*',
+        'arn:aws:kms:*:' || account_id || ':key/*arn:aws:kms:*:*:alias/*',
+        'arn:aws:kms:*:' || account_id || ':alias/*'
+      ]
+  AND lower(statement::STRING)::JSONB->'action'
+    ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:encrypt*', 'kms:reencryptfrom'];
+```
+
+
diff --git a/website/tables/aws/aws_iam_server_certificates.md b/website/tables/aws/aws_iam_server_certificates.md
index a72459bfab88..8df6d3c87aea 100644
--- a/website/tables/aws/aws_iam_server_certificates.md
+++ b/website/tables/aws/aws_iam_server_certificates.md
@@ -21,4 +21,27 @@ The composite primary key for this table is (**account_id**, **id**).
 |server_certificate_id|`utf8`|
 |server_certificate_name|`utf8`|
 |expiration|`timestamp[us, tz=UTC]`|
-|upload_date|`timestamp[us, tz=UTC]`|
\ No newline at end of file
+|upload_date|`timestamp[us, tz=UTC]`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed (Automated)
+
+```sql
+SELECT
+  'Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed (Automated)'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN expiration < timezone('UTC', now()) THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_server_certificates;
+```
+
+
diff --git a/website/tables/aws/aws_iam_user_access_keys.md b/website/tables/aws/aws_iam_user_access_keys.md
index 99a909027401..2b4a3c12d9ee 100644
--- a/website/tables/aws/aws_iam_user_access_keys.md
+++ b/website/tables/aws/aws_iam_user_access_keys.md
@@ -27,4 +27,159 @@ This table depends on [aws_iam_users](aws_iam_users).
 |create_date|`timestamp[us, tz=UTC]`|
 |status|`utf8`|
 |user_name|`utf8`|
-|last_rotated|`timestamp[us, tz=UTC]`|
\ No newline at end of file
+|last_rotated|`timestamp[us, tz=UTC]`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM users'' access keys should be rotated every 90 days or less
+
+```sql
+SELECT
+  e'IAM users\' access keys should be rotated every 90 days or less' AS title,
+  account_id,
+  access_key_id AS resource_id,
+  CASE
+  WHEN date_part('day', now() - last_rotated) > 90 THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_user_access_keys;
+```
+
+### Unused IAM user credentials should be removed
+
+```sql
+SELECT
+  'Unused IAM user credentials should be removed' AS title,
+  account_id,
+  access_key_id AS resource_id,
+  CASE
+  WHEN date_part('day', now() - last_used) > 90 THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_user_access_keys;
+```
+
+### Ensure access keys are rotated every 90 days or less
+
+```sql
+SELECT
+  'Ensure access keys are rotated every 90 days or less' AS title,
+  account_id,
+  user_arn,
+  CASE
+  WHEN last_rotated < (now() - '90 days'::INTERVAL) THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_user_access_keys;
+```
+
+### Ensure no root account access key exists (Scored)
+
+```sql
+SELECT
+  'Ensure no root account access key exists (Scored)' AS title,
+  account_id,
+  user_arn AS resource_id,
+  CASE
+  WHEN user_name IN ('<root>', '<root_account>') THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_user_access_keys;
+```
+
+### Ensure credentials unused for 90 days or greater are disabled (Scored)
+
+```sql
+SELECT
+  'Ensure credentials unused for 90 days or greater are disabled (Scored)'
+    AS title,
+  split_part(r.arn, ':', 5) AS account_id,
+  r.arn,
+  CASE
+  WHEN (
+    r.password_status IN ('TRUE', 'true')
+    AND r.password_last_used < (now() - '90 days'::INTERVAL)
+    OR k.last_used < (now() - '90 days'::INTERVAL)
+  )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_credential_reports AS r
+  LEFT JOIN aws_iam_user_access_keys AS k ON k.user_arn = r.arn;
+```
+
+### Ensure credentials unused for 45 days or greater are disabled (Automated)
+
+```sql
+SELECT
+  'Ensure credentials unused for 45 days or greater are disabled (Automated)'
+    AS title,
+  split_part(r.arn, ':', 5) AS account_id,
+  r.arn,
+  CASE
+  WHEN (
+    r.password_status IN ('TRUE', 'true')
+    AND r.password_last_used < (now() - '45 days'::INTERVAL)
+    OR (
+        r.password_status IN ('TRUE', 'true')
+        AND r.password_last_used IS NULL
+        AND r.password_last_changed < (now() - '45 days'::INTERVAL)
+      )
+    OR k.last_used < (now() - '45 days'::INTERVAL)
+  )
+  OR (
+      r.access_key1_active
+      AND r.access_key_1_last_used_date < (now() - '45 days'::INTERVAL)
+    )
+  OR (
+      r.access_key1_active
+      AND r.access_key_1_last_used_date IS NULL
+      AND access_key_1_last_rotated < (now() - '45 days'::INTERVAL)
+    )
+  OR (
+      r.access_key2_active
+      AND r.access_key_2_last_used_date < (now() - '45 days'::INTERVAL)
+    )
+  OR (
+      r.access_key2_active
+      AND r.access_key_2_last_used_date IS NULL
+      AND access_key_2_last_rotated < (now() - '45 days'::INTERVAL)
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_credential_reports AS r
+  LEFT JOIN aws_iam_user_access_keys AS k ON k.user_arn = r.arn;
+```
+
+### Ensure there is only one active access key available for any single IAM user (Automated)
+
+```sql
+SELECT
+  'Ensure there is only one active access key available for any single IAM user (Automated)'
+    AS title,
+  account_id,
+  user_arn,
+  CASE
+  WHEN count(*) > 1 THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_iam_user_access_keys
+WHERE
+  status = 'Active'
+GROUP BY
+  account_id, user_arn;
+```
+
+
diff --git a/website/tables/aws/aws_iam_user_attached_policies.md b/website/tables/aws/aws_iam_user_attached_policies.md
index be4df375d94d..69386cae73ba 100644
--- a/website/tables/aws/aws_iam_user_attached_policies.md
+++ b/website/tables/aws/aws_iam_user_attached_policies.md
@@ -22,4 +22,29 @@ This table depends on [aws_iam_users](aws_iam_users).
 |user_arn (PK)|`utf8`|
 |policy_name (PK)|`utf8`|
 |user_id|`utf8`|
-|policy_arn|`utf8`|
\ No newline at end of file
+|policy_arn|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM users should not have IAM policies attached
+
+```sql
+SELECT
+  DISTINCT
+  'IAM users should not have IAM policies attached' AS title,
+  aws_iam_users.account_id,
+  arn AS resource_id,
+  CASE
+  WHEN aws_iam_user_attached_policies.user_arn IS NOT NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_users
+  LEFT JOIN aws_iam_user_attached_policies ON
+      aws_iam_users.arn = aws_iam_user_attached_policies.user_arn;
+```
+
+
diff --git a/website/tables/aws/aws_iam_user_policies.md b/website/tables/aws/aws_iam_user_policies.md
index ea21763423d3..6c631c0bfd83 100644
--- a/website/tables/aws/aws_iam_user_policies.md
+++ b/website/tables/aws/aws_iam_user_policies.md
@@ -24,4 +24,82 @@ This table depends on [aws_iam_users](aws_iam_users).
 |policy_document|`json`|
 |policy_name (PK)|`utf8`|
 |user_name|`utf8`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys
+
+```sql
+SELECT
+  'IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      statement, aws_iam_users.account_id, arn, policy_name
+    FROM
+      aws_iam_user_policies
+      CROSS JOIN LATERAL jsonb_array_elements(
+          CASE jsonb_typeof(policy_document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+          WHEN 'array' THEN policy_document->'Statement'
+          END
+        )
+          AS statement
+      INNER JOIN aws_iam_users ON
+          aws_iam_users.account_id = aws_iam_user_policies.account_id
+          AND aws_iam_users.arn = aws_iam_user_policies.user_arn
+    UNION
+      SELECT
+        statement, aws_iam_roles.account_id, arn, policy_name
+      FROM
+        aws_iam_role_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_roles ON
+            aws_iam_roles.account_id = aws_iam_role_policies.account_id
+            AND aws_iam_roles.arn = aws_iam_role_policies.role_arn
+      WHERE
+        lower(arn) NOT LIKE 'arn:aws:iam::%:role/aws-service-role/%'
+    UNION
+      SELECT
+        statement, aws_iam_groups.account_id, arn, policy_name
+      FROM
+        aws_iam_group_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_groups ON
+            aws_iam_groups.account_id = aws_iam_group_policies.account_id
+            AND aws_iam_groups.arn = aws_iam_group_policies.group_arn
+  )
+    AS t
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND lower(statement::STRING)::JSONB->'resource'
+    ?| ARRAY[
+        '*',
+        'arn:aws:kms:*:*:key/*',
+        'arn:aws:kms:*:' || account_id || ':key/*arn:aws:kms:*:*:alias/*',
+        'arn:aws:kms:*:' || account_id || ':alias/*'
+      ]
+  AND lower(statement::STRING)::JSONB->'action'
+    ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:encrypt*', 'kms:reencryptfrom'];
+```
+
+
diff --git a/website/tables/aws/aws_iam_users.md b/website/tables/aws/aws_iam_users.md
index 5eb38f55e91d..5d696594fb33 100644
--- a/website/tables/aws/aws_iam_users.md
+++ b/website/tables/aws/aws_iam_users.md
@@ -33,4 +33,120 @@ The following tables depend on aws_iam_users:
 |user_id|`utf8`|
 |user_name|`utf8`|
 |password_last_used|`timestamp[us, tz=UTC]`|
-|permissions_boundary|`json`|
\ No newline at end of file
+|permissions_boundary|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Avoid the use of "root" account. Show used in last 30 days (Scored)
+
+```sql
+SELECT
+  'Avoid the use of "root" account. Show used in last 30 days (Scored)'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN user_name = '<root_account>'
+  AND password_last_used > (now() - '30 days'::INTERVAL)
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_users;
+```
+
+### IAM users should not have IAM policies attached
+
+```sql
+SELECT
+  DISTINCT
+  'IAM users should not have IAM policies attached' AS title,
+  aws_iam_users.account_id,
+  arn AS resource_id,
+  CASE
+  WHEN aws_iam_user_attached_policies.user_arn IS NOT NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_users
+  LEFT JOIN aws_iam_user_attached_policies ON
+      aws_iam_users.arn = aws_iam_user_attached_policies.user_arn;
+```
+
+### IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys
+
+```sql
+SELECT
+  'IAM principals should not have IAM inline policies that allow decryption and re-encryption actions on all KMS keys'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      statement, aws_iam_users.account_id, arn, policy_name
+    FROM
+      aws_iam_user_policies
+      CROSS JOIN LATERAL jsonb_array_elements(
+          CASE jsonb_typeof(policy_document->'Statement')
+          WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+          WHEN 'array' THEN policy_document->'Statement'
+          END
+        )
+          AS statement
+      INNER JOIN aws_iam_users ON
+          aws_iam_users.account_id = aws_iam_user_policies.account_id
+          AND aws_iam_users.arn = aws_iam_user_policies.user_arn
+    UNION
+      SELECT
+        statement, aws_iam_roles.account_id, arn, policy_name
+      FROM
+        aws_iam_role_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_roles ON
+            aws_iam_roles.account_id = aws_iam_role_policies.account_id
+            AND aws_iam_roles.arn = aws_iam_role_policies.role_arn
+      WHERE
+        lower(arn) NOT LIKE 'arn:aws:iam::%:role/aws-service-role/%'
+    UNION
+      SELECT
+        statement, aws_iam_groups.account_id, arn, policy_name
+      FROM
+        aws_iam_group_policies
+        CROSS JOIN LATERAL jsonb_array_elements(
+            CASE jsonb_typeof(policy_document->'Statement')
+            WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+            WHEN 'array' THEN policy_document->'Statement'
+            END
+          )
+            AS statement
+        INNER JOIN aws_iam_groups ON
+            aws_iam_groups.account_id = aws_iam_group_policies.account_id
+            AND aws_iam_groups.arn = aws_iam_group_policies.group_arn
+  )
+    AS t
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND lower(statement::STRING)::JSONB->'resource'
+    ?| ARRAY[
+        '*',
+        'arn:aws:kms:*:*:key/*',
+        'arn:aws:kms:*:' || account_id || ':key/*arn:aws:kms:*:*:alias/*',
+        'arn:aws:kms:*:' || account_id || ':alias/*'
+      ]
+  AND lower(statement::STRING)::JSONB->'action'
+    ?| ARRAY['*', 'kms:*', 'kms:decrypt', 'kms:encrypt*', 'kms:reencryptfrom'];
+```
+
+
diff --git a/website/tables/aws/aws_iam_virtual_mfa_devices.md b/website/tables/aws/aws_iam_virtual_mfa_devices.md
index 1d320bff7346..3f084e55dfdc 100644
--- a/website/tables/aws/aws_iam_virtual_mfa_devices.md
+++ b/website/tables/aws/aws_iam_virtual_mfa_devices.md
@@ -20,4 +20,31 @@ The primary key for this table is **serial_number**.
 |base32_string_seed|`binary`|
 |enable_date|`timestamp[us, tz=UTC]`|
 |qr_code_png|`binary`|
-|user|`json`|
\ No newline at end of file
+|user|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure hardware MFA is enabled for the "root" account (Scored)
+
+```sql
+SELECT
+  'Ensure hardware MFA is enabled for the "root" account (Scored)' AS title,
+  split_part(cr.arn, ':', 5) AS account_id,
+  cr.arn AS resource_id,
+  CASE
+  WHEN mfa.serial_number IS NULL OR cr.mfa_active = false THEN 'fail'
+  WHEN mfa.serial_number IS NOT NULL AND cr.mfa_active = true THEN 'pass'
+  END
+    AS status
+FROM
+  aws_iam_credential_reports AS cr
+  LEFT JOIN aws_iam_virtual_mfa_devices AS mfa ON mfa.user->>'Arn' = cr.arn
+WHERE
+  cr.user = '<root_account>'
+GROUP BY
+  mfa.serial_number, cr.mfa_active, cr.arn;
+```
+
+
diff --git a/website/tables/aws/aws_kms_keys.md b/website/tables/aws/aws_kms_keys.md
index a5b6261f5fe9..65a4ab54e66c 100644
--- a/website/tables/aws/aws_kms_keys.md
+++ b/website/tables/aws/aws_kms_keys.md
@@ -48,4 +48,42 @@ The following tables depend on aws_kms_keys:
 |pending_deletion_window_in_days|`int64`|
 |signing_algorithms|`list<item: utf8, nullable>`|
 |valid_to|`timestamp[us, tz=UTC]`|
-|xks_key_configuration|`json`|
\ No newline at end of file
+|xks_key_configuration|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### AWS KMS keys should not be unintentionally deleted
+
+```sql
+SELECT
+  'AWS KMS keys should not be unintentionally deleted' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN key_state = 'PendingDeletion' AND key_manager = 'CUSTOMER' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_kms_keys;
+```
+
+### Ensure rotation for customer created custom master keys is enabled (Scored)
+
+```sql
+SELECT
+  'Ensure rotation for customer created custom master keys is enabled (Scored)'
+    AS title,
+  account_id,
+  arn,
+  CASE
+  WHEN rotation_enabled IS false AND key_manager = 'CUSTOMER' THEN 'fail'
+  ELSE 'pass'
+  END
+FROM
+  aws_kms_keys;
+```
+
+
diff --git a/website/tables/aws/aws_lambda_functions.md b/website/tables/aws/aws_lambda_functions.md
index 75aef0e66348..70d9a7746935 100644
--- a/website/tables/aws/aws_lambda_functions.md
+++ b/website/tables/aws/aws_lambda_functions.md
@@ -36,4 +36,126 @@ The following tables depend on aws_lambda_functions:
 |concurrency|`json`|
 |configuration|`json`|
 |tags|`json`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Find all lambda functions that have unrestricted access to the internet
+
+```sql
+SELECT
+  DISTINCT
+  'Find all lambda functions that have unrestricted access to the internet'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lambda_functions,
+  jsonb_array_elements_text(configuration->'VpcConfig'->'SecurityGroupIds')
+    AS sgs,
+  jsonb_array_elements_text(configuration->'VpcConfig'->' SubnetIds') AS sns
+WHERE
+  sns
+  IN (
+      SELECT
+        a->>'SubnetId'
+      FROM
+        public.aws_ec2_route_tables,
+        jsonb_array_elements(associations) AS a,
+        jsonb_array_elements(routes) AS r
+      WHERE
+        r->>'DestinationCidrBlock' = '0.0.0.0/0'
+        OR r->>'DestinationIpv6CidrBlock' = '::/0'
+    )
+  AND sgs
+    IN (
+        SELECT
+          id
+        FROM
+          view_aws_security_group_egress_rules
+        WHERE
+          ip = '0.0.0.0/0' OR ip6 = '::/0'
+      )
+UNION
+  SELECT
+    DISTINCT
+    'Find all lambda functions that have unrestricted access to the internet'
+      AS title,
+    account_id,
+    arn AS resource_id,
+    'fail' AS status
+  FROM
+    aws_lambda_functions
+  WHERE
+    (configuration->'VpcConfig'->>'VpcId') IS NULL;
+```
+
+### Lambda functions should be in a VPC
+
+```sql
+SELECT
+  'Lambda functions should be in a VPC' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (configuration->'VpcConfig'->>'VpcId') IS NULL
+  OR configuration->'VpcConfig'->>'VpcId' = ''
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_lambda_functions;
+```
+
+### Lambda functions should prohibit public access
+
+```sql
+SELECT
+  'Lambda functions should prohibit public access' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lambda_functions,
+  jsonb_array_elements(
+    CASE jsonb_typeof(policy_document->'Statement')
+    WHEN 'string' THEN jsonb_build_array(policy_document->>'Statement')
+    WHEN 'array' THEN policy_document->'Statement'
+    END
+  )
+    AS statement
+WHERE
+  statement->>'Effect' = 'Allow'
+  AND (
+      statement->>'Principal' = '*'
+      OR statement->'Principal'->>'AWS' = '*'
+      OR (
+          CASE jsonb_typeof(statement->'Principal'->'AWS')
+          WHEN 'string' THEN jsonb_build_array(statement->'Principal'->>'AWS')
+          WHEN 'array' THEN (statement->'Principal'->>'AWS')::JSONB
+          END
+        )::JSONB
+        ? '*'
+    );
+```
+
+### Lambda functions should use supported runtimes
+
+```sql
+SELECT
+  'Lambda functions should use supported runtimes' AS title,
+  f.account_id,
+  f.arn AS resource_id,
+  CASE WHEN r.name IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_lambda_functions AS f
+  LEFT JOIN aws_lambda_runtimes AS r ON r.name = f.configuration->>'Runtime'
+WHERE
+  f.configuration->>'PackageType' != 'Image';
+```
+
+
diff --git a/website/tables/aws/aws_lambda_runtimes.md b/website/tables/aws/aws_lambda_runtimes.md
index d963ed7b1505..8c20e8c44758 100644
--- a/website/tables/aws/aws_lambda_runtimes.md
+++ b/website/tables/aws/aws_lambda_runtimes.md
@@ -12,4 +12,25 @@ The primary key for this table is **name**.
 |_cq_sync_time|`timestamp[us, tz=UTC]`|
 |_cq_id|`uuid`|
 |_cq_parent_id|`uuid`|
-|name (PK)|`utf8`|
\ No newline at end of file
+|name (PK)|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Lambda functions should use supported runtimes
+
+```sql
+SELECT
+  'Lambda functions should use supported runtimes' AS title,
+  f.account_id,
+  f.arn AS resource_id,
+  CASE WHEN r.name IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_lambda_functions AS f
+  LEFT JOIN aws_lambda_runtimes AS r ON r.name = f.configuration->>'Runtime'
+WHERE
+  f.configuration->>'PackageType' != 'Image';
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_container_service_deployments.md b/website/tables/aws/aws_lightsail_container_service_deployments.md
index 3e929370ce9d..4035502c9827 100644
--- a/website/tables/aws/aws_lightsail_container_service_deployments.md
+++ b/website/tables/aws/aws_lightsail_container_service_deployments.md
@@ -25,4 +25,33 @@ This table depends on [aws_lightsail_container_services](aws_lightsail_container
 |created_at|`timestamp[us, tz=UTC]`|
 |public_endpoint|`json`|
 |state|`utf8`|
-|version|`int64`|
\ No newline at end of file
+|version|`int64`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused Lightsail container services
+
+```sql
+WITH
+  deployment
+    AS (
+      SELECT
+        DISTINCT container_service_arn
+      FROM
+        aws_lightsail_container_service_deployments
+    )
+SELECT
+  'Unused Lightsail container services' AS title,
+  cs.account_id,
+  cs.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lightsail_container_services AS cs
+  LEFT JOIN deployment ON deployment.container_service_arn = cs.arn
+WHERE
+  deployment.container_service_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_container_services.md b/website/tables/aws/aws_lightsail_container_services.md
index c84eeb1bf2de..1cc4c69cd2e5 100644
--- a/website/tables/aws/aws_lightsail_container_services.md
+++ b/website/tables/aws/aws_lightsail_container_services.md
@@ -40,4 +40,33 @@ The following tables depend on aws_lightsail_container_services:
 |scale|`int64`|
 |state|`utf8`|
 |state_detail|`json`|
-|url|`utf8`|
\ No newline at end of file
+|url|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused Lightsail container services
+
+```sql
+WITH
+  deployment
+    AS (
+      SELECT
+        DISTINCT container_service_arn
+      FROM
+        aws_lightsail_container_service_deployments
+    )
+SELECT
+  'Unused Lightsail container services' AS title,
+  cs.account_id,
+  cs.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lightsail_container_services AS cs
+  LEFT JOIN deployment ON deployment.container_service_arn = cs.arn
+WHERE
+  deployment.container_service_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_disks.md b/website/tables/aws/aws_lightsail_disks.md
index f49f3aed3350..b0f6896e7a3d 100644
--- a/website/tables/aws/aws_lightsail_disks.md
+++ b/website/tables/aws/aws_lightsail_disks.md
@@ -37,4 +37,24 @@ The following tables depend on aws_lightsail_disks:
 |resource_type|`utf8`|
 |size_in_gb|`int64`|
 |state|`utf8`|
-|support_code|`utf8`|
\ No newline at end of file
+|support_code|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused Lightsail disks
+
+```sql
+SELECT
+  'Unused Lightsail disks' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lightsail_disks
+WHERE
+  is_attached = false;
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_distributions.md b/website/tables/aws/aws_lightsail_distributions.md
index 70909ec4d405..218a87c59d4a 100644
--- a/website/tables/aws/aws_lightsail_distributions.md
+++ b/website/tables/aws/aws_lightsail_distributions.md
@@ -36,4 +36,24 @@ The primary key for this table is **arn**.
 |resource_type|`utf8`|
 |status|`utf8`|
 |support_code|`utf8`|
-|latest_cache_reset|`json`|
\ No newline at end of file
+|latest_cache_reset|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Disabled Lightsail distributions
+
+```sql
+SELECT
+  'Disabled Lightsail distributions' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lightsail_distributions
+WHERE
+  is_enabled = false;
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_instances.md b/website/tables/aws/aws_lightsail_instances.md
index 445a3a532834..cfb65c420dca 100644
--- a/website/tables/aws/aws_lightsail_instances.md
+++ b/website/tables/aws/aws_lightsail_instances.md
@@ -43,4 +43,26 @@ The following tables depend on aws_lightsail_instances:
 |ssh_key_name|`utf8`|
 |state|`json`|
 |support_code|`utf8`|
-|username|`utf8`|
\ No newline at end of file
+|username|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Lightsail instances should use IMDSv2
+
+```sql
+SELECT
+  'Lightsail instances should use IMDSv2' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN metadata_options->>'HttpTokens' IS DISTINCT FROM 'required' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_lightsail_instances;
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_load_balancers.md b/website/tables/aws/aws_lightsail_load_balancers.md
index 3268ae4a2842..71e5faeb64b2 100644
--- a/website/tables/aws/aws_lightsail_load_balancers.md
+++ b/website/tables/aws/aws_lightsail_load_balancers.md
@@ -39,4 +39,24 @@ The following tables depend on aws_lightsail_load_balancers:
 |state|`utf8`|
 |support_code|`utf8`|
 |tls_certificate_summaries|`json`|
-|tls_policy_name|`utf8`|
\ No newline at end of file
+|tls_policy_name|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused Lightsail load balancers
+
+```sql
+SELECT
+  'Unused Lightsail load balancers' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lightsail_load_balancers
+WHERE
+  COALESCE(jsonb_array_length(instance_health_summary), 0) = 0;
+```
+
+
diff --git a/website/tables/aws/aws_lightsail_static_ips.md b/website/tables/aws/aws_lightsail_static_ips.md
index 22c64f3f26e3..446d392d0b2b 100644
--- a/website/tables/aws/aws_lightsail_static_ips.md
+++ b/website/tables/aws/aws_lightsail_static_ips.md
@@ -24,4 +24,24 @@ The primary key for this table is **arn**.
 |location|`json`|
 |name|`utf8`|
 |resource_type|`utf8`|
-|support_code|`utf8`|
\ No newline at end of file
+|support_code|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused Lightsail static IPs
+
+```sql
+SELECT
+  'Unused Lightsail static IPs' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_lightsail_static_ips
+WHERE
+  is_attached = false;
+```
+
+
diff --git a/website/tables/aws/aws_rds_cluster_snapshots.md b/website/tables/aws/aws_rds_cluster_snapshots.md
index fc08152d31ac..771ddaec57e6 100644
--- a/website/tables/aws/aws_rds_cluster_snapshots.md
+++ b/website/tables/aws/aws_rds_cluster_snapshots.md
@@ -40,4 +40,58 @@ The primary key for this table is **arn**.
 |source_db_cluster_snapshot_arn|`utf8`|
 |status|`utf8`|
 |storage_encrypted|`bool`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### RDS cluster snapshots and database snapshots should be encrypted at rest
+
+```sql
+(
+  SELECT
+    'RDS cluster snapshots and database snapshots should be encrypted at rest'
+      AS title,
+    account_id,
+    arn AS resource_id,
+    CASE
+    WHEN storage_encrypted IS NOT true THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_rds_cluster_snapshots
+)
+UNION
+  (
+    SELECT
+      'RDS cluster snapshots and database snapshots should be encrypted at rest'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE WHEN encrypted IS NOT true THEN 'fail' ELSE 'pass' END AS status
+    FROM
+      aws_rds_db_snapshots
+  );
+```
+
+### RDS snapshots should be private
+
+```sql
+SELECT
+  'RDS snapshots should be private' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN attrs->>'AttributeName' IS NOT DISTINCT FROM 'restore'
+  AND (attrs->'AttributeValues')::JSONB ? 'all'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_cluster_snapshots, jsonb_array_elements(attributes) AS attrs;
+```
+
+
diff --git a/website/tables/aws/aws_rds_clusters.md b/website/tables/aws/aws_rds_clusters.md
index 06dd2781d0c2..9c754fd60d2c 100644
--- a/website/tables/aws/aws_rds_clusters.md
+++ b/website/tables/aws/aws_rds_clusters.md
@@ -92,4 +92,188 @@ The following tables depend on aws_rds_clusters:
 |status|`utf8`|
 |storage_encrypted|`bool`|
 |storage_type|`utf8`|
-|vpc_security_groups|`json`|
\ No newline at end of file
+|vpc_security_groups|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon Aurora clusters should have backtracking enabled
+
+```sql
+SELECT
+  'Amazon Aurora clusters should have backtracking enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN backtrack_window IS NULL THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_rds_clusters
+WHERE
+  engine IN ('aurora', 'aurora-mysql', 'mysql');
+```
+
+### IAM authentication should be configured for RDS clusters
+
+```sql
+SELECT
+  'IAM authentication should be configured for RDS clusters' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN iam_database_authentication_enabled IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_clusters;
+```
+
+### RDS clusters should have deletion protection enabled
+
+```sql
+SELECT
+  'RDS clusters should have deletion protection enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN deletion_protection IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_clusters;
+```
+
+### RDS databases and clusters should not use a database engine default port
+
+```sql
+(
+  SELECT
+    'RDS databases and clusters should not use a database engine default port'
+      AS title,
+    account_id,
+    arn AS resource_id,
+    CASE
+    WHEN (engine IN ('aurora', 'aurora-mysql', 'mysql') AND port = 3306)
+    OR (engine LIKE '%postgres%' AND port = 5432)
+    THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_rds_clusters
+)
+UNION
+  (
+    SELECT
+      'RDS databases and clusters should not use a database engine default port'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN (
+        engine IN ('aurora', 'aurora-mysql', 'mariadb', 'mysql')
+        AND db_instance_port = 3306
+      )
+      OR (engine LIKE '%postgres%' AND db_instance_port = 5432)
+      OR (engine LIKE '%oracle%' AND db_instance_port = 1521)
+      OR (engine LIKE '%sqlserver%' AND db_instance_port = 1433)
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_rds_instances
+  );
+```
+
+### RDS DB clusters should be configured for multiple Availability Zones
+
+```sql
+SELECT
+  'RDS DB clusters should be configured for multiple Availability Zones'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN multi_az IS NOT true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_rds_clusters;
+```
+
+### RDS DB clusters should be configured to copy tags to snapshots
+
+```sql
+SELECT
+  'RDS DB clusters should be configured to copy tags to snapshots' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN copy_tags_to_snapshot IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_clusters;
+```
+
+### An RDS event notifications subscription should be configured for critical cluster events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-cluster')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-cluster' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-cluster'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical cluster events'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT (any_source_categories @> '{"failure","maintenance"}')
+  AND (
+      specific_cats IS NULL
+      OR NOT (specific_cats @> '{"failure","maintenance"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_clusters
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      db_cluster_identifier = specific_categories.source_id;
+```
+
+
diff --git a/website/tables/aws/aws_rds_db_parameter_groups.md b/website/tables/aws/aws_rds_db_parameter_groups.md
index 4fa90bec31f0..131184e1dee7 100644
--- a/website/tables/aws/aws_rds_db_parameter_groups.md
+++ b/website/tables/aws/aws_rds_db_parameter_groups.md
@@ -26,4 +26,71 @@ The following tables depend on aws_rds_db_parameter_groups:
 |db_parameter_group_arn|`utf8`|
 |db_parameter_group_family|`utf8`|
 |db_parameter_group_name|`utf8`|
-|description|`utf8`|
\ No newline at end of file
+|description|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### An RDS event notifications subscription should be configured for critical database parameter group events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-parameter-group')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-parameter-group' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-parameter-group'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical database parameter group events'
+    AS title,
+  aws_rds_db_parameter_groups.account_id,
+  aws_rds_db_parameter_groups.arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT (any_source_categories @> '{"configuration change"}')
+  AND (
+      specific_cats IS NULL
+      OR NOT (specific_cats @> '{"configuration change"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_db_parameter_groups
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      aws_rds_db_parameter_groups.db_parameter_group_name
+      = specific_categories.source_id;
+```
+
+
diff --git a/website/tables/aws/aws_rds_db_security_groups.md b/website/tables/aws/aws_rds_db_security_groups.md
index 4c9d2a98db61..b38175b73211 100644
--- a/website/tables/aws/aws_rds_db_security_groups.md
+++ b/website/tables/aws/aws_rds_db_security_groups.md
@@ -24,4 +24,71 @@ The primary key for this table is **arn**.
 |ec2_security_groups|`json`|
 |ip_ranges|`json`|
 |owner_id|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### An RDS event notifications subscription should be configured for critical database security group events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-security-group')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-security-group' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-security-group'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical database security group events'
+    AS title,
+  aws_rds_db_security_groups.account_id,
+  aws_rds_db_security_groups.arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT (any_source_categories @> '{"configuration change","failure"}')
+  AND (
+      specific_cats IS NULL
+      OR NOT (specific_cats @> '{"configuration change","failure"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_db_security_groups
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      aws_rds_db_security_groups.db_security_group_name
+      = specific_categories.source_id;
+```
+
+
diff --git a/website/tables/aws/aws_rds_db_snapshots.md b/website/tables/aws/aws_rds_db_snapshots.md
index 100946ad1a40..a9cc9acd9c4b 100644
--- a/website/tables/aws/aws_rds_db_snapshots.md
+++ b/website/tables/aws/aws_rds_db_snapshots.md
@@ -50,4 +50,40 @@ The primary key for this table is **arn**.
 |storage_type|`utf8`|
 |tde_credential_arn|`utf8`|
 |timezone|`utf8`|
-|vpc_id|`utf8`|
\ No newline at end of file
+|vpc_id|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### RDS cluster snapshots and database snapshots should be encrypted at rest
+
+```sql
+(
+  SELECT
+    'RDS cluster snapshots and database snapshots should be encrypted at rest'
+      AS title,
+    account_id,
+    arn AS resource_id,
+    CASE
+    WHEN storage_encrypted IS NOT true THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_rds_cluster_snapshots
+)
+UNION
+  (
+    SELECT
+      'RDS cluster snapshots and database snapshots should be encrypted at rest'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE WHEN encrypted IS NOT true THEN 'fail' ELSE 'pass' END AS status
+    FROM
+      aws_rds_db_snapshots
+  );
+```
+
+
diff --git a/website/tables/aws/aws_rds_event_subscriptions.md b/website/tables/aws/aws_rds_event_subscriptions.md
index 58e4321e80a9..efefb402a282 100644
--- a/website/tables/aws/aws_rds_event_subscriptions.md
+++ b/website/tables/aws/aws_rds_event_subscriptions.md
@@ -27,4 +27,257 @@ The primary key for this table is **arn**.
 |source_ids_list|`list<item: utf8, nullable>`|
 |source_type|`utf8`|
 |status|`utf8`|
-|subscription_creation_time|`utf8`|
\ No newline at end of file
+|subscription_creation_time|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### An RDS event notifications subscription should be configured for critical cluster events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-cluster')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-cluster' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-cluster'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical cluster events'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT (any_source_categories @> '{"failure","maintenance"}')
+  AND (
+      specific_cats IS NULL
+      OR NOT (specific_cats @> '{"failure","maintenance"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_clusters
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      db_cluster_identifier = specific_categories.source_id;
+```
+
+### An RDS event notifications subscription should be configured for critical database instance events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-instance')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-instance' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-instance'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical database instance events'
+    AS title,
+  aws_rds_instances.account_id,
+  aws_rds_instances.arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT
+      (
+        any_source_categories
+        @> '{"maintenance","configuration change","failure"}'
+      )
+  AND (
+      specific_cats IS NULL
+      OR NOT
+          (specific_cats @> '{"maintenance","configuration change","failure"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      db_instance_identifier = specific_categories.source_id;
+```
+
+### An RDS event notifications subscription should be configured for critical database parameter group events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-parameter-group')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-parameter-group' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-parameter-group'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical database parameter group events'
+    AS title,
+  aws_rds_db_parameter_groups.account_id,
+  aws_rds_db_parameter_groups.arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT (any_source_categories @> '{"configuration change"}')
+  AND (
+      specific_cats IS NULL
+      OR NOT (specific_cats @> '{"configuration change"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_db_parameter_groups
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      aws_rds_db_parameter_groups.db_parameter_group_name
+      = specific_categories.source_id;
+```
+
+### An RDS event notifications subscription should be configured for critical database security group events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-security-group')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-security-group' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-security-group'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical database security group events'
+    AS title,
+  aws_rds_db_security_groups.account_id,
+  aws_rds_db_security_groups.arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT (any_source_categories @> '{"configuration change","failure"}')
+  AND (
+      specific_cats IS NULL
+      OR NOT (specific_cats @> '{"configuration change","failure"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_db_security_groups
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      aws_rds_db_security_groups.db_security_group_name
+      = specific_categories.source_id;
+```
+
+
diff --git a/website/tables/aws/aws_rds_instances.md b/website/tables/aws/aws_rds_instances.md
index 82789f1d949e..bf00acc73aaf 100644
--- a/website/tables/aws/aws_rds_instances.md
+++ b/website/tables/aws/aws_rds_instances.md
@@ -96,4 +96,288 @@ The primary key for this table is **arn**.
 |storage_type|`utf8`|
 |tde_credential_arn|`utf8`|
 |timezone|`utf8`|
-|vpc_security_groups|`json`|
\ No newline at end of file
+|vpc_security_groups|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Database logging should be enabled
+
+```sql
+SELECT
+  'Database logging should be enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN enabled_cloudwatch_logs_exports IS NULL
+  OR (
+      engine IN ('aurora', 'aurora-mysql', 'mariadb', 'mysql')
+      AND NOT
+          (enabled_cloudwatch_logs_exports @> '{audit,error,general,slowquery}')
+    )
+  OR (
+      engine LIKE '%postgres%'
+      AND NOT (enabled_cloudwatch_logs_exports @> '{postgresql,upgrade}')
+    )
+  OR (
+      engine LIKE '%oracle%'
+      AND NOT
+          (enabled_cloudwatch_logs_exports @> '{alert,audit,trace,listener}')
+    )
+  OR (
+      engine LIKE '%sqlserver%'
+      AND NOT (enabled_cloudwatch_logs_exports @> '{error,agent}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+### Enhanced monitoring should be configured for RDS DB instances and clusters
+
+```sql
+SELECT
+  'Enhanced monitoring should be configured for RDS DB instances and clusters'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN enhanced_monitoring_resource_arn IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+### IAM authentication should be configured for RDS instances
+
+```sql
+SELECT
+  'IAM authentication should be configured for RDS instances' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN iam_database_authentication_enabled IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+### RDS automatic minor version upgrades should be enabled
+
+```sql
+SELECT
+  'RDS automatic minor version upgrades should be enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN auto_minor_version_upgrade IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+### RDS databases and clusters should not use a database engine default port
+
+```sql
+(
+  SELECT
+    'RDS databases and clusters should not use a database engine default port'
+      AS title,
+    account_id,
+    arn AS resource_id,
+    CASE
+    WHEN (engine IN ('aurora', 'aurora-mysql', 'mysql') AND port = 3306)
+    OR (engine LIKE '%postgres%' AND port = 5432)
+    THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_rds_clusters
+)
+UNION
+  (
+    SELECT
+      'RDS databases and clusters should not use a database engine default port'
+        AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN (
+        engine IN ('aurora', 'aurora-mysql', 'mariadb', 'mysql')
+        AND db_instance_port = 3306
+      )
+      OR (engine LIKE '%postgres%' AND db_instance_port = 5432)
+      OR (engine LIKE '%oracle%' AND db_instance_port = 1521)
+      OR (engine LIKE '%sqlserver%' AND db_instance_port = 1433)
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_rds_instances
+  );
+```
+
+### RDS DB instances should be configured to copy tags to snapshots
+
+```sql
+SELECT
+  'RDS DB instances should be configured to copy tags to snapshots' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN copy_tags_to_snapshot IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+### RDS DB instances should be configured with multiple Availability Zones
+
+```sql
+SELECT
+  'RDS DB instances should be configured with multiple Availability Zones'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN multi_az IS NOT true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_rds_instances;
+```
+
+### RDS DB instances should have deletion protection enabled
+
+```sql
+SELECT
+  'RDS DB instances should have deletion protection enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN deletion_protection IS NOT true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+### RDS DB instances should have encryption at rest enabled
+
+```sql
+SELECT
+  'RDS DB instances should have encryption at rest enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN storage_encrypted IS NOT true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_rds_instances;
+```
+
+### RDS DB instances should prohibit public access, determined by the PubliclyAccessible configuration
+
+```sql
+SELECT
+  'RDS DB instances should prohibit public access, determined by the PubliclyAccessible configuration'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN publicly_accessible IS true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_rds_instances;
+```
+
+### An RDS event notifications subscription should be configured for critical database instance events
+
+```sql
+WITH
+  any_category
+    AS (
+      SELECT
+        DISTINCT true AS any_category
+      FROM
+        aws_rds_event_subscriptions
+      WHERE
+        (source_type IS NULL OR source_type = 'db-instance')
+        AND event_categories_list IS NULL
+    ),
+  any_source_id
+    AS (
+      SELECT
+        COALESCE(array_agg(category), '{}'::STRING[]) AS any_source_categories
+      FROM
+        aws_rds_event_subscriptions, unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-instance' AND event_categories_list IS NOT NULL
+    ),
+  specific_categories
+    AS (
+      SELECT
+        source_id, array_agg(category) AS specific_cats
+      FROM
+        aws_rds_event_subscriptions,
+        unnest(source_ids_list) AS source_id,
+        unnest(event_categories_list) AS category
+      WHERE
+        source_type = 'db-instance'
+      GROUP BY
+        source_id
+    )
+SELECT
+  'An RDS event notifications subscription should be configured for critical database instance events'
+    AS title,
+  aws_rds_instances.account_id,
+  aws_rds_instances.arn AS resource_id,
+  CASE
+  WHEN any_category IS NOT true
+  AND NOT
+      (
+        any_source_categories
+        @> '{"maintenance","configuration change","failure"}'
+      )
+  AND (
+      specific_cats IS NULL
+      OR NOT
+          (specific_cats @> '{"maintenance","configuration change","failure"}')
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances
+  LEFT JOIN any_category ON true
+  INNER JOIN any_source_id ON true
+  LEFT JOIN specific_categories ON
+      db_instance_identifier = specific_categories.source_id;
+```
+
+### RDS instances should be deployed in a VPC
+
+```sql
+SELECT
+  'RDS instances should be deployed in a VPC' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (db_subnet_group->>'VpcId') IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_rds_instances;
+```
+
+
diff --git a/website/tables/aws/aws_redshift_cluster_parameter_groups.md b/website/tables/aws/aws_redshift_cluster_parameter_groups.md
index 3369b89afcff..e8ebe75df008 100644
--- a/website/tables/aws/aws_redshift_cluster_parameter_groups.md
+++ b/website/tables/aws/aws_redshift_cluster_parameter_groups.md
@@ -26,4 +26,51 @@ The following tables depend on aws_redshift_cluster_parameter_groups:
 |cluster_arn (PK)|`utf8`|
 |parameter_group_name (PK)|`utf8`|
 |cluster_parameter_status_list|`json`|
-|parameter_apply_status|`utf8`|
\ No newline at end of file
+|parameter_apply_status|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Connections to Amazon Redshift clusters should be encrypted in transit
+
+```sql
+SELECT
+  'Connections to Amazon Redshift clusters should be encrypted in transit'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_redshift_clusters AS rsc
+WHERE
+  EXISTS(
+    SELECT
+      1
+    FROM
+      aws_redshift_cluster_parameter_groups AS rscpg
+      INNER JOIN aws_redshift_cluster_parameters AS rscp ON
+          rscpg.cluster_arn = rscp.cluster_arn
+    WHERE
+      rsc.arn = rscpg.cluster_arn
+      AND (
+          rscp.parameter_name = 'require_ssl'
+          AND rscp.parameter_value = 'false'
+        )
+      OR (rscp.parameter_name = 'require_ssl' AND rscp.parameter_value IS NULL)
+      OR NOT
+          EXISTS(
+            (
+              SELECT
+                1
+              FROM
+                aws_redshift_cluster_parameters
+              WHERE
+                cluster_arn = rscpg.cluster_arn
+                AND parameter_name = 'require_ssl'
+            )
+          )
+  );
+```
+
+
diff --git a/website/tables/aws/aws_redshift_cluster_parameters.md b/website/tables/aws/aws_redshift_cluster_parameters.md
index b0bbf05d9104..bd6ddaa3e3f4 100644
--- a/website/tables/aws/aws_redshift_cluster_parameters.md
+++ b/website/tables/aws/aws_redshift_cluster_parameters.md
@@ -29,4 +29,51 @@ This table depends on [aws_redshift_cluster_parameter_groups](aws_redshift_clust
 |is_modifiable|`bool`|
 |minimum_engine_version|`utf8`|
 |parameter_value|`utf8`|
-|source|`utf8`|
\ No newline at end of file
+|source|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Connections to Amazon Redshift clusters should be encrypted in transit
+
+```sql
+SELECT
+  'Connections to Amazon Redshift clusters should be encrypted in transit'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_redshift_clusters AS rsc
+WHERE
+  EXISTS(
+    SELECT
+      1
+    FROM
+      aws_redshift_cluster_parameter_groups AS rscpg
+      INNER JOIN aws_redshift_cluster_parameters AS rscp ON
+          rscpg.cluster_arn = rscp.cluster_arn
+    WHERE
+      rsc.arn = rscpg.cluster_arn
+      AND (
+          rscp.parameter_name = 'require_ssl'
+          AND rscp.parameter_value = 'false'
+        )
+      OR (rscp.parameter_name = 'require_ssl' AND rscp.parameter_value IS NULL)
+      OR NOT
+          EXISTS(
+            (
+              SELECT
+                1
+              FROM
+                aws_redshift_cluster_parameters
+              WHERE
+                cluster_arn = rscpg.cluster_arn
+                AND parameter_name = 'require_ssl'
+            )
+          )
+  );
+```
+
+
diff --git a/website/tables/aws/aws_redshift_clusters.md b/website/tables/aws/aws_redshift_clusters.md
index fa27881ceeb7..7da7945d6a5e 100644
--- a/website/tables/aws/aws_redshift_clusters.md
+++ b/website/tables/aws/aws_redshift_clusters.md
@@ -76,4 +76,136 @@ The following tables depend on aws_redshift_clusters:
 |snapshot_schedule_state|`utf8`|
 |total_storage_capacity_in_mega_bytes|`int64`|
 |vpc_id|`utf8`|
-|vpc_security_groups|`json`|
\ No newline at end of file
+|vpc_security_groups|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon Redshift clusters should prohibit public access
+
+```sql
+SELECT
+  'Amazon Redshift clusters should prohibit public access' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN publicly_accessible IS true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_redshift_clusters;
+```
+
+### Connections to Amazon Redshift clusters should be encrypted in transit
+
+```sql
+SELECT
+  'Connections to Amazon Redshift clusters should be encrypted in transit'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_redshift_clusters AS rsc
+WHERE
+  EXISTS(
+    SELECT
+      1
+    FROM
+      aws_redshift_cluster_parameter_groups AS rscpg
+      INNER JOIN aws_redshift_cluster_parameters AS rscp ON
+          rscpg.cluster_arn = rscp.cluster_arn
+    WHERE
+      rsc.arn = rscpg.cluster_arn
+      AND (
+          rscp.parameter_name = 'require_ssl'
+          AND rscp.parameter_value = 'false'
+        )
+      OR (rscp.parameter_name = 'require_ssl' AND rscp.parameter_value IS NULL)
+      OR NOT
+          EXISTS(
+            (
+              SELECT
+                1
+              FROM
+                aws_redshift_cluster_parameters
+              WHERE
+                cluster_arn = rscpg.cluster_arn
+                AND parameter_name = 'require_ssl'
+            )
+          )
+  );
+```
+
+### Amazon Redshift clusters should have audit logging enabled
+
+```sql
+SELECT
+  'Amazon Redshift clusters should have audit logging enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN jsonb_typeof(logging_status->'LoggingEnabled') IS NULL
+  OR (
+      jsonb_typeof(logging_status->'LoggingEnabled') IS NOT NULL
+      AND (logging_status->>'LoggingEnabled')::BOOL IS false
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_redshift_clusters;
+```
+
+### Amazon Redshift clusters should have automatic snapshots enabled
+
+```sql
+SELECT
+  'Amazon Redshift clusters should have automatic snapshots enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN automated_snapshot_retention_period < 7
+  OR automated_snapshot_retention_period IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_redshift_clusters;
+```
+
+### Amazon Redshift should have automatic upgrades to major versions enabled
+
+```sql
+SELECT
+  'Amazon Redshift should have automatic upgrades to major versions enabled'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN allow_version_upgrade IS false OR allow_version_upgrade IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_redshift_clusters;
+```
+
+### Amazon Redshift clusters should use enhanced VPC routing
+
+```sql
+SELECT
+  'Amazon Redshift clusters should use enhanced VPC routing' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN enhanced_vpc_routing IS false OR enhanced_vpc_routing IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_redshift_clusters;
+```
+
+
diff --git a/website/tables/aws/aws_regions.md b/website/tables/aws/aws_regions.md
index ba9a4766bd4d..c5a9ae9875ae 100644
--- a/website/tables/aws/aws_regions.md
+++ b/website/tables/aws/aws_regions.md
@@ -20,4 +20,108 @@ The primary key for this table is **_cq_id**.
 |region|`utf8`|
 |endpoint|`utf8`|
 |opt_in_status|`utf8`|
-|region_name|`utf8`|
\ No newline at end of file
+|region_name|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure that IAM Access analyzer is enabled for all regions (Automated)
+
+```sql
+WITH
+  regions_with_enabled_accessanalyzer
+    AS (
+      SELECT
+        ar.region AS analyzed_region
+      FROM
+        aws_regions AS ar
+        LEFT JOIN aws_accessanalyzer_analyzers AS aaaa ON
+            ar.region = aaaa.region
+      WHERE
+        aaaa.status = 'ACTIVE'
+    )
+SELECT
+  'Ensure that IAM Access analyzer is enabled for all regions (Automated)'
+    AS title,
+  account_id,
+  region AS resource_id,
+  CASE
+  WHEN aregion.analyzed_region IS NULL AND ar.enabled = true THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_regions AS ar
+  LEFT JOIN regions_with_enabled_accessanalyzer AS aregion ON
+      ar.region = aregion.analyzed_region;
+```
+
+### GuardDuty should be enabled
+
+```sql
+WITH
+  enabled_detector_regions
+    AS (
+      SELECT
+        account_id, region
+      FROM
+        aws_guardduty_detectors
+      WHERE
+        status = 'ENABLED'
+    )
+SELECT
+  'GuardDuty should be enabled' AS title,
+  r.account_id,
+  r.region AS resource_id,
+  CASE
+  WHEN enabled = true AND e.region IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_regions AS r
+  LEFT JOIN enabled_detector_regions AS e ON
+      e.region = r.region AND e.account_id = r.account_id
+UNION
+  SELECT
+    'GuardDuty should be enabled (detectors)' AS title,
+    account_id,
+    region AS resource_id,
+    CASE
+    WHEN data_sources->'S3Logs'->>'Status' != 'ENABLED'
+    AND data_sources->'DNSLogs'->>'Status' != 'ENABLED'
+    AND data_sources->'CloudTrail'->>'Status' != 'ENABLED'
+    AND data_sources->'FlowLogs'->>'Status' != 'ENABLED'
+    THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_guardduty_detectors
+  WHERE
+    status = 'ENABLED';
+```
+
+### SecurityHub should be enabled
+
+```sql
+WITH
+  enabled_securityhub_regions
+    AS (SELECT account_id, region FROM aws_securityhub_hubs)
+SELECT
+  'SecurityHub should be enabled' AS title,
+  r.account_id,
+  r.region AS resource_id,
+  CASE
+  WHEN r.enabled = true AND e.region IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_regions AS r
+  LEFT JOIN enabled_securityhub_regions AS e ON
+      e.region = r.region AND e.account_id = r.account_id;
+```
+
+
diff --git a/website/tables/aws/aws_route53_hosted_zones.md b/website/tables/aws/aws_route53_hosted_zones.md
index 6558ce1210d4..baba7352427b 100644
--- a/website/tables/aws/aws_route53_hosted_zones.md
+++ b/website/tables/aws/aws_route53_hosted_zones.md
@@ -31,4 +31,24 @@ The following tables depend on aws_route53_hosted_zones:
 |resource_record_set_count|`int64`|
 |tags|`json`|
 |delegation_set_id|`utf8`|
-|vpcs|`json`|
\ No newline at end of file
+|vpcs|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused Route 53 hosted zones
+
+```sql
+SELECT
+  'Unused Route 53 hosted zones' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_route53_hosted_zones
+WHERE
+  resource_record_set_count = 0;
+```
+
+
diff --git a/website/tables/aws/aws_s3_accounts.md b/website/tables/aws/aws_s3_accounts.md
index eed7b191a69d..116bef478f5f 100644
--- a/website/tables/aws/aws_s3_accounts.md
+++ b/website/tables/aws/aws_s3_accounts.md
@@ -17,4 +17,33 @@ The primary key for this table is **account_id**.
 |block_public_policy|`bool`|
 |ignore_public_acls|`bool`|
 |restrict_public_buckets|`bool`|
-|config_exists|`bool`|
\ No newline at end of file
+|config_exists|`bool`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### S3 Block Public Access setting should be enabled
+
+```sql
+SELECT
+  'S3 Block Public Access setting should be enabled' AS title,
+  aws_iam_accounts.account_id,
+  aws_iam_accounts.account_id AS resource_id,
+  CASE
+  WHEN config_exists IS NOT true
+  OR block_public_acls IS NOT true
+  OR block_public_policy IS NOT true
+  OR ignore_public_acls IS NOT true
+  OR restrict_public_buckets IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_iam_accounts
+  LEFT JOIN aws_s3_accounts ON
+      aws_iam_accounts.account_id = aws_s3_accounts.account_id;
+```
+
+
diff --git a/website/tables/aws/aws_s3_bucket_encryption_rules.md b/website/tables/aws/aws_s3_bucket_encryption_rules.md
index cd938f069b55..4e0c4a80e79a 100644
--- a/website/tables/aws/aws_s3_bucket_encryption_rules.md
+++ b/website/tables/aws/aws_s3_bucket_encryption_rules.md
@@ -21,4 +21,28 @@ This table depends on [aws_s3_buckets](aws_s3_buckets).
 |account_id|`utf8`|
 |bucket_arn|`utf8`|
 |apply_server_side_encryption_by_default|`json`|
-|bucket_key_enabled|`bool`|
\ No newline at end of file
+|bucket_key_enabled|`bool`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### S3 buckets should have server-side encryption enabled
+
+```sql
+SELECT
+  'S3 buckets should have server-side encryption enabled' AS title,
+  aws_s3_buckets.account_id,
+  arn AS resource_id,
+  CASE
+  WHEN aws_s3_bucket_encryption_rules.bucket_arn IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_s3_buckets
+  LEFT JOIN aws_s3_bucket_encryption_rules ON
+      aws_s3_bucket_encryption_rules.bucket_arn = aws_s3_buckets.arn;
+```
+
+
diff --git a/website/tables/aws/aws_s3_bucket_grants.md b/website/tables/aws/aws_s3_bucket_grants.md
index d6bc08101da5..497ecb34b5d9 100644
--- a/website/tables/aws/aws_s3_bucket_grants.md
+++ b/website/tables/aws/aws_s3_bucket_grants.md
@@ -23,4 +23,126 @@ This table depends on [aws_s3_buckets](aws_s3_buckets).
 |grantee_type (PK)|`utf8`|
 |grantee_id (PK)|`utf8`|
 |permission (PK)|`utf8`|
-|grantee|`json`|
\ No newline at end of file
+|grantee|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### S3 buckets should prohibit public read access
+
+```sql
+WITH
+  policy_allow_public
+    AS (
+      SELECT
+        arn, count(*) AS statement_count
+      FROM
+        (
+          SELECT
+            aws_s3_buckets.arn, statements->'Principal' AS principals
+          FROM
+            aws_s3_buckets,
+            jsonb_array_elements(
+              CASE jsonb_typeof(policy::JSONB->'Statement')
+              WHEN 'string' THEN jsonb_build_array(policy::JSONB->>'Statement')
+              WHEN 'array' THEN policy::JSONB->'Statement'
+              END
+            )
+              AS statements
+          WHERE
+            statements->'Effect' = '"Allow"'
+        )
+          AS foo
+      WHERE
+        principals = '"*"'
+        OR (
+            principals::JSONB ? 'AWS'
+            AND (principals->'AWS' = '"*"' OR principals->'AWS' @> '"*"')
+          )
+      GROUP BY
+        arn
+    )
+SELECT
+  'S3 buckets should prohibit public read access' AS title,
+  aws_s3_buckets.account_id,
+  aws_s3_buckets.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_s3_buckets
+  LEFT JOIN aws_s3_bucket_grants ON
+      aws_s3_buckets.arn = aws_s3_bucket_grants.bucket_arn
+  LEFT JOIN policy_allow_public ON aws_s3_buckets.arn = policy_allow_public.arn
+WHERE
+  (
+    aws_s3_buckets.block_public_acls != true
+    AND (
+        grantee->>'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'
+        AND permission IN ('READ_ACP', 'FULL_CONTROL')
+      )
+  )
+  OR (
+      aws_s3_buckets.block_public_policy != true
+      AND policy_allow_public.statement_count > 0
+    );
+```
+
+### S3 buckets should prohibit public write access
+
+```sql
+WITH
+  policy_allow_public
+    AS (
+      SELECT
+        arn, count(*) AS statement_count
+      FROM
+        (
+          SELECT
+            aws_s3_buckets.arn, statements->'Principal' AS principals
+          FROM
+            aws_s3_buckets,
+            jsonb_array_elements(
+              CASE jsonb_typeof(policy::JSONB->'Statement')
+              WHEN 'string' THEN jsonb_build_array(policy::JSONB->>'Statement')
+              WHEN 'array' THEN policy::JSONB->'Statement'
+              END
+            )
+              AS statements
+          WHERE
+            statements->'Effect' = '"Allow"'
+        )
+          AS foo
+      WHERE
+        principals = '"*"'
+        OR (
+            principals::JSONB ? 'AWS'
+            AND (principals->'AWS' = '"*"' OR principals->'AWS' @> '"*"')
+          )
+      GROUP BY
+        arn
+    )
+SELECT
+  'S3 buckets should prohibit public write access' AS title,
+  aws_s3_buckets.account_id,
+  aws_s3_buckets.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_s3_buckets
+  LEFT JOIN aws_s3_bucket_grants ON
+      aws_s3_buckets.arn = aws_s3_bucket_grants.bucket_arn
+  LEFT JOIN policy_allow_public ON aws_s3_buckets.arn = policy_allow_public.arn
+WHERE
+  (
+    aws_s3_buckets.block_public_acls != true
+    AND (
+        grantee->>'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'
+        AND permission IN ('WRITE_ACP', 'FULL_CONTROL')
+      )
+  )
+  OR (
+      aws_s3_buckets.block_public_policy != true
+      AND policy_allow_public.statement_count > 0
+    );
+```
+
+
diff --git a/website/tables/aws/aws_s3_buckets.md b/website/tables/aws/aws_s3_buckets.md
index 237ecf425375..cafd4abb6035 100644
--- a/website/tables/aws/aws_s3_buckets.md
+++ b/website/tables/aws/aws_s3_buckets.md
@@ -38,4 +38,330 @@ The following tables depend on aws_s3_buckets:
 |ignore_public_acls|`bool`|
 |restrict_public_buckets|`bool`|
 |tags|`json`|
-|ownership_controls|`list<item: utf8, nullable>`|
\ No newline at end of file
+|ownership_controls|`list<item: utf8, nullable>`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket
+
+```sql
+SELECT
+  'Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket'
+    AS title,
+  t.account_id,
+  t.arn AS resource_id,
+  CASE
+  WHEN b.logging_target_bucket IS NULL OR b.logging_target_prefix IS NULL
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_cloudtrail_trails AS t
+  INNER JOIN aws_s3_buckets AS b ON t.s3_bucket_name = b.name;
+```
+
+### S3 Block Public Access (bucket) setting should be enabled
+
+```sql
+SELECT
+  'S3 Block Public Access (bucket) setting should be enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN block_public_acls IS NOT true
+  OR block_public_policy IS NOT true
+  OR ignore_public_acls IS NOT true
+  OR restrict_public_buckets IS NOT true
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_s3_buckets;
+```
+
+### S3 buckets should deny non-HTTPS requests
+
+```sql
+SELECT
+  'S3 buckets should deny non-HTTPS requests' AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_s3_buckets
+WHERE
+  arn
+  NOT IN (
+      SELECT
+        arn
+      FROM
+        (
+          SELECT
+            aws_s3_buckets.arn,
+            statements,
+            statements->'Principal' AS principals
+          FROM
+            aws_s3_buckets,
+            jsonb_array_elements(
+              CASE jsonb_typeof(policy->'Statement')
+              WHEN 'string' THEN jsonb_build_array(policy->>'Statement')
+              WHEN 'array' THEN policy->'Statement'
+              END
+            )
+              AS statements
+          WHERE
+            statements->'Effect' = '"Deny"'
+        )
+          AS foo,
+        jsonb_array_elements_text(
+          statements->'Condition'->'Bool'->'aws:securetransport'
+        )
+          AS ssl
+      WHERE
+        principals = '"*"'
+        OR (
+            principals::JSONB ? 'AWS'
+            AND (principals->'AWS' = '"*"' OR principals->'AWS' @> '"*"')
+          )
+          AND ssl::BOOL = false
+    );
+```
+
+### Ensure MFA Delete is enabled on S3 buckets (Automated)
+
+```sql
+SELECT
+  'Ensure MFA Delete is enabled on S3 buckets (Automated)' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN versioning_status IS DISTINCT FROM 'Enabled'
+  OR versioning_mfa_delete IS DISTINCT FROM 'Enabled'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_s3_buckets;
+```
+
+### S3 buckets should prohibit public read access
+
+```sql
+WITH
+  policy_allow_public
+    AS (
+      SELECT
+        arn, count(*) AS statement_count
+      FROM
+        (
+          SELECT
+            aws_s3_buckets.arn, statements->'Principal' AS principals
+          FROM
+            aws_s3_buckets,
+            jsonb_array_elements(
+              CASE jsonb_typeof(policy::JSONB->'Statement')
+              WHEN 'string' THEN jsonb_build_array(policy::JSONB->>'Statement')
+              WHEN 'array' THEN policy::JSONB->'Statement'
+              END
+            )
+              AS statements
+          WHERE
+            statements->'Effect' = '"Allow"'
+        )
+          AS foo
+      WHERE
+        principals = '"*"'
+        OR (
+            principals::JSONB ? 'AWS'
+            AND (principals->'AWS' = '"*"' OR principals->'AWS' @> '"*"')
+          )
+      GROUP BY
+        arn
+    )
+SELECT
+  'S3 buckets should prohibit public read access' AS title,
+  aws_s3_buckets.account_id,
+  aws_s3_buckets.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_s3_buckets
+  LEFT JOIN aws_s3_bucket_grants ON
+      aws_s3_buckets.arn = aws_s3_bucket_grants.bucket_arn
+  LEFT JOIN policy_allow_public ON aws_s3_buckets.arn = policy_allow_public.arn
+WHERE
+  (
+    aws_s3_buckets.block_public_acls != true
+    AND (
+        grantee->>'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'
+        AND permission IN ('READ_ACP', 'FULL_CONTROL')
+      )
+  )
+  OR (
+      aws_s3_buckets.block_public_policy != true
+      AND policy_allow_public.statement_count > 0
+    );
+```
+
+### S3 buckets should prohibit public write access
+
+```sql
+WITH
+  policy_allow_public
+    AS (
+      SELECT
+        arn, count(*) AS statement_count
+      FROM
+        (
+          SELECT
+            aws_s3_buckets.arn, statements->'Principal' AS principals
+          FROM
+            aws_s3_buckets,
+            jsonb_array_elements(
+              CASE jsonb_typeof(policy::JSONB->'Statement')
+              WHEN 'string' THEN jsonb_build_array(policy::JSONB->>'Statement')
+              WHEN 'array' THEN policy::JSONB->'Statement'
+              END
+            )
+              AS statements
+          WHERE
+            statements->'Effect' = '"Allow"'
+        )
+          AS foo
+      WHERE
+        principals = '"*"'
+        OR (
+            principals::JSONB ? 'AWS'
+            AND (principals->'AWS' = '"*"' OR principals->'AWS' @> '"*"')
+          )
+      GROUP BY
+        arn
+    )
+SELECT
+  'S3 buckets should prohibit public write access' AS title,
+  aws_s3_buckets.account_id,
+  aws_s3_buckets.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_s3_buckets
+  LEFT JOIN aws_s3_bucket_grants ON
+      aws_s3_buckets.arn = aws_s3_bucket_grants.bucket_arn
+  LEFT JOIN policy_allow_public ON aws_s3_buckets.arn = policy_allow_public.arn
+WHERE
+  (
+    aws_s3_buckets.block_public_acls != true
+    AND (
+        grantee->>'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'
+        AND permission IN ('WRITE_ACP', 'FULL_CONTROL')
+      )
+  )
+  OR (
+      aws_s3_buckets.block_public_policy != true
+      AND policy_allow_public.statement_count > 0
+    );
+```
+
+### Amazon S3 permissions granted to other AWS accounts in bucket policies should be restricted
+
+```sql
+SELECT
+  'Amazon S3 permissions granted to other AWS accounts in bucket policies should be restricted'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  'fail' AS status
+FROM
+  (
+    SELECT
+      aws_s3_buckets.arn,
+      account_id,
+      name,
+      region,
+      CASE
+      WHEN jsonb_typeof(statements->'Principal') = 'string'
+      THEN jsonb_build_array(statements->'Principal')
+      WHEN jsonb_typeof(statements->'Principal'->'AWS') = 'string'
+      THEN jsonb_build_array(statements->'Principal'->'AWS')
+      WHEN jsonb_typeof(statements->'Principal'->'AWS') = 'array'
+      THEN statements->'Principal'->'AWS'
+      END
+        AS principals,
+      CASE
+      WHEN jsonb_typeof(statements->'Action') = 'string'
+      THEN jsonb_build_array(statements->'Action')
+      WHEN jsonb_typeof(statements->'Action') = 'array'
+      THEN statements->'Action'
+      END
+        AS actions
+    FROM
+      aws_s3_buckets,
+      jsonb_array_elements(
+        CASE jsonb_typeof(policy->'Statement')
+        WHEN 'string' THEN jsonb_build_array(policy->>'Statement')
+        WHEN 'array' THEN policy->'Statement'
+        END
+      )
+        AS statements
+    WHERE
+      statements->'Effect' = '"Allow"'
+  )
+    AS flatten_statements,
+  jsonb_array_elements(to_jsonb(actions)) AS a,
+  jsonb_array_elements(to_jsonb(principals)) AS p
+WHERE
+  (
+    p.value::STRING NOT LIKE '"arn:aws:iam::' || account_id || ':%"'
+    OR p.value::STRING = '"*"'
+  )
+  AND (
+      a.value::STRING LIKE '"s3:%*"'
+      OR a.value::STRING LIKE '"s3:DeleteObject"'
+    );
+```
+
+### S3 buckets with replication rules should be enabled
+
+```sql
+SELECT
+  'S3 buckets with replication rules should be enabled' AS title,
+  aws_s3_buckets.account_id,
+  aws_s3_buckets.arn AS resource_id,
+  CASE
+  WHEN r->>'Status' IS DISTINCT FROM 'Enabled' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_s3_buckets,
+  jsonb_array_elements(
+    CASE jsonb_typeof(replication_rules)
+    WHEN 'array' THEN replication_rules
+    ELSE '[]'
+    END
+  )
+    AS r;
+```
+
+### S3 buckets should have server-side encryption enabled
+
+```sql
+SELECT
+  'S3 buckets should have server-side encryption enabled' AS title,
+  aws_s3_buckets.account_id,
+  arn AS resource_id,
+  CASE
+  WHEN aws_s3_bucket_encryption_rules.bucket_arn IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_s3_buckets
+  LEFT JOIN aws_s3_bucket_encryption_rules ON
+      aws_s3_bucket_encryption_rules.bucket_arn = aws_s3_buckets.arn;
+```
+
+
diff --git a/website/tables/aws/aws_sagemaker_notebook_instances.md b/website/tables/aws/aws_sagemaker_notebook_instances.md
index 79fe6ad29dc6..c67b509900ab 100644
--- a/website/tables/aws/aws_sagemaker_notebook_instances.md
+++ b/website/tables/aws/aws_sagemaker_notebook_instances.md
@@ -40,4 +40,27 @@ The primary key for this table is **arn**.
 |subnet_id|`utf8`|
 |url|`utf8`|
 |volume_size_in_gb|`int64`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Amazon SageMaker notebook instances should not have direct internet access
+
+```sql
+SELECT
+  'Amazon SageMaker notebook instances should not have direct internet access'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN direct_internet_access = 'Enabled' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_sagemaker_notebook_instances;
+```
+
+
diff --git a/website/tables/aws/aws_secretsmanager_secrets.md b/website/tables/aws/aws_secretsmanager_secrets.md
index 3b601d7c39a8..95c7389e2b4b 100644
--- a/website/tables/aws/aws_secretsmanager_secrets.md
+++ b/website/tables/aws/aws_secretsmanager_secrets.md
@@ -39,4 +39,101 @@ The following tables depend on aws_secretsmanager_secrets:
 |rotation_enabled|`bool`|
 |rotation_lambda_arn|`utf8`|
 |rotation_rules|`json`|
-|version_ids_to_stages|`json`|
\ No newline at end of file
+|version_ids_to_stages|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Remove unused Secrets Manager secrets
+
+```sql
+SELECT
+  'Remove unused Secrets Manager secrets' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (
+    last_accessed_date IS NULL
+    AND created_date > now() - '90 days'::INTERVAL
+  )
+  OR (
+      last_accessed_date IS NOT NULL
+      AND last_accessed_date > now() - '90 days'::INTERVAL
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_secretsmanager_secrets;
+```
+
+### Secrets Manager secrets configured with automatic rotation should rotate successfully
+
+```sql
+SELECT
+  'Secrets Manager secrets configured with automatic rotation should rotate successfully'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (
+    last_rotated_date IS NULL
+    AND created_date
+      > now()
+        - '1 day'::INTERVAL * (rotation_rules->>'AutomaticallyAfterDays')::INT8
+  )
+  OR (
+      last_rotated_date IS NOT NULL
+      AND last_rotated_date
+        > now()
+          - '1 day'::INTERVAL
+            * (rotation_rules->>'AutomaticallyAfterDays')::INT8
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_secretsmanager_secrets;
+```
+
+### Secrets Manager secrets should be rotated within a specified number of days
+
+```sql
+SELECT
+  'Secrets Manager secrets should be rotated within a specified number of days'
+    AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN (
+    last_rotated_date IS NULL
+    AND created_date > now() - '90 days'::INTERVAL
+  )
+  OR (
+      last_rotated_date IS NOT NULL
+      AND last_rotated_date > now() - '90 days'::INTERVAL
+    )
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_secretsmanager_secrets;
+```
+
+### Secrets Manager secrets should have automatic rotation enabled
+
+```sql
+SELECT
+  'Secrets Manager secrets should have automatic rotation enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE WHEN rotation_enabled IS NOT true THEN 'fail' ELSE 'pass' END AS status
+FROM
+  aws_secretsmanager_secrets;
+```
+
+
diff --git a/website/tables/aws/aws_securityhub_hubs.md b/website/tables/aws/aws_securityhub_hubs.md
index 57850f06834e..c0194b1ee23b 100644
--- a/website/tables/aws/aws_securityhub_hubs.md
+++ b/website/tables/aws/aws_securityhub_hubs.md
@@ -20,4 +20,31 @@ The composite primary key for this table is (**account_id**, **region**, **hub_a
 |auto_enable_controls|`bool`|
 |hub_arn (PK)|`utf8`|
 |subscribed_at|`timestamp[us, tz=UTC]`|
-|result_metadata|`json`|
\ No newline at end of file
+|result_metadata|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### SecurityHub should be enabled
+
+```sql
+WITH
+  enabled_securityhub_regions
+    AS (SELECT account_id, region FROM aws_securityhub_hubs)
+SELECT
+  'SecurityHub should be enabled' AS title,
+  r.account_id,
+  r.region AS resource_id,
+  CASE
+  WHEN r.enabled = true AND e.region IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_regions AS r
+  LEFT JOIN enabled_securityhub_regions AS e ON
+      e.region = r.region AND e.account_id = r.account_id;
+```
+
+
diff --git a/website/tables/aws/aws_sns_subscriptions.md b/website/tables/aws/aws_sns_subscriptions.md
index f8eda14a8ece..b2215690e855 100644
--- a/website/tables/aws/aws_sns_subscriptions.md
+++ b/website/tables/aws/aws_sns_subscriptions.md
@@ -30,4 +30,27 @@ The primary key for this table is **arn**.
 |pending_confirmation|`bool`|
 |raw_message_delivery|`bool`|
 |subscription_role_arn|`utf8`|
-|unknown_fields|`json`|
\ No newline at end of file
+|unknown_fields|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Unused SNS topic
+
+```sql
+WITH
+  subscription AS (SELECT DISTINCT topic_arn FROM aws_sns_subscriptions)
+SELECT
+  'Unused SNS topic' AS title,
+  topic.account_id,
+  topic.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_sns_topics AS topic
+  LEFT JOIN subscription ON subscription.topic_arn = topic.arn
+WHERE
+  subscription.topic_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_sns_topics.md b/website/tables/aws/aws_sns_topics.md
index 32baebabb34f..28ad0c8d7fd7 100644
--- a/website/tables/aws/aws_sns_topics.md
+++ b/website/tables/aws/aws_sns_topics.md
@@ -29,4 +29,43 @@ The primary key for this table is **arn**.
 |kms_master_key_id|`utf8`|
 |fifo_topic|`bool`|
 |content_based_deduplication|`bool`|
-|unknown_fields|`json`|
\ No newline at end of file
+|unknown_fields|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### SNS topics should be encrypted at rest using AWS KMS
+
+```sql
+SELECT
+  'SNS topics should be encrypted at rest using AWS KMS' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN kms_master_key_id IS NULL OR kms_master_key_id = '' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_sns_topics;
+```
+
+### Unused SNS topic
+
+```sql
+WITH
+  subscription AS (SELECT DISTINCT topic_arn FROM aws_sns_subscriptions)
+SELECT
+  'Unused SNS topic' AS title,
+  topic.account_id,
+  topic.arn AS resource_id,
+  'fail' AS status
+FROM
+  aws_sns_topics AS topic
+  LEFT JOIN subscription ON subscription.topic_arn = topic.arn
+WHERE
+  subscription.topic_arn IS NULL;
+```
+
+
diff --git a/website/tables/aws/aws_sqs_queues.md b/website/tables/aws/aws_sqs_queues.md
index ff71cd544389..784d2669cf26 100644
--- a/website/tables/aws/aws_sqs_queues.md
+++ b/website/tables/aws/aws_sqs_queues.md
@@ -39,4 +39,26 @@ The primary key for this table is **arn**.
 |content_based_deduplication|`bool`|
 |deduplication_scope|`utf8`|
 |fifo_throughput_limit|`utf8`|
-|unknown_fields|`json`|
\ No newline at end of file
+|unknown_fields|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### SQS queues should be encrypted at rest using AWS KMS
+
+```sql
+SELECT
+  'SQS queues should be encrypted at rest using AWS KMS' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN kms_master_key_id IS NULL OR kms_master_key_id = '' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_sqs_queues;
+```
+
+
diff --git a/website/tables/aws/aws_ssm_documents.md b/website/tables/aws/aws_ssm_documents.md
index 881ca78c7f7d..d29faae0accd 100644
--- a/website/tables/aws/aws_ssm_documents.md
+++ b/website/tables/aws/aws_ssm_documents.md
@@ -52,4 +52,29 @@ The following tables depend on aws_ssm_documents:
 |status|`utf8`|
 |status_information|`utf8`|
 |target_type|`utf8`|
-|version_name|`utf8`|
\ No newline at end of file
+|version_name|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### SSM documents should not be public
+
+```sql
+SELECT
+  'SSM documents should not be public' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN 'all' = ANY (ARRAY (SELECT jsonb_array_elements_text(p->'AccountIds')))
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ssm_documents, jsonb_array_elements(aws_ssm_documents.permissions) AS p
+WHERE
+  owner IN (SELECT account_id FROM aws_iam_accounts);
+```
+
+
diff --git a/website/tables/aws/aws_ssm_instance_compliance_items.md b/website/tables/aws/aws_ssm_instance_compliance_items.md
index c9c7735b1f32..173755a3bbdb 100644
--- a/website/tables/aws/aws_ssm_instance_compliance_items.md
+++ b/website/tables/aws/aws_ssm_instance_compliance_items.md
@@ -29,4 +29,52 @@ This table depends on [aws_ssm_instances](aws_ssm_instances).
 |resource_type|`utf8`|
 |severity|`utf8`|
 |status|`utf8`|
-|title|`utf8`|
\ No newline at end of file
+|title|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### Instances managed by Systems Manager should have an association compliance status of COMPLIANT
+
+```sql
+SELECT
+  'Instances managed by Systems Manager should have an association compliance status of COMPLIANT'
+    AS title,
+  aws_ssm_instances.account_id,
+  aws_ssm_instances.arn,
+  CASE
+  WHEN aws_ssm_instance_compliance_items.compliance_type = 'Association'
+  AND aws_ssm_instance_compliance_items.status IS DISTINCT FROM 'COMPLIANT'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ssm_instances
+  INNER JOIN aws_ssm_instance_compliance_items ON
+      aws_ssm_instances.arn = aws_ssm_instance_compliance_items.instance_arn;
+```
+
+### All EC2 instances managed by Systems Manager should be compliant with patching requirements
+
+```sql
+SELECT
+  'All EC2 instances managed by Systems Manager should be compliant with patching requirements'
+    AS title,
+  aws_ssm_instances.account_id,
+  aws_ssm_instances.arn,
+  CASE
+  WHEN aws_ssm_instance_compliance_items.compliance_type = 'Patch'
+  AND aws_ssm_instance_compliance_items.status IS DISTINCT FROM 'COMPLIANT'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ssm_instances
+  INNER JOIN aws_ssm_instance_compliance_items ON
+      aws_ssm_instances.arn = aws_ssm_instance_compliance_items.instance_arn;
+```
+
+
diff --git a/website/tables/aws/aws_ssm_instances.md b/website/tables/aws/aws_ssm_instances.md
index d754ceec37be..4501eec51ff6 100644
--- a/website/tables/aws/aws_ssm_instances.md
+++ b/website/tables/aws/aws_ssm_instances.md
@@ -43,4 +43,70 @@ The following tables depend on aws_ssm_instances:
 |registration_date|`timestamp[us, tz=UTC]`|
 |resource_type|`utf8`|
 |source_id|`utf8`|
-|source_type|`utf8`|
\ No newline at end of file
+|source_type|`utf8`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### EC2 instances should be managed by AWS Systems Manager
+
+```sql
+SELECT
+  'EC2 instances should be managed by AWS Systems Manager' AS title,
+  aws_ec2_instances.account_id,
+  aws_ec2_instances.arn AS resource_id,
+  CASE
+  WHEN aws_ssm_instances.instance_id IS NULL THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ec2_instances
+  LEFT JOIN aws_ssm_instances ON
+      aws_ec2_instances.instance_id = aws_ssm_instances.instance_id;
+```
+
+### Instances managed by Systems Manager should have an association compliance status of COMPLIANT
+
+```sql
+SELECT
+  'Instances managed by Systems Manager should have an association compliance status of COMPLIANT'
+    AS title,
+  aws_ssm_instances.account_id,
+  aws_ssm_instances.arn,
+  CASE
+  WHEN aws_ssm_instance_compliance_items.compliance_type = 'Association'
+  AND aws_ssm_instance_compliance_items.status IS DISTINCT FROM 'COMPLIANT'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ssm_instances
+  INNER JOIN aws_ssm_instance_compliance_items ON
+      aws_ssm_instances.arn = aws_ssm_instance_compliance_items.instance_arn;
+```
+
+### All EC2 instances managed by Systems Manager should be compliant with patching requirements
+
+```sql
+SELECT
+  'All EC2 instances managed by Systems Manager should be compliant with patching requirements'
+    AS title,
+  aws_ssm_instances.account_id,
+  aws_ssm_instances.arn,
+  CASE
+  WHEN aws_ssm_instance_compliance_items.compliance_type = 'Patch'
+  AND aws_ssm_instance_compliance_items.status IS DISTINCT FROM 'COMPLIANT'
+  THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_ssm_instances
+  INNER JOIN aws_ssm_instance_compliance_items ON
+      aws_ssm_instances.arn = aws_ssm_instance_compliance_items.instance_arn;
+```
+
+
diff --git a/website/tables/aws/aws_waf_web_acls.md b/website/tables/aws/aws_waf_web_acls.md
index 3a8f44e9e817..a31da454b2c6 100644
--- a/website/tables/aws/aws_waf_web_acls.md
+++ b/website/tables/aws/aws_waf_web_acls.md
@@ -23,4 +23,61 @@ The primary key for this table is **arn**.
 |metric_name|`utf8`|
 |name|`utf8`|
 |web_acl_arn|`utf8`|
-|logging_configuration|`json`|
\ No newline at end of file
+|logging_configuration|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### AWS WAF Classic global web ACL logging should be enabled
+
+```sql
+-- WAF Classic
+SELECT
+  'AWS WAF Classic global web ACL logging should be enabled' AS title,
+  account_id,
+  arn AS resource_id,
+  CASE
+  WHEN logging_configuration IS NULL OR logging_configuration = '{}' THEN 'fail'
+  ELSE 'pass'
+  END
+    AS status
+FROM
+  aws_waf_web_acls;
+```
+
+### AWS WAF Classic global web ACL logging should be enabled
+
+```sql
+(
+  SELECT
+    'AWS WAF Classic global web ACL logging should be enabled' AS title,
+    account_id,
+    arn AS resource_id,
+    CASE
+    WHEN logging_configuration IS NULL OR logging_configuration = '{}'
+    THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_waf_web_acls
+)
+UNION
+  (
+    SELECT
+      'AWS WAF Classic global web ACL logging should be enabled' AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN logging_configuration IS NULL OR logging_configuration = '{}'
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_wafv2_web_acls
+  );
+```
+
+
diff --git a/website/tables/aws/aws_wafv2_web_acls.md b/website/tables/aws/aws_wafv2_web_acls.md
index 68b499908f9d..efe4ee84f4fa 100644
--- a/website/tables/aws/aws_wafv2_web_acls.md
+++ b/website/tables/aws/aws_wafv2_web_acls.md
@@ -34,4 +34,44 @@ The primary key for this table is **arn**.
 |pre_process_firewall_manager_rule_groups|`json`|
 |rules|`json`|
 |token_domains|`list<item: utf8, nullable>`|
-|logging_configuration|`json`|
\ No newline at end of file
+|logging_configuration|`json`|
+
+## Example Queries
+
+These SQL queries are sampled from CloudQuery policies and are compatible with PostgreSQL.
+
+### AWS WAF Classic global web ACL logging should be enabled
+
+```sql
+(
+  SELECT
+    'AWS WAF Classic global web ACL logging should be enabled' AS title,
+    account_id,
+    arn AS resource_id,
+    CASE
+    WHEN logging_configuration IS NULL OR logging_configuration = '{}'
+    THEN 'fail'
+    ELSE 'pass'
+    END
+      AS status
+  FROM
+    aws_waf_web_acls
+)
+UNION
+  (
+    SELECT
+      'AWS WAF Classic global web ACL logging should be enabled' AS title,
+      account_id,
+      arn AS resource_id,
+      CASE
+      WHEN logging_configuration IS NULL OR logging_configuration = '{}'
+      THEN 'fail'
+      ELSE 'pass'
+      END
+        AS status
+    FROM
+      aws_wafv2_web_acls
+  );
+```
+
+
