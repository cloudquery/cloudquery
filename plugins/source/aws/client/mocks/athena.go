// Code generated by MockGen. DO NOT EDIT.
// Source: athena.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	athena "github.com/aws/aws-sdk-go-v2/service/athena"
	gomock "github.com/golang/mock/gomock"
)

// MockAthenaClient is a mock of AthenaClient interface.
type MockAthenaClient struct {
	ctrl     *gomock.Controller
	recorder *MockAthenaClientMockRecorder
}

// MockAthenaClientMockRecorder is the mock recorder for MockAthenaClient.
type MockAthenaClientMockRecorder struct {
	mock *MockAthenaClient
}

// NewMockAthenaClient creates a new mock instance.
func NewMockAthenaClient(ctrl *gomock.Controller) *MockAthenaClient {
	mock := &MockAthenaClient{ctrl: ctrl}
	mock.recorder = &MockAthenaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAthenaClient) EXPECT() *MockAthenaClientMockRecorder {
	return m.recorder
}

// BatchGetNamedQuery mocks base method.
func (m *MockAthenaClient) BatchGetNamedQuery(arg0 context.Context, arg1 *athena.BatchGetNamedQueryInput, arg2 ...func(*athena.Options)) (*athena.BatchGetNamedQueryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetNamedQuery")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetNamedQuery", varargs...)
	ret0, _ := ret[0].(*athena.BatchGetNamedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetNamedQuery indicates an expected call of BatchGetNamedQuery.
func (mr *MockAthenaClientMockRecorder) BatchGetNamedQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetNamedQuery", reflect.TypeOf((*MockAthenaClient)(nil).BatchGetNamedQuery), varargs...)
}

// BatchGetPreparedStatement mocks base method.
func (m *MockAthenaClient) BatchGetPreparedStatement(arg0 context.Context, arg1 *athena.BatchGetPreparedStatementInput, arg2 ...func(*athena.Options)) (*athena.BatchGetPreparedStatementOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetPreparedStatement")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetPreparedStatement", varargs...)
	ret0, _ := ret[0].(*athena.BatchGetPreparedStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetPreparedStatement indicates an expected call of BatchGetPreparedStatement.
func (mr *MockAthenaClientMockRecorder) BatchGetPreparedStatement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetPreparedStatement", reflect.TypeOf((*MockAthenaClient)(nil).BatchGetPreparedStatement), varargs...)
}

// BatchGetQueryExecution mocks base method.
func (m *MockAthenaClient) BatchGetQueryExecution(arg0 context.Context, arg1 *athena.BatchGetQueryExecutionInput, arg2 ...func(*athena.Options)) (*athena.BatchGetQueryExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetQueryExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetQueryExecution", varargs...)
	ret0, _ := ret[0].(*athena.BatchGetQueryExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetQueryExecution indicates an expected call of BatchGetQueryExecution.
func (mr *MockAthenaClientMockRecorder) BatchGetQueryExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetQueryExecution", reflect.TypeOf((*MockAthenaClient)(nil).BatchGetQueryExecution), varargs...)
}

// GetCalculationExecution mocks base method.
func (m *MockAthenaClient) GetCalculationExecution(arg0 context.Context, arg1 *athena.GetCalculationExecutionInput, arg2 ...func(*athena.Options)) (*athena.GetCalculationExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCalculationExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCalculationExecution", varargs...)
	ret0, _ := ret[0].(*athena.GetCalculationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalculationExecution indicates an expected call of GetCalculationExecution.
func (mr *MockAthenaClientMockRecorder) GetCalculationExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculationExecution", reflect.TypeOf((*MockAthenaClient)(nil).GetCalculationExecution), varargs...)
}

// GetCalculationExecutionCode mocks base method.
func (m *MockAthenaClient) GetCalculationExecutionCode(arg0 context.Context, arg1 *athena.GetCalculationExecutionCodeInput, arg2 ...func(*athena.Options)) (*athena.GetCalculationExecutionCodeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCalculationExecutionCode")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCalculationExecutionCode", varargs...)
	ret0, _ := ret[0].(*athena.GetCalculationExecutionCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalculationExecutionCode indicates an expected call of GetCalculationExecutionCode.
func (mr *MockAthenaClientMockRecorder) GetCalculationExecutionCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculationExecutionCode", reflect.TypeOf((*MockAthenaClient)(nil).GetCalculationExecutionCode), varargs...)
}

// GetCalculationExecutionStatus mocks base method.
func (m *MockAthenaClient) GetCalculationExecutionStatus(arg0 context.Context, arg1 *athena.GetCalculationExecutionStatusInput, arg2 ...func(*athena.Options)) (*athena.GetCalculationExecutionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCalculationExecutionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCalculationExecutionStatus", varargs...)
	ret0, _ := ret[0].(*athena.GetCalculationExecutionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalculationExecutionStatus indicates an expected call of GetCalculationExecutionStatus.
func (mr *MockAthenaClientMockRecorder) GetCalculationExecutionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculationExecutionStatus", reflect.TypeOf((*MockAthenaClient)(nil).GetCalculationExecutionStatus), varargs...)
}

// GetCapacityAssignmentConfiguration mocks base method.
func (m *MockAthenaClient) GetCapacityAssignmentConfiguration(arg0 context.Context, arg1 *athena.GetCapacityAssignmentConfigurationInput, arg2 ...func(*athena.Options)) (*athena.GetCapacityAssignmentConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCapacityAssignmentConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCapacityAssignmentConfiguration", varargs...)
	ret0, _ := ret[0].(*athena.GetCapacityAssignmentConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacityAssignmentConfiguration indicates an expected call of GetCapacityAssignmentConfiguration.
func (mr *MockAthenaClientMockRecorder) GetCapacityAssignmentConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacityAssignmentConfiguration", reflect.TypeOf((*MockAthenaClient)(nil).GetCapacityAssignmentConfiguration), varargs...)
}

// GetCapacityReservation mocks base method.
func (m *MockAthenaClient) GetCapacityReservation(arg0 context.Context, arg1 *athena.GetCapacityReservationInput, arg2 ...func(*athena.Options)) (*athena.GetCapacityReservationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCapacityReservation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCapacityReservation", varargs...)
	ret0, _ := ret[0].(*athena.GetCapacityReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacityReservation indicates an expected call of GetCapacityReservation.
func (mr *MockAthenaClientMockRecorder) GetCapacityReservation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacityReservation", reflect.TypeOf((*MockAthenaClient)(nil).GetCapacityReservation), varargs...)
}

// GetDataCatalog mocks base method.
func (m *MockAthenaClient) GetDataCatalog(arg0 context.Context, arg1 *athena.GetDataCatalogInput, arg2 ...func(*athena.Options)) (*athena.GetDataCatalogOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDataCatalog")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataCatalog", varargs...)
	ret0, _ := ret[0].(*athena.GetDataCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCatalog indicates an expected call of GetDataCatalog.
func (mr *MockAthenaClientMockRecorder) GetDataCatalog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCatalog", reflect.TypeOf((*MockAthenaClient)(nil).GetDataCatalog), varargs...)
}

// GetDatabase mocks base method.
func (m *MockAthenaClient) GetDatabase(arg0 context.Context, arg1 *athena.GetDatabaseInput, arg2 ...func(*athena.Options)) (*athena.GetDatabaseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDatabase")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatabase", varargs...)
	ret0, _ := ret[0].(*athena.GetDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockAthenaClientMockRecorder) GetDatabase(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockAthenaClient)(nil).GetDatabase), varargs...)
}

// GetNamedQuery mocks base method.
func (m *MockAthenaClient) GetNamedQuery(arg0 context.Context, arg1 *athena.GetNamedQueryInput, arg2 ...func(*athena.Options)) (*athena.GetNamedQueryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNamedQuery")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamedQuery", varargs...)
	ret0, _ := ret[0].(*athena.GetNamedQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamedQuery indicates an expected call of GetNamedQuery.
func (mr *MockAthenaClientMockRecorder) GetNamedQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedQuery", reflect.TypeOf((*MockAthenaClient)(nil).GetNamedQuery), varargs...)
}

// GetNotebookMetadata mocks base method.
func (m *MockAthenaClient) GetNotebookMetadata(arg0 context.Context, arg1 *athena.GetNotebookMetadataInput, arg2 ...func(*athena.Options)) (*athena.GetNotebookMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNotebookMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNotebookMetadata", varargs...)
	ret0, _ := ret[0].(*athena.GetNotebookMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotebookMetadata indicates an expected call of GetNotebookMetadata.
func (mr *MockAthenaClientMockRecorder) GetNotebookMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotebookMetadata", reflect.TypeOf((*MockAthenaClient)(nil).GetNotebookMetadata), varargs...)
}

// GetPreparedStatement mocks base method.
func (m *MockAthenaClient) GetPreparedStatement(arg0 context.Context, arg1 *athena.GetPreparedStatementInput, arg2 ...func(*athena.Options)) (*athena.GetPreparedStatementOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPreparedStatement")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPreparedStatement", varargs...)
	ret0, _ := ret[0].(*athena.GetPreparedStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreparedStatement indicates an expected call of GetPreparedStatement.
func (mr *MockAthenaClientMockRecorder) GetPreparedStatement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreparedStatement", reflect.TypeOf((*MockAthenaClient)(nil).GetPreparedStatement), varargs...)
}

// GetQueryExecution mocks base method.
func (m *MockAthenaClient) GetQueryExecution(arg0 context.Context, arg1 *athena.GetQueryExecutionInput, arg2 ...func(*athena.Options)) (*athena.GetQueryExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetQueryExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryExecution", varargs...)
	ret0, _ := ret[0].(*athena.GetQueryExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryExecution indicates an expected call of GetQueryExecution.
func (mr *MockAthenaClientMockRecorder) GetQueryExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryExecution", reflect.TypeOf((*MockAthenaClient)(nil).GetQueryExecution), varargs...)
}

// GetQueryResults mocks base method.
func (m *MockAthenaClient) GetQueryResults(arg0 context.Context, arg1 *athena.GetQueryResultsInput, arg2 ...func(*athena.Options)) (*athena.GetQueryResultsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetQueryResults")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryResults", varargs...)
	ret0, _ := ret[0].(*athena.GetQueryResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResults indicates an expected call of GetQueryResults.
func (mr *MockAthenaClientMockRecorder) GetQueryResults(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResults", reflect.TypeOf((*MockAthenaClient)(nil).GetQueryResults), varargs...)
}

// GetQueryRuntimeStatistics mocks base method.
func (m *MockAthenaClient) GetQueryRuntimeStatistics(arg0 context.Context, arg1 *athena.GetQueryRuntimeStatisticsInput, arg2 ...func(*athena.Options)) (*athena.GetQueryRuntimeStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetQueryRuntimeStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryRuntimeStatistics", varargs...)
	ret0, _ := ret[0].(*athena.GetQueryRuntimeStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryRuntimeStatistics indicates an expected call of GetQueryRuntimeStatistics.
func (mr *MockAthenaClientMockRecorder) GetQueryRuntimeStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryRuntimeStatistics", reflect.TypeOf((*MockAthenaClient)(nil).GetQueryRuntimeStatistics), varargs...)
}

// GetSession mocks base method.
func (m *MockAthenaClient) GetSession(arg0 context.Context, arg1 *athena.GetSessionInput, arg2 ...func(*athena.Options)) (*athena.GetSessionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSession")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSession", varargs...)
	ret0, _ := ret[0].(*athena.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockAthenaClientMockRecorder) GetSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAthenaClient)(nil).GetSession), varargs...)
}

// GetSessionStatus mocks base method.
func (m *MockAthenaClient) GetSessionStatus(arg0 context.Context, arg1 *athena.GetSessionStatusInput, arg2 ...func(*athena.Options)) (*athena.GetSessionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSessionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionStatus", varargs...)
	ret0, _ := ret[0].(*athena.GetSessionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionStatus indicates an expected call of GetSessionStatus.
func (mr *MockAthenaClientMockRecorder) GetSessionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionStatus", reflect.TypeOf((*MockAthenaClient)(nil).GetSessionStatus), varargs...)
}

// GetTableMetadata mocks base method.
func (m *MockAthenaClient) GetTableMetadata(arg0 context.Context, arg1 *athena.GetTableMetadataInput, arg2 ...func(*athena.Options)) (*athena.GetTableMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTableMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableMetadata", varargs...)
	ret0, _ := ret[0].(*athena.GetTableMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableMetadata indicates an expected call of GetTableMetadata.
func (mr *MockAthenaClientMockRecorder) GetTableMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableMetadata", reflect.TypeOf((*MockAthenaClient)(nil).GetTableMetadata), varargs...)
}

// GetWorkGroup mocks base method.
func (m *MockAthenaClient) GetWorkGroup(arg0 context.Context, arg1 *athena.GetWorkGroupInput, arg2 ...func(*athena.Options)) (*athena.GetWorkGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetWorkGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkGroup", varargs...)
	ret0, _ := ret[0].(*athena.GetWorkGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkGroup indicates an expected call of GetWorkGroup.
func (mr *MockAthenaClientMockRecorder) GetWorkGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkGroup", reflect.TypeOf((*MockAthenaClient)(nil).GetWorkGroup), varargs...)
}

// ListApplicationDPUSizes mocks base method.
func (m *MockAthenaClient) ListApplicationDPUSizes(arg0 context.Context, arg1 *athena.ListApplicationDPUSizesInput, arg2 ...func(*athena.Options)) (*athena.ListApplicationDPUSizesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationDPUSizes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationDPUSizes", varargs...)
	ret0, _ := ret[0].(*athena.ListApplicationDPUSizesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationDPUSizes indicates an expected call of ListApplicationDPUSizes.
func (mr *MockAthenaClientMockRecorder) ListApplicationDPUSizes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationDPUSizes", reflect.TypeOf((*MockAthenaClient)(nil).ListApplicationDPUSizes), varargs...)
}

// ListCalculationExecutions mocks base method.
func (m *MockAthenaClient) ListCalculationExecutions(arg0 context.Context, arg1 *athena.ListCalculationExecutionsInput, arg2 ...func(*athena.Options)) (*athena.ListCalculationExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCalculationExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCalculationExecutions", varargs...)
	ret0, _ := ret[0].(*athena.ListCalculationExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCalculationExecutions indicates an expected call of ListCalculationExecutions.
func (mr *MockAthenaClientMockRecorder) ListCalculationExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCalculationExecutions", reflect.TypeOf((*MockAthenaClient)(nil).ListCalculationExecutions), varargs...)
}

// ListCapacityReservations mocks base method.
func (m *MockAthenaClient) ListCapacityReservations(arg0 context.Context, arg1 *athena.ListCapacityReservationsInput, arg2 ...func(*athena.Options)) (*athena.ListCapacityReservationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCapacityReservations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCapacityReservations", varargs...)
	ret0, _ := ret[0].(*athena.ListCapacityReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCapacityReservations indicates an expected call of ListCapacityReservations.
func (mr *MockAthenaClientMockRecorder) ListCapacityReservations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCapacityReservations", reflect.TypeOf((*MockAthenaClient)(nil).ListCapacityReservations), varargs...)
}

// ListDataCatalogs mocks base method.
func (m *MockAthenaClient) ListDataCatalogs(arg0 context.Context, arg1 *athena.ListDataCatalogsInput, arg2 ...func(*athena.Options)) (*athena.ListDataCatalogsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDataCatalogs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataCatalogs", varargs...)
	ret0, _ := ret[0].(*athena.ListDataCatalogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataCatalogs indicates an expected call of ListDataCatalogs.
func (mr *MockAthenaClientMockRecorder) ListDataCatalogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataCatalogs", reflect.TypeOf((*MockAthenaClient)(nil).ListDataCatalogs), varargs...)
}

// ListDatabases mocks base method.
func (m *MockAthenaClient) ListDatabases(arg0 context.Context, arg1 *athena.ListDatabasesInput, arg2 ...func(*athena.Options)) (*athena.ListDatabasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDatabases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabases", varargs...)
	ret0, _ := ret[0].(*athena.ListDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockAthenaClientMockRecorder) ListDatabases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockAthenaClient)(nil).ListDatabases), varargs...)
}

// ListEngineVersions mocks base method.
func (m *MockAthenaClient) ListEngineVersions(arg0 context.Context, arg1 *athena.ListEngineVersionsInput, arg2 ...func(*athena.Options)) (*athena.ListEngineVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEngineVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEngineVersions", varargs...)
	ret0, _ := ret[0].(*athena.ListEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEngineVersions indicates an expected call of ListEngineVersions.
func (mr *MockAthenaClientMockRecorder) ListEngineVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineVersions", reflect.TypeOf((*MockAthenaClient)(nil).ListEngineVersions), varargs...)
}

// ListExecutors mocks base method.
func (m *MockAthenaClient) ListExecutors(arg0 context.Context, arg1 *athena.ListExecutorsInput, arg2 ...func(*athena.Options)) (*athena.ListExecutorsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListExecutors")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutors", varargs...)
	ret0, _ := ret[0].(*athena.ListExecutorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutors indicates an expected call of ListExecutors.
func (mr *MockAthenaClientMockRecorder) ListExecutors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutors", reflect.TypeOf((*MockAthenaClient)(nil).ListExecutors), varargs...)
}

// ListNamedQueries mocks base method.
func (m *MockAthenaClient) ListNamedQueries(arg0 context.Context, arg1 *athena.ListNamedQueriesInput, arg2 ...func(*athena.Options)) (*athena.ListNamedQueriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNamedQueries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamedQueries", varargs...)
	ret0, _ := ret[0].(*athena.ListNamedQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamedQueries indicates an expected call of ListNamedQueries.
func (mr *MockAthenaClientMockRecorder) ListNamedQueries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamedQueries", reflect.TypeOf((*MockAthenaClient)(nil).ListNamedQueries), varargs...)
}

// ListNotebookMetadata mocks base method.
func (m *MockAthenaClient) ListNotebookMetadata(arg0 context.Context, arg1 *athena.ListNotebookMetadataInput, arg2 ...func(*athena.Options)) (*athena.ListNotebookMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNotebookMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookMetadata", varargs...)
	ret0, _ := ret[0].(*athena.ListNotebookMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookMetadata indicates an expected call of ListNotebookMetadata.
func (mr *MockAthenaClientMockRecorder) ListNotebookMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookMetadata", reflect.TypeOf((*MockAthenaClient)(nil).ListNotebookMetadata), varargs...)
}

// ListNotebookSessions mocks base method.
func (m *MockAthenaClient) ListNotebookSessions(arg0 context.Context, arg1 *athena.ListNotebookSessionsInput, arg2 ...func(*athena.Options)) (*athena.ListNotebookSessionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNotebookSessions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookSessions", varargs...)
	ret0, _ := ret[0].(*athena.ListNotebookSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookSessions indicates an expected call of ListNotebookSessions.
func (mr *MockAthenaClientMockRecorder) ListNotebookSessions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookSessions", reflect.TypeOf((*MockAthenaClient)(nil).ListNotebookSessions), varargs...)
}

// ListPreparedStatements mocks base method.
func (m *MockAthenaClient) ListPreparedStatements(arg0 context.Context, arg1 *athena.ListPreparedStatementsInput, arg2 ...func(*athena.Options)) (*athena.ListPreparedStatementsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPreparedStatements")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPreparedStatements", varargs...)
	ret0, _ := ret[0].(*athena.ListPreparedStatementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPreparedStatements indicates an expected call of ListPreparedStatements.
func (mr *MockAthenaClientMockRecorder) ListPreparedStatements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreparedStatements", reflect.TypeOf((*MockAthenaClient)(nil).ListPreparedStatements), varargs...)
}

// ListQueryExecutions mocks base method.
func (m *MockAthenaClient) ListQueryExecutions(arg0 context.Context, arg1 *athena.ListQueryExecutionsInput, arg2 ...func(*athena.Options)) (*athena.ListQueryExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListQueryExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueryExecutions", varargs...)
	ret0, _ := ret[0].(*athena.ListQueryExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueryExecutions indicates an expected call of ListQueryExecutions.
func (mr *MockAthenaClientMockRecorder) ListQueryExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueryExecutions", reflect.TypeOf((*MockAthenaClient)(nil).ListQueryExecutions), varargs...)
}

// ListSessions mocks base method.
func (m *MockAthenaClient) ListSessions(arg0 context.Context, arg1 *athena.ListSessionsInput, arg2 ...func(*athena.Options)) (*athena.ListSessionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSessions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessions", varargs...)
	ret0, _ := ret[0].(*athena.ListSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockAthenaClientMockRecorder) ListSessions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockAthenaClient)(nil).ListSessions), varargs...)
}

// ListTableMetadata mocks base method.
func (m *MockAthenaClient) ListTableMetadata(arg0 context.Context, arg1 *athena.ListTableMetadataInput, arg2 ...func(*athena.Options)) (*athena.ListTableMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTableMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableMetadata", varargs...)
	ret0, _ := ret[0].(*athena.ListTableMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableMetadata indicates an expected call of ListTableMetadata.
func (mr *MockAthenaClientMockRecorder) ListTableMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableMetadata", reflect.TypeOf((*MockAthenaClient)(nil).ListTableMetadata), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAthenaClient) ListTagsForResource(arg0 context.Context, arg1 *athena.ListTagsForResourceInput, arg2 ...func(*athena.Options)) (*athena.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*athena.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAthenaClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAthenaClient)(nil).ListTagsForResource), varargs...)
}

// ListWorkGroups mocks base method.
func (m *MockAthenaClient) ListWorkGroups(arg0 context.Context, arg1 *athena.ListWorkGroupsInput, arg2 ...func(*athena.Options)) (*athena.ListWorkGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &athena.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListWorkGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkGroups", varargs...)
	ret0, _ := ret[0].(*athena.ListWorkGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkGroups indicates an expected call of ListWorkGroups.
func (mr *MockAthenaClientMockRecorder) ListWorkGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkGroups", reflect.TypeOf((*MockAthenaClient)(nil).ListWorkGroups), varargs...)
}
