// Code generated by MockGen. DO NOT EDIT.
// Source: savingsplans.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	savingsplans "github.com/aws/aws-sdk-go-v2/service/savingsplans"
	gomock "github.com/golang/mock/gomock"
)

// MockSavingsplansClient is a mock of SavingsplansClient interface.
type MockSavingsplansClient struct {
	ctrl     *gomock.Controller
	recorder *MockSavingsplansClientMockRecorder
}

// MockSavingsplansClientMockRecorder is the mock recorder for MockSavingsplansClient.
type MockSavingsplansClientMockRecorder struct {
	mock *MockSavingsplansClient
}

// NewMockSavingsplansClient creates a new mock instance.
func NewMockSavingsplansClient(ctrl *gomock.Controller) *MockSavingsplansClient {
	mock := &MockSavingsplansClient{ctrl: ctrl}
	mock.recorder = &MockSavingsplansClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavingsplansClient) EXPECT() *MockSavingsplansClientMockRecorder {
	return m.recorder
}

// DescribeSavingsPlanRates mocks base method.
func (m *MockSavingsplansClient) DescribeSavingsPlanRates(arg0 context.Context, arg1 *savingsplans.DescribeSavingsPlanRatesInput, arg2 ...func(*savingsplans.Options)) (*savingsplans.DescribeSavingsPlanRatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &savingsplans.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSavingsPlanRates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSavingsPlanRates", varargs...)
	ret0, _ := ret[0].(*savingsplans.DescribeSavingsPlanRatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlanRates indicates an expected call of DescribeSavingsPlanRates.
func (mr *MockSavingsplansClientMockRecorder) DescribeSavingsPlanRates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlanRates", reflect.TypeOf((*MockSavingsplansClient)(nil).DescribeSavingsPlanRates), varargs...)
}

// DescribeSavingsPlans mocks base method.
func (m *MockSavingsplansClient) DescribeSavingsPlans(arg0 context.Context, arg1 *savingsplans.DescribeSavingsPlansInput, arg2 ...func(*savingsplans.Options)) (*savingsplans.DescribeSavingsPlansOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &savingsplans.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSavingsPlans")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSavingsPlans", varargs...)
	ret0, _ := ret[0].(*savingsplans.DescribeSavingsPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlans indicates an expected call of DescribeSavingsPlans.
func (mr *MockSavingsplansClientMockRecorder) DescribeSavingsPlans(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlans", reflect.TypeOf((*MockSavingsplansClient)(nil).DescribeSavingsPlans), varargs...)
}

// DescribeSavingsPlansOfferingRates mocks base method.
func (m *MockSavingsplansClient) DescribeSavingsPlansOfferingRates(arg0 context.Context, arg1 *savingsplans.DescribeSavingsPlansOfferingRatesInput, arg2 ...func(*savingsplans.Options)) (*savingsplans.DescribeSavingsPlansOfferingRatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &savingsplans.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSavingsPlansOfferingRates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSavingsPlansOfferingRates", varargs...)
	ret0, _ := ret[0].(*savingsplans.DescribeSavingsPlansOfferingRatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlansOfferingRates indicates an expected call of DescribeSavingsPlansOfferingRates.
func (mr *MockSavingsplansClientMockRecorder) DescribeSavingsPlansOfferingRates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansOfferingRates", reflect.TypeOf((*MockSavingsplansClient)(nil).DescribeSavingsPlansOfferingRates), varargs...)
}

// DescribeSavingsPlansOfferings mocks base method.
func (m *MockSavingsplansClient) DescribeSavingsPlansOfferings(arg0 context.Context, arg1 *savingsplans.DescribeSavingsPlansOfferingsInput, arg2 ...func(*savingsplans.Options)) (*savingsplans.DescribeSavingsPlansOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &savingsplans.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSavingsPlansOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSavingsPlansOfferings", varargs...)
	ret0, _ := ret[0].(*savingsplans.DescribeSavingsPlansOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSavingsPlansOfferings indicates an expected call of DescribeSavingsPlansOfferings.
func (mr *MockSavingsplansClientMockRecorder) DescribeSavingsPlansOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSavingsPlansOfferings", reflect.TypeOf((*MockSavingsplansClient)(nil).DescribeSavingsPlansOfferings), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSavingsplansClient) ListTagsForResource(arg0 context.Context, arg1 *savingsplans.ListTagsForResourceInput, arg2 ...func(*savingsplans.Options)) (*savingsplans.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &savingsplans.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*savingsplans.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSavingsplansClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSavingsplansClient)(nil).ListTagsForResource), varargs...)
}
