// Code generated by MockGen. DO NOT EDIT.
// Source: glacier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	glacier "github.com/aws/aws-sdk-go-v2/service/glacier"
	gomock "github.com/golang/mock/gomock"
)

// MockGlacierClient is a mock of GlacierClient interface.
type MockGlacierClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlacierClientMockRecorder
}

// MockGlacierClientMockRecorder is the mock recorder for MockGlacierClient.
type MockGlacierClientMockRecorder struct {
	mock *MockGlacierClient
}

// NewMockGlacierClient creates a new mock instance.
func NewMockGlacierClient(ctrl *gomock.Controller) *MockGlacierClient {
	mock := &MockGlacierClient{ctrl: ctrl}
	mock.recorder = &MockGlacierClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlacierClient) EXPECT() *MockGlacierClientMockRecorder {
	return m.recorder
}

// DescribeJob mocks base method.
func (m *MockGlacierClient) DescribeJob(arg0 context.Context, arg1 *glacier.DescribeJobInput, arg2 ...func(*glacier.Options)) (*glacier.DescribeJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJob", varargs...)
	ret0, _ := ret[0].(*glacier.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob.
func (mr *MockGlacierClientMockRecorder) DescribeJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockGlacierClient)(nil).DescribeJob), varargs...)
}

// DescribeVault mocks base method.
func (m *MockGlacierClient) DescribeVault(arg0 context.Context, arg1 *glacier.DescribeVaultInput, arg2 ...func(*glacier.Options)) (*glacier.DescribeVaultOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVault")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVault", varargs...)
	ret0, _ := ret[0].(*glacier.DescribeVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVault indicates an expected call of DescribeVault.
func (mr *MockGlacierClientMockRecorder) DescribeVault(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVault", reflect.TypeOf((*MockGlacierClient)(nil).DescribeVault), varargs...)
}

// GetDataRetrievalPolicy mocks base method.
func (m *MockGlacierClient) GetDataRetrievalPolicy(arg0 context.Context, arg1 *glacier.GetDataRetrievalPolicyInput, arg2 ...func(*glacier.Options)) (*glacier.GetDataRetrievalPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDataRetrievalPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataRetrievalPolicy", varargs...)
	ret0, _ := ret[0].(*glacier.GetDataRetrievalPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataRetrievalPolicy indicates an expected call of GetDataRetrievalPolicy.
func (mr *MockGlacierClientMockRecorder) GetDataRetrievalPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataRetrievalPolicy", reflect.TypeOf((*MockGlacierClient)(nil).GetDataRetrievalPolicy), varargs...)
}

// GetJobOutput mocks base method.
func (m *MockGlacierClient) GetJobOutput(arg0 context.Context, arg1 *glacier.GetJobOutputInput, arg2 ...func(*glacier.Options)) (*glacier.GetJobOutputOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetJobOutput")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobOutput", varargs...)
	ret0, _ := ret[0].(*glacier.GetJobOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobOutput indicates an expected call of GetJobOutput.
func (mr *MockGlacierClientMockRecorder) GetJobOutput(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobOutput", reflect.TypeOf((*MockGlacierClient)(nil).GetJobOutput), varargs...)
}

// GetVaultAccessPolicy mocks base method.
func (m *MockGlacierClient) GetVaultAccessPolicy(arg0 context.Context, arg1 *glacier.GetVaultAccessPolicyInput, arg2 ...func(*glacier.Options)) (*glacier.GetVaultAccessPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVaultAccessPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVaultAccessPolicy", varargs...)
	ret0, _ := ret[0].(*glacier.GetVaultAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultAccessPolicy indicates an expected call of GetVaultAccessPolicy.
func (mr *MockGlacierClientMockRecorder) GetVaultAccessPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultAccessPolicy", reflect.TypeOf((*MockGlacierClient)(nil).GetVaultAccessPolicy), varargs...)
}

// GetVaultLock mocks base method.
func (m *MockGlacierClient) GetVaultLock(arg0 context.Context, arg1 *glacier.GetVaultLockInput, arg2 ...func(*glacier.Options)) (*glacier.GetVaultLockOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVaultLock")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVaultLock", varargs...)
	ret0, _ := ret[0].(*glacier.GetVaultLockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultLock indicates an expected call of GetVaultLock.
func (mr *MockGlacierClientMockRecorder) GetVaultLock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultLock", reflect.TypeOf((*MockGlacierClient)(nil).GetVaultLock), varargs...)
}

// GetVaultNotifications mocks base method.
func (m *MockGlacierClient) GetVaultNotifications(arg0 context.Context, arg1 *glacier.GetVaultNotificationsInput, arg2 ...func(*glacier.Options)) (*glacier.GetVaultNotificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVaultNotifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVaultNotifications", varargs...)
	ret0, _ := ret[0].(*glacier.GetVaultNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultNotifications indicates an expected call of GetVaultNotifications.
func (mr *MockGlacierClientMockRecorder) GetVaultNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultNotifications", reflect.TypeOf((*MockGlacierClient)(nil).GetVaultNotifications), varargs...)
}

// ListJobs mocks base method.
func (m *MockGlacierClient) ListJobs(arg0 context.Context, arg1 *glacier.ListJobsInput, arg2 ...func(*glacier.Options)) (*glacier.ListJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobs", varargs...)
	ret0, _ := ret[0].(*glacier.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockGlacierClientMockRecorder) ListJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockGlacierClient)(nil).ListJobs), varargs...)
}

// ListMultipartUploads mocks base method.
func (m *MockGlacierClient) ListMultipartUploads(arg0 context.Context, arg1 *glacier.ListMultipartUploadsInput, arg2 ...func(*glacier.Options)) (*glacier.ListMultipartUploadsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMultipartUploads")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultipartUploads", varargs...)
	ret0, _ := ret[0].(*glacier.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads.
func (mr *MockGlacierClientMockRecorder) ListMultipartUploads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockGlacierClient)(nil).ListMultipartUploads), varargs...)
}

// ListParts mocks base method.
func (m *MockGlacierClient) ListParts(arg0 context.Context, arg1 *glacier.ListPartsInput, arg2 ...func(*glacier.Options)) (*glacier.ListPartsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListParts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParts", varargs...)
	ret0, _ := ret[0].(*glacier.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockGlacierClientMockRecorder) ListParts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockGlacierClient)(nil).ListParts), varargs...)
}

// ListProvisionedCapacity mocks base method.
func (m *MockGlacierClient) ListProvisionedCapacity(arg0 context.Context, arg1 *glacier.ListProvisionedCapacityInput, arg2 ...func(*glacier.Options)) (*glacier.ListProvisionedCapacityOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisionedCapacity")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisionedCapacity", varargs...)
	ret0, _ := ret[0].(*glacier.ListProvisionedCapacityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisionedCapacity indicates an expected call of ListProvisionedCapacity.
func (mr *MockGlacierClientMockRecorder) ListProvisionedCapacity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedCapacity", reflect.TypeOf((*MockGlacierClient)(nil).ListProvisionedCapacity), varargs...)
}

// ListTagsForVault mocks base method.
func (m *MockGlacierClient) ListTagsForVault(arg0 context.Context, arg1 *glacier.ListTagsForVaultInput, arg2 ...func(*glacier.Options)) (*glacier.ListTagsForVaultOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForVault")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForVault", varargs...)
	ret0, _ := ret[0].(*glacier.ListTagsForVaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForVault indicates an expected call of ListTagsForVault.
func (mr *MockGlacierClientMockRecorder) ListTagsForVault(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForVault", reflect.TypeOf((*MockGlacierClient)(nil).ListTagsForVault), varargs...)
}

// ListVaults mocks base method.
func (m *MockGlacierClient) ListVaults(arg0 context.Context, arg1 *glacier.ListVaultsInput, arg2 ...func(*glacier.Options)) (*glacier.ListVaultsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &glacier.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVaults")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVaults", varargs...)
	ret0, _ := ret[0].(*glacier.ListVaultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVaults indicates an expected call of ListVaults.
func (mr *MockGlacierClientMockRecorder) ListVaults(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVaults", reflect.TypeOf((*MockGlacierClient)(nil).ListVaults), varargs...)
}
