// Code generated by MockGen. DO NOT EDIT.
// Source: sns.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sns "github.com/aws/aws-sdk-go-v2/service/sns"
	gomock "github.com/golang/mock/gomock"
)

// MockSnsClient is a mock of SnsClient interface.
type MockSnsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSnsClientMockRecorder
}

// MockSnsClientMockRecorder is the mock recorder for MockSnsClient.
type MockSnsClientMockRecorder struct {
	mock *MockSnsClient
}

// NewMockSnsClient creates a new mock instance.
func NewMockSnsClient(ctrl *gomock.Controller) *MockSnsClient {
	mock := &MockSnsClient{ctrl: ctrl}
	mock.recorder = &MockSnsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnsClient) EXPECT() *MockSnsClientMockRecorder {
	return m.recorder
}

// GetDataProtectionPolicy mocks base method.
func (m *MockSnsClient) GetDataProtectionPolicy(arg0 context.Context, arg1 *sns.GetDataProtectionPolicyInput, arg2 ...func(*sns.Options)) (*sns.GetDataProtectionPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDataProtectionPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataProtectionPolicy", varargs...)
	ret0, _ := ret[0].(*sns.GetDataProtectionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataProtectionPolicy indicates an expected call of GetDataProtectionPolicy.
func (mr *MockSnsClientMockRecorder) GetDataProtectionPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataProtectionPolicy", reflect.TypeOf((*MockSnsClient)(nil).GetDataProtectionPolicy), varargs...)
}

// GetEndpointAttributes mocks base method.
func (m *MockSnsClient) GetEndpointAttributes(arg0 context.Context, arg1 *sns.GetEndpointAttributesInput, arg2 ...func(*sns.Options)) (*sns.GetEndpointAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEndpointAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEndpointAttributes", varargs...)
	ret0, _ := ret[0].(*sns.GetEndpointAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointAttributes indicates an expected call of GetEndpointAttributes.
func (mr *MockSnsClientMockRecorder) GetEndpointAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointAttributes", reflect.TypeOf((*MockSnsClient)(nil).GetEndpointAttributes), varargs...)
}

// GetPlatformApplicationAttributes mocks base method.
func (m *MockSnsClient) GetPlatformApplicationAttributes(arg0 context.Context, arg1 *sns.GetPlatformApplicationAttributesInput, arg2 ...func(*sns.Options)) (*sns.GetPlatformApplicationAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPlatformApplicationAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlatformApplicationAttributes", varargs...)
	ret0, _ := ret[0].(*sns.GetPlatformApplicationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformApplicationAttributes indicates an expected call of GetPlatformApplicationAttributes.
func (mr *MockSnsClientMockRecorder) GetPlatformApplicationAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformApplicationAttributes", reflect.TypeOf((*MockSnsClient)(nil).GetPlatformApplicationAttributes), varargs...)
}

// GetSMSAttributes mocks base method.
func (m *MockSnsClient) GetSMSAttributes(arg0 context.Context, arg1 *sns.GetSMSAttributesInput, arg2 ...func(*sns.Options)) (*sns.GetSMSAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSMSAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSMSAttributes", varargs...)
	ret0, _ := ret[0].(*sns.GetSMSAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMSAttributes indicates an expected call of GetSMSAttributes.
func (mr *MockSnsClientMockRecorder) GetSMSAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSAttributes", reflect.TypeOf((*MockSnsClient)(nil).GetSMSAttributes), varargs...)
}

// GetSMSSandboxAccountStatus mocks base method.
func (m *MockSnsClient) GetSMSSandboxAccountStatus(arg0 context.Context, arg1 *sns.GetSMSSandboxAccountStatusInput, arg2 ...func(*sns.Options)) (*sns.GetSMSSandboxAccountStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSMSSandboxAccountStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSMSSandboxAccountStatus", varargs...)
	ret0, _ := ret[0].(*sns.GetSMSSandboxAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMSSandboxAccountStatus indicates an expected call of GetSMSSandboxAccountStatus.
func (mr *MockSnsClientMockRecorder) GetSMSSandboxAccountStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMSSandboxAccountStatus", reflect.TypeOf((*MockSnsClient)(nil).GetSMSSandboxAccountStatus), varargs...)
}

// GetSubscriptionAttributes mocks base method.
func (m *MockSnsClient) GetSubscriptionAttributes(arg0 context.Context, arg1 *sns.GetSubscriptionAttributesInput, arg2 ...func(*sns.Options)) (*sns.GetSubscriptionAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSubscriptionAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionAttributes", varargs...)
	ret0, _ := ret[0].(*sns.GetSubscriptionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionAttributes indicates an expected call of GetSubscriptionAttributes.
func (mr *MockSnsClientMockRecorder) GetSubscriptionAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionAttributes", reflect.TypeOf((*MockSnsClient)(nil).GetSubscriptionAttributes), varargs...)
}

// GetTopicAttributes mocks base method.
func (m *MockSnsClient) GetTopicAttributes(arg0 context.Context, arg1 *sns.GetTopicAttributesInput, arg2 ...func(*sns.Options)) (*sns.GetTopicAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTopicAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopicAttributes", varargs...)
	ret0, _ := ret[0].(*sns.GetTopicAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicAttributes indicates an expected call of GetTopicAttributes.
func (mr *MockSnsClientMockRecorder) GetTopicAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicAttributes", reflect.TypeOf((*MockSnsClient)(nil).GetTopicAttributes), varargs...)
}

// ListEndpointsByPlatformApplication mocks base method.
func (m *MockSnsClient) ListEndpointsByPlatformApplication(arg0 context.Context, arg1 *sns.ListEndpointsByPlatformApplicationInput, arg2 ...func(*sns.Options)) (*sns.ListEndpointsByPlatformApplicationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEndpointsByPlatformApplication")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointsByPlatformApplication", varargs...)
	ret0, _ := ret[0].(*sns.ListEndpointsByPlatformApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointsByPlatformApplication indicates an expected call of ListEndpointsByPlatformApplication.
func (mr *MockSnsClientMockRecorder) ListEndpointsByPlatformApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointsByPlatformApplication", reflect.TypeOf((*MockSnsClient)(nil).ListEndpointsByPlatformApplication), varargs...)
}

// ListOriginationNumbers mocks base method.
func (m *MockSnsClient) ListOriginationNumbers(arg0 context.Context, arg1 *sns.ListOriginationNumbersInput, arg2 ...func(*sns.Options)) (*sns.ListOriginationNumbersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOriginationNumbers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginationNumbers", varargs...)
	ret0, _ := ret[0].(*sns.ListOriginationNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginationNumbers indicates an expected call of ListOriginationNumbers.
func (mr *MockSnsClientMockRecorder) ListOriginationNumbers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginationNumbers", reflect.TypeOf((*MockSnsClient)(nil).ListOriginationNumbers), varargs...)
}

// ListPhoneNumbersOptedOut mocks base method.
func (m *MockSnsClient) ListPhoneNumbersOptedOut(arg0 context.Context, arg1 *sns.ListPhoneNumbersOptedOutInput, arg2 ...func(*sns.Options)) (*sns.ListPhoneNumbersOptedOutOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPhoneNumbersOptedOut")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersOptedOut", varargs...)
	ret0, _ := ret[0].(*sns.ListPhoneNumbersOptedOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbersOptedOut indicates an expected call of ListPhoneNumbersOptedOut.
func (mr *MockSnsClientMockRecorder) ListPhoneNumbersOptedOut(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersOptedOut", reflect.TypeOf((*MockSnsClient)(nil).ListPhoneNumbersOptedOut), varargs...)
}

// ListPlatformApplications mocks base method.
func (m *MockSnsClient) ListPlatformApplications(arg0 context.Context, arg1 *sns.ListPlatformApplicationsInput, arg2 ...func(*sns.Options)) (*sns.ListPlatformApplicationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPlatformApplications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlatformApplications", varargs...)
	ret0, _ := ret[0].(*sns.ListPlatformApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlatformApplications indicates an expected call of ListPlatformApplications.
func (mr *MockSnsClientMockRecorder) ListPlatformApplications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlatformApplications", reflect.TypeOf((*MockSnsClient)(nil).ListPlatformApplications), varargs...)
}

// ListSMSSandboxPhoneNumbers mocks base method.
func (m *MockSnsClient) ListSMSSandboxPhoneNumbers(arg0 context.Context, arg1 *sns.ListSMSSandboxPhoneNumbersInput, arg2 ...func(*sns.Options)) (*sns.ListSMSSandboxPhoneNumbersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSMSSandboxPhoneNumbers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSMSSandboxPhoneNumbers", varargs...)
	ret0, _ := ret[0].(*sns.ListSMSSandboxPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSMSSandboxPhoneNumbers indicates an expected call of ListSMSSandboxPhoneNumbers.
func (mr *MockSnsClientMockRecorder) ListSMSSandboxPhoneNumbers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSMSSandboxPhoneNumbers", reflect.TypeOf((*MockSnsClient)(nil).ListSMSSandboxPhoneNumbers), varargs...)
}

// ListSubscriptions mocks base method.
func (m *MockSnsClient) ListSubscriptions(arg0 context.Context, arg1 *sns.ListSubscriptionsInput, arg2 ...func(*sns.Options)) (*sns.ListSubscriptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSubscriptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptions", varargs...)
	ret0, _ := ret[0].(*sns.ListSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockSnsClientMockRecorder) ListSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockSnsClient)(nil).ListSubscriptions), varargs...)
}

// ListSubscriptionsByTopic mocks base method.
func (m *MockSnsClient) ListSubscriptionsByTopic(arg0 context.Context, arg1 *sns.ListSubscriptionsByTopicInput, arg2 ...func(*sns.Options)) (*sns.ListSubscriptionsByTopicOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSubscriptionsByTopic")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscriptionsByTopic", varargs...)
	ret0, _ := ret[0].(*sns.ListSubscriptionsByTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptionsByTopic indicates an expected call of ListSubscriptionsByTopic.
func (mr *MockSnsClientMockRecorder) ListSubscriptionsByTopic(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptionsByTopic", reflect.TypeOf((*MockSnsClient)(nil).ListSubscriptionsByTopic), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSnsClient) ListTagsForResource(arg0 context.Context, arg1 *sns.ListTagsForResourceInput, arg2 ...func(*sns.Options)) (*sns.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*sns.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSnsClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSnsClient)(nil).ListTagsForResource), varargs...)
}

// ListTopics mocks base method.
func (m *MockSnsClient) ListTopics(arg0 context.Context, arg1 *sns.ListTopicsInput, arg2 ...func(*sns.Options)) (*sns.ListTopicsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sns.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTopics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopics", varargs...)
	ret0, _ := ret[0].(*sns.ListTopicsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockSnsClientMockRecorder) ListTopics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockSnsClient)(nil).ListTopics), varargs...)
}
