// Code generated by MockGen. DO NOT EDIT.
// Source: cloudfront.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cloudfront "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudfrontClient is a mock of CloudfrontClient interface.
type MockCloudfrontClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudfrontClientMockRecorder
}

// MockCloudfrontClientMockRecorder is the mock recorder for MockCloudfrontClient.
type MockCloudfrontClientMockRecorder struct {
	mock *MockCloudfrontClient
}

// NewMockCloudfrontClient creates a new mock instance.
func NewMockCloudfrontClient(ctrl *gomock.Controller) *MockCloudfrontClient {
	mock := &MockCloudfrontClient{ctrl: ctrl}
	mock.recorder = &MockCloudfrontClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudfrontClient) EXPECT() *MockCloudfrontClientMockRecorder {
	return m.recorder
}

// DescribeFunction mocks base method.
func (m *MockCloudfrontClient) DescribeFunction(arg0 context.Context, arg1 *cloudfront.DescribeFunctionInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.DescribeFunctionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFunction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.DescribeFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFunction indicates an expected call of DescribeFunction.
func (mr *MockCloudfrontClientMockRecorder) DescribeFunction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFunction", reflect.TypeOf((*MockCloudfrontClient)(nil).DescribeFunction), varargs...)
}

// GetCachePolicy mocks base method.
func (m *MockCloudfrontClient) GetCachePolicy(arg0 context.Context, arg1 *cloudfront.GetCachePolicyInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetCachePolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCachePolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCachePolicy", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachePolicy indicates an expected call of GetCachePolicy.
func (mr *MockCloudfrontClientMockRecorder) GetCachePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicy", reflect.TypeOf((*MockCloudfrontClient)(nil).GetCachePolicy), varargs...)
}

// GetCachePolicyConfig mocks base method.
func (m *MockCloudfrontClient) GetCachePolicyConfig(arg0 context.Context, arg1 *cloudfront.GetCachePolicyConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetCachePolicyConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCachePolicyConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCachePolicyConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCachePolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachePolicyConfig indicates an expected call of GetCachePolicyConfig.
func (mr *MockCloudfrontClientMockRecorder) GetCachePolicyConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicyConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetCachePolicyConfig), varargs...)
}

// GetCloudFrontOriginAccessIdentity mocks base method.
func (m *MockCloudfrontClient) GetCloudFrontOriginAccessIdentity(arg0 context.Context, arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCloudFrontOriginAccessIdentity")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentity", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentity indicates an expected call of GetCloudFrontOriginAccessIdentity.
func (mr *MockCloudfrontClientMockRecorder) GetCloudFrontOriginAccessIdentity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudfrontClient)(nil).GetCloudFrontOriginAccessIdentity), varargs...)
}

// GetCloudFrontOriginAccessIdentityConfig mocks base method.
func (m *MockCloudfrontClient) GetCloudFrontOriginAccessIdentityConfig(arg0 context.Context, arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCloudFrontOriginAccessIdentityConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfig indicates an expected call of GetCloudFrontOriginAccessIdentityConfig.
func (mr *MockCloudfrontClientMockRecorder) GetCloudFrontOriginAccessIdentityConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetCloudFrontOriginAccessIdentityConfig), varargs...)
}

// GetContinuousDeploymentPolicy mocks base method.
func (m *MockCloudfrontClient) GetContinuousDeploymentPolicy(arg0 context.Context, arg1 *cloudfront.GetContinuousDeploymentPolicyInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetContinuousDeploymentPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContinuousDeploymentPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContinuousDeploymentPolicy", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetContinuousDeploymentPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContinuousDeploymentPolicy indicates an expected call of GetContinuousDeploymentPolicy.
func (mr *MockCloudfrontClientMockRecorder) GetContinuousDeploymentPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinuousDeploymentPolicy", reflect.TypeOf((*MockCloudfrontClient)(nil).GetContinuousDeploymentPolicy), varargs...)
}

// GetContinuousDeploymentPolicyConfig mocks base method.
func (m *MockCloudfrontClient) GetContinuousDeploymentPolicyConfig(arg0 context.Context, arg1 *cloudfront.GetContinuousDeploymentPolicyConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetContinuousDeploymentPolicyConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContinuousDeploymentPolicyConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContinuousDeploymentPolicyConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetContinuousDeploymentPolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContinuousDeploymentPolicyConfig indicates an expected call of GetContinuousDeploymentPolicyConfig.
func (mr *MockCloudfrontClientMockRecorder) GetContinuousDeploymentPolicyConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinuousDeploymentPolicyConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetContinuousDeploymentPolicyConfig), varargs...)
}

// GetDistribution mocks base method.
func (m *MockCloudfrontClient) GetDistribution(arg0 context.Context, arg1 *cloudfront.GetDistributionInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetDistributionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDistribution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistribution", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution.
func (mr *MockCloudfrontClientMockRecorder) GetDistribution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockCloudfrontClient)(nil).GetDistribution), varargs...)
}

// GetDistributionConfig mocks base method.
func (m *MockCloudfrontClient) GetDistributionConfig(arg0 context.Context, arg1 *cloudfront.GetDistributionConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetDistributionConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDistributionConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionConfig indicates an expected call of GetDistributionConfig.
func (mr *MockCloudfrontClientMockRecorder) GetDistributionConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetDistributionConfig), varargs...)
}

// GetFieldLevelEncryption mocks base method.
func (m *MockCloudfrontClient) GetFieldLevelEncryption(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFieldLevelEncryption")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryption", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryption indicates an expected call of GetFieldLevelEncryption.
func (mr *MockCloudfrontClientMockRecorder) GetFieldLevelEncryption(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryption", reflect.TypeOf((*MockCloudfrontClient)(nil).GetFieldLevelEncryption), varargs...)
}

// GetFieldLevelEncryptionConfig mocks base method.
func (m *MockCloudfrontClient) GetFieldLevelEncryptionConfig(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFieldLevelEncryptionConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfig indicates an expected call of GetFieldLevelEncryptionConfig.
func (mr *MockCloudfrontClientMockRecorder) GetFieldLevelEncryptionConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetFieldLevelEncryptionConfig), varargs...)
}

// GetFieldLevelEncryptionProfile mocks base method.
func (m *MockCloudfrontClient) GetFieldLevelEncryptionProfile(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionProfileInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFieldLevelEncryptionProfile")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfile", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfile indicates an expected call of GetFieldLevelEncryptionProfile.
func (mr *MockCloudfrontClientMockRecorder) GetFieldLevelEncryptionProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudfrontClient)(nil).GetFieldLevelEncryptionProfile), varargs...)
}

// GetFieldLevelEncryptionProfileConfig mocks base method.
func (m *MockCloudfrontClient) GetFieldLevelEncryptionProfileConfig(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFieldLevelEncryptionProfileConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfig indicates an expected call of GetFieldLevelEncryptionProfileConfig.
func (mr *MockCloudfrontClientMockRecorder) GetFieldLevelEncryptionProfileConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetFieldLevelEncryptionProfileConfig), varargs...)
}

// GetFunction mocks base method.
func (m *MockCloudfrontClient) GetFunction(arg0 context.Context, arg1 *cloudfront.GetFunctionInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetFunctionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunction", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockCloudfrontClientMockRecorder) GetFunction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockCloudfrontClient)(nil).GetFunction), varargs...)
}

// GetInvalidation mocks base method.
func (m *MockCloudfrontClient) GetInvalidation(arg0 context.Context, arg1 *cloudfront.GetInvalidationInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetInvalidationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInvalidation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvalidation", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidation indicates an expected call of GetInvalidation.
func (mr *MockCloudfrontClientMockRecorder) GetInvalidation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidation", reflect.TypeOf((*MockCloudfrontClient)(nil).GetInvalidation), varargs...)
}

// GetKeyGroup mocks base method.
func (m *MockCloudfrontClient) GetKeyGroup(arg0 context.Context, arg1 *cloudfront.GetKeyGroupInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetKeyGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetKeyGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyGroup", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyGroup indicates an expected call of GetKeyGroup.
func (mr *MockCloudfrontClientMockRecorder) GetKeyGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroup", reflect.TypeOf((*MockCloudfrontClient)(nil).GetKeyGroup), varargs...)
}

// GetKeyGroupConfig mocks base method.
func (m *MockCloudfrontClient) GetKeyGroupConfig(arg0 context.Context, arg1 *cloudfront.GetKeyGroupConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetKeyGroupConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetKeyGroupConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyGroupConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetKeyGroupConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyGroupConfig indicates an expected call of GetKeyGroupConfig.
func (mr *MockCloudfrontClientMockRecorder) GetKeyGroupConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroupConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetKeyGroupConfig), varargs...)
}

// GetMonitoringSubscription mocks base method.
func (m *MockCloudfrontClient) GetMonitoringSubscription(arg0 context.Context, arg1 *cloudfront.GetMonitoringSubscriptionInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetMonitoringSubscriptionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMonitoringSubscription")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonitoringSubscription", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoringSubscription indicates an expected call of GetMonitoringSubscription.
func (mr *MockCloudfrontClientMockRecorder) GetMonitoringSubscription(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringSubscription", reflect.TypeOf((*MockCloudfrontClient)(nil).GetMonitoringSubscription), varargs...)
}

// GetOriginAccessControl mocks base method.
func (m *MockCloudfrontClient) GetOriginAccessControl(arg0 context.Context, arg1 *cloudfront.GetOriginAccessControlInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetOriginAccessControlOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOriginAccessControl")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginAccessControl", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetOriginAccessControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginAccessControl indicates an expected call of GetOriginAccessControl.
func (mr *MockCloudfrontClientMockRecorder) GetOriginAccessControl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginAccessControl", reflect.TypeOf((*MockCloudfrontClient)(nil).GetOriginAccessControl), varargs...)
}

// GetOriginAccessControlConfig mocks base method.
func (m *MockCloudfrontClient) GetOriginAccessControlConfig(arg0 context.Context, arg1 *cloudfront.GetOriginAccessControlConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetOriginAccessControlConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOriginAccessControlConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginAccessControlConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetOriginAccessControlConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginAccessControlConfig indicates an expected call of GetOriginAccessControlConfig.
func (mr *MockCloudfrontClientMockRecorder) GetOriginAccessControlConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginAccessControlConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetOriginAccessControlConfig), varargs...)
}

// GetOriginRequestPolicy mocks base method.
func (m *MockCloudfrontClient) GetOriginRequestPolicy(arg0 context.Context, arg1 *cloudfront.GetOriginRequestPolicyInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetOriginRequestPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOriginRequestPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginRequestPolicy", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequestPolicy indicates an expected call of GetOriginRequestPolicy.
func (mr *MockCloudfrontClientMockRecorder) GetOriginRequestPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicy", reflect.TypeOf((*MockCloudfrontClient)(nil).GetOriginRequestPolicy), varargs...)
}

// GetOriginRequestPolicyConfig mocks base method.
func (m *MockCloudfrontClient) GetOriginRequestPolicyConfig(arg0 context.Context, arg1 *cloudfront.GetOriginRequestPolicyConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOriginRequestPolicyConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginRequestPolicyConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetOriginRequestPolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequestPolicyConfig indicates an expected call of GetOriginRequestPolicyConfig.
func (mr *MockCloudfrontClientMockRecorder) GetOriginRequestPolicyConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicyConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetOriginRequestPolicyConfig), varargs...)
}

// GetPublicKey mocks base method.
func (m *MockCloudfrontClient) GetPublicKey(arg0 context.Context, arg1 *cloudfront.GetPublicKeyInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetPublicKeyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPublicKey")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKey", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockCloudfrontClientMockRecorder) GetPublicKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockCloudfrontClient)(nil).GetPublicKey), varargs...)
}

// GetPublicKeyConfig mocks base method.
func (m *MockCloudfrontClient) GetPublicKeyConfig(arg0 context.Context, arg1 *cloudfront.GetPublicKeyConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetPublicKeyConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPublicKeyConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKeyConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyConfig indicates an expected call of GetPublicKeyConfig.
func (mr *MockCloudfrontClientMockRecorder) GetPublicKeyConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetPublicKeyConfig), varargs...)
}

// GetRealtimeLogConfig mocks base method.
func (m *MockCloudfrontClient) GetRealtimeLogConfig(arg0 context.Context, arg1 *cloudfront.GetRealtimeLogConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetRealtimeLogConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRealtimeLogConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRealtimeLogConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealtimeLogConfig indicates an expected call of GetRealtimeLogConfig.
func (mr *MockCloudfrontClientMockRecorder) GetRealtimeLogConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealtimeLogConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetRealtimeLogConfig), varargs...)
}

// GetResponseHeadersPolicy mocks base method.
func (m *MockCloudfrontClient) GetResponseHeadersPolicy(arg0 context.Context, arg1 *cloudfront.GetResponseHeadersPolicyInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetResponseHeadersPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResponseHeadersPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResponseHeadersPolicy", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetResponseHeadersPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseHeadersPolicy indicates an expected call of GetResponseHeadersPolicy.
func (mr *MockCloudfrontClientMockRecorder) GetResponseHeadersPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseHeadersPolicy", reflect.TypeOf((*MockCloudfrontClient)(nil).GetResponseHeadersPolicy), varargs...)
}

// GetResponseHeadersPolicyConfig mocks base method.
func (m *MockCloudfrontClient) GetResponseHeadersPolicyConfig(arg0 context.Context, arg1 *cloudfront.GetResponseHeadersPolicyConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetResponseHeadersPolicyConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResponseHeadersPolicyConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResponseHeadersPolicyConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetResponseHeadersPolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponseHeadersPolicyConfig indicates an expected call of GetResponseHeadersPolicyConfig.
func (mr *MockCloudfrontClientMockRecorder) GetResponseHeadersPolicyConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseHeadersPolicyConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetResponseHeadersPolicyConfig), varargs...)
}

// GetStreamingDistribution mocks base method.
func (m *MockCloudfrontClient) GetStreamingDistribution(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetStreamingDistributionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStreamingDistribution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingDistribution", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistribution indicates an expected call of GetStreamingDistribution.
func (mr *MockCloudfrontClientMockRecorder) GetStreamingDistribution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistribution", reflect.TypeOf((*MockCloudfrontClient)(nil).GetStreamingDistribution), varargs...)
}

// GetStreamingDistributionConfig mocks base method.
func (m *MockCloudfrontClient) GetStreamingDistributionConfig(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.GetStreamingDistributionConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStreamingDistributionConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionConfig indicates an expected call of GetStreamingDistributionConfig.
func (mr *MockCloudfrontClientMockRecorder) GetStreamingDistributionConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).GetStreamingDistributionConfig), varargs...)
}

// ListCachePolicies mocks base method.
func (m *MockCloudfrontClient) ListCachePolicies(arg0 context.Context, arg1 *cloudfront.ListCachePoliciesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListCachePoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCachePolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCachePolicies", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListCachePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCachePolicies indicates an expected call of ListCachePolicies.
func (mr *MockCloudfrontClientMockRecorder) ListCachePolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCachePolicies", reflect.TypeOf((*MockCloudfrontClient)(nil).ListCachePolicies), varargs...)
}

// ListCloudFrontOriginAccessIdentities mocks base method.
func (m *MockCloudfrontClient) ListCloudFrontOriginAccessIdentities(arg0 context.Context, arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCloudFrontOriginAccessIdentities")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentities", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentities indicates an expected call of ListCloudFrontOriginAccessIdentities.
func (mr *MockCloudfrontClientMockRecorder) ListCloudFrontOriginAccessIdentities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentities", reflect.TypeOf((*MockCloudfrontClient)(nil).ListCloudFrontOriginAccessIdentities), varargs...)
}

// ListConflictingAliases mocks base method.
func (m *MockCloudfrontClient) ListConflictingAliases(arg0 context.Context, arg1 *cloudfront.ListConflictingAliasesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListConflictingAliasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListConflictingAliases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConflictingAliases", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListConflictingAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConflictingAliases indicates an expected call of ListConflictingAliases.
func (mr *MockCloudfrontClientMockRecorder) ListConflictingAliases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConflictingAliases", reflect.TypeOf((*MockCloudfrontClient)(nil).ListConflictingAliases), varargs...)
}

// ListContinuousDeploymentPolicies mocks base method.
func (m *MockCloudfrontClient) ListContinuousDeploymentPolicies(arg0 context.Context, arg1 *cloudfront.ListContinuousDeploymentPoliciesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListContinuousDeploymentPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListContinuousDeploymentPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContinuousDeploymentPolicies", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListContinuousDeploymentPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContinuousDeploymentPolicies indicates an expected call of ListContinuousDeploymentPolicies.
func (mr *MockCloudfrontClientMockRecorder) ListContinuousDeploymentPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContinuousDeploymentPolicies", reflect.TypeOf((*MockCloudfrontClient)(nil).ListContinuousDeploymentPolicies), varargs...)
}

// ListDistributions mocks base method.
func (m *MockCloudfrontClient) ListDistributions(arg0 context.Context, arg1 *cloudfront.ListDistributionsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributions", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions.
func (mr *MockCloudfrontClientMockRecorder) ListDistributions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributions), varargs...)
}

// ListDistributionsByCachePolicyId mocks base method.
func (m *MockCloudfrontClient) ListDistributionsByCachePolicyId(arg0 context.Context, arg1 *cloudfront.ListDistributionsByCachePolicyIdInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributionsByCachePolicyId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByCachePolicyId", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByCachePolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByCachePolicyId indicates an expected call of ListDistributionsByCachePolicyId.
func (mr *MockCloudfrontClientMockRecorder) ListDistributionsByCachePolicyId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByCachePolicyId", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributionsByCachePolicyId), varargs...)
}

// ListDistributionsByKeyGroup mocks base method.
func (m *MockCloudfrontClient) ListDistributionsByKeyGroup(arg0 context.Context, arg1 *cloudfront.ListDistributionsByKeyGroupInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributionsByKeyGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByKeyGroup", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByKeyGroup indicates an expected call of ListDistributionsByKeyGroup.
func (mr *MockCloudfrontClientMockRecorder) ListDistributionsByKeyGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByKeyGroup", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributionsByKeyGroup), varargs...)
}

// ListDistributionsByOriginRequestPolicyId mocks base method.
func (m *MockCloudfrontClient) ListDistributionsByOriginRequestPolicyId(arg0 context.Context, arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributionsByOriginRequestPolicyId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByOriginRequestPolicyId", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByOriginRequestPolicyId indicates an expected call of ListDistributionsByOriginRequestPolicyId.
func (mr *MockCloudfrontClientMockRecorder) ListDistributionsByOriginRequestPolicyId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByOriginRequestPolicyId", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributionsByOriginRequestPolicyId), varargs...)
}

// ListDistributionsByRealtimeLogConfig mocks base method.
func (m *MockCloudfrontClient) ListDistributionsByRealtimeLogConfig(arg0 context.Context, arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributionsByRealtimeLogConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByRealtimeLogConfig", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByRealtimeLogConfig indicates an expected call of ListDistributionsByRealtimeLogConfig.
func (mr *MockCloudfrontClientMockRecorder) ListDistributionsByRealtimeLogConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByRealtimeLogConfig", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributionsByRealtimeLogConfig), varargs...)
}

// ListDistributionsByResponseHeadersPolicyId mocks base method.
func (m *MockCloudfrontClient) ListDistributionsByResponseHeadersPolicyId(arg0 context.Context, arg1 *cloudfront.ListDistributionsByResponseHeadersPolicyIdInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributionsByResponseHeadersPolicyId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByResponseHeadersPolicyId", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByResponseHeadersPolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByResponseHeadersPolicyId indicates an expected call of ListDistributionsByResponseHeadersPolicyId.
func (mr *MockCloudfrontClientMockRecorder) ListDistributionsByResponseHeadersPolicyId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByResponseHeadersPolicyId", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributionsByResponseHeadersPolicyId), varargs...)
}

// ListDistributionsByWebACLId mocks base method.
func (m *MockCloudfrontClient) ListDistributionsByWebACLId(arg0 context.Context, arg1 *cloudfront.ListDistributionsByWebACLIdInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDistributionsByWebACLId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLId", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByWebACLId indicates an expected call of ListDistributionsByWebACLId.
func (mr *MockCloudfrontClientMockRecorder) ListDistributionsByWebACLId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLId", reflect.TypeOf((*MockCloudfrontClient)(nil).ListDistributionsByWebACLId), varargs...)
}

// ListFieldLevelEncryptionConfigs mocks base method.
func (m *MockCloudfrontClient) ListFieldLevelEncryptionConfigs(arg0 context.Context, arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFieldLevelEncryptionConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigs", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigs indicates an expected call of ListFieldLevelEncryptionConfigs.
func (mr *MockCloudfrontClientMockRecorder) ListFieldLevelEncryptionConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigs", reflect.TypeOf((*MockCloudfrontClient)(nil).ListFieldLevelEncryptionConfigs), varargs...)
}

// ListFieldLevelEncryptionProfiles mocks base method.
func (m *MockCloudfrontClient) ListFieldLevelEncryptionProfiles(arg0 context.Context, arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFieldLevelEncryptionProfiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfiles", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfiles indicates an expected call of ListFieldLevelEncryptionProfiles.
func (mr *MockCloudfrontClientMockRecorder) ListFieldLevelEncryptionProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfiles", reflect.TypeOf((*MockCloudfrontClient)(nil).ListFieldLevelEncryptionProfiles), varargs...)
}

// ListFunctions mocks base method.
func (m *MockCloudfrontClient) ListFunctions(arg0 context.Context, arg1 *cloudfront.ListFunctionsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListFunctionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFunctions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctions", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctions indicates an expected call of ListFunctions.
func (mr *MockCloudfrontClientMockRecorder) ListFunctions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctions", reflect.TypeOf((*MockCloudfrontClient)(nil).ListFunctions), varargs...)
}

// ListInvalidations mocks base method.
func (m *MockCloudfrontClient) ListInvalidations(arg0 context.Context, arg1 *cloudfront.ListInvalidationsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListInvalidationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInvalidations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvalidations", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListInvalidationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvalidations indicates an expected call of ListInvalidations.
func (mr *MockCloudfrontClientMockRecorder) ListInvalidations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidations", reflect.TypeOf((*MockCloudfrontClient)(nil).ListInvalidations), varargs...)
}

// ListKeyGroups mocks base method.
func (m *MockCloudfrontClient) ListKeyGroups(arg0 context.Context, arg1 *cloudfront.ListKeyGroupsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListKeyGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListKeyGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyGroups", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListKeyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyGroups indicates an expected call of ListKeyGroups.
func (mr *MockCloudfrontClientMockRecorder) ListKeyGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyGroups", reflect.TypeOf((*MockCloudfrontClient)(nil).ListKeyGroups), varargs...)
}

// ListOriginAccessControls mocks base method.
func (m *MockCloudfrontClient) ListOriginAccessControls(arg0 context.Context, arg1 *cloudfront.ListOriginAccessControlsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListOriginAccessControlsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOriginAccessControls")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginAccessControls", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListOriginAccessControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginAccessControls indicates an expected call of ListOriginAccessControls.
func (mr *MockCloudfrontClientMockRecorder) ListOriginAccessControls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginAccessControls", reflect.TypeOf((*MockCloudfrontClient)(nil).ListOriginAccessControls), varargs...)
}

// ListOriginRequestPolicies mocks base method.
func (m *MockCloudfrontClient) ListOriginRequestPolicies(arg0 context.Context, arg1 *cloudfront.ListOriginRequestPoliciesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListOriginRequestPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOriginRequestPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginRequestPolicies", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListOriginRequestPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginRequestPolicies indicates an expected call of ListOriginRequestPolicies.
func (mr *MockCloudfrontClientMockRecorder) ListOriginRequestPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginRequestPolicies", reflect.TypeOf((*MockCloudfrontClient)(nil).ListOriginRequestPolicies), varargs...)
}

// ListPublicKeys mocks base method.
func (m *MockCloudfrontClient) ListPublicKeys(arg0 context.Context, arg1 *cloudfront.ListPublicKeysInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListPublicKeysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPublicKeys")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPublicKeys", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListPublicKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeys indicates an expected call of ListPublicKeys.
func (mr *MockCloudfrontClientMockRecorder) ListPublicKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeys", reflect.TypeOf((*MockCloudfrontClient)(nil).ListPublicKeys), varargs...)
}

// ListRealtimeLogConfigs mocks base method.
func (m *MockCloudfrontClient) ListRealtimeLogConfigs(arg0 context.Context, arg1 *cloudfront.ListRealtimeLogConfigsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListRealtimeLogConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRealtimeLogConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRealtimeLogConfigs", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListRealtimeLogConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRealtimeLogConfigs indicates an expected call of ListRealtimeLogConfigs.
func (mr *MockCloudfrontClientMockRecorder) ListRealtimeLogConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRealtimeLogConfigs", reflect.TypeOf((*MockCloudfrontClient)(nil).ListRealtimeLogConfigs), varargs...)
}

// ListResponseHeadersPolicies mocks base method.
func (m *MockCloudfrontClient) ListResponseHeadersPolicies(arg0 context.Context, arg1 *cloudfront.ListResponseHeadersPoliciesInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListResponseHeadersPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResponseHeadersPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResponseHeadersPolicies", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListResponseHeadersPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResponseHeadersPolicies indicates an expected call of ListResponseHeadersPolicies.
func (mr *MockCloudfrontClientMockRecorder) ListResponseHeadersPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponseHeadersPolicies", reflect.TypeOf((*MockCloudfrontClient)(nil).ListResponseHeadersPolicies), varargs...)
}

// ListStreamingDistributions mocks base method.
func (m *MockCloudfrontClient) ListStreamingDistributions(arg0 context.Context, arg1 *cloudfront.ListStreamingDistributionsInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListStreamingDistributionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStreamingDistributions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingDistributions", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListStreamingDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingDistributions indicates an expected call of ListStreamingDistributions.
func (mr *MockCloudfrontClientMockRecorder) ListStreamingDistributions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributions", reflect.TypeOf((*MockCloudfrontClient)(nil).ListStreamingDistributions), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockCloudfrontClient) ListTagsForResource(arg0 context.Context, arg1 *cloudfront.ListTagsForResourceInput, arg2 ...func(*cloudfront.Options)) (*cloudfront.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudfront.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockCloudfrontClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudfrontClient)(nil).ListTagsForResource), varargs...)
}
