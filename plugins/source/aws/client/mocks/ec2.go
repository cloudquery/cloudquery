// Code generated by MockGen. DO NOT EDIT.
// Source: ec2.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// MockEc2Client is a mock of Ec2Client interface.
type MockEc2Client struct {
	ctrl     *gomock.Controller
	recorder *MockEc2ClientMockRecorder
}

// MockEc2ClientMockRecorder is the mock recorder for MockEc2Client.
type MockEc2ClientMockRecorder struct {
	mock *MockEc2Client
}

// NewMockEc2Client creates a new mock instance.
func NewMockEc2Client(ctrl *gomock.Controller) *MockEc2Client {
	mock := &MockEc2Client{ctrl: ctrl}
	mock.recorder = &MockEc2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEc2Client) EXPECT() *MockEc2ClientMockRecorder {
	return m.recorder
}

// DescribeAccountAttributes mocks base method.
func (m *MockEc2Client) DescribeAccountAttributes(arg0 context.Context, arg1 *ec2.DescribeAccountAttributesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAccountAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributes indicates an expected call of DescribeAccountAttributes.
func (mr *MockEc2ClientMockRecorder) DescribeAccountAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributes", reflect.TypeOf((*MockEc2Client)(nil).DescribeAccountAttributes), varargs...)
}

// DescribeAddressTransfers mocks base method.
func (m *MockEc2Client) DescribeAddressTransfers(arg0 context.Context, arg1 *ec2.DescribeAddressTransfersInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAddressTransfersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAddressTransfers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAddressTransfers", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAddressTransfersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddressTransfers indicates an expected call of DescribeAddressTransfers.
func (mr *MockEc2ClientMockRecorder) DescribeAddressTransfers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressTransfers", reflect.TypeOf((*MockEc2Client)(nil).DescribeAddressTransfers), varargs...)
}

// DescribeAddresses mocks base method.
func (m *MockEc2Client) DescribeAddresses(arg0 context.Context, arg1 *ec2.DescribeAddressesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAddressesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAddresses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAddresses", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddresses indicates an expected call of DescribeAddresses.
func (mr *MockEc2ClientMockRecorder) DescribeAddresses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddresses", reflect.TypeOf((*MockEc2Client)(nil).DescribeAddresses), varargs...)
}

// DescribeAddressesAttribute mocks base method.
func (m *MockEc2Client) DescribeAddressesAttribute(arg0 context.Context, arg1 *ec2.DescribeAddressesAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAddressesAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAddressesAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAddressesAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAddressesAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddressesAttribute indicates an expected call of DescribeAddressesAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeAddressesAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressesAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeAddressesAttribute), varargs...)
}

// DescribeAggregateIdFormat mocks base method.
func (m *MockEc2Client) DescribeAggregateIdFormat(arg0 context.Context, arg1 *ec2.DescribeAggregateIdFormatInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAggregateIdFormatOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAggregateIdFormat")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAggregateIdFormat", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAggregateIdFormatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregateIdFormat indicates an expected call of DescribeAggregateIdFormat.
func (mr *MockEc2ClientMockRecorder) DescribeAggregateIdFormat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregateIdFormat", reflect.TypeOf((*MockEc2Client)(nil).DescribeAggregateIdFormat), varargs...)
}

// DescribeAvailabilityZones mocks base method.
func (m *MockEc2Client) DescribeAvailabilityZones(arg0 context.Context, arg1 *ec2.DescribeAvailabilityZonesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAvailabilityZonesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAvailabilityZones")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAvailabilityZones", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAvailabilityZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAvailabilityZones indicates an expected call of DescribeAvailabilityZones.
func (mr *MockEc2ClientMockRecorder) DescribeAvailabilityZones(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAvailabilityZones", reflect.TypeOf((*MockEc2Client)(nil).DescribeAvailabilityZones), varargs...)
}

// DescribeAwsNetworkPerformanceMetricSubscriptions mocks base method.
func (m *MockEc2Client) DescribeAwsNetworkPerformanceMetricSubscriptions(arg0 context.Context, arg1 *ec2.DescribeAwsNetworkPerformanceMetricSubscriptionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeAwsNetworkPerformanceMetricSubscriptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAwsNetworkPerformanceMetricSubscriptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAwsNetworkPerformanceMetricSubscriptions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeAwsNetworkPerformanceMetricSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAwsNetworkPerformanceMetricSubscriptions indicates an expected call of DescribeAwsNetworkPerformanceMetricSubscriptions.
func (mr *MockEc2ClientMockRecorder) DescribeAwsNetworkPerformanceMetricSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAwsNetworkPerformanceMetricSubscriptions", reflect.TypeOf((*MockEc2Client)(nil).DescribeAwsNetworkPerformanceMetricSubscriptions), varargs...)
}

// DescribeBundleTasks mocks base method.
func (m *MockEc2Client) DescribeBundleTasks(arg0 context.Context, arg1 *ec2.DescribeBundleTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeBundleTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBundleTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBundleTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeBundleTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBundleTasks indicates an expected call of DescribeBundleTasks.
func (mr *MockEc2ClientMockRecorder) DescribeBundleTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBundleTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeBundleTasks), varargs...)
}

// DescribeByoipCidrs mocks base method.
func (m *MockEc2Client) DescribeByoipCidrs(arg0 context.Context, arg1 *ec2.DescribeByoipCidrsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeByoipCidrsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeByoipCidrs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeByoipCidrs", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeByoipCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeByoipCidrs indicates an expected call of DescribeByoipCidrs.
func (mr *MockEc2ClientMockRecorder) DescribeByoipCidrs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeByoipCidrs", reflect.TypeOf((*MockEc2Client)(nil).DescribeByoipCidrs), varargs...)
}

// DescribeCapacityReservationFleets mocks base method.
func (m *MockEc2Client) DescribeCapacityReservationFleets(arg0 context.Context, arg1 *ec2.DescribeCapacityReservationFleetsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationFleetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCapacityReservationFleets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCapacityReservationFleets", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeCapacityReservationFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCapacityReservationFleets indicates an expected call of DescribeCapacityReservationFleets.
func (mr *MockEc2ClientMockRecorder) DescribeCapacityReservationFleets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCapacityReservationFleets", reflect.TypeOf((*MockEc2Client)(nil).DescribeCapacityReservationFleets), varargs...)
}

// DescribeCapacityReservations mocks base method.
func (m *MockEc2Client) DescribeCapacityReservations(arg0 context.Context, arg1 *ec2.DescribeCapacityReservationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCapacityReservations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCapacityReservations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeCapacityReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCapacityReservations indicates an expected call of DescribeCapacityReservations.
func (mr *MockEc2ClientMockRecorder) DescribeCapacityReservations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCapacityReservations", reflect.TypeOf((*MockEc2Client)(nil).DescribeCapacityReservations), varargs...)
}

// DescribeCarrierGateways mocks base method.
func (m *MockEc2Client) DescribeCarrierGateways(arg0 context.Context, arg1 *ec2.DescribeCarrierGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeCarrierGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCarrierGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCarrierGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeCarrierGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCarrierGateways indicates an expected call of DescribeCarrierGateways.
func (mr *MockEc2ClientMockRecorder) DescribeCarrierGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCarrierGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeCarrierGateways), varargs...)
}

// DescribeClassicLinkInstances mocks base method.
func (m *MockEc2Client) DescribeClassicLinkInstances(arg0 context.Context, arg1 *ec2.DescribeClassicLinkInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeClassicLinkInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClassicLinkInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClassicLinkInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeClassicLinkInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClassicLinkInstances indicates an expected call of DescribeClassicLinkInstances.
func (mr *MockEc2ClientMockRecorder) DescribeClassicLinkInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClassicLinkInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeClassicLinkInstances), varargs...)
}

// DescribeClientVpnAuthorizationRules mocks base method.
func (m *MockEc2Client) DescribeClientVpnAuthorizationRules(arg0 context.Context, arg1 *ec2.DescribeClientVpnAuthorizationRulesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClientVpnAuthorizationRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClientVpnAuthorizationRules", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeClientVpnAuthorizationRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientVpnAuthorizationRules indicates an expected call of DescribeClientVpnAuthorizationRules.
func (mr *MockEc2ClientMockRecorder) DescribeClientVpnAuthorizationRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientVpnAuthorizationRules", reflect.TypeOf((*MockEc2Client)(nil).DescribeClientVpnAuthorizationRules), varargs...)
}

// DescribeClientVpnConnections mocks base method.
func (m *MockEc2Client) DescribeClientVpnConnections(arg0 context.Context, arg1 *ec2.DescribeClientVpnConnectionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeClientVpnConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClientVpnConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClientVpnConnections", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeClientVpnConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientVpnConnections indicates an expected call of DescribeClientVpnConnections.
func (mr *MockEc2ClientMockRecorder) DescribeClientVpnConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientVpnConnections", reflect.TypeOf((*MockEc2Client)(nil).DescribeClientVpnConnections), varargs...)
}

// DescribeClientVpnEndpoints mocks base method.
func (m *MockEc2Client) DescribeClientVpnEndpoints(arg0 context.Context, arg1 *ec2.DescribeClientVpnEndpointsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeClientVpnEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClientVpnEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClientVpnEndpoints", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeClientVpnEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientVpnEndpoints indicates an expected call of DescribeClientVpnEndpoints.
func (mr *MockEc2ClientMockRecorder) DescribeClientVpnEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientVpnEndpoints", reflect.TypeOf((*MockEc2Client)(nil).DescribeClientVpnEndpoints), varargs...)
}

// DescribeClientVpnRoutes mocks base method.
func (m *MockEc2Client) DescribeClientVpnRoutes(arg0 context.Context, arg1 *ec2.DescribeClientVpnRoutesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeClientVpnRoutesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClientVpnRoutes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClientVpnRoutes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeClientVpnRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientVpnRoutes indicates an expected call of DescribeClientVpnRoutes.
func (mr *MockEc2ClientMockRecorder) DescribeClientVpnRoutes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientVpnRoutes", reflect.TypeOf((*MockEc2Client)(nil).DescribeClientVpnRoutes), varargs...)
}

// DescribeClientVpnTargetNetworks mocks base method.
func (m *MockEc2Client) DescribeClientVpnTargetNetworks(arg0 context.Context, arg1 *ec2.DescribeClientVpnTargetNetworksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClientVpnTargetNetworks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClientVpnTargetNetworks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeClientVpnTargetNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientVpnTargetNetworks indicates an expected call of DescribeClientVpnTargetNetworks.
func (mr *MockEc2ClientMockRecorder) DescribeClientVpnTargetNetworks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientVpnTargetNetworks", reflect.TypeOf((*MockEc2Client)(nil).DescribeClientVpnTargetNetworks), varargs...)
}

// DescribeCoipPools mocks base method.
func (m *MockEc2Client) DescribeCoipPools(arg0 context.Context, arg1 *ec2.DescribeCoipPoolsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeCoipPoolsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCoipPools")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCoipPools", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeCoipPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCoipPools indicates an expected call of DescribeCoipPools.
func (mr *MockEc2ClientMockRecorder) DescribeCoipPools(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCoipPools", reflect.TypeOf((*MockEc2Client)(nil).DescribeCoipPools), varargs...)
}

// DescribeConversionTasks mocks base method.
func (m *MockEc2Client) DescribeConversionTasks(arg0 context.Context, arg1 *ec2.DescribeConversionTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeConversionTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConversionTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConversionTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeConversionTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConversionTasks indicates an expected call of DescribeConversionTasks.
func (mr *MockEc2ClientMockRecorder) DescribeConversionTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConversionTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeConversionTasks), varargs...)
}

// DescribeCustomerGateways mocks base method.
func (m *MockEc2Client) DescribeCustomerGateways(arg0 context.Context, arg1 *ec2.DescribeCustomerGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeCustomerGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCustomerGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomerGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeCustomerGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomerGateways indicates an expected call of DescribeCustomerGateways.
func (mr *MockEc2ClientMockRecorder) DescribeCustomerGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomerGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeCustomerGateways), varargs...)
}

// DescribeDhcpOptions mocks base method.
func (m *MockEc2Client) DescribeDhcpOptions(arg0 context.Context, arg1 *ec2.DescribeDhcpOptionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeDhcpOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDhcpOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDhcpOptions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeDhcpOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDhcpOptions indicates an expected call of DescribeDhcpOptions.
func (mr *MockEc2ClientMockRecorder) DescribeDhcpOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDhcpOptions", reflect.TypeOf((*MockEc2Client)(nil).DescribeDhcpOptions), varargs...)
}

// DescribeEgressOnlyInternetGateways mocks base method.
func (m *MockEc2Client) DescribeEgressOnlyInternetGateways(arg0 context.Context, arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEgressOnlyInternetGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEgressOnlyInternetGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEgressOnlyInternetGateways indicates an expected call of DescribeEgressOnlyInternetGateways.
func (mr *MockEc2ClientMockRecorder) DescribeEgressOnlyInternetGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEgressOnlyInternetGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeEgressOnlyInternetGateways), varargs...)
}

// DescribeElasticGpus mocks base method.
func (m *MockEc2Client) DescribeElasticGpus(arg0 context.Context, arg1 *ec2.DescribeElasticGpusInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeElasticGpusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeElasticGpus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticGpus", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeElasticGpusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticGpus indicates an expected call of DescribeElasticGpus.
func (mr *MockEc2ClientMockRecorder) DescribeElasticGpus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticGpus", reflect.TypeOf((*MockEc2Client)(nil).DescribeElasticGpus), varargs...)
}

// DescribeExportImageTasks mocks base method.
func (m *MockEc2Client) DescribeExportImageTasks(arg0 context.Context, arg1 *ec2.DescribeExportImageTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeExportImageTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeExportImageTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExportImageTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeExportImageTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExportImageTasks indicates an expected call of DescribeExportImageTasks.
func (mr *MockEc2ClientMockRecorder) DescribeExportImageTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportImageTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeExportImageTasks), varargs...)
}

// DescribeExportTasks mocks base method.
func (m *MockEc2Client) DescribeExportTasks(arg0 context.Context, arg1 *ec2.DescribeExportTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeExportTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeExportTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExportTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeExportTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExportTasks indicates an expected call of DescribeExportTasks.
func (mr *MockEc2ClientMockRecorder) DescribeExportTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeExportTasks), varargs...)
}

// DescribeFastLaunchImages mocks base method.
func (m *MockEc2Client) DescribeFastLaunchImages(arg0 context.Context, arg1 *ec2.DescribeFastLaunchImagesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFastLaunchImagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFastLaunchImages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFastLaunchImages", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFastLaunchImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFastLaunchImages indicates an expected call of DescribeFastLaunchImages.
func (mr *MockEc2ClientMockRecorder) DescribeFastLaunchImages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFastLaunchImages", reflect.TypeOf((*MockEc2Client)(nil).DescribeFastLaunchImages), varargs...)
}

// DescribeFastSnapshotRestores mocks base method.
func (m *MockEc2Client) DescribeFastSnapshotRestores(arg0 context.Context, arg1 *ec2.DescribeFastSnapshotRestoresInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFastSnapshotRestoresOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFastSnapshotRestores")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFastSnapshotRestores", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFastSnapshotRestoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFastSnapshotRestores indicates an expected call of DescribeFastSnapshotRestores.
func (mr *MockEc2ClientMockRecorder) DescribeFastSnapshotRestores(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFastSnapshotRestores", reflect.TypeOf((*MockEc2Client)(nil).DescribeFastSnapshotRestores), varargs...)
}

// DescribeFleetHistory mocks base method.
func (m *MockEc2Client) DescribeFleetHistory(arg0 context.Context, arg1 *ec2.DescribeFleetHistoryInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFleetHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetHistory", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFleetHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetHistory indicates an expected call of DescribeFleetHistory.
func (mr *MockEc2ClientMockRecorder) DescribeFleetHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetHistory", reflect.TypeOf((*MockEc2Client)(nil).DescribeFleetHistory), varargs...)
}

// DescribeFleetInstances mocks base method.
func (m *MockEc2Client) DescribeFleetInstances(arg0 context.Context, arg1 *ec2.DescribeFleetInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFleetInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFleetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetInstances indicates an expected call of DescribeFleetInstances.
func (mr *MockEc2ClientMockRecorder) DescribeFleetInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeFleetInstances), varargs...)
}

// DescribeFleets mocks base method.
func (m *MockEc2Client) DescribeFleets(arg0 context.Context, arg1 *ec2.DescribeFleetsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFleetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleets", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleets indicates an expected call of DescribeFleets.
func (mr *MockEc2ClientMockRecorder) DescribeFleets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleets", reflect.TypeOf((*MockEc2Client)(nil).DescribeFleets), varargs...)
}

// DescribeFlowLogs mocks base method.
func (m *MockEc2Client) DescribeFlowLogs(arg0 context.Context, arg1 *ec2.DescribeFlowLogsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFlowLogs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFlowLogs", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFlowLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlowLogs indicates an expected call of DescribeFlowLogs.
func (mr *MockEc2ClientMockRecorder) DescribeFlowLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowLogs", reflect.TypeOf((*MockEc2Client)(nil).DescribeFlowLogs), varargs...)
}

// DescribeFpgaImageAttribute mocks base method.
func (m *MockEc2Client) DescribeFpgaImageAttribute(arg0 context.Context, arg1 *ec2.DescribeFpgaImageAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFpgaImageAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFpgaImageAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFpgaImageAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFpgaImageAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFpgaImageAttribute indicates an expected call of DescribeFpgaImageAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeFpgaImageAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFpgaImageAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeFpgaImageAttribute), varargs...)
}

// DescribeFpgaImages mocks base method.
func (m *MockEc2Client) DescribeFpgaImages(arg0 context.Context, arg1 *ec2.DescribeFpgaImagesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeFpgaImagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFpgaImages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFpgaImages", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeFpgaImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFpgaImages indicates an expected call of DescribeFpgaImages.
func (mr *MockEc2ClientMockRecorder) DescribeFpgaImages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFpgaImages", reflect.TypeOf((*MockEc2Client)(nil).DescribeFpgaImages), varargs...)
}

// DescribeHostReservationOfferings mocks base method.
func (m *MockEc2Client) DescribeHostReservationOfferings(arg0 context.Context, arg1 *ec2.DescribeHostReservationOfferingsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeHostReservationOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHostReservationOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHostReservationOfferings", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeHostReservationOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHostReservationOfferings indicates an expected call of DescribeHostReservationOfferings.
func (mr *MockEc2ClientMockRecorder) DescribeHostReservationOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHostReservationOfferings", reflect.TypeOf((*MockEc2Client)(nil).DescribeHostReservationOfferings), varargs...)
}

// DescribeHostReservations mocks base method.
func (m *MockEc2Client) DescribeHostReservations(arg0 context.Context, arg1 *ec2.DescribeHostReservationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeHostReservationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHostReservations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHostReservations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeHostReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHostReservations indicates an expected call of DescribeHostReservations.
func (mr *MockEc2ClientMockRecorder) DescribeHostReservations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHostReservations", reflect.TypeOf((*MockEc2Client)(nil).DescribeHostReservations), varargs...)
}

// DescribeHosts mocks base method.
func (m *MockEc2Client) DescribeHosts(arg0 context.Context, arg1 *ec2.DescribeHostsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeHostsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHosts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHosts", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeHostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHosts indicates an expected call of DescribeHosts.
func (mr *MockEc2ClientMockRecorder) DescribeHosts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHosts", reflect.TypeOf((*MockEc2Client)(nil).DescribeHosts), varargs...)
}

// DescribeIamInstanceProfileAssociations mocks base method.
func (m *MockEc2Client) DescribeIamInstanceProfileAssociations(arg0 context.Context, arg1 *ec2.DescribeIamInstanceProfileAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIamInstanceProfileAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIamInstanceProfileAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIamInstanceProfileAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIamInstanceProfileAssociations indicates an expected call of DescribeIamInstanceProfileAssociations.
func (mr *MockEc2ClientMockRecorder) DescribeIamInstanceProfileAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIamInstanceProfileAssociations", reflect.TypeOf((*MockEc2Client)(nil).DescribeIamInstanceProfileAssociations), varargs...)
}

// DescribeIdFormat mocks base method.
func (m *MockEc2Client) DescribeIdFormat(arg0 context.Context, arg1 *ec2.DescribeIdFormatInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIdFormatOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIdFormat")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIdFormat", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIdFormatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIdFormat indicates an expected call of DescribeIdFormat.
func (mr *MockEc2ClientMockRecorder) DescribeIdFormat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIdFormat", reflect.TypeOf((*MockEc2Client)(nil).DescribeIdFormat), varargs...)
}

// DescribeIdentityIdFormat mocks base method.
func (m *MockEc2Client) DescribeIdentityIdFormat(arg0 context.Context, arg1 *ec2.DescribeIdentityIdFormatInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIdentityIdFormatOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIdentityIdFormat")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIdentityIdFormat", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIdentityIdFormatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIdentityIdFormat indicates an expected call of DescribeIdentityIdFormat.
func (mr *MockEc2ClientMockRecorder) DescribeIdentityIdFormat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIdentityIdFormat", reflect.TypeOf((*MockEc2Client)(nil).DescribeIdentityIdFormat), varargs...)
}

// DescribeImageAttribute mocks base method.
func (m *MockEc2Client) DescribeImageAttribute(arg0 context.Context, arg1 *ec2.DescribeImageAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeImageAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImageAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImageAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeImageAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImageAttribute indicates an expected call of DescribeImageAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeImageAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeImageAttribute), varargs...)
}

// DescribeImages mocks base method.
func (m *MockEc2Client) DescribeImages(arg0 context.Context, arg1 *ec2.DescribeImagesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeImagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImages", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImages indicates an expected call of DescribeImages.
func (mr *MockEc2ClientMockRecorder) DescribeImages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImages", reflect.TypeOf((*MockEc2Client)(nil).DescribeImages), varargs...)
}

// DescribeImportImageTasks mocks base method.
func (m *MockEc2Client) DescribeImportImageTasks(arg0 context.Context, arg1 *ec2.DescribeImportImageTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeImportImageTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImportImageTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImportImageTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeImportImageTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImportImageTasks indicates an expected call of DescribeImportImageTasks.
func (mr *MockEc2ClientMockRecorder) DescribeImportImageTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImportImageTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeImportImageTasks), varargs...)
}

// DescribeImportSnapshotTasks mocks base method.
func (m *MockEc2Client) DescribeImportSnapshotTasks(arg0 context.Context, arg1 *ec2.DescribeImportSnapshotTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeImportSnapshotTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImportSnapshotTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImportSnapshotTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeImportSnapshotTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImportSnapshotTasks indicates an expected call of DescribeImportSnapshotTasks.
func (mr *MockEc2ClientMockRecorder) DescribeImportSnapshotTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImportSnapshotTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeImportSnapshotTasks), varargs...)
}

// DescribeInstanceAttribute mocks base method.
func (m *MockEc2Client) DescribeInstanceAttribute(arg0 context.Context, arg1 *ec2.DescribeInstanceAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAttribute indicates an expected call of DescribeInstanceAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceAttribute), varargs...)
}

// DescribeInstanceConnectEndpoints mocks base method.
func (m *MockEc2Client) DescribeInstanceConnectEndpoints(arg0 context.Context, arg1 *ec2.DescribeInstanceConnectEndpointsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceConnectEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceConnectEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceConnectEndpoints", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceConnectEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceConnectEndpoints indicates an expected call of DescribeInstanceConnectEndpoints.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceConnectEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceConnectEndpoints", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceConnectEndpoints), varargs...)
}

// DescribeInstanceCreditSpecifications mocks base method.
func (m *MockEc2Client) DescribeInstanceCreditSpecifications(arg0 context.Context, arg1 *ec2.DescribeInstanceCreditSpecificationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceCreditSpecifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceCreditSpecifications", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceCreditSpecificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceCreditSpecifications indicates an expected call of DescribeInstanceCreditSpecifications.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceCreditSpecifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceCreditSpecifications", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceCreditSpecifications), varargs...)
}

// DescribeInstanceEventNotificationAttributes mocks base method.
func (m *MockEc2Client) DescribeInstanceEventNotificationAttributes(arg0 context.Context, arg1 *ec2.DescribeInstanceEventNotificationAttributesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceEventNotificationAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceEventNotificationAttributes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceEventNotificationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceEventNotificationAttributes indicates an expected call of DescribeInstanceEventNotificationAttributes.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceEventNotificationAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceEventNotificationAttributes", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceEventNotificationAttributes), varargs...)
}

// DescribeInstanceEventWindows mocks base method.
func (m *MockEc2Client) DescribeInstanceEventWindows(arg0 context.Context, arg1 *ec2.DescribeInstanceEventWindowsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceEventWindowsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceEventWindows")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceEventWindows", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceEventWindowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceEventWindows indicates an expected call of DescribeInstanceEventWindows.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceEventWindows(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceEventWindows", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceEventWindows), varargs...)
}

// DescribeInstanceStatus mocks base method.
func (m *MockEc2Client) DescribeInstanceStatus(arg0 context.Context, arg1 *ec2.DescribeInstanceStatusInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceStatus", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceStatus indicates an expected call of DescribeInstanceStatus.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceStatus", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceStatus), varargs...)
}

// DescribeInstanceTypeOfferings mocks base method.
func (m *MockEc2Client) DescribeInstanceTypeOfferings(arg0 context.Context, arg1 *ec2.DescribeInstanceTypeOfferingsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceTypeOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceTypeOfferings", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceTypeOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceTypeOfferings indicates an expected call of DescribeInstanceTypeOfferings.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceTypeOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceTypeOfferings", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceTypeOfferings), varargs...)
}

// DescribeInstanceTypes mocks base method.
func (m *MockEc2Client) DescribeInstanceTypes(arg0 context.Context, arg1 *ec2.DescribeInstanceTypesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstanceTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceTypes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstanceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceTypes indicates an expected call of DescribeInstanceTypes.
func (mr *MockEc2ClientMockRecorder) DescribeInstanceTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceTypes", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstanceTypes), varargs...)
}

// DescribeInstances mocks base method.
func (m *MockEc2Client) DescribeInstances(arg0 context.Context, arg1 *ec2.DescribeInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEc2ClientMockRecorder) DescribeInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeInstances), varargs...)
}

// DescribeInternetGateways mocks base method.
func (m *MockEc2Client) DescribeInternetGateways(arg0 context.Context, arg1 *ec2.DescribeInternetGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInternetGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInternetGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInternetGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInternetGateways indicates an expected call of DescribeInternetGateways.
func (mr *MockEc2ClientMockRecorder) DescribeInternetGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInternetGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeInternetGateways), varargs...)
}

// DescribeIpamPools mocks base method.
func (m *MockEc2Client) DescribeIpamPools(arg0 context.Context, arg1 *ec2.DescribeIpamPoolsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIpamPoolsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIpamPools")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpamPools", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIpamPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpamPools indicates an expected call of DescribeIpamPools.
func (mr *MockEc2ClientMockRecorder) DescribeIpamPools(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpamPools", reflect.TypeOf((*MockEc2Client)(nil).DescribeIpamPools), varargs...)
}

// DescribeIpamResourceDiscoveries mocks base method.
func (m *MockEc2Client) DescribeIpamResourceDiscoveries(arg0 context.Context, arg1 *ec2.DescribeIpamResourceDiscoveriesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIpamResourceDiscoveriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIpamResourceDiscoveries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpamResourceDiscoveries", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIpamResourceDiscoveriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpamResourceDiscoveries indicates an expected call of DescribeIpamResourceDiscoveries.
func (mr *MockEc2ClientMockRecorder) DescribeIpamResourceDiscoveries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpamResourceDiscoveries", reflect.TypeOf((*MockEc2Client)(nil).DescribeIpamResourceDiscoveries), varargs...)
}

// DescribeIpamResourceDiscoveryAssociations mocks base method.
func (m *MockEc2Client) DescribeIpamResourceDiscoveryAssociations(arg0 context.Context, arg1 *ec2.DescribeIpamResourceDiscoveryAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIpamResourceDiscoveryAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIpamResourceDiscoveryAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpamResourceDiscoveryAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIpamResourceDiscoveryAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpamResourceDiscoveryAssociations indicates an expected call of DescribeIpamResourceDiscoveryAssociations.
func (mr *MockEc2ClientMockRecorder) DescribeIpamResourceDiscoveryAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpamResourceDiscoveryAssociations", reflect.TypeOf((*MockEc2Client)(nil).DescribeIpamResourceDiscoveryAssociations), varargs...)
}

// DescribeIpamScopes mocks base method.
func (m *MockEc2Client) DescribeIpamScopes(arg0 context.Context, arg1 *ec2.DescribeIpamScopesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIpamScopesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIpamScopes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpamScopes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIpamScopesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpamScopes indicates an expected call of DescribeIpamScopes.
func (mr *MockEc2ClientMockRecorder) DescribeIpamScopes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpamScopes", reflect.TypeOf((*MockEc2Client)(nil).DescribeIpamScopes), varargs...)
}

// DescribeIpams mocks base method.
func (m *MockEc2Client) DescribeIpams(arg0 context.Context, arg1 *ec2.DescribeIpamsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIpamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIpams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpams", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIpamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpams indicates an expected call of DescribeIpams.
func (mr *MockEc2ClientMockRecorder) DescribeIpams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpams", reflect.TypeOf((*MockEc2Client)(nil).DescribeIpams), varargs...)
}

// DescribeIpv6Pools mocks base method.
func (m *MockEc2Client) DescribeIpv6Pools(arg0 context.Context, arg1 *ec2.DescribeIpv6PoolsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeIpv6PoolsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIpv6Pools")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpv6Pools", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeIpv6PoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpv6Pools indicates an expected call of DescribeIpv6Pools.
func (mr *MockEc2ClientMockRecorder) DescribeIpv6Pools(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpv6Pools", reflect.TypeOf((*MockEc2Client)(nil).DescribeIpv6Pools), varargs...)
}

// DescribeKeyPairs mocks base method.
func (m *MockEc2Client) DescribeKeyPairs(arg0 context.Context, arg1 *ec2.DescribeKeyPairsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeKeyPairsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeKeyPairs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKeyPairs", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyPairs indicates an expected call of DescribeKeyPairs.
func (mr *MockEc2ClientMockRecorder) DescribeKeyPairs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyPairs", reflect.TypeOf((*MockEc2Client)(nil).DescribeKeyPairs), varargs...)
}

// DescribeLaunchTemplateVersions mocks base method.
func (m *MockEc2Client) DescribeLaunchTemplateVersions(arg0 context.Context, arg1 *ec2.DescribeLaunchTemplateVersionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLaunchTemplateVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchTemplateVersions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLaunchTemplateVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchTemplateVersions indicates an expected call of DescribeLaunchTemplateVersions.
func (mr *MockEc2ClientMockRecorder) DescribeLaunchTemplateVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchTemplateVersions", reflect.TypeOf((*MockEc2Client)(nil).DescribeLaunchTemplateVersions), varargs...)
}

// DescribeLaunchTemplates mocks base method.
func (m *MockEc2Client) DescribeLaunchTemplates(arg0 context.Context, arg1 *ec2.DescribeLaunchTemplatesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLaunchTemplates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLaunchTemplates", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLaunchTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLaunchTemplates indicates an expected call of DescribeLaunchTemplates.
func (mr *MockEc2ClientMockRecorder) DescribeLaunchTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLaunchTemplates", reflect.TypeOf((*MockEc2Client)(nil).DescribeLaunchTemplates), varargs...)
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations mocks base method.
func (m *MockEc2Client) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(arg0 context.Context, arg1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations indicates an expected call of DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.
func (mr *MockEc2ClientMockRecorder) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", reflect.TypeOf((*MockEc2Client)(nil).DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations), varargs...)
}

// DescribeLocalGatewayRouteTableVpcAssociations mocks base method.
func (m *MockEc2Client) DescribeLocalGatewayRouteTableVpcAssociations(arg0 context.Context, arg1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLocalGatewayRouteTableVpcAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLocalGatewayRouteTableVpcAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalGatewayRouteTableVpcAssociations indicates an expected call of DescribeLocalGatewayRouteTableVpcAssociations.
func (mr *MockEc2ClientMockRecorder) DescribeLocalGatewayRouteTableVpcAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalGatewayRouteTableVpcAssociations", reflect.TypeOf((*MockEc2Client)(nil).DescribeLocalGatewayRouteTableVpcAssociations), varargs...)
}

// DescribeLocalGatewayRouteTables mocks base method.
func (m *MockEc2Client) DescribeLocalGatewayRouteTables(arg0 context.Context, arg1 *ec2.DescribeLocalGatewayRouteTablesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLocalGatewayRouteTables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLocalGatewayRouteTables", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLocalGatewayRouteTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalGatewayRouteTables indicates an expected call of DescribeLocalGatewayRouteTables.
func (mr *MockEc2ClientMockRecorder) DescribeLocalGatewayRouteTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalGatewayRouteTables", reflect.TypeOf((*MockEc2Client)(nil).DescribeLocalGatewayRouteTables), varargs...)
}

// DescribeLocalGatewayVirtualInterfaceGroups mocks base method.
func (m *MockEc2Client) DescribeLocalGatewayVirtualInterfaceGroups(arg0 context.Context, arg1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLocalGatewayVirtualInterfaceGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLocalGatewayVirtualInterfaceGroups", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalGatewayVirtualInterfaceGroups indicates an expected call of DescribeLocalGatewayVirtualInterfaceGroups.
func (mr *MockEc2ClientMockRecorder) DescribeLocalGatewayVirtualInterfaceGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalGatewayVirtualInterfaceGroups", reflect.TypeOf((*MockEc2Client)(nil).DescribeLocalGatewayVirtualInterfaceGroups), varargs...)
}

// DescribeLocalGatewayVirtualInterfaces mocks base method.
func (m *MockEc2Client) DescribeLocalGatewayVirtualInterfaces(arg0 context.Context, arg1 *ec2.DescribeLocalGatewayVirtualInterfacesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLocalGatewayVirtualInterfaces")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLocalGatewayVirtualInterfaces", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalGatewayVirtualInterfaces indicates an expected call of DescribeLocalGatewayVirtualInterfaces.
func (mr *MockEc2ClientMockRecorder) DescribeLocalGatewayVirtualInterfaces(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalGatewayVirtualInterfaces", reflect.TypeOf((*MockEc2Client)(nil).DescribeLocalGatewayVirtualInterfaces), varargs...)
}

// DescribeLocalGateways mocks base method.
func (m *MockEc2Client) DescribeLocalGateways(arg0 context.Context, arg1 *ec2.DescribeLocalGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeLocalGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLocalGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLocalGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeLocalGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLocalGateways indicates an expected call of DescribeLocalGateways.
func (mr *MockEc2ClientMockRecorder) DescribeLocalGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLocalGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeLocalGateways), varargs...)
}

// DescribeManagedPrefixLists mocks base method.
func (m *MockEc2Client) DescribeManagedPrefixLists(arg0 context.Context, arg1 *ec2.DescribeManagedPrefixListsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeManagedPrefixListsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeManagedPrefixLists")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeManagedPrefixLists", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeManagedPrefixListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeManagedPrefixLists indicates an expected call of DescribeManagedPrefixLists.
func (mr *MockEc2ClientMockRecorder) DescribeManagedPrefixLists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeManagedPrefixLists", reflect.TypeOf((*MockEc2Client)(nil).DescribeManagedPrefixLists), varargs...)
}

// DescribeMovingAddresses mocks base method.
func (m *MockEc2Client) DescribeMovingAddresses(arg0 context.Context, arg1 *ec2.DescribeMovingAddressesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeMovingAddressesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMovingAddresses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMovingAddresses", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeMovingAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMovingAddresses indicates an expected call of DescribeMovingAddresses.
func (mr *MockEc2ClientMockRecorder) DescribeMovingAddresses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMovingAddresses", reflect.TypeOf((*MockEc2Client)(nil).DescribeMovingAddresses), varargs...)
}

// DescribeNatGateways mocks base method.
func (m *MockEc2Client) DescribeNatGateways(arg0 context.Context, arg1 *ec2.DescribeNatGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNatGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNatGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNatGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNatGateways indicates an expected call of DescribeNatGateways.
func (mr *MockEc2ClientMockRecorder) DescribeNatGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNatGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeNatGateways), varargs...)
}

// DescribeNetworkAcls mocks base method.
func (m *MockEc2Client) DescribeNetworkAcls(arg0 context.Context, arg1 *ec2.DescribeNetworkAclsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkAcls")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkAcls", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkAclsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkAcls indicates an expected call of DescribeNetworkAcls.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkAcls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkAcls", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkAcls), varargs...)
}

// DescribeNetworkInsightsAccessScopeAnalyses mocks base method.
func (m *MockEc2Client) DescribeNetworkInsightsAccessScopeAnalyses(arg0 context.Context, arg1 *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopeAnalysesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInsightsAccessScopeAnalyses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInsightsAccessScopeAnalyses", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInsightsAccessScopeAnalysesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInsightsAccessScopeAnalyses indicates an expected call of DescribeNetworkInsightsAccessScopeAnalyses.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInsightsAccessScopeAnalyses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInsightsAccessScopeAnalyses", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInsightsAccessScopeAnalyses), varargs...)
}

// DescribeNetworkInsightsAccessScopes mocks base method.
func (m *MockEc2Client) DescribeNetworkInsightsAccessScopes(arg0 context.Context, arg1 *ec2.DescribeNetworkInsightsAccessScopesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInsightsAccessScopes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInsightsAccessScopes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInsightsAccessScopesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInsightsAccessScopes indicates an expected call of DescribeNetworkInsightsAccessScopes.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInsightsAccessScopes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInsightsAccessScopes", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInsightsAccessScopes), varargs...)
}

// DescribeNetworkInsightsAnalyses mocks base method.
func (m *MockEc2Client) DescribeNetworkInsightsAnalyses(arg0 context.Context, arg1 *ec2.DescribeNetworkInsightsAnalysesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAnalysesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInsightsAnalyses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInsightsAnalyses", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInsightsAnalysesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInsightsAnalyses indicates an expected call of DescribeNetworkInsightsAnalyses.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInsightsAnalyses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInsightsAnalyses", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInsightsAnalyses), varargs...)
}

// DescribeNetworkInsightsPaths mocks base method.
func (m *MockEc2Client) DescribeNetworkInsightsPaths(arg0 context.Context, arg1 *ec2.DescribeNetworkInsightsPathsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsPathsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInsightsPaths")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInsightsPaths", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInsightsPathsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInsightsPaths indicates an expected call of DescribeNetworkInsightsPaths.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInsightsPaths(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInsightsPaths", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInsightsPaths), varargs...)
}

// DescribeNetworkInterfaceAttribute mocks base method.
func (m *MockEc2Client) DescribeNetworkInterfaceAttribute(arg0 context.Context, arg1 *ec2.DescribeNetworkInterfaceAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInterfaceAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInterfaceAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInterfaceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInterfaceAttribute indicates an expected call of DescribeNetworkInterfaceAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInterfaceAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInterfaceAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInterfaceAttribute), varargs...)
}

// DescribeNetworkInterfacePermissions mocks base method.
func (m *MockEc2Client) DescribeNetworkInterfacePermissions(arg0 context.Context, arg1 *ec2.DescribeNetworkInterfacePermissionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInterfacePermissions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInterfacePermissions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInterfacePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInterfacePermissions indicates an expected call of DescribeNetworkInterfacePermissions.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInterfacePermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInterfacePermissions", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInterfacePermissions), varargs...)
}

// DescribeNetworkInterfaces mocks base method.
func (m *MockEc2Client) DescribeNetworkInterfaces(arg0 context.Context, arg1 *ec2.DescribeNetworkInterfacesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNetworkInterfaces")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNetworkInterfaces", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNetworkInterfaces indicates an expected call of DescribeNetworkInterfaces.
func (mr *MockEc2ClientMockRecorder) DescribeNetworkInterfaces(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNetworkInterfaces", reflect.TypeOf((*MockEc2Client)(nil).DescribeNetworkInterfaces), varargs...)
}

// DescribePlacementGroups mocks base method.
func (m *MockEc2Client) DescribePlacementGroups(arg0 context.Context, arg1 *ec2.DescribePlacementGroupsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribePlacementGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePlacementGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePlacementGroups", varargs...)
	ret0, _ := ret[0].(*ec2.DescribePlacementGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePlacementGroups indicates an expected call of DescribePlacementGroups.
func (mr *MockEc2ClientMockRecorder) DescribePlacementGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePlacementGroups", reflect.TypeOf((*MockEc2Client)(nil).DescribePlacementGroups), varargs...)
}

// DescribePrefixLists mocks base method.
func (m *MockEc2Client) DescribePrefixLists(arg0 context.Context, arg1 *ec2.DescribePrefixListsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribePrefixListsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePrefixLists")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePrefixLists", varargs...)
	ret0, _ := ret[0].(*ec2.DescribePrefixListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePrefixLists indicates an expected call of DescribePrefixLists.
func (mr *MockEc2ClientMockRecorder) DescribePrefixLists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePrefixLists", reflect.TypeOf((*MockEc2Client)(nil).DescribePrefixLists), varargs...)
}

// DescribePrincipalIdFormat mocks base method.
func (m *MockEc2Client) DescribePrincipalIdFormat(arg0 context.Context, arg1 *ec2.DescribePrincipalIdFormatInput, arg2 ...func(*ec2.Options)) (*ec2.DescribePrincipalIdFormatOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePrincipalIdFormat")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePrincipalIdFormat", varargs...)
	ret0, _ := ret[0].(*ec2.DescribePrincipalIdFormatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePrincipalIdFormat indicates an expected call of DescribePrincipalIdFormat.
func (mr *MockEc2ClientMockRecorder) DescribePrincipalIdFormat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePrincipalIdFormat", reflect.TypeOf((*MockEc2Client)(nil).DescribePrincipalIdFormat), varargs...)
}

// DescribePublicIpv4Pools mocks base method.
func (m *MockEc2Client) DescribePublicIpv4Pools(arg0 context.Context, arg1 *ec2.DescribePublicIpv4PoolsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribePublicIpv4PoolsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePublicIpv4Pools")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePublicIpv4Pools", varargs...)
	ret0, _ := ret[0].(*ec2.DescribePublicIpv4PoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePublicIpv4Pools indicates an expected call of DescribePublicIpv4Pools.
func (mr *MockEc2ClientMockRecorder) DescribePublicIpv4Pools(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePublicIpv4Pools", reflect.TypeOf((*MockEc2Client)(nil).DescribePublicIpv4Pools), varargs...)
}

// DescribeRegions mocks base method.
func (m *MockEc2Client) DescribeRegions(arg0 context.Context, arg1 *ec2.DescribeRegionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeRegionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRegions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegions indicates an expected call of DescribeRegions.
func (mr *MockEc2ClientMockRecorder) DescribeRegions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegions", reflect.TypeOf((*MockEc2Client)(nil).DescribeRegions), varargs...)
}

// DescribeReplaceRootVolumeTasks mocks base method.
func (m *MockEc2Client) DescribeReplaceRootVolumeTasks(arg0 context.Context, arg1 *ec2.DescribeReplaceRootVolumeTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeReplaceRootVolumeTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplaceRootVolumeTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplaceRootVolumeTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeReplaceRootVolumeTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplaceRootVolumeTasks indicates an expected call of DescribeReplaceRootVolumeTasks.
func (mr *MockEc2ClientMockRecorder) DescribeReplaceRootVolumeTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplaceRootVolumeTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeReplaceRootVolumeTasks), varargs...)
}

// DescribeReservedInstances mocks base method.
func (m *MockEc2Client) DescribeReservedInstances(arg0 context.Context, arg1 *ec2.DescribeReservedInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstances indicates an expected call of DescribeReservedInstances.
func (mr *MockEc2ClientMockRecorder) DescribeReservedInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeReservedInstances), varargs...)
}

// DescribeReservedInstancesListings mocks base method.
func (m *MockEc2Client) DescribeReservedInstancesListings(arg0 context.Context, arg1 *ec2.DescribeReservedInstancesListingsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesListingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedInstancesListings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstancesListings", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesListingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstancesListings indicates an expected call of DescribeReservedInstancesListings.
func (mr *MockEc2ClientMockRecorder) DescribeReservedInstancesListings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesListings", reflect.TypeOf((*MockEc2Client)(nil).DescribeReservedInstancesListings), varargs...)
}

// DescribeReservedInstancesModifications mocks base method.
func (m *MockEc2Client) DescribeReservedInstancesModifications(arg0 context.Context, arg1 *ec2.DescribeReservedInstancesModificationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesModificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedInstancesModifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstancesModifications", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstancesModifications indicates an expected call of DescribeReservedInstancesModifications.
func (mr *MockEc2ClientMockRecorder) DescribeReservedInstancesModifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesModifications", reflect.TypeOf((*MockEc2Client)(nil).DescribeReservedInstancesModifications), varargs...)
}

// DescribeReservedInstancesOfferings mocks base method.
func (m *MockEc2Client) DescribeReservedInstancesOfferings(arg0 context.Context, arg1 *ec2.DescribeReservedInstancesOfferingsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedInstancesOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstancesOfferings", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstancesOfferings indicates an expected call of DescribeReservedInstancesOfferings.
func (mr *MockEc2ClientMockRecorder) DescribeReservedInstancesOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesOfferings", reflect.TypeOf((*MockEc2Client)(nil).DescribeReservedInstancesOfferings), varargs...)
}

// DescribeRouteTables mocks base method.
func (m *MockEc2Client) DescribeRouteTables(arg0 context.Context, arg1 *ec2.DescribeRouteTablesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRouteTables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRouteTables", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeRouteTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRouteTables indicates an expected call of DescribeRouteTables.
func (mr *MockEc2ClientMockRecorder) DescribeRouteTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteTables", reflect.TypeOf((*MockEc2Client)(nil).DescribeRouteTables), varargs...)
}

// DescribeScheduledInstanceAvailability mocks base method.
func (m *MockEc2Client) DescribeScheduledInstanceAvailability(arg0 context.Context, arg1 *ec2.DescribeScheduledInstanceAvailabilityInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeScheduledInstanceAvailability")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeScheduledInstanceAvailability", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeScheduledInstanceAvailabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeScheduledInstanceAvailability indicates an expected call of DescribeScheduledInstanceAvailability.
func (mr *MockEc2ClientMockRecorder) DescribeScheduledInstanceAvailability(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduledInstanceAvailability", reflect.TypeOf((*MockEc2Client)(nil).DescribeScheduledInstanceAvailability), varargs...)
}

// DescribeScheduledInstances mocks base method.
func (m *MockEc2Client) DescribeScheduledInstances(arg0 context.Context, arg1 *ec2.DescribeScheduledInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeScheduledInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeScheduledInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeScheduledInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeScheduledInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeScheduledInstances indicates an expected call of DescribeScheduledInstances.
func (mr *MockEc2ClientMockRecorder) DescribeScheduledInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduledInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeScheduledInstances), varargs...)
}

// DescribeSecurityGroupReferences mocks base method.
func (m *MockEc2Client) DescribeSecurityGroupReferences(arg0 context.Context, arg1 *ec2.DescribeSecurityGroupReferencesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupReferencesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSecurityGroupReferences")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSecurityGroupReferences", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSecurityGroupReferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroupReferences indicates an expected call of DescribeSecurityGroupReferences.
func (mr *MockEc2ClientMockRecorder) DescribeSecurityGroupReferences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroupReferences", reflect.TypeOf((*MockEc2Client)(nil).DescribeSecurityGroupReferences), varargs...)
}

// DescribeSecurityGroupRules mocks base method.
func (m *MockEc2Client) DescribeSecurityGroupRules(arg0 context.Context, arg1 *ec2.DescribeSecurityGroupRulesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSecurityGroupRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSecurityGroupRules", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSecurityGroupRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroupRules indicates an expected call of DescribeSecurityGroupRules.
func (mr *MockEc2ClientMockRecorder) DescribeSecurityGroupRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroupRules", reflect.TypeOf((*MockEc2Client)(nil).DescribeSecurityGroupRules), varargs...)
}

// DescribeSecurityGroups mocks base method.
func (m *MockEc2Client) DescribeSecurityGroups(arg0 context.Context, arg1 *ec2.DescribeSecurityGroupsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSecurityGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSecurityGroups", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroups indicates an expected call of DescribeSecurityGroups.
func (mr *MockEc2ClientMockRecorder) DescribeSecurityGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroups", reflect.TypeOf((*MockEc2Client)(nil).DescribeSecurityGroups), varargs...)
}

// DescribeSnapshotAttribute mocks base method.
func (m *MockEc2Client) DescribeSnapshotAttribute(arg0 context.Context, arg1 *ec2.DescribeSnapshotAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSnapshotAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSnapshotAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotAttribute indicates an expected call of DescribeSnapshotAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeSnapshotAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeSnapshotAttribute), varargs...)
}

// DescribeSnapshotTierStatus mocks base method.
func (m *MockEc2Client) DescribeSnapshotTierStatus(arg0 context.Context, arg1 *ec2.DescribeSnapshotTierStatusInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSnapshotTierStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSnapshotTierStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotTierStatus", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSnapshotTierStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotTierStatus indicates an expected call of DescribeSnapshotTierStatus.
func (mr *MockEc2ClientMockRecorder) DescribeSnapshotTierStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotTierStatus", reflect.TypeOf((*MockEc2Client)(nil).DescribeSnapshotTierStatus), varargs...)
}

// DescribeSnapshots mocks base method.
func (m *MockEc2Client) DescribeSnapshots(arg0 context.Context, arg1 *ec2.DescribeSnapshotsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshots", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshots indicates an expected call of DescribeSnapshots.
func (mr *MockEc2ClientMockRecorder) DescribeSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshots", reflect.TypeOf((*MockEc2Client)(nil).DescribeSnapshots), varargs...)
}

// DescribeSpotDatafeedSubscription mocks base method.
func (m *MockEc2Client) DescribeSpotDatafeedSubscription(arg0 context.Context, arg1 *ec2.DescribeSpotDatafeedSubscriptionInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpotDatafeedSubscription")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpotDatafeedSubscription", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSpotDatafeedSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpotDatafeedSubscription indicates an expected call of DescribeSpotDatafeedSubscription.
func (mr *MockEc2ClientMockRecorder) DescribeSpotDatafeedSubscription(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpotDatafeedSubscription", reflect.TypeOf((*MockEc2Client)(nil).DescribeSpotDatafeedSubscription), varargs...)
}

// DescribeSpotFleetInstances mocks base method.
func (m *MockEc2Client) DescribeSpotFleetInstances(arg0 context.Context, arg1 *ec2.DescribeSpotFleetInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSpotFleetInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpotFleetInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpotFleetInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSpotFleetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpotFleetInstances indicates an expected call of DescribeSpotFleetInstances.
func (mr *MockEc2ClientMockRecorder) DescribeSpotFleetInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpotFleetInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeSpotFleetInstances), varargs...)
}

// DescribeSpotFleetRequestHistory mocks base method.
func (m *MockEc2Client) DescribeSpotFleetRequestHistory(arg0 context.Context, arg1 *ec2.DescribeSpotFleetRequestHistoryInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpotFleetRequestHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpotFleetRequestHistory", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSpotFleetRequestHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpotFleetRequestHistory indicates an expected call of DescribeSpotFleetRequestHistory.
func (mr *MockEc2ClientMockRecorder) DescribeSpotFleetRequestHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpotFleetRequestHistory", reflect.TypeOf((*MockEc2Client)(nil).DescribeSpotFleetRequestHistory), varargs...)
}

// DescribeSpotFleetRequests mocks base method.
func (m *MockEc2Client) DescribeSpotFleetRequests(arg0 context.Context, arg1 *ec2.DescribeSpotFleetRequestsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpotFleetRequests")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpotFleetRequests", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSpotFleetRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpotFleetRequests indicates an expected call of DescribeSpotFleetRequests.
func (mr *MockEc2ClientMockRecorder) DescribeSpotFleetRequests(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpotFleetRequests", reflect.TypeOf((*MockEc2Client)(nil).DescribeSpotFleetRequests), varargs...)
}

// DescribeSpotInstanceRequests mocks base method.
func (m *MockEc2Client) DescribeSpotInstanceRequests(arg0 context.Context, arg1 *ec2.DescribeSpotInstanceRequestsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSpotInstanceRequestsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpotInstanceRequests")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpotInstanceRequests", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSpotInstanceRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpotInstanceRequests indicates an expected call of DescribeSpotInstanceRequests.
func (mr *MockEc2ClientMockRecorder) DescribeSpotInstanceRequests(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpotInstanceRequests", reflect.TypeOf((*MockEc2Client)(nil).DescribeSpotInstanceRequests), varargs...)
}

// DescribeSpotPriceHistory mocks base method.
func (m *MockEc2Client) DescribeSpotPriceHistory(arg0 context.Context, arg1 *ec2.DescribeSpotPriceHistoryInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSpotPriceHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpotPriceHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpotPriceHistory", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSpotPriceHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpotPriceHistory indicates an expected call of DescribeSpotPriceHistory.
func (mr *MockEc2ClientMockRecorder) DescribeSpotPriceHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpotPriceHistory", reflect.TypeOf((*MockEc2Client)(nil).DescribeSpotPriceHistory), varargs...)
}

// DescribeStaleSecurityGroups mocks base method.
func (m *MockEc2Client) DescribeStaleSecurityGroups(arg0 context.Context, arg1 *ec2.DescribeStaleSecurityGroupsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeStaleSecurityGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStaleSecurityGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStaleSecurityGroups", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeStaleSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStaleSecurityGroups indicates an expected call of DescribeStaleSecurityGroups.
func (mr *MockEc2ClientMockRecorder) DescribeStaleSecurityGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStaleSecurityGroups", reflect.TypeOf((*MockEc2Client)(nil).DescribeStaleSecurityGroups), varargs...)
}

// DescribeStoreImageTasks mocks base method.
func (m *MockEc2Client) DescribeStoreImageTasks(arg0 context.Context, arg1 *ec2.DescribeStoreImageTasksInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeStoreImageTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStoreImageTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStoreImageTasks", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeStoreImageTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStoreImageTasks indicates an expected call of DescribeStoreImageTasks.
func (mr *MockEc2ClientMockRecorder) DescribeStoreImageTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStoreImageTasks", reflect.TypeOf((*MockEc2Client)(nil).DescribeStoreImageTasks), varargs...)
}

// DescribeSubnets mocks base method.
func (m *MockEc2Client) DescribeSubnets(arg0 context.Context, arg1 *ec2.DescribeSubnetsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSubnets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubnets", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnets indicates an expected call of DescribeSubnets.
func (mr *MockEc2ClientMockRecorder) DescribeSubnets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnets", reflect.TypeOf((*MockEc2Client)(nil).DescribeSubnets), varargs...)
}

// DescribeTags mocks base method.
func (m *MockEc2Client) DescribeTags(arg0 context.Context, arg1 *ec2.DescribeTagsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTags", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockEc2ClientMockRecorder) DescribeTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockEc2Client)(nil).DescribeTags), varargs...)
}

// DescribeTrafficMirrorFilters mocks base method.
func (m *MockEc2Client) DescribeTrafficMirrorFilters(arg0 context.Context, arg1 *ec2.DescribeTrafficMirrorFiltersInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrafficMirrorFilters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrafficMirrorFilters", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTrafficMirrorFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrafficMirrorFilters indicates an expected call of DescribeTrafficMirrorFilters.
func (mr *MockEc2ClientMockRecorder) DescribeTrafficMirrorFilters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrafficMirrorFilters", reflect.TypeOf((*MockEc2Client)(nil).DescribeTrafficMirrorFilters), varargs...)
}

// DescribeTrafficMirrorSessions mocks base method.
func (m *MockEc2Client) DescribeTrafficMirrorSessions(arg0 context.Context, arg1 *ec2.DescribeTrafficMirrorSessionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrafficMirrorSessions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrafficMirrorSessions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTrafficMirrorSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrafficMirrorSessions indicates an expected call of DescribeTrafficMirrorSessions.
func (mr *MockEc2ClientMockRecorder) DescribeTrafficMirrorSessions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrafficMirrorSessions", reflect.TypeOf((*MockEc2Client)(nil).DescribeTrafficMirrorSessions), varargs...)
}

// DescribeTrafficMirrorTargets mocks base method.
func (m *MockEc2Client) DescribeTrafficMirrorTargets(arg0 context.Context, arg1 *ec2.DescribeTrafficMirrorTargetsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrafficMirrorTargets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrafficMirrorTargets", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTrafficMirrorTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrafficMirrorTargets indicates an expected call of DescribeTrafficMirrorTargets.
func (mr *MockEc2ClientMockRecorder) DescribeTrafficMirrorTargets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrafficMirrorTargets", reflect.TypeOf((*MockEc2Client)(nil).DescribeTrafficMirrorTargets), varargs...)
}

// DescribeTransitGatewayAttachments mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayAttachments(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayAttachmentsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayAttachments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayAttachments", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayAttachments indicates an expected call of DescribeTransitGatewayAttachments.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayAttachments", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayAttachments), varargs...)
}

// DescribeTransitGatewayConnectPeers mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayConnectPeers(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayConnectPeersInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectPeersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayConnectPeers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayConnectPeers", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayConnectPeersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayConnectPeers indicates an expected call of DescribeTransitGatewayConnectPeers.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayConnectPeers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayConnectPeers", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayConnectPeers), varargs...)
}

// DescribeTransitGatewayConnects mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayConnects(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayConnectsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayConnects")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayConnects", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayConnectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayConnects indicates an expected call of DescribeTransitGatewayConnects.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayConnects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayConnects", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayConnects), varargs...)
}

// DescribeTransitGatewayMulticastDomains mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayMulticastDomains(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayMulticastDomainsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayMulticastDomains")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayMulticastDomains", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayMulticastDomains indicates an expected call of DescribeTransitGatewayMulticastDomains.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayMulticastDomains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayMulticastDomains", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayMulticastDomains), varargs...)
}

// DescribeTransitGatewayPeeringAttachments mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayPeeringAttachments(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayPeeringAttachments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayPeeringAttachments", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayPeeringAttachments indicates an expected call of DescribeTransitGatewayPeeringAttachments.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayPeeringAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayPeeringAttachments", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayPeeringAttachments), varargs...)
}

// DescribeTransitGatewayPolicyTables mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayPolicyTables(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayPolicyTablesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPolicyTablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayPolicyTables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayPolicyTables", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayPolicyTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayPolicyTables indicates an expected call of DescribeTransitGatewayPolicyTables.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayPolicyTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayPolicyTables", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayPolicyTables), varargs...)
}

// DescribeTransitGatewayRouteTableAnnouncements mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayRouteTableAnnouncements(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTableAnnouncementsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayRouteTableAnnouncements")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayRouteTableAnnouncements", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayRouteTableAnnouncementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayRouteTableAnnouncements indicates an expected call of DescribeTransitGatewayRouteTableAnnouncements.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayRouteTableAnnouncements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayRouteTableAnnouncements", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayRouteTableAnnouncements), varargs...)
}

// DescribeTransitGatewayRouteTables mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayRouteTables(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayRouteTablesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayRouteTables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayRouteTables", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayRouteTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayRouteTables indicates an expected call of DescribeTransitGatewayRouteTables.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayRouteTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayRouteTables", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayRouteTables), varargs...)
}

// DescribeTransitGatewayVpcAttachments mocks base method.
func (m *MockEc2Client) DescribeTransitGatewayVpcAttachments(arg0 context.Context, arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGatewayVpcAttachments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGatewayVpcAttachments", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGatewayVpcAttachments indicates an expected call of DescribeTransitGatewayVpcAttachments.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGatewayVpcAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGatewayVpcAttachments", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGatewayVpcAttachments), varargs...)
}

// DescribeTransitGateways mocks base method.
func (m *MockEc2Client) DescribeTransitGateways(arg0 context.Context, arg1 *ec2.DescribeTransitGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransitGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransitGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTransitGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransitGateways indicates an expected call of DescribeTransitGateways.
func (mr *MockEc2ClientMockRecorder) DescribeTransitGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransitGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeTransitGateways), varargs...)
}

// DescribeTrunkInterfaceAssociations mocks base method.
func (m *MockEc2Client) DescribeTrunkInterfaceAssociations(arg0 context.Context, arg1 *ec2.DescribeTrunkInterfaceAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeTrunkInterfaceAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrunkInterfaceAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrunkInterfaceAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeTrunkInterfaceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrunkInterfaceAssociations indicates an expected call of DescribeTrunkInterfaceAssociations.
func (mr *MockEc2ClientMockRecorder) DescribeTrunkInterfaceAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrunkInterfaceAssociations", reflect.TypeOf((*MockEc2Client)(nil).DescribeTrunkInterfaceAssociations), varargs...)
}

// DescribeVerifiedAccessEndpoints mocks base method.
func (m *MockEc2Client) DescribeVerifiedAccessEndpoints(arg0 context.Context, arg1 *ec2.DescribeVerifiedAccessEndpointsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVerifiedAccessEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVerifiedAccessEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedAccessEndpoints", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVerifiedAccessEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedAccessEndpoints indicates an expected call of DescribeVerifiedAccessEndpoints.
func (mr *MockEc2ClientMockRecorder) DescribeVerifiedAccessEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedAccessEndpoints", reflect.TypeOf((*MockEc2Client)(nil).DescribeVerifiedAccessEndpoints), varargs...)
}

// DescribeVerifiedAccessGroups mocks base method.
func (m *MockEc2Client) DescribeVerifiedAccessGroups(arg0 context.Context, arg1 *ec2.DescribeVerifiedAccessGroupsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVerifiedAccessGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVerifiedAccessGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedAccessGroups", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVerifiedAccessGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedAccessGroups indicates an expected call of DescribeVerifiedAccessGroups.
func (mr *MockEc2ClientMockRecorder) DescribeVerifiedAccessGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedAccessGroups", reflect.TypeOf((*MockEc2Client)(nil).DescribeVerifiedAccessGroups), varargs...)
}

// DescribeVerifiedAccessInstanceLoggingConfigurations mocks base method.
func (m *MockEc2Client) DescribeVerifiedAccessInstanceLoggingConfigurations(arg0 context.Context, arg1 *ec2.DescribeVerifiedAccessInstanceLoggingConfigurationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVerifiedAccessInstanceLoggingConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVerifiedAccessInstanceLoggingConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedAccessInstanceLoggingConfigurations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVerifiedAccessInstanceLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedAccessInstanceLoggingConfigurations indicates an expected call of DescribeVerifiedAccessInstanceLoggingConfigurations.
func (mr *MockEc2ClientMockRecorder) DescribeVerifiedAccessInstanceLoggingConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedAccessInstanceLoggingConfigurations", reflect.TypeOf((*MockEc2Client)(nil).DescribeVerifiedAccessInstanceLoggingConfigurations), varargs...)
}

// DescribeVerifiedAccessInstances mocks base method.
func (m *MockEc2Client) DescribeVerifiedAccessInstances(arg0 context.Context, arg1 *ec2.DescribeVerifiedAccessInstancesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVerifiedAccessInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVerifiedAccessInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedAccessInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVerifiedAccessInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedAccessInstances indicates an expected call of DescribeVerifiedAccessInstances.
func (mr *MockEc2ClientMockRecorder) DescribeVerifiedAccessInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedAccessInstances", reflect.TypeOf((*MockEc2Client)(nil).DescribeVerifiedAccessInstances), varargs...)
}

// DescribeVerifiedAccessTrustProviders mocks base method.
func (m *MockEc2Client) DescribeVerifiedAccessTrustProviders(arg0 context.Context, arg1 *ec2.DescribeVerifiedAccessTrustProvidersInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVerifiedAccessTrustProvidersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVerifiedAccessTrustProviders")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedAccessTrustProviders", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVerifiedAccessTrustProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedAccessTrustProviders indicates an expected call of DescribeVerifiedAccessTrustProviders.
func (mr *MockEc2ClientMockRecorder) DescribeVerifiedAccessTrustProviders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedAccessTrustProviders", reflect.TypeOf((*MockEc2Client)(nil).DescribeVerifiedAccessTrustProviders), varargs...)
}

// DescribeVolumeAttribute mocks base method.
func (m *MockEc2Client) DescribeVolumeAttribute(arg0 context.Context, arg1 *ec2.DescribeVolumeAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVolumeAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVolumeAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumeAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVolumeAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumeAttribute indicates an expected call of DescribeVolumeAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeVolumeAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumeAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeVolumeAttribute), varargs...)
}

// DescribeVolumeStatus mocks base method.
func (m *MockEc2Client) DescribeVolumeStatus(arg0 context.Context, arg1 *ec2.DescribeVolumeStatusInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVolumeStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVolumeStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumeStatus", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVolumeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumeStatus indicates an expected call of DescribeVolumeStatus.
func (mr *MockEc2ClientMockRecorder) DescribeVolumeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumeStatus", reflect.TypeOf((*MockEc2Client)(nil).DescribeVolumeStatus), varargs...)
}

// DescribeVolumes mocks base method.
func (m *MockEc2Client) DescribeVolumes(arg0 context.Context, arg1 *ec2.DescribeVolumesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVolumes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumes", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVolumesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumes indicates an expected call of DescribeVolumes.
func (mr *MockEc2ClientMockRecorder) DescribeVolumes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumes", reflect.TypeOf((*MockEc2Client)(nil).DescribeVolumes), varargs...)
}

// DescribeVolumesModifications mocks base method.
func (m *MockEc2Client) DescribeVolumesModifications(arg0 context.Context, arg1 *ec2.DescribeVolumesModificationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVolumesModificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVolumesModifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumesModifications", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVolumesModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumesModifications indicates an expected call of DescribeVolumesModifications.
func (mr *MockEc2ClientMockRecorder) DescribeVolumesModifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesModifications", reflect.TypeOf((*MockEc2Client)(nil).DescribeVolumesModifications), varargs...)
}

// DescribeVpcAttribute mocks base method.
func (m *MockEc2Client) DescribeVpcAttribute(arg0 context.Context, arg1 *ec2.DescribeVpcAttributeInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcAttributeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcAttribute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcAttribute", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcAttribute indicates an expected call of DescribeVpcAttribute.
func (mr *MockEc2ClientMockRecorder) DescribeVpcAttribute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcAttribute", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcAttribute), varargs...)
}

// DescribeVpcClassicLink mocks base method.
func (m *MockEc2Client) DescribeVpcClassicLink(arg0 context.Context, arg1 *ec2.DescribeVpcClassicLinkInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcClassicLink")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcClassicLink", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcClassicLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcClassicLink indicates an expected call of DescribeVpcClassicLink.
func (mr *MockEc2ClientMockRecorder) DescribeVpcClassicLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcClassicLink", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcClassicLink), varargs...)
}

// DescribeVpcClassicLinkDnsSupport mocks base method.
func (m *MockEc2Client) DescribeVpcClassicLinkDnsSupport(arg0 context.Context, arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcClassicLinkDnsSupport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcClassicLinkDnsSupport", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcClassicLinkDnsSupport indicates an expected call of DescribeVpcClassicLinkDnsSupport.
func (mr *MockEc2ClientMockRecorder) DescribeVpcClassicLinkDnsSupport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcClassicLinkDnsSupport", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcClassicLinkDnsSupport), varargs...)
}

// DescribeVpcEndpointConnectionNotifications mocks base method.
func (m *MockEc2Client) DescribeVpcEndpointConnectionNotifications(arg0 context.Context, arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpointConnectionNotifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpointConnectionNotifications", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpointConnectionNotifications indicates an expected call of DescribeVpcEndpointConnectionNotifications.
func (mr *MockEc2ClientMockRecorder) DescribeVpcEndpointConnectionNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpointConnectionNotifications", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcEndpointConnectionNotifications), varargs...)
}

// DescribeVpcEndpointConnections mocks base method.
func (m *MockEc2Client) DescribeVpcEndpointConnections(arg0 context.Context, arg1 *ec2.DescribeVpcEndpointConnectionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpointConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpointConnections", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcEndpointConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpointConnections indicates an expected call of DescribeVpcEndpointConnections.
func (mr *MockEc2ClientMockRecorder) DescribeVpcEndpointConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpointConnections", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcEndpointConnections), varargs...)
}

// DescribeVpcEndpointServiceConfigurations mocks base method.
func (m *MockEc2Client) DescribeVpcEndpointServiceConfigurations(arg0 context.Context, arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpointServiceConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpointServiceConfigurations", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpointServiceConfigurations indicates an expected call of DescribeVpcEndpointServiceConfigurations.
func (mr *MockEc2ClientMockRecorder) DescribeVpcEndpointServiceConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpointServiceConfigurations", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcEndpointServiceConfigurations), varargs...)
}

// DescribeVpcEndpointServicePermissions mocks base method.
func (m *MockEc2Client) DescribeVpcEndpointServicePermissions(arg0 context.Context, arg1 *ec2.DescribeVpcEndpointServicePermissionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpointServicePermissions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpointServicePermissions", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcEndpointServicePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpointServicePermissions indicates an expected call of DescribeVpcEndpointServicePermissions.
func (mr *MockEc2ClientMockRecorder) DescribeVpcEndpointServicePermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpointServicePermissions", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcEndpointServicePermissions), varargs...)
}

// DescribeVpcEndpointServices mocks base method.
func (m *MockEc2Client) DescribeVpcEndpointServices(arg0 context.Context, arg1 *ec2.DescribeVpcEndpointServicesInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpointServices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpointServices", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcEndpointServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpointServices indicates an expected call of DescribeVpcEndpointServices.
func (mr *MockEc2ClientMockRecorder) DescribeVpcEndpointServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpointServices", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcEndpointServices), varargs...)
}

// DescribeVpcEndpoints mocks base method.
func (m *MockEc2Client) DescribeVpcEndpoints(arg0 context.Context, arg1 *ec2.DescribeVpcEndpointsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpoints", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpoints indicates an expected call of DescribeVpcEndpoints.
func (mr *MockEc2ClientMockRecorder) DescribeVpcEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpoints", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcEndpoints), varargs...)
}

// DescribeVpcPeeringConnections mocks base method.
func (m *MockEc2Client) DescribeVpcPeeringConnections(arg0 context.Context, arg1 *ec2.DescribeVpcPeeringConnectionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcPeeringConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcPeeringConnections", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcPeeringConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcPeeringConnections indicates an expected call of DescribeVpcPeeringConnections.
func (mr *MockEc2ClientMockRecorder) DescribeVpcPeeringConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcPeeringConnections", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcPeeringConnections), varargs...)
}

// DescribeVpcs mocks base method.
func (m *MockEc2Client) DescribeVpcs(arg0 context.Context, arg1 *ec2.DescribeVpcsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcs", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpcsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcs indicates an expected call of DescribeVpcs.
func (mr *MockEc2ClientMockRecorder) DescribeVpcs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcs", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpcs), varargs...)
}

// DescribeVpnConnections mocks base method.
func (m *MockEc2Client) DescribeVpnConnections(arg0 context.Context, arg1 *ec2.DescribeVpnConnectionsInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpnConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpnConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpnConnections", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpnConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpnConnections indicates an expected call of DescribeVpnConnections.
func (mr *MockEc2ClientMockRecorder) DescribeVpnConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpnConnections", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpnConnections), varargs...)
}

// DescribeVpnGateways mocks base method.
func (m *MockEc2Client) DescribeVpnGateways(arg0 context.Context, arg1 *ec2.DescribeVpnGatewaysInput, arg2 ...func(*ec2.Options)) (*ec2.DescribeVpnGatewaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpnGateways")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpnGateways", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeVpnGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpnGateways indicates an expected call of DescribeVpnGateways.
func (mr *MockEc2ClientMockRecorder) DescribeVpnGateways(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpnGateways", reflect.TypeOf((*MockEc2Client)(nil).DescribeVpnGateways), varargs...)
}

// GetAssociatedEnclaveCertificateIamRoles mocks base method.
func (m *MockEc2Client) GetAssociatedEnclaveCertificateIamRoles(arg0 context.Context, arg1 *ec2.GetAssociatedEnclaveCertificateIamRolesInput, arg2 ...func(*ec2.Options)) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAssociatedEnclaveCertificateIamRoles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssociatedEnclaveCertificateIamRoles", varargs...)
	ret0, _ := ret[0].(*ec2.GetAssociatedEnclaveCertificateIamRolesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociatedEnclaveCertificateIamRoles indicates an expected call of GetAssociatedEnclaveCertificateIamRoles.
func (mr *MockEc2ClientMockRecorder) GetAssociatedEnclaveCertificateIamRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedEnclaveCertificateIamRoles", reflect.TypeOf((*MockEc2Client)(nil).GetAssociatedEnclaveCertificateIamRoles), varargs...)
}

// GetAssociatedIpv6PoolCidrs mocks base method.
func (m *MockEc2Client) GetAssociatedIpv6PoolCidrs(arg0 context.Context, arg1 *ec2.GetAssociatedIpv6PoolCidrsInput, arg2 ...func(*ec2.Options)) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAssociatedIpv6PoolCidrs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssociatedIpv6PoolCidrs", varargs...)
	ret0, _ := ret[0].(*ec2.GetAssociatedIpv6PoolCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociatedIpv6PoolCidrs indicates an expected call of GetAssociatedIpv6PoolCidrs.
func (mr *MockEc2ClientMockRecorder) GetAssociatedIpv6PoolCidrs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedIpv6PoolCidrs", reflect.TypeOf((*MockEc2Client)(nil).GetAssociatedIpv6PoolCidrs), varargs...)
}

// GetAwsNetworkPerformanceData mocks base method.
func (m *MockEc2Client) GetAwsNetworkPerformanceData(arg0 context.Context, arg1 *ec2.GetAwsNetworkPerformanceDataInput, arg2 ...func(*ec2.Options)) (*ec2.GetAwsNetworkPerformanceDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAwsNetworkPerformanceData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAwsNetworkPerformanceData", varargs...)
	ret0, _ := ret[0].(*ec2.GetAwsNetworkPerformanceDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAwsNetworkPerformanceData indicates an expected call of GetAwsNetworkPerformanceData.
func (mr *MockEc2ClientMockRecorder) GetAwsNetworkPerformanceData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAwsNetworkPerformanceData", reflect.TypeOf((*MockEc2Client)(nil).GetAwsNetworkPerformanceData), varargs...)
}

// GetCapacityReservationUsage mocks base method.
func (m *MockEc2Client) GetCapacityReservationUsage(arg0 context.Context, arg1 *ec2.GetCapacityReservationUsageInput, arg2 ...func(*ec2.Options)) (*ec2.GetCapacityReservationUsageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCapacityReservationUsage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCapacityReservationUsage", varargs...)
	ret0, _ := ret[0].(*ec2.GetCapacityReservationUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacityReservationUsage indicates an expected call of GetCapacityReservationUsage.
func (mr *MockEc2ClientMockRecorder) GetCapacityReservationUsage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacityReservationUsage", reflect.TypeOf((*MockEc2Client)(nil).GetCapacityReservationUsage), varargs...)
}

// GetCoipPoolUsage mocks base method.
func (m *MockEc2Client) GetCoipPoolUsage(arg0 context.Context, arg1 *ec2.GetCoipPoolUsageInput, arg2 ...func(*ec2.Options)) (*ec2.GetCoipPoolUsageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCoipPoolUsage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoipPoolUsage", varargs...)
	ret0, _ := ret[0].(*ec2.GetCoipPoolUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoipPoolUsage indicates an expected call of GetCoipPoolUsage.
func (mr *MockEc2ClientMockRecorder) GetCoipPoolUsage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoipPoolUsage", reflect.TypeOf((*MockEc2Client)(nil).GetCoipPoolUsage), varargs...)
}

// GetConsoleOutput mocks base method.
func (m *MockEc2Client) GetConsoleOutput(arg0 context.Context, arg1 *ec2.GetConsoleOutputInput, arg2 ...func(*ec2.Options)) (*ec2.GetConsoleOutputOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConsoleOutput")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsoleOutput", varargs...)
	ret0, _ := ret[0].(*ec2.GetConsoleOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsoleOutput indicates an expected call of GetConsoleOutput.
func (mr *MockEc2ClientMockRecorder) GetConsoleOutput(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsoleOutput", reflect.TypeOf((*MockEc2Client)(nil).GetConsoleOutput), varargs...)
}

// GetConsoleScreenshot mocks base method.
func (m *MockEc2Client) GetConsoleScreenshot(arg0 context.Context, arg1 *ec2.GetConsoleScreenshotInput, arg2 ...func(*ec2.Options)) (*ec2.GetConsoleScreenshotOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConsoleScreenshot")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsoleScreenshot", varargs...)
	ret0, _ := ret[0].(*ec2.GetConsoleScreenshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsoleScreenshot indicates an expected call of GetConsoleScreenshot.
func (mr *MockEc2ClientMockRecorder) GetConsoleScreenshot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsoleScreenshot", reflect.TypeOf((*MockEc2Client)(nil).GetConsoleScreenshot), varargs...)
}

// GetDefaultCreditSpecification mocks base method.
func (m *MockEc2Client) GetDefaultCreditSpecification(arg0 context.Context, arg1 *ec2.GetDefaultCreditSpecificationInput, arg2 ...func(*ec2.Options)) (*ec2.GetDefaultCreditSpecificationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDefaultCreditSpecification")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultCreditSpecification", varargs...)
	ret0, _ := ret[0].(*ec2.GetDefaultCreditSpecificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCreditSpecification indicates an expected call of GetDefaultCreditSpecification.
func (mr *MockEc2ClientMockRecorder) GetDefaultCreditSpecification(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCreditSpecification", reflect.TypeOf((*MockEc2Client)(nil).GetDefaultCreditSpecification), varargs...)
}

// GetEbsDefaultKmsKeyId mocks base method.
func (m *MockEc2Client) GetEbsDefaultKmsKeyId(arg0 context.Context, arg1 *ec2.GetEbsDefaultKmsKeyIdInput, arg2 ...func(*ec2.Options)) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEbsDefaultKmsKeyId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEbsDefaultKmsKeyId", varargs...)
	ret0, _ := ret[0].(*ec2.GetEbsDefaultKmsKeyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEbsDefaultKmsKeyId indicates an expected call of GetEbsDefaultKmsKeyId.
func (mr *MockEc2ClientMockRecorder) GetEbsDefaultKmsKeyId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEbsDefaultKmsKeyId", reflect.TypeOf((*MockEc2Client)(nil).GetEbsDefaultKmsKeyId), varargs...)
}

// GetEbsEncryptionByDefault mocks base method.
func (m *MockEc2Client) GetEbsEncryptionByDefault(arg0 context.Context, arg1 *ec2.GetEbsEncryptionByDefaultInput, arg2 ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEbsEncryptionByDefault")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEbsEncryptionByDefault", varargs...)
	ret0, _ := ret[0].(*ec2.GetEbsEncryptionByDefaultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEbsEncryptionByDefault indicates an expected call of GetEbsEncryptionByDefault.
func (mr *MockEc2ClientMockRecorder) GetEbsEncryptionByDefault(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEbsEncryptionByDefault", reflect.TypeOf((*MockEc2Client)(nil).GetEbsEncryptionByDefault), varargs...)
}

// GetFlowLogsIntegrationTemplate mocks base method.
func (m *MockEc2Client) GetFlowLogsIntegrationTemplate(arg0 context.Context, arg1 *ec2.GetFlowLogsIntegrationTemplateInput, arg2 ...func(*ec2.Options)) (*ec2.GetFlowLogsIntegrationTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFlowLogsIntegrationTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlowLogsIntegrationTemplate", varargs...)
	ret0, _ := ret[0].(*ec2.GetFlowLogsIntegrationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowLogsIntegrationTemplate indicates an expected call of GetFlowLogsIntegrationTemplate.
func (mr *MockEc2ClientMockRecorder) GetFlowLogsIntegrationTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowLogsIntegrationTemplate", reflect.TypeOf((*MockEc2Client)(nil).GetFlowLogsIntegrationTemplate), varargs...)
}

// GetGroupsForCapacityReservation mocks base method.
func (m *MockEc2Client) GetGroupsForCapacityReservation(arg0 context.Context, arg1 *ec2.GetGroupsForCapacityReservationInput, arg2 ...func(*ec2.Options)) (*ec2.GetGroupsForCapacityReservationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGroupsForCapacityReservation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupsForCapacityReservation", varargs...)
	ret0, _ := ret[0].(*ec2.GetGroupsForCapacityReservationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsForCapacityReservation indicates an expected call of GetGroupsForCapacityReservation.
func (mr *MockEc2ClientMockRecorder) GetGroupsForCapacityReservation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsForCapacityReservation", reflect.TypeOf((*MockEc2Client)(nil).GetGroupsForCapacityReservation), varargs...)
}

// GetHostReservationPurchasePreview mocks base method.
func (m *MockEc2Client) GetHostReservationPurchasePreview(arg0 context.Context, arg1 *ec2.GetHostReservationPurchasePreviewInput, arg2 ...func(*ec2.Options)) (*ec2.GetHostReservationPurchasePreviewOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHostReservationPurchasePreview")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostReservationPurchasePreview", varargs...)
	ret0, _ := ret[0].(*ec2.GetHostReservationPurchasePreviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostReservationPurchasePreview indicates an expected call of GetHostReservationPurchasePreview.
func (mr *MockEc2ClientMockRecorder) GetHostReservationPurchasePreview(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostReservationPurchasePreview", reflect.TypeOf((*MockEc2Client)(nil).GetHostReservationPurchasePreview), varargs...)
}

// GetInstanceTypesFromInstanceRequirements mocks base method.
func (m *MockEc2Client) GetInstanceTypesFromInstanceRequirements(arg0 context.Context, arg1 *ec2.GetInstanceTypesFromInstanceRequirementsInput, arg2 ...func(*ec2.Options)) (*ec2.GetInstanceTypesFromInstanceRequirementsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceTypesFromInstanceRequirements")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceTypesFromInstanceRequirements", varargs...)
	ret0, _ := ret[0].(*ec2.GetInstanceTypesFromInstanceRequirementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTypesFromInstanceRequirements indicates an expected call of GetInstanceTypesFromInstanceRequirements.
func (mr *MockEc2ClientMockRecorder) GetInstanceTypesFromInstanceRequirements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTypesFromInstanceRequirements", reflect.TypeOf((*MockEc2Client)(nil).GetInstanceTypesFromInstanceRequirements), varargs...)
}

// GetInstanceUefiData mocks base method.
func (m *MockEc2Client) GetInstanceUefiData(arg0 context.Context, arg1 *ec2.GetInstanceUefiDataInput, arg2 ...func(*ec2.Options)) (*ec2.GetInstanceUefiDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceUefiData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceUefiData", varargs...)
	ret0, _ := ret[0].(*ec2.GetInstanceUefiDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceUefiData indicates an expected call of GetInstanceUefiData.
func (mr *MockEc2ClientMockRecorder) GetInstanceUefiData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceUefiData", reflect.TypeOf((*MockEc2Client)(nil).GetInstanceUefiData), varargs...)
}

// GetIpamAddressHistory mocks base method.
func (m *MockEc2Client) GetIpamAddressHistory(arg0 context.Context, arg1 *ec2.GetIpamAddressHistoryInput, arg2 ...func(*ec2.Options)) (*ec2.GetIpamAddressHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIpamAddressHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpamAddressHistory", varargs...)
	ret0, _ := ret[0].(*ec2.GetIpamAddressHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpamAddressHistory indicates an expected call of GetIpamAddressHistory.
func (mr *MockEc2ClientMockRecorder) GetIpamAddressHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamAddressHistory", reflect.TypeOf((*MockEc2Client)(nil).GetIpamAddressHistory), varargs...)
}

// GetIpamDiscoveredAccounts mocks base method.
func (m *MockEc2Client) GetIpamDiscoveredAccounts(arg0 context.Context, arg1 *ec2.GetIpamDiscoveredAccountsInput, arg2 ...func(*ec2.Options)) (*ec2.GetIpamDiscoveredAccountsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIpamDiscoveredAccounts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpamDiscoveredAccounts", varargs...)
	ret0, _ := ret[0].(*ec2.GetIpamDiscoveredAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpamDiscoveredAccounts indicates an expected call of GetIpamDiscoveredAccounts.
func (mr *MockEc2ClientMockRecorder) GetIpamDiscoveredAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamDiscoveredAccounts", reflect.TypeOf((*MockEc2Client)(nil).GetIpamDiscoveredAccounts), varargs...)
}

// GetIpamDiscoveredResourceCidrs mocks base method.
func (m *MockEc2Client) GetIpamDiscoveredResourceCidrs(arg0 context.Context, arg1 *ec2.GetIpamDiscoveredResourceCidrsInput, arg2 ...func(*ec2.Options)) (*ec2.GetIpamDiscoveredResourceCidrsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIpamDiscoveredResourceCidrs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpamDiscoveredResourceCidrs", varargs...)
	ret0, _ := ret[0].(*ec2.GetIpamDiscoveredResourceCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpamDiscoveredResourceCidrs indicates an expected call of GetIpamDiscoveredResourceCidrs.
func (mr *MockEc2ClientMockRecorder) GetIpamDiscoveredResourceCidrs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamDiscoveredResourceCidrs", reflect.TypeOf((*MockEc2Client)(nil).GetIpamDiscoveredResourceCidrs), varargs...)
}

// GetIpamPoolAllocations mocks base method.
func (m *MockEc2Client) GetIpamPoolAllocations(arg0 context.Context, arg1 *ec2.GetIpamPoolAllocationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetIpamPoolAllocationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIpamPoolAllocations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpamPoolAllocations", varargs...)
	ret0, _ := ret[0].(*ec2.GetIpamPoolAllocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpamPoolAllocations indicates an expected call of GetIpamPoolAllocations.
func (mr *MockEc2ClientMockRecorder) GetIpamPoolAllocations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamPoolAllocations", reflect.TypeOf((*MockEc2Client)(nil).GetIpamPoolAllocations), varargs...)
}

// GetIpamPoolCidrs mocks base method.
func (m *MockEc2Client) GetIpamPoolCidrs(arg0 context.Context, arg1 *ec2.GetIpamPoolCidrsInput, arg2 ...func(*ec2.Options)) (*ec2.GetIpamPoolCidrsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIpamPoolCidrs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpamPoolCidrs", varargs...)
	ret0, _ := ret[0].(*ec2.GetIpamPoolCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpamPoolCidrs indicates an expected call of GetIpamPoolCidrs.
func (mr *MockEc2ClientMockRecorder) GetIpamPoolCidrs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamPoolCidrs", reflect.TypeOf((*MockEc2Client)(nil).GetIpamPoolCidrs), varargs...)
}

// GetIpamResourceCidrs mocks base method.
func (m *MockEc2Client) GetIpamResourceCidrs(arg0 context.Context, arg1 *ec2.GetIpamResourceCidrsInput, arg2 ...func(*ec2.Options)) (*ec2.GetIpamResourceCidrsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIpamResourceCidrs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpamResourceCidrs", varargs...)
	ret0, _ := ret[0].(*ec2.GetIpamResourceCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpamResourceCidrs indicates an expected call of GetIpamResourceCidrs.
func (mr *MockEc2ClientMockRecorder) GetIpamResourceCidrs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpamResourceCidrs", reflect.TypeOf((*MockEc2Client)(nil).GetIpamResourceCidrs), varargs...)
}

// GetLaunchTemplateData mocks base method.
func (m *MockEc2Client) GetLaunchTemplateData(arg0 context.Context, arg1 *ec2.GetLaunchTemplateDataInput, arg2 ...func(*ec2.Options)) (*ec2.GetLaunchTemplateDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLaunchTemplateData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchTemplateData", varargs...)
	ret0, _ := ret[0].(*ec2.GetLaunchTemplateDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchTemplateData indicates an expected call of GetLaunchTemplateData.
func (mr *MockEc2ClientMockRecorder) GetLaunchTemplateData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchTemplateData", reflect.TypeOf((*MockEc2Client)(nil).GetLaunchTemplateData), varargs...)
}

// GetManagedPrefixListAssociations mocks base method.
func (m *MockEc2Client) GetManagedPrefixListAssociations(arg0 context.Context, arg1 *ec2.GetManagedPrefixListAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetManagedPrefixListAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetManagedPrefixListAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagedPrefixListAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.GetManagedPrefixListAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedPrefixListAssociations indicates an expected call of GetManagedPrefixListAssociations.
func (mr *MockEc2ClientMockRecorder) GetManagedPrefixListAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedPrefixListAssociations", reflect.TypeOf((*MockEc2Client)(nil).GetManagedPrefixListAssociations), varargs...)
}

// GetManagedPrefixListEntries mocks base method.
func (m *MockEc2Client) GetManagedPrefixListEntries(arg0 context.Context, arg1 *ec2.GetManagedPrefixListEntriesInput, arg2 ...func(*ec2.Options)) (*ec2.GetManagedPrefixListEntriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetManagedPrefixListEntries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagedPrefixListEntries", varargs...)
	ret0, _ := ret[0].(*ec2.GetManagedPrefixListEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedPrefixListEntries indicates an expected call of GetManagedPrefixListEntries.
func (mr *MockEc2ClientMockRecorder) GetManagedPrefixListEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedPrefixListEntries", reflect.TypeOf((*MockEc2Client)(nil).GetManagedPrefixListEntries), varargs...)
}

// GetNetworkInsightsAccessScopeAnalysisFindings mocks base method.
func (m *MockEc2Client) GetNetworkInsightsAccessScopeAnalysisFindings(arg0 context.Context, arg1 *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput, arg2 ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeAnalysisFindingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkInsightsAccessScopeAnalysisFindings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkInsightsAccessScopeAnalysisFindings", varargs...)
	ret0, _ := ret[0].(*ec2.GetNetworkInsightsAccessScopeAnalysisFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInsightsAccessScopeAnalysisFindings indicates an expected call of GetNetworkInsightsAccessScopeAnalysisFindings.
func (mr *MockEc2ClientMockRecorder) GetNetworkInsightsAccessScopeAnalysisFindings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInsightsAccessScopeAnalysisFindings", reflect.TypeOf((*MockEc2Client)(nil).GetNetworkInsightsAccessScopeAnalysisFindings), varargs...)
}

// GetNetworkInsightsAccessScopeContent mocks base method.
func (m *MockEc2Client) GetNetworkInsightsAccessScopeContent(arg0 context.Context, arg1 *ec2.GetNetworkInsightsAccessScopeContentInput, arg2 ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeContentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkInsightsAccessScopeContent")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkInsightsAccessScopeContent", varargs...)
	ret0, _ := ret[0].(*ec2.GetNetworkInsightsAccessScopeContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInsightsAccessScopeContent indicates an expected call of GetNetworkInsightsAccessScopeContent.
func (mr *MockEc2ClientMockRecorder) GetNetworkInsightsAccessScopeContent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInsightsAccessScopeContent", reflect.TypeOf((*MockEc2Client)(nil).GetNetworkInsightsAccessScopeContent), varargs...)
}

// GetPasswordData mocks base method.
func (m *MockEc2Client) GetPasswordData(arg0 context.Context, arg1 *ec2.GetPasswordDataInput, arg2 ...func(*ec2.Options)) (*ec2.GetPasswordDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPasswordData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPasswordData", varargs...)
	ret0, _ := ret[0].(*ec2.GetPasswordDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordData indicates an expected call of GetPasswordData.
func (mr *MockEc2ClientMockRecorder) GetPasswordData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordData", reflect.TypeOf((*MockEc2Client)(nil).GetPasswordData), varargs...)
}

// GetReservedInstancesExchangeQuote mocks base method.
func (m *MockEc2Client) GetReservedInstancesExchangeQuote(arg0 context.Context, arg1 *ec2.GetReservedInstancesExchangeQuoteInput, arg2 ...func(*ec2.Options)) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReservedInstancesExchangeQuote")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReservedInstancesExchangeQuote", varargs...)
	ret0, _ := ret[0].(*ec2.GetReservedInstancesExchangeQuoteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservedInstancesExchangeQuote indicates an expected call of GetReservedInstancesExchangeQuote.
func (mr *MockEc2ClientMockRecorder) GetReservedInstancesExchangeQuote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservedInstancesExchangeQuote", reflect.TypeOf((*MockEc2Client)(nil).GetReservedInstancesExchangeQuote), varargs...)
}

// GetSerialConsoleAccessStatus mocks base method.
func (m *MockEc2Client) GetSerialConsoleAccessStatus(arg0 context.Context, arg1 *ec2.GetSerialConsoleAccessStatusInput, arg2 ...func(*ec2.Options)) (*ec2.GetSerialConsoleAccessStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSerialConsoleAccessStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSerialConsoleAccessStatus", varargs...)
	ret0, _ := ret[0].(*ec2.GetSerialConsoleAccessStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSerialConsoleAccessStatus indicates an expected call of GetSerialConsoleAccessStatus.
func (mr *MockEc2ClientMockRecorder) GetSerialConsoleAccessStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerialConsoleAccessStatus", reflect.TypeOf((*MockEc2Client)(nil).GetSerialConsoleAccessStatus), varargs...)
}

// GetSpotPlacementScores mocks base method.
func (m *MockEc2Client) GetSpotPlacementScores(arg0 context.Context, arg1 *ec2.GetSpotPlacementScoresInput, arg2 ...func(*ec2.Options)) (*ec2.GetSpotPlacementScoresOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSpotPlacementScores")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpotPlacementScores", varargs...)
	ret0, _ := ret[0].(*ec2.GetSpotPlacementScoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotPlacementScores indicates an expected call of GetSpotPlacementScores.
func (mr *MockEc2ClientMockRecorder) GetSpotPlacementScores(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotPlacementScores", reflect.TypeOf((*MockEc2Client)(nil).GetSpotPlacementScores), varargs...)
}

// GetSubnetCidrReservations mocks base method.
func (m *MockEc2Client) GetSubnetCidrReservations(arg0 context.Context, arg1 *ec2.GetSubnetCidrReservationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetSubnetCidrReservationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSubnetCidrReservations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubnetCidrReservations", varargs...)
	ret0, _ := ret[0].(*ec2.GetSubnetCidrReservationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetCidrReservations indicates an expected call of GetSubnetCidrReservations.
func (mr *MockEc2ClientMockRecorder) GetSubnetCidrReservations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetCidrReservations", reflect.TypeOf((*MockEc2Client)(nil).GetSubnetCidrReservations), varargs...)
}

// GetTransitGatewayAttachmentPropagations mocks base method.
func (m *MockEc2Client) GetTransitGatewayAttachmentPropagations(arg0 context.Context, arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayAttachmentPropagations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayAttachmentPropagations", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayAttachmentPropagations indicates an expected call of GetTransitGatewayAttachmentPropagations.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayAttachmentPropagations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayAttachmentPropagations", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayAttachmentPropagations), varargs...)
}

// GetTransitGatewayMulticastDomainAssociations mocks base method.
func (m *MockEc2Client) GetTransitGatewayMulticastDomainAssociations(arg0 context.Context, arg1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayMulticastDomainAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayMulticastDomainAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayMulticastDomainAssociations indicates an expected call of GetTransitGatewayMulticastDomainAssociations.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayMulticastDomainAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayMulticastDomainAssociations", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayMulticastDomainAssociations), varargs...)
}

// GetTransitGatewayPolicyTableAssociations mocks base method.
func (m *MockEc2Client) GetTransitGatewayPolicyTableAssociations(arg0 context.Context, arg1 *ec2.GetTransitGatewayPolicyTableAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayPolicyTableAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayPolicyTableAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayPolicyTableAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayPolicyTableAssociations indicates an expected call of GetTransitGatewayPolicyTableAssociations.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayPolicyTableAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayPolicyTableAssociations", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayPolicyTableAssociations), varargs...)
}

// GetTransitGatewayPolicyTableEntries mocks base method.
func (m *MockEc2Client) GetTransitGatewayPolicyTableEntries(arg0 context.Context, arg1 *ec2.GetTransitGatewayPolicyTableEntriesInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableEntriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayPolicyTableEntries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayPolicyTableEntries", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayPolicyTableEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayPolicyTableEntries indicates an expected call of GetTransitGatewayPolicyTableEntries.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayPolicyTableEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayPolicyTableEntries", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayPolicyTableEntries), varargs...)
}

// GetTransitGatewayPrefixListReferences mocks base method.
func (m *MockEc2Client) GetTransitGatewayPrefixListReferences(arg0 context.Context, arg1 *ec2.GetTransitGatewayPrefixListReferencesInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayPrefixListReferences")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayPrefixListReferences", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayPrefixListReferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayPrefixListReferences indicates an expected call of GetTransitGatewayPrefixListReferences.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayPrefixListReferences(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayPrefixListReferences", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayPrefixListReferences), varargs...)
}

// GetTransitGatewayRouteTableAssociations mocks base method.
func (m *MockEc2Client) GetTransitGatewayRouteTableAssociations(arg0 context.Context, arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayRouteTableAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayRouteTableAssociations", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayRouteTableAssociations indicates an expected call of GetTransitGatewayRouteTableAssociations.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayRouteTableAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRouteTableAssociations", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayRouteTableAssociations), varargs...)
}

// GetTransitGatewayRouteTablePropagations mocks base method.
func (m *MockEc2Client) GetTransitGatewayRouteTablePropagations(arg0 context.Context, arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput, arg2 ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayRouteTablePropagations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayRouteTablePropagations", varargs...)
	ret0, _ := ret[0].(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayRouteTablePropagations indicates an expected call of GetTransitGatewayRouteTablePropagations.
func (mr *MockEc2ClientMockRecorder) GetTransitGatewayRouteTablePropagations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRouteTablePropagations", reflect.TypeOf((*MockEc2Client)(nil).GetTransitGatewayRouteTablePropagations), varargs...)
}

// GetVerifiedAccessEndpointPolicy mocks base method.
func (m *MockEc2Client) GetVerifiedAccessEndpointPolicy(arg0 context.Context, arg1 *ec2.GetVerifiedAccessEndpointPolicyInput, arg2 ...func(*ec2.Options)) (*ec2.GetVerifiedAccessEndpointPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVerifiedAccessEndpointPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVerifiedAccessEndpointPolicy", varargs...)
	ret0, _ := ret[0].(*ec2.GetVerifiedAccessEndpointPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedAccessEndpointPolicy indicates an expected call of GetVerifiedAccessEndpointPolicy.
func (mr *MockEc2ClientMockRecorder) GetVerifiedAccessEndpointPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedAccessEndpointPolicy", reflect.TypeOf((*MockEc2Client)(nil).GetVerifiedAccessEndpointPolicy), varargs...)
}

// GetVerifiedAccessGroupPolicy mocks base method.
func (m *MockEc2Client) GetVerifiedAccessGroupPolicy(arg0 context.Context, arg1 *ec2.GetVerifiedAccessGroupPolicyInput, arg2 ...func(*ec2.Options)) (*ec2.GetVerifiedAccessGroupPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVerifiedAccessGroupPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVerifiedAccessGroupPolicy", varargs...)
	ret0, _ := ret[0].(*ec2.GetVerifiedAccessGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedAccessGroupPolicy indicates an expected call of GetVerifiedAccessGroupPolicy.
func (mr *MockEc2ClientMockRecorder) GetVerifiedAccessGroupPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedAccessGroupPolicy", reflect.TypeOf((*MockEc2Client)(nil).GetVerifiedAccessGroupPolicy), varargs...)
}

// GetVpnConnectionDeviceSampleConfiguration mocks base method.
func (m *MockEc2Client) GetVpnConnectionDeviceSampleConfiguration(arg0 context.Context, arg1 *ec2.GetVpnConnectionDeviceSampleConfigurationInput, arg2 ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceSampleConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpnConnectionDeviceSampleConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnConnectionDeviceSampleConfiguration", varargs...)
	ret0, _ := ret[0].(*ec2.GetVpnConnectionDeviceSampleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpnConnectionDeviceSampleConfiguration indicates an expected call of GetVpnConnectionDeviceSampleConfiguration.
func (mr *MockEc2ClientMockRecorder) GetVpnConnectionDeviceSampleConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnConnectionDeviceSampleConfiguration", reflect.TypeOf((*MockEc2Client)(nil).GetVpnConnectionDeviceSampleConfiguration), varargs...)
}

// GetVpnConnectionDeviceTypes mocks base method.
func (m *MockEc2Client) GetVpnConnectionDeviceTypes(arg0 context.Context, arg1 *ec2.GetVpnConnectionDeviceTypesInput, arg2 ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpnConnectionDeviceTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnConnectionDeviceTypes", varargs...)
	ret0, _ := ret[0].(*ec2.GetVpnConnectionDeviceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpnConnectionDeviceTypes indicates an expected call of GetVpnConnectionDeviceTypes.
func (mr *MockEc2ClientMockRecorder) GetVpnConnectionDeviceTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnConnectionDeviceTypes", reflect.TypeOf((*MockEc2Client)(nil).GetVpnConnectionDeviceTypes), varargs...)
}

// GetVpnTunnelReplacementStatus mocks base method.
func (m *MockEc2Client) GetVpnTunnelReplacementStatus(arg0 context.Context, arg1 *ec2.GetVpnTunnelReplacementStatusInput, arg2 ...func(*ec2.Options)) (*ec2.GetVpnTunnelReplacementStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpnTunnelReplacementStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpnTunnelReplacementStatus", varargs...)
	ret0, _ := ret[0].(*ec2.GetVpnTunnelReplacementStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpnTunnelReplacementStatus indicates an expected call of GetVpnTunnelReplacementStatus.
func (mr *MockEc2ClientMockRecorder) GetVpnTunnelReplacementStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpnTunnelReplacementStatus", reflect.TypeOf((*MockEc2Client)(nil).GetVpnTunnelReplacementStatus), varargs...)
}

// ListImagesInRecycleBin mocks base method.
func (m *MockEc2Client) ListImagesInRecycleBin(arg0 context.Context, arg1 *ec2.ListImagesInRecycleBinInput, arg2 ...func(*ec2.Options)) (*ec2.ListImagesInRecycleBinOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListImagesInRecycleBin")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImagesInRecycleBin", varargs...)
	ret0, _ := ret[0].(*ec2.ListImagesInRecycleBinOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImagesInRecycleBin indicates an expected call of ListImagesInRecycleBin.
func (mr *MockEc2ClientMockRecorder) ListImagesInRecycleBin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImagesInRecycleBin", reflect.TypeOf((*MockEc2Client)(nil).ListImagesInRecycleBin), varargs...)
}

// ListSnapshotsInRecycleBin mocks base method.
func (m *MockEc2Client) ListSnapshotsInRecycleBin(arg0 context.Context, arg1 *ec2.ListSnapshotsInRecycleBinInput, arg2 ...func(*ec2.Options)) (*ec2.ListSnapshotsInRecycleBinOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSnapshotsInRecycleBin")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSnapshotsInRecycleBin", varargs...)
	ret0, _ := ret[0].(*ec2.ListSnapshotsInRecycleBinOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotsInRecycleBin indicates an expected call of ListSnapshotsInRecycleBin.
func (mr *MockEc2ClientMockRecorder) ListSnapshotsInRecycleBin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsInRecycleBin", reflect.TypeOf((*MockEc2Client)(nil).ListSnapshotsInRecycleBin), varargs...)
}

// SearchLocalGatewayRoutes mocks base method.
func (m *MockEc2Client) SearchLocalGatewayRoutes(arg0 context.Context, arg1 *ec2.SearchLocalGatewayRoutesInput, arg2 ...func(*ec2.Options)) (*ec2.SearchLocalGatewayRoutesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchLocalGatewayRoutes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchLocalGatewayRoutes", varargs...)
	ret0, _ := ret[0].(*ec2.SearchLocalGatewayRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLocalGatewayRoutes indicates an expected call of SearchLocalGatewayRoutes.
func (mr *MockEc2ClientMockRecorder) SearchLocalGatewayRoutes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLocalGatewayRoutes", reflect.TypeOf((*MockEc2Client)(nil).SearchLocalGatewayRoutes), varargs...)
}

// SearchTransitGatewayMulticastGroups mocks base method.
func (m *MockEc2Client) SearchTransitGatewayMulticastGroups(arg0 context.Context, arg1 *ec2.SearchTransitGatewayMulticastGroupsInput, arg2 ...func(*ec2.Options)) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchTransitGatewayMulticastGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTransitGatewayMulticastGroups", varargs...)
	ret0, _ := ret[0].(*ec2.SearchTransitGatewayMulticastGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransitGatewayMulticastGroups indicates an expected call of SearchTransitGatewayMulticastGroups.
func (mr *MockEc2ClientMockRecorder) SearchTransitGatewayMulticastGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransitGatewayMulticastGroups", reflect.TypeOf((*MockEc2Client)(nil).SearchTransitGatewayMulticastGroups), varargs...)
}

// SearchTransitGatewayRoutes mocks base method.
func (m *MockEc2Client) SearchTransitGatewayRoutes(arg0 context.Context, arg1 *ec2.SearchTransitGatewayRoutesInput, arg2 ...func(*ec2.Options)) (*ec2.SearchTransitGatewayRoutesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ec2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchTransitGatewayRoutes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTransitGatewayRoutes", varargs...)
	ret0, _ := ret[0].(*ec2.SearchTransitGatewayRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransitGatewayRoutes indicates an expected call of SearchTransitGatewayRoutes.
func (mr *MockEc2ClientMockRecorder) SearchTransitGatewayRoutes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransitGatewayRoutes", reflect.TypeOf((*MockEc2Client)(nil).SearchTransitGatewayRoutes), varargs...)
}
