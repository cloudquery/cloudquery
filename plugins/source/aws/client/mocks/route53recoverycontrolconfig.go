// Code generated by MockGen. DO NOT EDIT.
// Source: route53recoverycontrolconfig.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	route53recoverycontrolconfig "github.com/aws/aws-sdk-go-v2/service/route53recoverycontrolconfig"
	gomock "github.com/golang/mock/gomock"
)

// MockRoute53recoverycontrolconfigClient is a mock of Route53recoverycontrolconfigClient interface.
type MockRoute53recoverycontrolconfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53recoverycontrolconfigClientMockRecorder
}

// MockRoute53recoverycontrolconfigClientMockRecorder is the mock recorder for MockRoute53recoverycontrolconfigClient.
type MockRoute53recoverycontrolconfigClientMockRecorder struct {
	mock *MockRoute53recoverycontrolconfigClient
}

// NewMockRoute53recoverycontrolconfigClient creates a new mock instance.
func NewMockRoute53recoverycontrolconfigClient(ctrl *gomock.Controller) *MockRoute53recoverycontrolconfigClient {
	mock := &MockRoute53recoverycontrolconfigClient{ctrl: ctrl}
	mock.recorder = &MockRoute53recoverycontrolconfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute53recoverycontrolconfigClient) EXPECT() *MockRoute53recoverycontrolconfigClientMockRecorder {
	return m.recorder
}

// DescribeCluster mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) DescribeCluster(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeClusterInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeClusterOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCluster")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCluster", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) DescribeCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).DescribeCluster), varargs...)
}

// DescribeControlPanel mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) DescribeControlPanel(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeControlPanelInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeControlPanelOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeControlPanel")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeControlPanel", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeControlPanel indicates an expected call of DescribeControlPanel.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) DescribeControlPanel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeControlPanel", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).DescribeControlPanel), varargs...)
}

// DescribeRoutingControl mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) DescribeRoutingControl(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeRoutingControlInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeRoutingControlOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRoutingControl")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRoutingControl", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingControl indicates an expected call of DescribeRoutingControl.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) DescribeRoutingControl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingControl", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).DescribeRoutingControl), varargs...)
}

// DescribeSafetyRule mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) DescribeSafetyRule(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeSafetyRuleInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeSafetyRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSafetyRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSafetyRule", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSafetyRule indicates an expected call of DescribeSafetyRule.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) DescribeSafetyRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSafetyRule", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).DescribeSafetyRule), varargs...)
}

// ListAssociatedRoute53HealthChecks mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) ListAssociatedRoute53HealthChecks(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssociatedRoute53HealthChecks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedRoute53HealthChecks", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedRoute53HealthChecks indicates an expected call of ListAssociatedRoute53HealthChecks.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) ListAssociatedRoute53HealthChecks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedRoute53HealthChecks", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).ListAssociatedRoute53HealthChecks), varargs...)
}

// ListClusters mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) ListClusters(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListClustersInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListClustersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListClusters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) ListClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).ListClusters), varargs...)
}

// ListControlPanels mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) ListControlPanels(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListControlPanelsInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListControlPanelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListControlPanels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlPanels", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListControlPanelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlPanels indicates an expected call of ListControlPanels.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) ListControlPanels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPanels", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).ListControlPanels), varargs...)
}

// ListRoutingControls mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) ListRoutingControls(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListRoutingControlsInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListRoutingControlsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRoutingControls")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingControls", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListRoutingControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingControls indicates an expected call of ListRoutingControls.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) ListRoutingControls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingControls", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).ListRoutingControls), varargs...)
}

// ListSafetyRules mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) ListSafetyRules(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListSafetyRulesInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListSafetyRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSafetyRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSafetyRules", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListSafetyRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSafetyRules indicates an expected call of ListSafetyRules.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) ListSafetyRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSafetyRules", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).ListSafetyRules), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRoute53recoverycontrolconfigClient) ListTagsForResource(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListTagsForResourceInput, arg2 ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoverycontrolconfig.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRoute53recoverycontrolconfigClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRoute53recoverycontrolconfigClient)(nil).ListTagsForResource), varargs...)
}
