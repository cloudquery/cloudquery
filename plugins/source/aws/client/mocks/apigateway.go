// Code generated by MockGen. DO NOT EDIT.
// Source: apigateway.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	apigateway "github.com/aws/aws-sdk-go-v2/service/apigateway"
	gomock "github.com/golang/mock/gomock"
)

// MockApigatewayClient is a mock of ApigatewayClient interface.
type MockApigatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockApigatewayClientMockRecorder
}

// MockApigatewayClientMockRecorder is the mock recorder for MockApigatewayClient.
type MockApigatewayClientMockRecorder struct {
	mock *MockApigatewayClient
}

// NewMockApigatewayClient creates a new mock instance.
func NewMockApigatewayClient(ctrl *gomock.Controller) *MockApigatewayClient {
	mock := &MockApigatewayClient{ctrl: ctrl}
	mock.recorder = &MockApigatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApigatewayClient) EXPECT() *MockApigatewayClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockApigatewayClient) GetAccount(arg0 context.Context, arg1 *apigateway.GetAccountInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetAccountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAccount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*apigateway.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockApigatewayClientMockRecorder) GetAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockApigatewayClient)(nil).GetAccount), varargs...)
}

// GetApiKey mocks base method.
func (m *MockApigatewayClient) GetApiKey(arg0 context.Context, arg1 *apigateway.GetApiKeyInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetApiKeyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApiKey")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKey", varargs...)
	ret0, _ := ret[0].(*apigateway.GetApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockApigatewayClientMockRecorder) GetApiKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockApigatewayClient)(nil).GetApiKey), varargs...)
}

// GetApiKeys mocks base method.
func (m *MockApigatewayClient) GetApiKeys(arg0 context.Context, arg1 *apigateway.GetApiKeysInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetApiKeysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApiKeys")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKeys", varargs...)
	ret0, _ := ret[0].(*apigateway.GetApiKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeys indicates an expected call of GetApiKeys.
func (mr *MockApigatewayClientMockRecorder) GetApiKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeys", reflect.TypeOf((*MockApigatewayClient)(nil).GetApiKeys), varargs...)
}

// GetAuthorizer mocks base method.
func (m *MockApigatewayClient) GetAuthorizer(arg0 context.Context, arg1 *apigateway.GetAuthorizerInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetAuthorizerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAuthorizer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizer", varargs...)
	ret0, _ := ret[0].(*apigateway.GetAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizer indicates an expected call of GetAuthorizer.
func (mr *MockApigatewayClientMockRecorder) GetAuthorizer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizer", reflect.TypeOf((*MockApigatewayClient)(nil).GetAuthorizer), varargs...)
}

// GetAuthorizers mocks base method.
func (m *MockApigatewayClient) GetAuthorizers(arg0 context.Context, arg1 *apigateway.GetAuthorizersInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetAuthorizersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAuthorizers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizers", varargs...)
	ret0, _ := ret[0].(*apigateway.GetAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizers indicates an expected call of GetAuthorizers.
func (mr *MockApigatewayClientMockRecorder) GetAuthorizers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizers", reflect.TypeOf((*MockApigatewayClient)(nil).GetAuthorizers), varargs...)
}

// GetBasePathMapping mocks base method.
func (m *MockApigatewayClient) GetBasePathMapping(arg0 context.Context, arg1 *apigateway.GetBasePathMappingInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetBasePathMappingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBasePathMapping")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasePathMapping", varargs...)
	ret0, _ := ret[0].(*apigateway.GetBasePathMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathMapping indicates an expected call of GetBasePathMapping.
func (mr *MockApigatewayClientMockRecorder) GetBasePathMapping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMapping", reflect.TypeOf((*MockApigatewayClient)(nil).GetBasePathMapping), varargs...)
}

// GetBasePathMappings mocks base method.
func (m *MockApigatewayClient) GetBasePathMappings(arg0 context.Context, arg1 *apigateway.GetBasePathMappingsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetBasePathMappingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBasePathMappings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasePathMappings", varargs...)
	ret0, _ := ret[0].(*apigateway.GetBasePathMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathMappings indicates an expected call of GetBasePathMappings.
func (mr *MockApigatewayClientMockRecorder) GetBasePathMappings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappings", reflect.TypeOf((*MockApigatewayClient)(nil).GetBasePathMappings), varargs...)
}

// GetClientCertificate mocks base method.
func (m *MockApigatewayClient) GetClientCertificate(arg0 context.Context, arg1 *apigateway.GetClientCertificateInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetClientCertificateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetClientCertificate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientCertificate", varargs...)
	ret0, _ := ret[0].(*apigateway.GetClientCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCertificate indicates an expected call of GetClientCertificate.
func (mr *MockApigatewayClientMockRecorder) GetClientCertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificate", reflect.TypeOf((*MockApigatewayClient)(nil).GetClientCertificate), varargs...)
}

// GetClientCertificates mocks base method.
func (m *MockApigatewayClient) GetClientCertificates(arg0 context.Context, arg1 *apigateway.GetClientCertificatesInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetClientCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetClientCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientCertificates", varargs...)
	ret0, _ := ret[0].(*apigateway.GetClientCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCertificates indicates an expected call of GetClientCertificates.
func (mr *MockApigatewayClientMockRecorder) GetClientCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificates", reflect.TypeOf((*MockApigatewayClient)(nil).GetClientCertificates), varargs...)
}

// GetDeployment mocks base method.
func (m *MockApigatewayClient) GetDeployment(arg0 context.Context, arg1 *apigateway.GetDeploymentInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDeploymentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeployment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployment", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockApigatewayClientMockRecorder) GetDeployment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockApigatewayClient)(nil).GetDeployment), varargs...)
}

// GetDeployments mocks base method.
func (m *MockApigatewayClient) GetDeployments(arg0 context.Context, arg1 *apigateway.GetDeploymentsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDeploymentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeployments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployments", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments.
func (mr *MockApigatewayClientMockRecorder) GetDeployments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockApigatewayClient)(nil).GetDeployments), varargs...)
}

// GetDocumentationPart mocks base method.
func (m *MockApigatewayClient) GetDocumentationPart(arg0 context.Context, arg1 *apigateway.GetDocumentationPartInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDocumentationPartOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDocumentationPart")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationPart", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDocumentationPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationPart indicates an expected call of GetDocumentationPart.
func (mr *MockApigatewayClientMockRecorder) GetDocumentationPart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationPart", reflect.TypeOf((*MockApigatewayClient)(nil).GetDocumentationPart), varargs...)
}

// GetDocumentationParts mocks base method.
func (m *MockApigatewayClient) GetDocumentationParts(arg0 context.Context, arg1 *apigateway.GetDocumentationPartsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDocumentationPartsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDocumentationParts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationParts", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDocumentationPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationParts indicates an expected call of GetDocumentationParts.
func (mr *MockApigatewayClientMockRecorder) GetDocumentationParts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationParts", reflect.TypeOf((*MockApigatewayClient)(nil).GetDocumentationParts), varargs...)
}

// GetDocumentationVersion mocks base method.
func (m *MockApigatewayClient) GetDocumentationVersion(arg0 context.Context, arg1 *apigateway.GetDocumentationVersionInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDocumentationVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDocumentationVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationVersion", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDocumentationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationVersion indicates an expected call of GetDocumentationVersion.
func (mr *MockApigatewayClientMockRecorder) GetDocumentationVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersion", reflect.TypeOf((*MockApigatewayClient)(nil).GetDocumentationVersion), varargs...)
}

// GetDocumentationVersions mocks base method.
func (m *MockApigatewayClient) GetDocumentationVersions(arg0 context.Context, arg1 *apigateway.GetDocumentationVersionsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDocumentationVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDocumentationVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationVersions", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDocumentationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationVersions indicates an expected call of GetDocumentationVersions.
func (mr *MockApigatewayClientMockRecorder) GetDocumentationVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersions", reflect.TypeOf((*MockApigatewayClient)(nil).GetDocumentationVersions), varargs...)
}

// GetDomainName mocks base method.
func (m *MockApigatewayClient) GetDomainName(arg0 context.Context, arg1 *apigateway.GetDomainNameInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDomainNameOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDomainName")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainName", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainName indicates an expected call of GetDomainName.
func (mr *MockApigatewayClientMockRecorder) GetDomainName(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainName", reflect.TypeOf((*MockApigatewayClient)(nil).GetDomainName), varargs...)
}

// GetDomainNames mocks base method.
func (m *MockApigatewayClient) GetDomainNames(arg0 context.Context, arg1 *apigateway.GetDomainNamesInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetDomainNamesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDomainNames")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNames", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNames indicates an expected call of GetDomainNames.
func (mr *MockApigatewayClientMockRecorder) GetDomainNames(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNames", reflect.TypeOf((*MockApigatewayClient)(nil).GetDomainNames), varargs...)
}

// GetExport mocks base method.
func (m *MockApigatewayClient) GetExport(arg0 context.Context, arg1 *apigateway.GetExportInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetExportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetExport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExport", varargs...)
	ret0, _ := ret[0].(*apigateway.GetExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExport indicates an expected call of GetExport.
func (mr *MockApigatewayClientMockRecorder) GetExport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExport", reflect.TypeOf((*MockApigatewayClient)(nil).GetExport), varargs...)
}

// GetGatewayResponse mocks base method.
func (m *MockApigatewayClient) GetGatewayResponse(arg0 context.Context, arg1 *apigateway.GetGatewayResponseInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetGatewayResponseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGatewayResponse")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGatewayResponse", varargs...)
	ret0, _ := ret[0].(*apigateway.GetGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayResponse indicates an expected call of GetGatewayResponse.
func (mr *MockApigatewayClientMockRecorder) GetGatewayResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponse", reflect.TypeOf((*MockApigatewayClient)(nil).GetGatewayResponse), varargs...)
}

// GetGatewayResponses mocks base method.
func (m *MockApigatewayClient) GetGatewayResponses(arg0 context.Context, arg1 *apigateway.GetGatewayResponsesInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetGatewayResponsesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGatewayResponses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGatewayResponses", varargs...)
	ret0, _ := ret[0].(*apigateway.GetGatewayResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayResponses indicates an expected call of GetGatewayResponses.
func (mr *MockApigatewayClientMockRecorder) GetGatewayResponses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponses", reflect.TypeOf((*MockApigatewayClient)(nil).GetGatewayResponses), varargs...)
}

// GetIntegration mocks base method.
func (m *MockApigatewayClient) GetIntegration(arg0 context.Context, arg1 *apigateway.GetIntegrationInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetIntegrationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIntegration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegration", varargs...)
	ret0, _ := ret[0].(*apigateway.GetIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegration indicates an expected call of GetIntegration.
func (mr *MockApigatewayClientMockRecorder) GetIntegration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegration", reflect.TypeOf((*MockApigatewayClient)(nil).GetIntegration), varargs...)
}

// GetIntegrationResponse mocks base method.
func (m *MockApigatewayClient) GetIntegrationResponse(arg0 context.Context, arg1 *apigateway.GetIntegrationResponseInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetIntegrationResponseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIntegrationResponse")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationResponse", varargs...)
	ret0, _ := ret[0].(*apigateway.GetIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponse indicates an expected call of GetIntegrationResponse.
func (mr *MockApigatewayClientMockRecorder) GetIntegrationResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponse", reflect.TypeOf((*MockApigatewayClient)(nil).GetIntegrationResponse), varargs...)
}

// GetMethod mocks base method.
func (m *MockApigatewayClient) GetMethod(arg0 context.Context, arg1 *apigateway.GetMethodInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetMethodOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMethod")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMethod", varargs...)
	ret0, _ := ret[0].(*apigateway.GetMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethod indicates an expected call of GetMethod.
func (mr *MockApigatewayClientMockRecorder) GetMethod(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethod", reflect.TypeOf((*MockApigatewayClient)(nil).GetMethod), varargs...)
}

// GetMethodResponse mocks base method.
func (m *MockApigatewayClient) GetMethodResponse(arg0 context.Context, arg1 *apigateway.GetMethodResponseInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetMethodResponseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMethodResponse")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMethodResponse", varargs...)
	ret0, _ := ret[0].(*apigateway.GetMethodResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodResponse indicates an expected call of GetMethodResponse.
func (mr *MockApigatewayClientMockRecorder) GetMethodResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodResponse", reflect.TypeOf((*MockApigatewayClient)(nil).GetMethodResponse), varargs...)
}

// GetModel mocks base method.
func (m *MockApigatewayClient) GetModel(arg0 context.Context, arg1 *apigateway.GetModelInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetModelOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModel")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*apigateway.GetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockApigatewayClientMockRecorder) GetModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockApigatewayClient)(nil).GetModel), varargs...)
}

// GetModelTemplate mocks base method.
func (m *MockApigatewayClient) GetModelTemplate(arg0 context.Context, arg1 *apigateway.GetModelTemplateInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetModelTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModelTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelTemplate", varargs...)
	ret0, _ := ret[0].(*apigateway.GetModelTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTemplate indicates an expected call of GetModelTemplate.
func (mr *MockApigatewayClientMockRecorder) GetModelTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplate", reflect.TypeOf((*MockApigatewayClient)(nil).GetModelTemplate), varargs...)
}

// GetModels mocks base method.
func (m *MockApigatewayClient) GetModels(arg0 context.Context, arg1 *apigateway.GetModelsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetModelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModels", varargs...)
	ret0, _ := ret[0].(*apigateway.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockApigatewayClientMockRecorder) GetModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockApigatewayClient)(nil).GetModels), varargs...)
}

// GetRequestValidator mocks base method.
func (m *MockApigatewayClient) GetRequestValidator(arg0 context.Context, arg1 *apigateway.GetRequestValidatorInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetRequestValidatorOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRequestValidator")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestValidator", varargs...)
	ret0, _ := ret[0].(*apigateway.GetRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestValidator indicates an expected call of GetRequestValidator.
func (mr *MockApigatewayClientMockRecorder) GetRequestValidator(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidator", reflect.TypeOf((*MockApigatewayClient)(nil).GetRequestValidator), varargs...)
}

// GetRequestValidators mocks base method.
func (m *MockApigatewayClient) GetRequestValidators(arg0 context.Context, arg1 *apigateway.GetRequestValidatorsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetRequestValidatorsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRequestValidators")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestValidators", varargs...)
	ret0, _ := ret[0].(*apigateway.GetRequestValidatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestValidators indicates an expected call of GetRequestValidators.
func (mr *MockApigatewayClientMockRecorder) GetRequestValidators(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidators", reflect.TypeOf((*MockApigatewayClient)(nil).GetRequestValidators), varargs...)
}

// GetResource mocks base method.
func (m *MockApigatewayClient) GetResource(arg0 context.Context, arg1 *apigateway.GetResourceInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*apigateway.GetResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockApigatewayClientMockRecorder) GetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockApigatewayClient)(nil).GetResource), varargs...)
}

// GetResources mocks base method.
func (m *MockApigatewayClient) GetResources(arg0 context.Context, arg1 *apigateway.GetResourcesInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResources", varargs...)
	ret0, _ := ret[0].(*apigateway.GetResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockApigatewayClientMockRecorder) GetResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockApigatewayClient)(nil).GetResources), varargs...)
}

// GetRestApi mocks base method.
func (m *MockApigatewayClient) GetRestApi(arg0 context.Context, arg1 *apigateway.GetRestApiInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetRestApiOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRestApi")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestApi", varargs...)
	ret0, _ := ret[0].(*apigateway.GetRestApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestApi indicates an expected call of GetRestApi.
func (mr *MockApigatewayClientMockRecorder) GetRestApi(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApi", reflect.TypeOf((*MockApigatewayClient)(nil).GetRestApi), varargs...)
}

// GetRestApis mocks base method.
func (m *MockApigatewayClient) GetRestApis(arg0 context.Context, arg1 *apigateway.GetRestApisInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetRestApisOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRestApis")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestApis", varargs...)
	ret0, _ := ret[0].(*apigateway.GetRestApisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestApis indicates an expected call of GetRestApis.
func (mr *MockApigatewayClientMockRecorder) GetRestApis(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApis", reflect.TypeOf((*MockApigatewayClient)(nil).GetRestApis), varargs...)
}

// GetSdk mocks base method.
func (m *MockApigatewayClient) GetSdk(arg0 context.Context, arg1 *apigateway.GetSdkInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetSdkOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSdk")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSdk", varargs...)
	ret0, _ := ret[0].(*apigateway.GetSdkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdk indicates an expected call of GetSdk.
func (mr *MockApigatewayClientMockRecorder) GetSdk(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdk", reflect.TypeOf((*MockApigatewayClient)(nil).GetSdk), varargs...)
}

// GetSdkType mocks base method.
func (m *MockApigatewayClient) GetSdkType(arg0 context.Context, arg1 *apigateway.GetSdkTypeInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetSdkTypeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSdkType")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSdkType", varargs...)
	ret0, _ := ret[0].(*apigateway.GetSdkTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkType indicates an expected call of GetSdkType.
func (mr *MockApigatewayClientMockRecorder) GetSdkType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkType", reflect.TypeOf((*MockApigatewayClient)(nil).GetSdkType), varargs...)
}

// GetSdkTypes mocks base method.
func (m *MockApigatewayClient) GetSdkTypes(arg0 context.Context, arg1 *apigateway.GetSdkTypesInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetSdkTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSdkTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSdkTypes", varargs...)
	ret0, _ := ret[0].(*apigateway.GetSdkTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkTypes indicates an expected call of GetSdkTypes.
func (mr *MockApigatewayClientMockRecorder) GetSdkTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkTypes", reflect.TypeOf((*MockApigatewayClient)(nil).GetSdkTypes), varargs...)
}

// GetStage mocks base method.
func (m *MockApigatewayClient) GetStage(arg0 context.Context, arg1 *apigateway.GetStageInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetStageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStage", varargs...)
	ret0, _ := ret[0].(*apigateway.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStage indicates an expected call of GetStage.
func (mr *MockApigatewayClientMockRecorder) GetStage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStage", reflect.TypeOf((*MockApigatewayClient)(nil).GetStage), varargs...)
}

// GetStages mocks base method.
func (m *MockApigatewayClient) GetStages(arg0 context.Context, arg1 *apigateway.GetStagesInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetStagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStages", varargs...)
	ret0, _ := ret[0].(*apigateway.GetStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStages indicates an expected call of GetStages.
func (mr *MockApigatewayClientMockRecorder) GetStages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStages", reflect.TypeOf((*MockApigatewayClient)(nil).GetStages), varargs...)
}

// GetTags mocks base method.
func (m *MockApigatewayClient) GetTags(arg0 context.Context, arg1 *apigateway.GetTagsInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*apigateway.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockApigatewayClientMockRecorder) GetTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockApigatewayClient)(nil).GetTags), varargs...)
}

// GetUsage mocks base method.
func (m *MockApigatewayClient) GetUsage(arg0 context.Context, arg1 *apigateway.GetUsageInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetUsageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUsage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsage", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockApigatewayClientMockRecorder) GetUsage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockApigatewayClient)(nil).GetUsage), varargs...)
}

// GetUsagePlan mocks base method.
func (m *MockApigatewayClient) GetUsagePlan(arg0 context.Context, arg1 *apigateway.GetUsagePlanInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetUsagePlanOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUsagePlan")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlan", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsagePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlan indicates an expected call of GetUsagePlan.
func (mr *MockApigatewayClientMockRecorder) GetUsagePlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlan", reflect.TypeOf((*MockApigatewayClient)(nil).GetUsagePlan), varargs...)
}

// GetUsagePlanKey mocks base method.
func (m *MockApigatewayClient) GetUsagePlanKey(arg0 context.Context, arg1 *apigateway.GetUsagePlanKeyInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetUsagePlanKeyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUsagePlanKey")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlanKey", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsagePlanKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanKey indicates an expected call of GetUsagePlanKey.
func (mr *MockApigatewayClientMockRecorder) GetUsagePlanKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKey", reflect.TypeOf((*MockApigatewayClient)(nil).GetUsagePlanKey), varargs...)
}

// GetUsagePlanKeys mocks base method.
func (m *MockApigatewayClient) GetUsagePlanKeys(arg0 context.Context, arg1 *apigateway.GetUsagePlanKeysInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetUsagePlanKeysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUsagePlanKeys")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlanKeys", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsagePlanKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanKeys indicates an expected call of GetUsagePlanKeys.
func (mr *MockApigatewayClientMockRecorder) GetUsagePlanKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeys", reflect.TypeOf((*MockApigatewayClient)(nil).GetUsagePlanKeys), varargs...)
}

// GetUsagePlans mocks base method.
func (m *MockApigatewayClient) GetUsagePlans(arg0 context.Context, arg1 *apigateway.GetUsagePlansInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetUsagePlansOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUsagePlans")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlans", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsagePlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlans indicates an expected call of GetUsagePlans.
func (mr *MockApigatewayClientMockRecorder) GetUsagePlans(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlans", reflect.TypeOf((*MockApigatewayClient)(nil).GetUsagePlans), varargs...)
}

// GetVpcLink mocks base method.
func (m *MockApigatewayClient) GetVpcLink(arg0 context.Context, arg1 *apigateway.GetVpcLinkInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetVpcLinkOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpcLink")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcLink", varargs...)
	ret0, _ := ret[0].(*apigateway.GetVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLink indicates an expected call of GetVpcLink.
func (mr *MockApigatewayClientMockRecorder) GetVpcLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLink", reflect.TypeOf((*MockApigatewayClient)(nil).GetVpcLink), varargs...)
}

// GetVpcLinks mocks base method.
func (m *MockApigatewayClient) GetVpcLinks(arg0 context.Context, arg1 *apigateway.GetVpcLinksInput, arg2 ...func(*apigateway.Options)) (*apigateway.GetVpcLinksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigateway.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpcLinks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcLinks", varargs...)
	ret0, _ := ret[0].(*apigateway.GetVpcLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLinks indicates an expected call of GetVpcLinks.
func (mr *MockApigatewayClientMockRecorder) GetVpcLinks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinks", reflect.TypeOf((*MockApigatewayClient)(nil).GetVpcLinks), varargs...)
}
