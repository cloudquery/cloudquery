// Code generated by MockGen. DO NOT EDIT.
// Source: route53resolver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	route53resolver "github.com/aws/aws-sdk-go-v2/service/route53resolver"
	gomock "github.com/golang/mock/gomock"
)

// MockRoute53resolverClient is a mock of Route53resolverClient interface.
type MockRoute53resolverClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53resolverClientMockRecorder
}

// MockRoute53resolverClientMockRecorder is the mock recorder for MockRoute53resolverClient.
type MockRoute53resolverClientMockRecorder struct {
	mock *MockRoute53resolverClient
}

// NewMockRoute53resolverClient creates a new mock instance.
func NewMockRoute53resolverClient(ctrl *gomock.Controller) *MockRoute53resolverClient {
	mock := &MockRoute53resolverClient{ctrl: ctrl}
	mock.recorder = &MockRoute53resolverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute53resolverClient) EXPECT() *MockRoute53resolverClientMockRecorder {
	return m.recorder
}

// GetFirewallConfig mocks base method.
func (m *MockRoute53resolverClient) GetFirewallConfig(arg0 context.Context, arg1 *route53resolver.GetFirewallConfigInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetFirewallConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFirewallConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirewallConfig", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetFirewallConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallConfig indicates an expected call of GetFirewallConfig.
func (mr *MockRoute53resolverClientMockRecorder) GetFirewallConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallConfig", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetFirewallConfig), varargs...)
}

// GetFirewallDomainList mocks base method.
func (m *MockRoute53resolverClient) GetFirewallDomainList(arg0 context.Context, arg1 *route53resolver.GetFirewallDomainListInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetFirewallDomainListOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFirewallDomainList")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirewallDomainList", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetFirewallDomainListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallDomainList indicates an expected call of GetFirewallDomainList.
func (mr *MockRoute53resolverClientMockRecorder) GetFirewallDomainList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallDomainList", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetFirewallDomainList), varargs...)
}

// GetFirewallRuleGroup mocks base method.
func (m *MockRoute53resolverClient) GetFirewallRuleGroup(arg0 context.Context, arg1 *route53resolver.GetFirewallRuleGroupInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetFirewallRuleGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFirewallRuleGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirewallRuleGroup", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetFirewallRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleGroup indicates an expected call of GetFirewallRuleGroup.
func (mr *MockRoute53resolverClientMockRecorder) GetFirewallRuleGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleGroup", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetFirewallRuleGroup), varargs...)
}

// GetFirewallRuleGroupAssociation mocks base method.
func (m *MockRoute53resolverClient) GetFirewallRuleGroupAssociation(arg0 context.Context, arg1 *route53resolver.GetFirewallRuleGroupAssociationInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetFirewallRuleGroupAssociationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFirewallRuleGroupAssociation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirewallRuleGroupAssociation", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetFirewallRuleGroupAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleGroupAssociation indicates an expected call of GetFirewallRuleGroupAssociation.
func (mr *MockRoute53resolverClientMockRecorder) GetFirewallRuleGroupAssociation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleGroupAssociation", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetFirewallRuleGroupAssociation), varargs...)
}

// GetFirewallRuleGroupPolicy mocks base method.
func (m *MockRoute53resolverClient) GetFirewallRuleGroupPolicy(arg0 context.Context, arg1 *route53resolver.GetFirewallRuleGroupPolicyInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetFirewallRuleGroupPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFirewallRuleGroupPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirewallRuleGroupPolicy", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetFirewallRuleGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewallRuleGroupPolicy indicates an expected call of GetFirewallRuleGroupPolicy.
func (mr *MockRoute53resolverClientMockRecorder) GetFirewallRuleGroupPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewallRuleGroupPolicy", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetFirewallRuleGroupPolicy), varargs...)
}

// GetOutpostResolver mocks base method.
func (m *MockRoute53resolverClient) GetOutpostResolver(arg0 context.Context, arg1 *route53resolver.GetOutpostResolverInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetOutpostResolverOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOutpostResolver")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutpostResolver", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetOutpostResolverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostResolver indicates an expected call of GetOutpostResolver.
func (mr *MockRoute53resolverClientMockRecorder) GetOutpostResolver(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostResolver", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetOutpostResolver), varargs...)
}

// GetResolverConfig mocks base method.
func (m *MockRoute53resolverClient) GetResolverConfig(arg0 context.Context, arg1 *route53resolver.GetResolverConfigInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverConfig", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverConfig indicates an expected call of GetResolverConfig.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverConfig", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverConfig), varargs...)
}

// GetResolverDnssecConfig mocks base method.
func (m *MockRoute53resolverClient) GetResolverDnssecConfig(arg0 context.Context, arg1 *route53resolver.GetResolverDnssecConfigInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverDnssecConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverDnssecConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverDnssecConfig", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverDnssecConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverDnssecConfig indicates an expected call of GetResolverDnssecConfig.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverDnssecConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverDnssecConfig", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverDnssecConfig), varargs...)
}

// GetResolverEndpoint mocks base method.
func (m *MockRoute53resolverClient) GetResolverEndpoint(arg0 context.Context, arg1 *route53resolver.GetResolverEndpointInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverEndpointOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverEndpoint")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverEndpoint", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverEndpoint indicates an expected call of GetResolverEndpoint.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverEndpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverEndpoint", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverEndpoint), varargs...)
}

// GetResolverQueryLogConfig mocks base method.
func (m *MockRoute53resolverClient) GetResolverQueryLogConfig(arg0 context.Context, arg1 *route53resolver.GetResolverQueryLogConfigInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverQueryLogConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverQueryLogConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfig", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfig indicates an expected call of GetResolverQueryLogConfig.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverQueryLogConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfig", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverQueryLogConfig), varargs...)
}

// GetResolverQueryLogConfigAssociation mocks base method.
func (m *MockRoute53resolverClient) GetResolverQueryLogConfigAssociation(arg0 context.Context, arg1 *route53resolver.GetResolverQueryLogConfigAssociationInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverQueryLogConfigAssociation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigAssociation", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigAssociation indicates an expected call of GetResolverQueryLogConfigAssociation.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverQueryLogConfigAssociation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigAssociation", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverQueryLogConfigAssociation), varargs...)
}

// GetResolverQueryLogConfigPolicy mocks base method.
func (m *MockRoute53resolverClient) GetResolverQueryLogConfigPolicy(arg0 context.Context, arg1 *route53resolver.GetResolverQueryLogConfigPolicyInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverQueryLogConfigPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigPolicy", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigPolicy indicates an expected call of GetResolverQueryLogConfigPolicy.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverQueryLogConfigPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigPolicy", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverQueryLogConfigPolicy), varargs...)
}

// GetResolverRule mocks base method.
func (m *MockRoute53resolverClient) GetResolverRule(arg0 context.Context, arg1 *route53resolver.GetResolverRuleInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverRule", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRule indicates an expected call of GetResolverRule.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRule", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverRule), varargs...)
}

// GetResolverRuleAssociation mocks base method.
func (m *MockRoute53resolverClient) GetResolverRuleAssociation(arg0 context.Context, arg1 *route53resolver.GetResolverRuleAssociationInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverRuleAssociationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverRuleAssociation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverRuleAssociation", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverRuleAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRuleAssociation indicates an expected call of GetResolverRuleAssociation.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverRuleAssociation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRuleAssociation", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverRuleAssociation), varargs...)
}

// GetResolverRulePolicy mocks base method.
func (m *MockRoute53resolverClient) GetResolverRulePolicy(arg0 context.Context, arg1 *route53resolver.GetResolverRulePolicyInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.GetResolverRulePolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResolverRulePolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverRulePolicy", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRulePolicy indicates an expected call of GetResolverRulePolicy.
func (mr *MockRoute53resolverClientMockRecorder) GetResolverRulePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRulePolicy", reflect.TypeOf((*MockRoute53resolverClient)(nil).GetResolverRulePolicy), varargs...)
}

// ListFirewallConfigs mocks base method.
func (m *MockRoute53resolverClient) ListFirewallConfigs(arg0 context.Context, arg1 *route53resolver.ListFirewallConfigsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListFirewallConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallConfigs", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListFirewallConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallConfigs indicates an expected call of ListFirewallConfigs.
func (mr *MockRoute53resolverClientMockRecorder) ListFirewallConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallConfigs", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListFirewallConfigs), varargs...)
}

// ListFirewallDomainLists mocks base method.
func (m *MockRoute53resolverClient) ListFirewallDomainLists(arg0 context.Context, arg1 *route53resolver.ListFirewallDomainListsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListFirewallDomainListsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallDomainLists")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallDomainLists", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListFirewallDomainListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallDomainLists indicates an expected call of ListFirewallDomainLists.
func (mr *MockRoute53resolverClientMockRecorder) ListFirewallDomainLists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallDomainLists", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListFirewallDomainLists), varargs...)
}

// ListFirewallDomains mocks base method.
func (m *MockRoute53resolverClient) ListFirewallDomains(arg0 context.Context, arg1 *route53resolver.ListFirewallDomainsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListFirewallDomainsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallDomains")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallDomains", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListFirewallDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallDomains indicates an expected call of ListFirewallDomains.
func (mr *MockRoute53resolverClientMockRecorder) ListFirewallDomains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallDomains", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListFirewallDomains), varargs...)
}

// ListFirewallRuleGroupAssociations mocks base method.
func (m *MockRoute53resolverClient) ListFirewallRuleGroupAssociations(arg0 context.Context, arg1 *route53resolver.ListFirewallRuleGroupAssociationsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListFirewallRuleGroupAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallRuleGroupAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallRuleGroupAssociations", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListFirewallRuleGroupAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallRuleGroupAssociations indicates an expected call of ListFirewallRuleGroupAssociations.
func (mr *MockRoute53resolverClientMockRecorder) ListFirewallRuleGroupAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallRuleGroupAssociations", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListFirewallRuleGroupAssociations), varargs...)
}

// ListFirewallRuleGroups mocks base method.
func (m *MockRoute53resolverClient) ListFirewallRuleGroups(arg0 context.Context, arg1 *route53resolver.ListFirewallRuleGroupsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListFirewallRuleGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallRuleGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallRuleGroups", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListFirewallRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallRuleGroups indicates an expected call of ListFirewallRuleGroups.
func (mr *MockRoute53resolverClientMockRecorder) ListFirewallRuleGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallRuleGroups", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListFirewallRuleGroups), varargs...)
}

// ListFirewallRules mocks base method.
func (m *MockRoute53resolverClient) ListFirewallRules(arg0 context.Context, arg1 *route53resolver.ListFirewallRulesInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListFirewallRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallRules", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListFirewallRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallRules indicates an expected call of ListFirewallRules.
func (mr *MockRoute53resolverClientMockRecorder) ListFirewallRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallRules", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListFirewallRules), varargs...)
}

// ListOutpostResolvers mocks base method.
func (m *MockRoute53resolverClient) ListOutpostResolvers(arg0 context.Context, arg1 *route53resolver.ListOutpostResolversInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListOutpostResolversOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOutpostResolvers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutpostResolvers", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListOutpostResolversOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutpostResolvers indicates an expected call of ListOutpostResolvers.
func (mr *MockRoute53resolverClientMockRecorder) ListOutpostResolvers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostResolvers", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListOutpostResolvers), varargs...)
}

// ListResolverConfigs mocks base method.
func (m *MockRoute53resolverClient) ListResolverConfigs(arg0 context.Context, arg1 *route53resolver.ListResolverConfigsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverConfigs", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverConfigs indicates an expected call of ListResolverConfigs.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverConfigs", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverConfigs), varargs...)
}

// ListResolverDnssecConfigs mocks base method.
func (m *MockRoute53resolverClient) ListResolverDnssecConfigs(arg0 context.Context, arg1 *route53resolver.ListResolverDnssecConfigsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverDnssecConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverDnssecConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverDnssecConfigs", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverDnssecConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverDnssecConfigs indicates an expected call of ListResolverDnssecConfigs.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverDnssecConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverDnssecConfigs", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverDnssecConfigs), varargs...)
}

// ListResolverEndpointIpAddresses mocks base method.
func (m *MockRoute53resolverClient) ListResolverEndpointIpAddresses(arg0 context.Context, arg1 *route53resolver.ListResolverEndpointIpAddressesInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverEndpointIpAddresses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverEndpointIpAddresses", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverEndpointIpAddresses indicates an expected call of ListResolverEndpointIpAddresses.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverEndpointIpAddresses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointIpAddresses", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverEndpointIpAddresses), varargs...)
}

// ListResolverEndpoints mocks base method.
func (m *MockRoute53resolverClient) ListResolverEndpoints(arg0 context.Context, arg1 *route53resolver.ListResolverEndpointsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverEndpoints", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverEndpoints indicates an expected call of ListResolverEndpoints.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpoints", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverEndpoints), varargs...)
}

// ListResolverQueryLogConfigAssociations mocks base method.
func (m *MockRoute53resolverClient) ListResolverQueryLogConfigAssociations(arg0 context.Context, arg1 *route53resolver.ListResolverQueryLogConfigAssociationsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverQueryLogConfigAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigAssociations", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverQueryLogConfigAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverQueryLogConfigAssociations indicates an expected call of ListResolverQueryLogConfigAssociations.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverQueryLogConfigAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigAssociations", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverQueryLogConfigAssociations), varargs...)
}

// ListResolverQueryLogConfigs mocks base method.
func (m *MockRoute53resolverClient) ListResolverQueryLogConfigs(arg0 context.Context, arg1 *route53resolver.ListResolverQueryLogConfigsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverQueryLogConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigs", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverQueryLogConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverQueryLogConfigs indicates an expected call of ListResolverQueryLogConfigs.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverQueryLogConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigs", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverQueryLogConfigs), varargs...)
}

// ListResolverRuleAssociations mocks base method.
func (m *MockRoute53resolverClient) ListResolverRuleAssociations(arg0 context.Context, arg1 *route53resolver.ListResolverRuleAssociationsInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverRuleAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverRuleAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverRuleAssociations", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverRuleAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverRuleAssociations indicates an expected call of ListResolverRuleAssociations.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverRuleAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRuleAssociations", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverRuleAssociations), varargs...)
}

// ListResolverRules mocks base method.
func (m *MockRoute53resolverClient) ListResolverRules(arg0 context.Context, arg1 *route53resolver.ListResolverRulesInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListResolverRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResolverRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverRules", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverRules indicates an expected call of ListResolverRules.
func (mr *MockRoute53resolverClientMockRecorder) ListResolverRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRules", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListResolverRules), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRoute53resolverClient) ListTagsForResource(arg0 context.Context, arg1 *route53resolver.ListTagsForResourceInput, arg2 ...func(*route53resolver.Options)) (*route53resolver.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53resolver.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRoute53resolverClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRoute53resolverClient)(nil).ListTagsForResource), varargs...)
}
