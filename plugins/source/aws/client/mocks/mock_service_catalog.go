// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/aws/client (interfaces: ServiceCatalogClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	servicecatalog "github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceCatalogClient is a mock of ServiceCatalogClient interface.
type MockServiceCatalogClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceCatalogClientMockRecorder
}

// MockServiceCatalogClientMockRecorder is the mock recorder for MockServiceCatalogClient.
type MockServiceCatalogClientMockRecorder struct {
	mock *MockServiceCatalogClient
}

// NewMockServiceCatalogClient creates a new mock instance.
func NewMockServiceCatalogClient(ctrl *gomock.Controller) *MockServiceCatalogClient {
	mock := &MockServiceCatalogClient{ctrl: ctrl}
	mock.recorder = &MockServiceCatalogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceCatalogClient) EXPECT() *MockServiceCatalogClientMockRecorder {
	return m.recorder
}

// ListPortfolios mocks base method.
func (m *MockServiceCatalogClient) ListPortfolios(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfolios", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolios indicates an expected call of ListPortfolios.
func (mr *MockServiceCatalogClientMockRecorder) ListPortfolios(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolios", reflect.TypeOf((*MockServiceCatalogClient)(nil).ListPortfolios), varargs...)
}

// SearchProductsAsAdmin mocks base method.
func (m *MockServiceCatalogClient) SearchProductsAsAdmin(arg0 context.Context, arg1 *servicecatalog.SearchProductsAsAdminInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProductsAsAdmin", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsAsAdmin indicates an expected call of SearchProductsAsAdmin.
func (mr *MockServiceCatalogClientMockRecorder) SearchProductsAsAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdmin", reflect.TypeOf((*MockServiceCatalogClient)(nil).SearchProductsAsAdmin), varargs...)
}

// SearchProvisionedProducts mocks base method.
func (m *MockServiceCatalogClient) SearchProvisionedProducts(arg0 context.Context, arg1 *servicecatalog.SearchProvisionedProductsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProvisionedProducts", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProvisionedProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProvisionedProducts indicates an expected call of SearchProvisionedProducts.
func (mr *MockServiceCatalogClientMockRecorder) SearchProvisionedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProducts", reflect.TypeOf((*MockServiceCatalogClient)(nil).SearchProvisionedProducts), varargs...)
}
