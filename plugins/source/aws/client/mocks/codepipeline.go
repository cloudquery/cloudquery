// Code generated by MockGen. DO NOT EDIT.
// Source: codepipeline.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	codepipeline "github.com/aws/aws-sdk-go-v2/service/codepipeline"
	gomock "github.com/golang/mock/gomock"
)

// MockCodepipelineClient is a mock of CodepipelineClient interface.
type MockCodepipelineClient struct {
	ctrl     *gomock.Controller
	recorder *MockCodepipelineClientMockRecorder
}

// MockCodepipelineClientMockRecorder is the mock recorder for MockCodepipelineClient.
type MockCodepipelineClientMockRecorder struct {
	mock *MockCodepipelineClient
}

// NewMockCodepipelineClient creates a new mock instance.
func NewMockCodepipelineClient(ctrl *gomock.Controller) *MockCodepipelineClient {
	mock := &MockCodepipelineClient{ctrl: ctrl}
	mock.recorder = &MockCodepipelineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodepipelineClient) EXPECT() *MockCodepipelineClientMockRecorder {
	return m.recorder
}

// GetActionType mocks base method.
func (m *MockCodepipelineClient) GetActionType(arg0 context.Context, arg1 *codepipeline.GetActionTypeInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.GetActionTypeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetActionType")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActionType", varargs...)
	ret0, _ := ret[0].(*codepipeline.GetActionTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionType indicates an expected call of GetActionType.
func (mr *MockCodepipelineClientMockRecorder) GetActionType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionType", reflect.TypeOf((*MockCodepipelineClient)(nil).GetActionType), varargs...)
}

// GetJobDetails mocks base method.
func (m *MockCodepipelineClient) GetJobDetails(arg0 context.Context, arg1 *codepipeline.GetJobDetailsInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.GetJobDetailsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetJobDetails")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobDetails", varargs...)
	ret0, _ := ret[0].(*codepipeline.GetJobDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDetails indicates an expected call of GetJobDetails.
func (mr *MockCodepipelineClientMockRecorder) GetJobDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDetails", reflect.TypeOf((*MockCodepipelineClient)(nil).GetJobDetails), varargs...)
}

// GetPipeline mocks base method.
func (m *MockCodepipelineClient) GetPipeline(arg0 context.Context, arg1 *codepipeline.GetPipelineInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.GetPipelineOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPipeline")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipeline", varargs...)
	ret0, _ := ret[0].(*codepipeline.GetPipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockCodepipelineClientMockRecorder) GetPipeline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockCodepipelineClient)(nil).GetPipeline), varargs...)
}

// GetPipelineExecution mocks base method.
func (m *MockCodepipelineClient) GetPipelineExecution(arg0 context.Context, arg1 *codepipeline.GetPipelineExecutionInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.GetPipelineExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPipelineExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineExecution", varargs...)
	ret0, _ := ret[0].(*codepipeline.GetPipelineExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineExecution indicates an expected call of GetPipelineExecution.
func (mr *MockCodepipelineClientMockRecorder) GetPipelineExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineExecution", reflect.TypeOf((*MockCodepipelineClient)(nil).GetPipelineExecution), varargs...)
}

// GetPipelineState mocks base method.
func (m *MockCodepipelineClient) GetPipelineState(arg0 context.Context, arg1 *codepipeline.GetPipelineStateInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.GetPipelineStateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPipelineState")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineState", varargs...)
	ret0, _ := ret[0].(*codepipeline.GetPipelineStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineState indicates an expected call of GetPipelineState.
func (mr *MockCodepipelineClientMockRecorder) GetPipelineState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineState", reflect.TypeOf((*MockCodepipelineClient)(nil).GetPipelineState), varargs...)
}

// GetThirdPartyJobDetails mocks base method.
func (m *MockCodepipelineClient) GetThirdPartyJobDetails(arg0 context.Context, arg1 *codepipeline.GetThirdPartyJobDetailsInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.GetThirdPartyJobDetailsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetThirdPartyJobDetails")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetThirdPartyJobDetails", varargs...)
	ret0, _ := ret[0].(*codepipeline.GetThirdPartyJobDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThirdPartyJobDetails indicates an expected call of GetThirdPartyJobDetails.
func (mr *MockCodepipelineClientMockRecorder) GetThirdPartyJobDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThirdPartyJobDetails", reflect.TypeOf((*MockCodepipelineClient)(nil).GetThirdPartyJobDetails), varargs...)
}

// ListActionExecutions mocks base method.
func (m *MockCodepipelineClient) ListActionExecutions(arg0 context.Context, arg1 *codepipeline.ListActionExecutionsInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.ListActionExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListActionExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActionExecutions", varargs...)
	ret0, _ := ret[0].(*codepipeline.ListActionExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActionExecutions indicates an expected call of ListActionExecutions.
func (mr *MockCodepipelineClientMockRecorder) ListActionExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionExecutions", reflect.TypeOf((*MockCodepipelineClient)(nil).ListActionExecutions), varargs...)
}

// ListActionTypes mocks base method.
func (m *MockCodepipelineClient) ListActionTypes(arg0 context.Context, arg1 *codepipeline.ListActionTypesInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.ListActionTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListActionTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActionTypes", varargs...)
	ret0, _ := ret[0].(*codepipeline.ListActionTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActionTypes indicates an expected call of ListActionTypes.
func (mr *MockCodepipelineClientMockRecorder) ListActionTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionTypes", reflect.TypeOf((*MockCodepipelineClient)(nil).ListActionTypes), varargs...)
}

// ListPipelineExecutions mocks base method.
func (m *MockCodepipelineClient) ListPipelineExecutions(arg0 context.Context, arg1 *codepipeline.ListPipelineExecutionsInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.ListPipelineExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPipelineExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineExecutions", varargs...)
	ret0, _ := ret[0].(*codepipeline.ListPipelineExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineExecutions indicates an expected call of ListPipelineExecutions.
func (mr *MockCodepipelineClientMockRecorder) ListPipelineExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineExecutions", reflect.TypeOf((*MockCodepipelineClient)(nil).ListPipelineExecutions), varargs...)
}

// ListPipelines mocks base method.
func (m *MockCodepipelineClient) ListPipelines(arg0 context.Context, arg1 *codepipeline.ListPipelinesInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.ListPipelinesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPipelines")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelines", varargs...)
	ret0, _ := ret[0].(*codepipeline.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockCodepipelineClientMockRecorder) ListPipelines(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockCodepipelineClient)(nil).ListPipelines), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockCodepipelineClient) ListTagsForResource(arg0 context.Context, arg1 *codepipeline.ListTagsForResourceInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*codepipeline.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockCodepipelineClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCodepipelineClient)(nil).ListTagsForResource), varargs...)
}

// ListWebhooks mocks base method.
func (m *MockCodepipelineClient) ListWebhooks(arg0 context.Context, arg1 *codepipeline.ListWebhooksInput, arg2 ...func(*codepipeline.Options)) (*codepipeline.ListWebhooksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &codepipeline.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListWebhooks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebhooks", varargs...)
	ret0, _ := ret[0].(*codepipeline.ListWebhooksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhooks indicates an expected call of ListWebhooks.
func (mr *MockCodepipelineClientMockRecorder) ListWebhooks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooks", reflect.TypeOf((*MockCodepipelineClient)(nil).ListWebhooks), varargs...)
}
