// Code generated by MockGen. DO NOT EDIT.
// Source: route53.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	route53 "github.com/aws/aws-sdk-go-v2/service/route53"
	gomock "github.com/golang/mock/gomock"
)

// MockRoute53Client is a mock of Route53Client interface.
type MockRoute53Client struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53ClientMockRecorder
}

// MockRoute53ClientMockRecorder is the mock recorder for MockRoute53Client.
type MockRoute53ClientMockRecorder struct {
	mock *MockRoute53Client
}

// NewMockRoute53Client creates a new mock instance.
func NewMockRoute53Client(ctrl *gomock.Controller) *MockRoute53Client {
	mock := &MockRoute53Client{ctrl: ctrl}
	mock.recorder = &MockRoute53ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute53Client) EXPECT() *MockRoute53ClientMockRecorder {
	return m.recorder
}

// GetAccountLimit mocks base method.
func (m *MockRoute53Client) GetAccountLimit(arg0 context.Context, arg1 *route53.GetAccountLimitInput, arg2 ...func(*route53.Options)) (*route53.GetAccountLimitOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAccountLimit")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountLimit", varargs...)
	ret0, _ := ret[0].(*route53.GetAccountLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountLimit indicates an expected call of GetAccountLimit.
func (mr *MockRoute53ClientMockRecorder) GetAccountLimit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountLimit", reflect.TypeOf((*MockRoute53Client)(nil).GetAccountLimit), varargs...)
}

// GetChange mocks base method.
func (m *MockRoute53Client) GetChange(arg0 context.Context, arg1 *route53.GetChangeInput, arg2 ...func(*route53.Options)) (*route53.GetChangeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetChange")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChange", varargs...)
	ret0, _ := ret[0].(*route53.GetChangeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChange indicates an expected call of GetChange.
func (mr *MockRoute53ClientMockRecorder) GetChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChange", reflect.TypeOf((*MockRoute53Client)(nil).GetChange), varargs...)
}

// GetCheckerIpRanges mocks base method.
func (m *MockRoute53Client) GetCheckerIpRanges(arg0 context.Context, arg1 *route53.GetCheckerIpRangesInput, arg2 ...func(*route53.Options)) (*route53.GetCheckerIpRangesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCheckerIpRanges")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCheckerIpRanges", varargs...)
	ret0, _ := ret[0].(*route53.GetCheckerIpRangesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckerIpRanges indicates an expected call of GetCheckerIpRanges.
func (mr *MockRoute53ClientMockRecorder) GetCheckerIpRanges(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckerIpRanges", reflect.TypeOf((*MockRoute53Client)(nil).GetCheckerIpRanges), varargs...)
}

// GetDNSSEC mocks base method.
func (m *MockRoute53Client) GetDNSSEC(arg0 context.Context, arg1 *route53.GetDNSSECInput, arg2 ...func(*route53.Options)) (*route53.GetDNSSECOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDNSSEC")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDNSSEC", varargs...)
	ret0, _ := ret[0].(*route53.GetDNSSECOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSSEC indicates an expected call of GetDNSSEC.
func (mr *MockRoute53ClientMockRecorder) GetDNSSEC(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSSEC", reflect.TypeOf((*MockRoute53Client)(nil).GetDNSSEC), varargs...)
}

// GetGeoLocation mocks base method.
func (m *MockRoute53Client) GetGeoLocation(arg0 context.Context, arg1 *route53.GetGeoLocationInput, arg2 ...func(*route53.Options)) (*route53.GetGeoLocationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGeoLocation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeoLocation", varargs...)
	ret0, _ := ret[0].(*route53.GetGeoLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoLocation indicates an expected call of GetGeoLocation.
func (mr *MockRoute53ClientMockRecorder) GetGeoLocation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoLocation", reflect.TypeOf((*MockRoute53Client)(nil).GetGeoLocation), varargs...)
}

// GetHealthCheck mocks base method.
func (m *MockRoute53Client) GetHealthCheck(arg0 context.Context, arg1 *route53.GetHealthCheckInput, arg2 ...func(*route53.Options)) (*route53.GetHealthCheckOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHealthCheck")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealthCheck", varargs...)
	ret0, _ := ret[0].(*route53.GetHealthCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheck indicates an expected call of GetHealthCheck.
func (mr *MockRoute53ClientMockRecorder) GetHealthCheck(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheck", reflect.TypeOf((*MockRoute53Client)(nil).GetHealthCheck), varargs...)
}

// GetHealthCheckCount mocks base method.
func (m *MockRoute53Client) GetHealthCheckCount(arg0 context.Context, arg1 *route53.GetHealthCheckCountInput, arg2 ...func(*route53.Options)) (*route53.GetHealthCheckCountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHealthCheckCount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealthCheckCount", varargs...)
	ret0, _ := ret[0].(*route53.GetHealthCheckCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheckCount indicates an expected call of GetHealthCheckCount.
func (mr *MockRoute53ClientMockRecorder) GetHealthCheckCount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckCount", reflect.TypeOf((*MockRoute53Client)(nil).GetHealthCheckCount), varargs...)
}

// GetHealthCheckLastFailureReason mocks base method.
func (m *MockRoute53Client) GetHealthCheckLastFailureReason(arg0 context.Context, arg1 *route53.GetHealthCheckLastFailureReasonInput, arg2 ...func(*route53.Options)) (*route53.GetHealthCheckLastFailureReasonOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHealthCheckLastFailureReason")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealthCheckLastFailureReason", varargs...)
	ret0, _ := ret[0].(*route53.GetHealthCheckLastFailureReasonOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheckLastFailureReason indicates an expected call of GetHealthCheckLastFailureReason.
func (mr *MockRoute53ClientMockRecorder) GetHealthCheckLastFailureReason(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckLastFailureReason", reflect.TypeOf((*MockRoute53Client)(nil).GetHealthCheckLastFailureReason), varargs...)
}

// GetHealthCheckStatus mocks base method.
func (m *MockRoute53Client) GetHealthCheckStatus(arg0 context.Context, arg1 *route53.GetHealthCheckStatusInput, arg2 ...func(*route53.Options)) (*route53.GetHealthCheckStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHealthCheckStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealthCheckStatus", varargs...)
	ret0, _ := ret[0].(*route53.GetHealthCheckStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheckStatus indicates an expected call of GetHealthCheckStatus.
func (mr *MockRoute53ClientMockRecorder) GetHealthCheckStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckStatus", reflect.TypeOf((*MockRoute53Client)(nil).GetHealthCheckStatus), varargs...)
}

// GetHostedZone mocks base method.
func (m *MockRoute53Client) GetHostedZone(arg0 context.Context, arg1 *route53.GetHostedZoneInput, arg2 ...func(*route53.Options)) (*route53.GetHostedZoneOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHostedZone")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostedZone", varargs...)
	ret0, _ := ret[0].(*route53.GetHostedZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedZone indicates an expected call of GetHostedZone.
func (mr *MockRoute53ClientMockRecorder) GetHostedZone(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedZone", reflect.TypeOf((*MockRoute53Client)(nil).GetHostedZone), varargs...)
}

// GetHostedZoneCount mocks base method.
func (m *MockRoute53Client) GetHostedZoneCount(arg0 context.Context, arg1 *route53.GetHostedZoneCountInput, arg2 ...func(*route53.Options)) (*route53.GetHostedZoneCountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHostedZoneCount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostedZoneCount", varargs...)
	ret0, _ := ret[0].(*route53.GetHostedZoneCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedZoneCount indicates an expected call of GetHostedZoneCount.
func (mr *MockRoute53ClientMockRecorder) GetHostedZoneCount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedZoneCount", reflect.TypeOf((*MockRoute53Client)(nil).GetHostedZoneCount), varargs...)
}

// GetHostedZoneLimit mocks base method.
func (m *MockRoute53Client) GetHostedZoneLimit(arg0 context.Context, arg1 *route53.GetHostedZoneLimitInput, arg2 ...func(*route53.Options)) (*route53.GetHostedZoneLimitOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetHostedZoneLimit")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostedZoneLimit", varargs...)
	ret0, _ := ret[0].(*route53.GetHostedZoneLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostedZoneLimit indicates an expected call of GetHostedZoneLimit.
func (mr *MockRoute53ClientMockRecorder) GetHostedZoneLimit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostedZoneLimit", reflect.TypeOf((*MockRoute53Client)(nil).GetHostedZoneLimit), varargs...)
}

// GetQueryLoggingConfig mocks base method.
func (m *MockRoute53Client) GetQueryLoggingConfig(arg0 context.Context, arg1 *route53.GetQueryLoggingConfigInput, arg2 ...func(*route53.Options)) (*route53.GetQueryLoggingConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetQueryLoggingConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryLoggingConfig", varargs...)
	ret0, _ := ret[0].(*route53.GetQueryLoggingConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryLoggingConfig indicates an expected call of GetQueryLoggingConfig.
func (mr *MockRoute53ClientMockRecorder) GetQueryLoggingConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryLoggingConfig", reflect.TypeOf((*MockRoute53Client)(nil).GetQueryLoggingConfig), varargs...)
}

// GetReusableDelegationSet mocks base method.
func (m *MockRoute53Client) GetReusableDelegationSet(arg0 context.Context, arg1 *route53.GetReusableDelegationSetInput, arg2 ...func(*route53.Options)) (*route53.GetReusableDelegationSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReusableDelegationSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReusableDelegationSet", varargs...)
	ret0, _ := ret[0].(*route53.GetReusableDelegationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReusableDelegationSet indicates an expected call of GetReusableDelegationSet.
func (mr *MockRoute53ClientMockRecorder) GetReusableDelegationSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReusableDelegationSet", reflect.TypeOf((*MockRoute53Client)(nil).GetReusableDelegationSet), varargs...)
}

// GetReusableDelegationSetLimit mocks base method.
func (m *MockRoute53Client) GetReusableDelegationSetLimit(arg0 context.Context, arg1 *route53.GetReusableDelegationSetLimitInput, arg2 ...func(*route53.Options)) (*route53.GetReusableDelegationSetLimitOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReusableDelegationSetLimit")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReusableDelegationSetLimit", varargs...)
	ret0, _ := ret[0].(*route53.GetReusableDelegationSetLimitOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReusableDelegationSetLimit indicates an expected call of GetReusableDelegationSetLimit.
func (mr *MockRoute53ClientMockRecorder) GetReusableDelegationSetLimit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReusableDelegationSetLimit", reflect.TypeOf((*MockRoute53Client)(nil).GetReusableDelegationSetLimit), varargs...)
}

// GetTrafficPolicy mocks base method.
func (m *MockRoute53Client) GetTrafficPolicy(arg0 context.Context, arg1 *route53.GetTrafficPolicyInput, arg2 ...func(*route53.Options)) (*route53.GetTrafficPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTrafficPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrafficPolicy", varargs...)
	ret0, _ := ret[0].(*route53.GetTrafficPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicy indicates an expected call of GetTrafficPolicy.
func (mr *MockRoute53ClientMockRecorder) GetTrafficPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicy", reflect.TypeOf((*MockRoute53Client)(nil).GetTrafficPolicy), varargs...)
}

// GetTrafficPolicyInstance mocks base method.
func (m *MockRoute53Client) GetTrafficPolicyInstance(arg0 context.Context, arg1 *route53.GetTrafficPolicyInstanceInput, arg2 ...func(*route53.Options)) (*route53.GetTrafficPolicyInstanceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTrafficPolicyInstance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrafficPolicyInstance", varargs...)
	ret0, _ := ret[0].(*route53.GetTrafficPolicyInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicyInstance indicates an expected call of GetTrafficPolicyInstance.
func (mr *MockRoute53ClientMockRecorder) GetTrafficPolicyInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicyInstance", reflect.TypeOf((*MockRoute53Client)(nil).GetTrafficPolicyInstance), varargs...)
}

// GetTrafficPolicyInstanceCount mocks base method.
func (m *MockRoute53Client) GetTrafficPolicyInstanceCount(arg0 context.Context, arg1 *route53.GetTrafficPolicyInstanceCountInput, arg2 ...func(*route53.Options)) (*route53.GetTrafficPolicyInstanceCountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTrafficPolicyInstanceCount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrafficPolicyInstanceCount", varargs...)
	ret0, _ := ret[0].(*route53.GetTrafficPolicyInstanceCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrafficPolicyInstanceCount indicates an expected call of GetTrafficPolicyInstanceCount.
func (mr *MockRoute53ClientMockRecorder) GetTrafficPolicyInstanceCount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrafficPolicyInstanceCount", reflect.TypeOf((*MockRoute53Client)(nil).GetTrafficPolicyInstanceCount), varargs...)
}

// ListCidrBlocks mocks base method.
func (m *MockRoute53Client) ListCidrBlocks(arg0 context.Context, arg1 *route53.ListCidrBlocksInput, arg2 ...func(*route53.Options)) (*route53.ListCidrBlocksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCidrBlocks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCidrBlocks", varargs...)
	ret0, _ := ret[0].(*route53.ListCidrBlocksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCidrBlocks indicates an expected call of ListCidrBlocks.
func (mr *MockRoute53ClientMockRecorder) ListCidrBlocks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCidrBlocks", reflect.TypeOf((*MockRoute53Client)(nil).ListCidrBlocks), varargs...)
}

// ListCidrCollections mocks base method.
func (m *MockRoute53Client) ListCidrCollections(arg0 context.Context, arg1 *route53.ListCidrCollectionsInput, arg2 ...func(*route53.Options)) (*route53.ListCidrCollectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCidrCollections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCidrCollections", varargs...)
	ret0, _ := ret[0].(*route53.ListCidrCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCidrCollections indicates an expected call of ListCidrCollections.
func (mr *MockRoute53ClientMockRecorder) ListCidrCollections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCidrCollections", reflect.TypeOf((*MockRoute53Client)(nil).ListCidrCollections), varargs...)
}

// ListCidrLocations mocks base method.
func (m *MockRoute53Client) ListCidrLocations(arg0 context.Context, arg1 *route53.ListCidrLocationsInput, arg2 ...func(*route53.Options)) (*route53.ListCidrLocationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCidrLocations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCidrLocations", varargs...)
	ret0, _ := ret[0].(*route53.ListCidrLocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCidrLocations indicates an expected call of ListCidrLocations.
func (mr *MockRoute53ClientMockRecorder) ListCidrLocations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCidrLocations", reflect.TypeOf((*MockRoute53Client)(nil).ListCidrLocations), varargs...)
}

// ListGeoLocations mocks base method.
func (m *MockRoute53Client) ListGeoLocations(arg0 context.Context, arg1 *route53.ListGeoLocationsInput, arg2 ...func(*route53.Options)) (*route53.ListGeoLocationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListGeoLocations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeoLocations", varargs...)
	ret0, _ := ret[0].(*route53.ListGeoLocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeoLocations indicates an expected call of ListGeoLocations.
func (mr *MockRoute53ClientMockRecorder) ListGeoLocations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoLocations", reflect.TypeOf((*MockRoute53Client)(nil).ListGeoLocations), varargs...)
}

// ListHealthChecks mocks base method.
func (m *MockRoute53Client) ListHealthChecks(arg0 context.Context, arg1 *route53.ListHealthChecksInput, arg2 ...func(*route53.Options)) (*route53.ListHealthChecksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHealthChecks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHealthChecks", varargs...)
	ret0, _ := ret[0].(*route53.ListHealthChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHealthChecks indicates an expected call of ListHealthChecks.
func (mr *MockRoute53ClientMockRecorder) ListHealthChecks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHealthChecks", reflect.TypeOf((*MockRoute53Client)(nil).ListHealthChecks), varargs...)
}

// ListHostedZones mocks base method.
func (m *MockRoute53Client) ListHostedZones(arg0 context.Context, arg1 *route53.ListHostedZonesInput, arg2 ...func(*route53.Options)) (*route53.ListHostedZonesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHostedZones")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedZones", varargs...)
	ret0, _ := ret[0].(*route53.ListHostedZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZones indicates an expected call of ListHostedZones.
func (mr *MockRoute53ClientMockRecorder) ListHostedZones(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZones", reflect.TypeOf((*MockRoute53Client)(nil).ListHostedZones), varargs...)
}

// ListHostedZonesByName mocks base method.
func (m *MockRoute53Client) ListHostedZonesByName(arg0 context.Context, arg1 *route53.ListHostedZonesByNameInput, arg2 ...func(*route53.Options)) (*route53.ListHostedZonesByNameOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHostedZonesByName")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedZonesByName", varargs...)
	ret0, _ := ret[0].(*route53.ListHostedZonesByNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZonesByName indicates an expected call of ListHostedZonesByName.
func (mr *MockRoute53ClientMockRecorder) ListHostedZonesByName(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZonesByName", reflect.TypeOf((*MockRoute53Client)(nil).ListHostedZonesByName), varargs...)
}

// ListHostedZonesByVPC mocks base method.
func (m *MockRoute53Client) ListHostedZonesByVPC(arg0 context.Context, arg1 *route53.ListHostedZonesByVPCInput, arg2 ...func(*route53.Options)) (*route53.ListHostedZonesByVPCOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHostedZonesByVPC")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedZonesByVPC", varargs...)
	ret0, _ := ret[0].(*route53.ListHostedZonesByVPCOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZonesByVPC indicates an expected call of ListHostedZonesByVPC.
func (mr *MockRoute53ClientMockRecorder) ListHostedZonesByVPC(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZonesByVPC", reflect.TypeOf((*MockRoute53Client)(nil).ListHostedZonesByVPC), varargs...)
}

// ListQueryLoggingConfigs mocks base method.
func (m *MockRoute53Client) ListQueryLoggingConfigs(arg0 context.Context, arg1 *route53.ListQueryLoggingConfigsInput, arg2 ...func(*route53.Options)) (*route53.ListQueryLoggingConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListQueryLoggingConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueryLoggingConfigs", varargs...)
	ret0, _ := ret[0].(*route53.ListQueryLoggingConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueryLoggingConfigs indicates an expected call of ListQueryLoggingConfigs.
func (mr *MockRoute53ClientMockRecorder) ListQueryLoggingConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueryLoggingConfigs", reflect.TypeOf((*MockRoute53Client)(nil).ListQueryLoggingConfigs), varargs...)
}

// ListResourceRecordSets mocks base method.
func (m *MockRoute53Client) ListResourceRecordSets(arg0 context.Context, arg1 *route53.ListResourceRecordSetsInput, arg2 ...func(*route53.Options)) (*route53.ListResourceRecordSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourceRecordSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceRecordSets", varargs...)
	ret0, _ := ret[0].(*route53.ListResourceRecordSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceRecordSets indicates an expected call of ListResourceRecordSets.
func (mr *MockRoute53ClientMockRecorder) ListResourceRecordSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceRecordSets", reflect.TypeOf((*MockRoute53Client)(nil).ListResourceRecordSets), varargs...)
}

// ListReusableDelegationSets mocks base method.
func (m *MockRoute53Client) ListReusableDelegationSets(arg0 context.Context, arg1 *route53.ListReusableDelegationSetsInput, arg2 ...func(*route53.Options)) (*route53.ListReusableDelegationSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListReusableDelegationSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReusableDelegationSets", varargs...)
	ret0, _ := ret[0].(*route53.ListReusableDelegationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReusableDelegationSets indicates an expected call of ListReusableDelegationSets.
func (mr *MockRoute53ClientMockRecorder) ListReusableDelegationSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReusableDelegationSets", reflect.TypeOf((*MockRoute53Client)(nil).ListReusableDelegationSets), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRoute53Client) ListTagsForResource(arg0 context.Context, arg1 *route53.ListTagsForResourceInput, arg2 ...func(*route53.Options)) (*route53.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*route53.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRoute53ClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRoute53Client)(nil).ListTagsForResource), varargs...)
}

// ListTagsForResources mocks base method.
func (m *MockRoute53Client) ListTagsForResources(arg0 context.Context, arg1 *route53.ListTagsForResourcesInput, arg2 ...func(*route53.Options)) (*route53.ListTagsForResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResources", varargs...)
	ret0, _ := ret[0].(*route53.ListTagsForResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResources indicates an expected call of ListTagsForResources.
func (mr *MockRoute53ClientMockRecorder) ListTagsForResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResources", reflect.TypeOf((*MockRoute53Client)(nil).ListTagsForResources), varargs...)
}

// ListTrafficPolicies mocks base method.
func (m *MockRoute53Client) ListTrafficPolicies(arg0 context.Context, arg1 *route53.ListTrafficPoliciesInput, arg2 ...func(*route53.Options)) (*route53.ListTrafficPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrafficPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicies", varargs...)
	ret0, _ := ret[0].(*route53.ListTrafficPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicies indicates an expected call of ListTrafficPolicies.
func (mr *MockRoute53ClientMockRecorder) ListTrafficPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicies", reflect.TypeOf((*MockRoute53Client)(nil).ListTrafficPolicies), varargs...)
}

// ListTrafficPolicyInstances mocks base method.
func (m *MockRoute53Client) ListTrafficPolicyInstances(arg0 context.Context, arg1 *route53.ListTrafficPolicyInstancesInput, arg2 ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrafficPolicyInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicyInstances", varargs...)
	ret0, _ := ret[0].(*route53.ListTrafficPolicyInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicyInstances indicates an expected call of ListTrafficPolicyInstances.
func (mr *MockRoute53ClientMockRecorder) ListTrafficPolicyInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicyInstances", reflect.TypeOf((*MockRoute53Client)(nil).ListTrafficPolicyInstances), varargs...)
}

// ListTrafficPolicyInstancesByHostedZone mocks base method.
func (m *MockRoute53Client) ListTrafficPolicyInstancesByHostedZone(arg0 context.Context, arg1 *route53.ListTrafficPolicyInstancesByHostedZoneInput, arg2 ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrafficPolicyInstancesByHostedZone")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicyInstancesByHostedZone", varargs...)
	ret0, _ := ret[0].(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicyInstancesByHostedZone indicates an expected call of ListTrafficPolicyInstancesByHostedZone.
func (mr *MockRoute53ClientMockRecorder) ListTrafficPolicyInstancesByHostedZone(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicyInstancesByHostedZone", reflect.TypeOf((*MockRoute53Client)(nil).ListTrafficPolicyInstancesByHostedZone), varargs...)
}

// ListTrafficPolicyInstancesByPolicy mocks base method.
func (m *MockRoute53Client) ListTrafficPolicyInstancesByPolicy(arg0 context.Context, arg1 *route53.ListTrafficPolicyInstancesByPolicyInput, arg2 ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrafficPolicyInstancesByPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicyInstancesByPolicy", varargs...)
	ret0, _ := ret[0].(*route53.ListTrafficPolicyInstancesByPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicyInstancesByPolicy indicates an expected call of ListTrafficPolicyInstancesByPolicy.
func (mr *MockRoute53ClientMockRecorder) ListTrafficPolicyInstancesByPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicyInstancesByPolicy", reflect.TypeOf((*MockRoute53Client)(nil).ListTrafficPolicyInstancesByPolicy), varargs...)
}

// ListTrafficPolicyVersions mocks base method.
func (m *MockRoute53Client) ListTrafficPolicyVersions(arg0 context.Context, arg1 *route53.ListTrafficPolicyVersionsInput, arg2 ...func(*route53.Options)) (*route53.ListTrafficPolicyVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrafficPolicyVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrafficPolicyVersions", varargs...)
	ret0, _ := ret[0].(*route53.ListTrafficPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrafficPolicyVersions indicates an expected call of ListTrafficPolicyVersions.
func (mr *MockRoute53ClientMockRecorder) ListTrafficPolicyVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrafficPolicyVersions", reflect.TypeOf((*MockRoute53Client)(nil).ListTrafficPolicyVersions), varargs...)
}

// ListVPCAssociationAuthorizations mocks base method.
func (m *MockRoute53Client) ListVPCAssociationAuthorizations(arg0 context.Context, arg1 *route53.ListVPCAssociationAuthorizationsInput, arg2 ...func(*route53.Options)) (*route53.ListVPCAssociationAuthorizationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVPCAssociationAuthorizations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVPCAssociationAuthorizations", varargs...)
	ret0, _ := ret[0].(*route53.ListVPCAssociationAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCAssociationAuthorizations indicates an expected call of ListVPCAssociationAuthorizations.
func (mr *MockRoute53ClientMockRecorder) ListVPCAssociationAuthorizations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCAssociationAuthorizations", reflect.TypeOf((*MockRoute53Client)(nil).ListVPCAssociationAuthorizations), varargs...)
}
