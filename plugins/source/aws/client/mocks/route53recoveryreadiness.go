// Code generated by MockGen. DO NOT EDIT.
// Source: route53recoveryreadiness.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	route53recoveryreadiness "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	gomock "github.com/golang/mock/gomock"
)

// MockRoute53recoveryreadinessClient is a mock of Route53recoveryreadinessClient interface.
type MockRoute53recoveryreadinessClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53recoveryreadinessClientMockRecorder
}

// MockRoute53recoveryreadinessClientMockRecorder is the mock recorder for MockRoute53recoveryreadinessClient.
type MockRoute53recoveryreadinessClientMockRecorder struct {
	mock *MockRoute53recoveryreadinessClient
}

// NewMockRoute53recoveryreadinessClient creates a new mock instance.
func NewMockRoute53recoveryreadinessClient(ctrl *gomock.Controller) *MockRoute53recoveryreadinessClient {
	mock := &MockRoute53recoveryreadinessClient{ctrl: ctrl}
	mock.recorder = &MockRoute53recoveryreadinessClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute53recoveryreadinessClient) EXPECT() *MockRoute53recoveryreadinessClientMockRecorder {
	return m.recorder
}

// GetArchitectureRecommendations mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetArchitectureRecommendations(arg0 context.Context, arg1 *route53recoveryreadiness.GetArchitectureRecommendationsInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetArchitectureRecommendationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetArchitectureRecommendations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchitectureRecommendations", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetArchitectureRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchitectureRecommendations indicates an expected call of GetArchitectureRecommendations.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetArchitectureRecommendations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchitectureRecommendations", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetArchitectureRecommendations), varargs...)
}

// GetCell mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetCell(arg0 context.Context, arg1 *route53recoveryreadiness.GetCellInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetCellOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCell")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCell", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCell indicates an expected call of GetCell.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetCell(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetCell), varargs...)
}

// GetCellReadinessSummary mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetCellReadinessSummary(arg0 context.Context, arg1 *route53recoveryreadiness.GetCellReadinessSummaryInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetCellReadinessSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCellReadinessSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCellReadinessSummary", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetCellReadinessSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellReadinessSummary indicates an expected call of GetCellReadinessSummary.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetCellReadinessSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellReadinessSummary", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetCellReadinessSummary), varargs...)
}

// GetReadinessCheck mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetReadinessCheck(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReadinessCheck")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheck", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheck indicates an expected call of GetReadinessCheck.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetReadinessCheck(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheck", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetReadinessCheck), varargs...)
}

// GetReadinessCheckResourceStatus mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetReadinessCheckResourceStatus(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReadinessCheckResourceStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckResourceStatus", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckResourceStatus indicates an expected call of GetReadinessCheckResourceStatus.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetReadinessCheckResourceStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckResourceStatus", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetReadinessCheckResourceStatus), varargs...)
}

// GetReadinessCheckStatus mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetReadinessCheckStatus(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckStatusInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReadinessCheckStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckStatus", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckStatus indicates an expected call of GetReadinessCheckStatus.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetReadinessCheckStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckStatus", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetReadinessCheckStatus), varargs...)
}

// GetRecoveryGroup mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetRecoveryGroup(arg0 context.Context, arg1 *route53recoveryreadiness.GetRecoveryGroupInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetRecoveryGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRecoveryGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryGroup", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryGroup indicates an expected call of GetRecoveryGroup.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetRecoveryGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroup", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetRecoveryGroup), varargs...)
}

// GetRecoveryGroupReadinessSummary mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetRecoveryGroupReadinessSummary(arg0 context.Context, arg1 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRecoveryGroupReadinessSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryGroupReadinessSummary", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryGroupReadinessSummary indicates an expected call of GetRecoveryGroupReadinessSummary.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetRecoveryGroupReadinessSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupReadinessSummary", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetRecoveryGroupReadinessSummary), varargs...)
}

// GetResourceSet mocks base method.
func (m *MockRoute53recoveryreadinessClient) GetResourceSet(arg0 context.Context, arg1 *route53recoveryreadiness.GetResourceSetInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetResourceSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResourceSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceSet", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSet indicates an expected call of GetResourceSet.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) GetResourceSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSet", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).GetResourceSet), varargs...)
}

// ListCells mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListCells(arg0 context.Context, arg1 *route53recoveryreadiness.ListCellsInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListCellsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCells")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCells", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListCellsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCells indicates an expected call of ListCells.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListCells(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCells", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListCells), varargs...)
}

// ListCrossAccountAuthorizations mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListCrossAccountAuthorizations(arg0 context.Context, arg1 *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCrossAccountAuthorizations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrossAccountAuthorizations", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrossAccountAuthorizations indicates an expected call of ListCrossAccountAuthorizations.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListCrossAccountAuthorizations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrossAccountAuthorizations", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListCrossAccountAuthorizations), varargs...)
}

// ListReadinessChecks mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListReadinessChecks(arg0 context.Context, arg1 *route53recoveryreadiness.ListReadinessChecksInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListReadinessChecksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListReadinessChecks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadinessChecks", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListReadinessChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadinessChecks indicates an expected call of ListReadinessChecks.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListReadinessChecks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadinessChecks", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListReadinessChecks), varargs...)
}

// ListRecoveryGroups mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListRecoveryGroups(arg0 context.Context, arg1 *route53recoveryreadiness.ListRecoveryGroupsInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListRecoveryGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRecoveryGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryGroups", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListRecoveryGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryGroups indicates an expected call of ListRecoveryGroups.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListRecoveryGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryGroups", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListRecoveryGroups), varargs...)
}

// ListResourceSets mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListResourceSets(arg0 context.Context, arg1 *route53recoveryreadiness.ListResourceSetsInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListResourceSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourceSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceSets", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListResourceSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceSets indicates an expected call of ListResourceSets.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListResourceSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSets", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListResourceSets), varargs...)
}

// ListRules mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListRules(arg0 context.Context, arg1 *route53recoveryreadiness.ListRulesInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRules", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListRules), varargs...)
}

// ListTagsForResources mocks base method.
func (m *MockRoute53recoveryreadinessClient) ListTagsForResources(arg0 context.Context, arg1 *route53recoveryreadiness.ListTagsForResourcesInput, arg2 ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListTagsForResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &route53recoveryreadiness.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResources", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListTagsForResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResources indicates an expected call of ListTagsForResources.
func (mr *MockRoute53recoveryreadinessClientMockRecorder) ListTagsForResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResources", reflect.TypeOf((*MockRoute53recoveryreadinessClient)(nil).ListTagsForResources), varargs...)
}
