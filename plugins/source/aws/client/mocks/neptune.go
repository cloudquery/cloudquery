// Code generated by MockGen. DO NOT EDIT.
// Source: neptune.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	neptune "github.com/aws/aws-sdk-go-v2/service/neptune"
	gomock "github.com/golang/mock/gomock"
)

// MockNeptuneClient is a mock of NeptuneClient interface.
type MockNeptuneClient struct {
	ctrl     *gomock.Controller
	recorder *MockNeptuneClientMockRecorder
}

// MockNeptuneClientMockRecorder is the mock recorder for MockNeptuneClient.
type MockNeptuneClientMockRecorder struct {
	mock *MockNeptuneClient
}

// NewMockNeptuneClient creates a new mock instance.
func NewMockNeptuneClient(ctrl *gomock.Controller) *MockNeptuneClient {
	mock := &MockNeptuneClient{ctrl: ctrl}
	mock.recorder = &MockNeptuneClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNeptuneClient) EXPECT() *MockNeptuneClientMockRecorder {
	return m.recorder
}

// DescribeDBClusterEndpoints mocks base method.
func (m *MockNeptuneClient) DescribeDBClusterEndpoints(arg0 context.Context, arg1 *neptune.DescribeDBClusterEndpointsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBClusterEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpoints", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterEndpoints indicates an expected call of DescribeDBClusterEndpoints.
func (mr *MockNeptuneClientMockRecorder) DescribeDBClusterEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpoints", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBClusterEndpoints), varargs...)
}

// DescribeDBClusterParameterGroups mocks base method.
func (m *MockNeptuneClient) DescribeDBClusterParameterGroups(arg0 context.Context, arg1 *neptune.DescribeDBClusterParameterGroupsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterParameterGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroups", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroups indicates an expected call of DescribeDBClusterParameterGroups.
func (mr *MockNeptuneClientMockRecorder) DescribeDBClusterParameterGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroups", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBClusterParameterGroups), varargs...)
}

// DescribeDBClusterParameters mocks base method.
func (m *MockNeptuneClient) DescribeDBClusterParameters(arg0 context.Context, arg1 *neptune.DescribeDBClusterParametersInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBClusterParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameters", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameters indicates an expected call of DescribeDBClusterParameters.
func (mr *MockNeptuneClientMockRecorder) DescribeDBClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameters", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBClusterParameters), varargs...)
}

// DescribeDBClusterSnapshotAttributes mocks base method.
func (m *MockNeptuneClient) DescribeDBClusterSnapshotAttributes(arg0 context.Context, arg1 *neptune.DescribeDBClusterSnapshotAttributesInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterSnapshotAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributes", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributes indicates an expected call of DescribeDBClusterSnapshotAttributes.
func (mr *MockNeptuneClientMockRecorder) DescribeDBClusterSnapshotAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributes", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBClusterSnapshotAttributes), varargs...)
}

// DescribeDBClusterSnapshots mocks base method.
func (m *MockNeptuneClient) DescribeDBClusterSnapshots(arg0 context.Context, arg1 *neptune.DescribeDBClusterSnapshotsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBClusterSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshots", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshots indicates an expected call of DescribeDBClusterSnapshots.
func (mr *MockNeptuneClientMockRecorder) DescribeDBClusterSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshots", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBClusterSnapshots), varargs...)
}

// DescribeDBClusters mocks base method.
func (m *MockNeptuneClient) DescribeDBClusters(arg0 context.Context, arg1 *neptune.DescribeDBClustersInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBClustersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusters", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters.
func (mr *MockNeptuneClientMockRecorder) DescribeDBClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBClusters), varargs...)
}

// DescribeDBEngineVersions mocks base method.
func (m *MockNeptuneClient) DescribeDBEngineVersions(arg0 context.Context, arg1 *neptune.DescribeDBEngineVersionsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBEngineVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBEngineVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersions", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersions indicates an expected call of DescribeDBEngineVersions.
func (mr *MockNeptuneClientMockRecorder) DescribeDBEngineVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersions", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBEngineVersions), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockNeptuneClient) DescribeDBInstances(arg0 context.Context, arg1 *neptune.DescribeDBInstancesInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockNeptuneClientMockRecorder) DescribeDBInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBInstances), varargs...)
}

// DescribeDBParameterGroups mocks base method.
func (m *MockNeptuneClient) DescribeDBParameterGroups(arg0 context.Context, arg1 *neptune.DescribeDBParameterGroupsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBParameterGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBParameterGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParameterGroups", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameterGroups indicates an expected call of DescribeDBParameterGroups.
func (mr *MockNeptuneClientMockRecorder) DescribeDBParameterGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroups", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBParameterGroups), varargs...)
}

// DescribeDBParameters mocks base method.
func (m *MockNeptuneClient) DescribeDBParameters(arg0 context.Context, arg1 *neptune.DescribeDBParametersInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParameters", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameters indicates an expected call of DescribeDBParameters.
func (mr *MockNeptuneClientMockRecorder) DescribeDBParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameters", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBParameters), varargs...)
}

// DescribeDBSubnetGroups mocks base method.
func (m *MockNeptuneClient) DescribeDBSubnetGroups(arg0 context.Context, arg1 *neptune.DescribeDBSubnetGroupsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeDBSubnetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBSubnetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroups", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroups indicates an expected call of DescribeDBSubnetGroups.
func (mr *MockNeptuneClientMockRecorder) DescribeDBSubnetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroups", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeDBSubnetGroups), varargs...)
}

// DescribeEngineDefaultClusterParameters mocks base method.
func (m *MockNeptuneClient) DescribeEngineDefaultClusterParameters(arg0 context.Context, arg1 *neptune.DescribeEngineDefaultClusterParametersInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEngineDefaultClusterParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParameters", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParameters indicates an expected call of DescribeEngineDefaultClusterParameters.
func (mr *MockNeptuneClientMockRecorder) DescribeEngineDefaultClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParameters", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeEngineDefaultClusterParameters), varargs...)
}

// DescribeEngineDefaultParameters mocks base method.
func (m *MockNeptuneClient) DescribeEngineDefaultParameters(arg0 context.Context, arg1 *neptune.DescribeEngineDefaultParametersInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeEngineDefaultParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEngineDefaultParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParameters", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEngineDefaultParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultParameters indicates an expected call of DescribeEngineDefaultParameters.
func (mr *MockNeptuneClientMockRecorder) DescribeEngineDefaultParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParameters", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeEngineDefaultParameters), varargs...)
}

// DescribeEventCategories mocks base method.
func (m *MockNeptuneClient) DescribeEventCategories(arg0 context.Context, arg1 *neptune.DescribeEventCategoriesInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeEventCategoriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventCategories")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategories", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories.
func (mr *MockNeptuneClientMockRecorder) DescribeEventCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeEventCategories), varargs...)
}

// DescribeEventSubscriptions mocks base method.
func (m *MockNeptuneClient) DescribeEventSubscriptions(arg0 context.Context, arg1 *neptune.DescribeEventSubscriptionsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeEventSubscriptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventSubscriptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions.
func (mr *MockNeptuneClientMockRecorder) DescribeEventSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeEventSubscriptions), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockNeptuneClient) DescribeEvents(arg0 context.Context, arg1 *neptune.DescribeEventsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEvents", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockNeptuneClientMockRecorder) DescribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeEvents), varargs...)
}

// DescribeGlobalClusters mocks base method.
func (m *MockNeptuneClient) DescribeGlobalClusters(arg0 context.Context, arg1 *neptune.DescribeGlobalClustersInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeGlobalClustersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGlobalClusters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalClusters", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeGlobalClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalClusters indicates an expected call of DescribeGlobalClusters.
func (mr *MockNeptuneClientMockRecorder) DescribeGlobalClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalClusters", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeGlobalClusters), varargs...)
}

// DescribeOrderableDBInstanceOptions mocks base method.
func (m *MockNeptuneClient) DescribeOrderableDBInstanceOptions(arg0 context.Context, arg1 *neptune.DescribeOrderableDBInstanceOptionsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrderableDBInstanceOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptions", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptions indicates an expected call of DescribeOrderableDBInstanceOptions.
func (mr *MockNeptuneClientMockRecorder) DescribeOrderableDBInstanceOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptions", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeOrderableDBInstanceOptions), varargs...)
}

// DescribePendingMaintenanceActions mocks base method.
func (m *MockNeptuneClient) DescribePendingMaintenanceActions(arg0 context.Context, arg1 *neptune.DescribePendingMaintenanceActionsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribePendingMaintenanceActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePendingMaintenanceActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", varargs...)
	ret0, _ := ret[0].(*neptune.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions.
func (mr *MockNeptuneClientMockRecorder) DescribePendingMaintenanceActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockNeptuneClient)(nil).DescribePendingMaintenanceActions), varargs...)
}

// DescribeValidDBInstanceModifications mocks base method.
func (m *MockNeptuneClient) DescribeValidDBInstanceModifications(arg0 context.Context, arg1 *neptune.DescribeValidDBInstanceModificationsInput, arg2 ...func(*neptune.Options)) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeValidDBInstanceModifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeValidDBInstanceModifications", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeValidDBInstanceModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeValidDBInstanceModifications indicates an expected call of DescribeValidDBInstanceModifications.
func (mr *MockNeptuneClientMockRecorder) DescribeValidDBInstanceModifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeValidDBInstanceModifications", reflect.TypeOf((*MockNeptuneClient)(nil).DescribeValidDBInstanceModifications), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockNeptuneClient) ListTagsForResource(arg0 context.Context, arg1 *neptune.ListTagsForResourceInput, arg2 ...func(*neptune.Options)) (*neptune.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &neptune.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*neptune.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockNeptuneClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNeptuneClient)(nil).ListTagsForResource), varargs...)
}
