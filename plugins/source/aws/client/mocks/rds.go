// Code generated by MockGen. DO NOT EDIT.
// Source: rds.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rds "github.com/aws/aws-sdk-go-v2/service/rds"
	gomock "github.com/golang/mock/gomock"
)

// MockRdsClient is a mock of RdsClient interface.
type MockRdsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRdsClientMockRecorder
}

// MockRdsClientMockRecorder is the mock recorder for MockRdsClient.
type MockRdsClientMockRecorder struct {
	mock *MockRdsClient
}

// NewMockRdsClient creates a new mock instance.
func NewMockRdsClient(ctrl *gomock.Controller) *MockRdsClient {
	mock := &MockRdsClient{ctrl: ctrl}
	mock.recorder = &MockRdsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRdsClient) EXPECT() *MockRdsClientMockRecorder {
	return m.recorder
}

// DescribeAccountAttributes mocks base method.
func (m *MockRdsClient) DescribeAccountAttributes(arg0 context.Context, arg1 *rds.DescribeAccountAttributesInput, arg2 ...func(*rds.Options)) (*rds.DescribeAccountAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributes", varargs...)
	ret0, _ := ret[0].(*rds.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributes indicates an expected call of DescribeAccountAttributes.
func (mr *MockRdsClientMockRecorder) DescribeAccountAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributes", reflect.TypeOf((*MockRdsClient)(nil).DescribeAccountAttributes), varargs...)
}

// DescribeBlueGreenDeployments mocks base method.
func (m *MockRdsClient) DescribeBlueGreenDeployments(arg0 context.Context, arg1 *rds.DescribeBlueGreenDeploymentsInput, arg2 ...func(*rds.Options)) (*rds.DescribeBlueGreenDeploymentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBlueGreenDeployments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBlueGreenDeployments", varargs...)
	ret0, _ := ret[0].(*rds.DescribeBlueGreenDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBlueGreenDeployments indicates an expected call of DescribeBlueGreenDeployments.
func (mr *MockRdsClientMockRecorder) DescribeBlueGreenDeployments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBlueGreenDeployments", reflect.TypeOf((*MockRdsClient)(nil).DescribeBlueGreenDeployments), varargs...)
}

// DescribeCertificates mocks base method.
func (m *MockRdsClient) DescribeCertificates(arg0 context.Context, arg1 *rds.DescribeCertificatesInput, arg2 ...func(*rds.Options)) (*rds.DescribeCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificates", varargs...)
	ret0, _ := ret[0].(*rds.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificates indicates an expected call of DescribeCertificates.
func (mr *MockRdsClientMockRecorder) DescribeCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificates", reflect.TypeOf((*MockRdsClient)(nil).DescribeCertificates), varargs...)
}

// DescribeDBClusterAutomatedBackups mocks base method.
func (m *MockRdsClient) DescribeDBClusterAutomatedBackups(arg0 context.Context, arg1 *rds.DescribeDBClusterAutomatedBackupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterAutomatedBackupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterAutomatedBackups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterAutomatedBackups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterAutomatedBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterAutomatedBackups indicates an expected call of DescribeDBClusterAutomatedBackups.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterAutomatedBackups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterAutomatedBackups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterAutomatedBackups), varargs...)
}

// DescribeDBClusterBacktracks mocks base method.
func (m *MockRdsClient) DescribeDBClusterBacktracks(arg0 context.Context, arg1 *rds.DescribeDBClusterBacktracksInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterBacktracksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterBacktracks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterBacktracks", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterBacktracksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterBacktracks indicates an expected call of DescribeDBClusterBacktracks.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterBacktracks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterBacktracks", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterBacktracks), varargs...)
}

// DescribeDBClusterEndpoints mocks base method.
func (m *MockRdsClient) DescribeDBClusterEndpoints(arg0 context.Context, arg1 *rds.DescribeDBClusterEndpointsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpoints", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterEndpoints indicates an expected call of DescribeDBClusterEndpoints.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpoints", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterEndpoints), varargs...)
}

// DescribeDBClusterParameterGroups mocks base method.
func (m *MockRdsClient) DescribeDBClusterParameterGroups(arg0 context.Context, arg1 *rds.DescribeDBClusterParameterGroupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterParameterGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterParameterGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroups indicates an expected call of DescribeDBClusterParameterGroups.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterParameterGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterParameterGroups), varargs...)
}

// DescribeDBClusterParameters mocks base method.
func (m *MockRdsClient) DescribeDBClusterParameters(arg0 context.Context, arg1 *rds.DescribeDBClusterParametersInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameters indicates an expected call of DescribeDBClusterParameters.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameters", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterParameters), varargs...)
}

// DescribeDBClusterSnapshotAttributes mocks base method.
func (m *MockRdsClient) DescribeDBClusterSnapshotAttributes(arg0 context.Context, arg1 *rds.DescribeDBClusterSnapshotAttributesInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterSnapshotAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributes", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributes indicates an expected call of DescribeDBClusterSnapshotAttributes.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterSnapshotAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributes", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterSnapshotAttributes), varargs...)
}

// DescribeDBClusterSnapshots mocks base method.
func (m *MockRdsClient) DescribeDBClusterSnapshots(arg0 context.Context, arg1 *rds.DescribeDBClusterSnapshotsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClusterSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusterSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshots", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshots indicates an expected call of DescribeDBClusterSnapshots.
func (mr *MockRdsClientMockRecorder) DescribeDBClusterSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshots", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusterSnapshots), varargs...)
}

// DescribeDBClusters mocks base method.
func (m *MockRdsClient) DescribeDBClusters(arg0 context.Context, arg1 *rds.DescribeDBClustersInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBClustersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBClusters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters.
func (mr *MockRdsClientMockRecorder) DescribeDBClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBClusters), varargs...)
}

// DescribeDBEngineVersions mocks base method.
func (m *MockRdsClient) DescribeDBEngineVersions(arg0 context.Context, arg1 *rds.DescribeDBEngineVersionsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBEngineVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBEngineVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersions", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersions indicates an expected call of DescribeDBEngineVersions.
func (mr *MockRdsClientMockRecorder) DescribeDBEngineVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersions", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBEngineVersions), varargs...)
}

// DescribeDBInstanceAutomatedBackups mocks base method.
func (m *MockRdsClient) DescribeDBInstanceAutomatedBackups(arg0 context.Context, arg1 *rds.DescribeDBInstanceAutomatedBackupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBInstanceAutomatedBackups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstanceAutomatedBackups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBInstanceAutomatedBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstanceAutomatedBackups indicates an expected call of DescribeDBInstanceAutomatedBackups.
func (mr *MockRdsClientMockRecorder) DescribeDBInstanceAutomatedBackups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstanceAutomatedBackups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBInstanceAutomatedBackups), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockRdsClient) DescribeDBInstances(arg0 context.Context, arg1 *rds.DescribeDBInstancesInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockRdsClientMockRecorder) DescribeDBInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBInstances), varargs...)
}

// DescribeDBLogFiles mocks base method.
func (m *MockRdsClient) DescribeDBLogFiles(arg0 context.Context, arg1 *rds.DescribeDBLogFilesInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBLogFilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBLogFiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBLogFiles", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBLogFilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBLogFiles indicates an expected call of DescribeDBLogFiles.
func (mr *MockRdsClientMockRecorder) DescribeDBLogFiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBLogFiles", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBLogFiles), varargs...)
}

// DescribeDBParameterGroups mocks base method.
func (m *MockRdsClient) DescribeDBParameterGroups(arg0 context.Context, arg1 *rds.DescribeDBParameterGroupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBParameterGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBParameterGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParameterGroups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameterGroups indicates an expected call of DescribeDBParameterGroups.
func (mr *MockRdsClientMockRecorder) DescribeDBParameterGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBParameterGroups), varargs...)
}

// DescribeDBParameters mocks base method.
func (m *MockRdsClient) DescribeDBParameters(arg0 context.Context, arg1 *rds.DescribeDBParametersInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParameters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameters indicates an expected call of DescribeDBParameters.
func (mr *MockRdsClientMockRecorder) DescribeDBParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameters", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBParameters), varargs...)
}

// DescribeDBProxies mocks base method.
func (m *MockRdsClient) DescribeDBProxies(arg0 context.Context, arg1 *rds.DescribeDBProxiesInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBProxiesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBProxies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBProxies", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBProxiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBProxies indicates an expected call of DescribeDBProxies.
func (mr *MockRdsClientMockRecorder) DescribeDBProxies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBProxies", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBProxies), varargs...)
}

// DescribeDBProxyEndpoints mocks base method.
func (m *MockRdsClient) DescribeDBProxyEndpoints(arg0 context.Context, arg1 *rds.DescribeDBProxyEndpointsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBProxyEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBProxyEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBProxyEndpoints", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBProxyEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBProxyEndpoints indicates an expected call of DescribeDBProxyEndpoints.
func (mr *MockRdsClientMockRecorder) DescribeDBProxyEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBProxyEndpoints", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBProxyEndpoints), varargs...)
}

// DescribeDBProxyTargetGroups mocks base method.
func (m *MockRdsClient) DescribeDBProxyTargetGroups(arg0 context.Context, arg1 *rds.DescribeDBProxyTargetGroupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBProxyTargetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBProxyTargetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBProxyTargetGroups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBProxyTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBProxyTargetGroups indicates an expected call of DescribeDBProxyTargetGroups.
func (mr *MockRdsClientMockRecorder) DescribeDBProxyTargetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBProxyTargetGroups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBProxyTargetGroups), varargs...)
}

// DescribeDBProxyTargets mocks base method.
func (m *MockRdsClient) DescribeDBProxyTargets(arg0 context.Context, arg1 *rds.DescribeDBProxyTargetsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBProxyTargetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBProxyTargets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBProxyTargets", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBProxyTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBProxyTargets indicates an expected call of DescribeDBProxyTargets.
func (mr *MockRdsClientMockRecorder) DescribeDBProxyTargets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBProxyTargets", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBProxyTargets), varargs...)
}

// DescribeDBSecurityGroups mocks base method.
func (m *MockRdsClient) DescribeDBSecurityGroups(arg0 context.Context, arg1 *rds.DescribeDBSecurityGroupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBSecurityGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBSecurityGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSecurityGroups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSecurityGroups indicates an expected call of DescribeDBSecurityGroups.
func (mr *MockRdsClientMockRecorder) DescribeDBSecurityGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSecurityGroups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBSecurityGroups), varargs...)
}

// DescribeDBSnapshotAttributes mocks base method.
func (m *MockRdsClient) DescribeDBSnapshotAttributes(arg0 context.Context, arg1 *rds.DescribeDBSnapshotAttributesInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBSnapshotAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBSnapshotAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSnapshotAttributes", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSnapshotAttributes indicates an expected call of DescribeDBSnapshotAttributes.
func (mr *MockRdsClientMockRecorder) DescribeDBSnapshotAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSnapshotAttributes", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBSnapshotAttributes), varargs...)
}

// DescribeDBSnapshots mocks base method.
func (m *MockRdsClient) DescribeDBSnapshots(arg0 context.Context, arg1 *rds.DescribeDBSnapshotsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSnapshots", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSnapshots indicates an expected call of DescribeDBSnapshots.
func (mr *MockRdsClientMockRecorder) DescribeDBSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSnapshots", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBSnapshots), varargs...)
}

// DescribeDBSubnetGroups mocks base method.
func (m *MockRdsClient) DescribeDBSubnetGroups(arg0 context.Context, arg1 *rds.DescribeDBSubnetGroupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeDBSubnetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDBSubnetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroups indicates an expected call of DescribeDBSubnetGroups.
func (mr *MockRdsClientMockRecorder) DescribeDBSubnetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroups", reflect.TypeOf((*MockRdsClient)(nil).DescribeDBSubnetGroups), varargs...)
}

// DescribeEngineDefaultClusterParameters mocks base method.
func (m *MockRdsClient) DescribeEngineDefaultClusterParameters(arg0 context.Context, arg1 *rds.DescribeEngineDefaultClusterParametersInput, arg2 ...func(*rds.Options)) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEngineDefaultClusterParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParameters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParameters indicates an expected call of DescribeEngineDefaultClusterParameters.
func (mr *MockRdsClientMockRecorder) DescribeEngineDefaultClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParameters", reflect.TypeOf((*MockRdsClient)(nil).DescribeEngineDefaultClusterParameters), varargs...)
}

// DescribeEngineDefaultParameters mocks base method.
func (m *MockRdsClient) DescribeEngineDefaultParameters(arg0 context.Context, arg1 *rds.DescribeEngineDefaultParametersInput, arg2 ...func(*rds.Options)) (*rds.DescribeEngineDefaultParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEngineDefaultParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParameters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeEngineDefaultParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultParameters indicates an expected call of DescribeEngineDefaultParameters.
func (mr *MockRdsClientMockRecorder) DescribeEngineDefaultParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParameters", reflect.TypeOf((*MockRdsClient)(nil).DescribeEngineDefaultParameters), varargs...)
}

// DescribeEventCategories mocks base method.
func (m *MockRdsClient) DescribeEventCategories(arg0 context.Context, arg1 *rds.DescribeEventCategoriesInput, arg2 ...func(*rds.Options)) (*rds.DescribeEventCategoriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventCategories")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategories", varargs...)
	ret0, _ := ret[0].(*rds.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories.
func (mr *MockRdsClientMockRecorder) DescribeEventCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockRdsClient)(nil).DescribeEventCategories), varargs...)
}

// DescribeEventSubscriptions mocks base method.
func (m *MockRdsClient) DescribeEventSubscriptions(arg0 context.Context, arg1 *rds.DescribeEventSubscriptionsInput, arg2 ...func(*rds.Options)) (*rds.DescribeEventSubscriptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventSubscriptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", varargs...)
	ret0, _ := ret[0].(*rds.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions.
func (mr *MockRdsClientMockRecorder) DescribeEventSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockRdsClient)(nil).DescribeEventSubscriptions), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockRdsClient) DescribeEvents(arg0 context.Context, arg1 *rds.DescribeEventsInput, arg2 ...func(*rds.Options)) (*rds.DescribeEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEvents", varargs...)
	ret0, _ := ret[0].(*rds.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockRdsClientMockRecorder) DescribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockRdsClient)(nil).DescribeEvents), varargs...)
}

// DescribeExportTasks mocks base method.
func (m *MockRdsClient) DescribeExportTasks(arg0 context.Context, arg1 *rds.DescribeExportTasksInput, arg2 ...func(*rds.Options)) (*rds.DescribeExportTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeExportTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExportTasks", varargs...)
	ret0, _ := ret[0].(*rds.DescribeExportTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExportTasks indicates an expected call of DescribeExportTasks.
func (mr *MockRdsClientMockRecorder) DescribeExportTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportTasks", reflect.TypeOf((*MockRdsClient)(nil).DescribeExportTasks), varargs...)
}

// DescribeGlobalClusters mocks base method.
func (m *MockRdsClient) DescribeGlobalClusters(arg0 context.Context, arg1 *rds.DescribeGlobalClustersInput, arg2 ...func(*rds.Options)) (*rds.DescribeGlobalClustersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGlobalClusters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalClusters", varargs...)
	ret0, _ := ret[0].(*rds.DescribeGlobalClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalClusters indicates an expected call of DescribeGlobalClusters.
func (mr *MockRdsClientMockRecorder) DescribeGlobalClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalClusters", reflect.TypeOf((*MockRdsClient)(nil).DescribeGlobalClusters), varargs...)
}

// DescribeOptionGroupOptions mocks base method.
func (m *MockRdsClient) DescribeOptionGroupOptions(arg0 context.Context, arg1 *rds.DescribeOptionGroupOptionsInput, arg2 ...func(*rds.Options)) (*rds.DescribeOptionGroupOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOptionGroupOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOptionGroupOptions", varargs...)
	ret0, _ := ret[0].(*rds.DescribeOptionGroupOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOptionGroupOptions indicates an expected call of DescribeOptionGroupOptions.
func (mr *MockRdsClientMockRecorder) DescribeOptionGroupOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptionGroupOptions", reflect.TypeOf((*MockRdsClient)(nil).DescribeOptionGroupOptions), varargs...)
}

// DescribeOptionGroups mocks base method.
func (m *MockRdsClient) DescribeOptionGroups(arg0 context.Context, arg1 *rds.DescribeOptionGroupsInput, arg2 ...func(*rds.Options)) (*rds.DescribeOptionGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOptionGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOptionGroups", varargs...)
	ret0, _ := ret[0].(*rds.DescribeOptionGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOptionGroups indicates an expected call of DescribeOptionGroups.
func (mr *MockRdsClientMockRecorder) DescribeOptionGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptionGroups", reflect.TypeOf((*MockRdsClient)(nil).DescribeOptionGroups), varargs...)
}

// DescribeOrderableDBInstanceOptions mocks base method.
func (m *MockRdsClient) DescribeOrderableDBInstanceOptions(arg0 context.Context, arg1 *rds.DescribeOrderableDBInstanceOptionsInput, arg2 ...func(*rds.Options)) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrderableDBInstanceOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptions", varargs...)
	ret0, _ := ret[0].(*rds.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptions indicates an expected call of DescribeOrderableDBInstanceOptions.
func (mr *MockRdsClientMockRecorder) DescribeOrderableDBInstanceOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptions", reflect.TypeOf((*MockRdsClient)(nil).DescribeOrderableDBInstanceOptions), varargs...)
}

// DescribePendingMaintenanceActions mocks base method.
func (m *MockRdsClient) DescribePendingMaintenanceActions(arg0 context.Context, arg1 *rds.DescribePendingMaintenanceActionsInput, arg2 ...func(*rds.Options)) (*rds.DescribePendingMaintenanceActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePendingMaintenanceActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", varargs...)
	ret0, _ := ret[0].(*rds.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions.
func (mr *MockRdsClientMockRecorder) DescribePendingMaintenanceActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockRdsClient)(nil).DescribePendingMaintenanceActions), varargs...)
}

// DescribeReservedDBInstances mocks base method.
func (m *MockRdsClient) DescribeReservedDBInstances(arg0 context.Context, arg1 *rds.DescribeReservedDBInstancesInput, arg2 ...func(*rds.Options)) (*rds.DescribeReservedDBInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedDBInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedDBInstances", varargs...)
	ret0, _ := ret[0].(*rds.DescribeReservedDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedDBInstances indicates an expected call of DescribeReservedDBInstances.
func (mr *MockRdsClientMockRecorder) DescribeReservedDBInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedDBInstances", reflect.TypeOf((*MockRdsClient)(nil).DescribeReservedDBInstances), varargs...)
}

// DescribeReservedDBInstancesOfferings mocks base method.
func (m *MockRdsClient) DescribeReservedDBInstancesOfferings(arg0 context.Context, arg1 *rds.DescribeReservedDBInstancesOfferingsInput, arg2 ...func(*rds.Options)) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedDBInstancesOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedDBInstancesOfferings", varargs...)
	ret0, _ := ret[0].(*rds.DescribeReservedDBInstancesOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedDBInstancesOfferings indicates an expected call of DescribeReservedDBInstancesOfferings.
func (mr *MockRdsClientMockRecorder) DescribeReservedDBInstancesOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedDBInstancesOfferings", reflect.TypeOf((*MockRdsClient)(nil).DescribeReservedDBInstancesOfferings), varargs...)
}

// DescribeSourceRegions mocks base method.
func (m *MockRdsClient) DescribeSourceRegions(arg0 context.Context, arg1 *rds.DescribeSourceRegionsInput, arg2 ...func(*rds.Options)) (*rds.DescribeSourceRegionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSourceRegions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceRegions", varargs...)
	ret0, _ := ret[0].(*rds.DescribeSourceRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceRegions indicates an expected call of DescribeSourceRegions.
func (mr *MockRdsClientMockRecorder) DescribeSourceRegions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceRegions", reflect.TypeOf((*MockRdsClient)(nil).DescribeSourceRegions), varargs...)
}

// DescribeValidDBInstanceModifications mocks base method.
func (m *MockRdsClient) DescribeValidDBInstanceModifications(arg0 context.Context, arg1 *rds.DescribeValidDBInstanceModificationsInput, arg2 ...func(*rds.Options)) (*rds.DescribeValidDBInstanceModificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeValidDBInstanceModifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeValidDBInstanceModifications", varargs...)
	ret0, _ := ret[0].(*rds.DescribeValidDBInstanceModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeValidDBInstanceModifications indicates an expected call of DescribeValidDBInstanceModifications.
func (mr *MockRdsClientMockRecorder) DescribeValidDBInstanceModifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeValidDBInstanceModifications", reflect.TypeOf((*MockRdsClient)(nil).DescribeValidDBInstanceModifications), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRdsClient) ListTagsForResource(arg0 context.Context, arg1 *rds.ListTagsForResourceInput, arg2 ...func(*rds.Options)) (*rds.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &rds.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*rds.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRdsClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRdsClient)(nil).ListTagsForResource), varargs...)
}
