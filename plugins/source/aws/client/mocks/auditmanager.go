// Code generated by MockGen. DO NOT EDIT.
// Source: auditmanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auditmanager "github.com/aws/aws-sdk-go-v2/service/auditmanager"
	gomock "github.com/golang/mock/gomock"
)

// MockAuditmanagerClient is a mock of AuditmanagerClient interface.
type MockAuditmanagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuditmanagerClientMockRecorder
}

// MockAuditmanagerClientMockRecorder is the mock recorder for MockAuditmanagerClient.
type MockAuditmanagerClientMockRecorder struct {
	mock *MockAuditmanagerClient
}

// NewMockAuditmanagerClient creates a new mock instance.
func NewMockAuditmanagerClient(ctrl *gomock.Controller) *MockAuditmanagerClient {
	mock := &MockAuditmanagerClient{ctrl: ctrl}
	mock.recorder = &MockAuditmanagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditmanagerClient) EXPECT() *MockAuditmanagerClientMockRecorder {
	return m.recorder
}

// GetAccountStatus mocks base method.
func (m *MockAuditmanagerClient) GetAccountStatus(arg0 context.Context, arg1 *auditmanager.GetAccountStatusInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetAccountStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAccountStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountStatus", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStatus indicates an expected call of GetAccountStatus.
func (mr *MockAuditmanagerClientMockRecorder) GetAccountStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatus", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetAccountStatus), varargs...)
}

// GetAssessment mocks base method.
func (m *MockAuditmanagerClient) GetAssessment(arg0 context.Context, arg1 *auditmanager.GetAssessmentInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetAssessmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAssessment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessment", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessment indicates an expected call of GetAssessment.
func (mr *MockAuditmanagerClientMockRecorder) GetAssessment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessment", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetAssessment), varargs...)
}

// GetAssessmentFramework mocks base method.
func (m *MockAuditmanagerClient) GetAssessmentFramework(arg0 context.Context, arg1 *auditmanager.GetAssessmentFrameworkInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetAssessmentFrameworkOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAssessmentFramework")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessmentFramework", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentFramework indicates an expected call of GetAssessmentFramework.
func (mr *MockAuditmanagerClientMockRecorder) GetAssessmentFramework(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentFramework", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetAssessmentFramework), varargs...)
}

// GetAssessmentReportUrl mocks base method.
func (m *MockAuditmanagerClient) GetAssessmentReportUrl(arg0 context.Context, arg1 *auditmanager.GetAssessmentReportUrlInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetAssessmentReportUrlOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAssessmentReportUrl")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessmentReportUrl", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentReportUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentReportUrl indicates an expected call of GetAssessmentReportUrl.
func (mr *MockAuditmanagerClientMockRecorder) GetAssessmentReportUrl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReportUrl", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetAssessmentReportUrl), varargs...)
}

// GetChangeLogs mocks base method.
func (m *MockAuditmanagerClient) GetChangeLogs(arg0 context.Context, arg1 *auditmanager.GetChangeLogsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetChangeLogsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetChangeLogs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeLogs", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetChangeLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeLogs indicates an expected call of GetChangeLogs.
func (mr *MockAuditmanagerClientMockRecorder) GetChangeLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeLogs", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetChangeLogs), varargs...)
}

// GetControl mocks base method.
func (m *MockAuditmanagerClient) GetControl(arg0 context.Context, arg1 *auditmanager.GetControlInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetControlOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetControl")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetControl", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControl indicates an expected call of GetControl.
func (mr *MockAuditmanagerClientMockRecorder) GetControl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControl", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetControl), varargs...)
}

// GetDelegations mocks base method.
func (m *MockAuditmanagerClient) GetDelegations(arg0 context.Context, arg1 *auditmanager.GetDelegationsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetDelegationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDelegations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDelegations", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetDelegationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations.
func (mr *MockAuditmanagerClientMockRecorder) GetDelegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetDelegations), varargs...)
}

// GetEvidence mocks base method.
func (m *MockAuditmanagerClient) GetEvidence(arg0 context.Context, arg1 *auditmanager.GetEvidenceInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetEvidenceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvidence")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidence", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidence indicates an expected call of GetEvidence.
func (mr *MockAuditmanagerClientMockRecorder) GetEvidence(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidence", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetEvidence), varargs...)
}

// GetEvidenceByEvidenceFolder mocks base method.
func (m *MockAuditmanagerClient) GetEvidenceByEvidenceFolder(arg0 context.Context, arg1 *auditmanager.GetEvidenceByEvidenceFolderInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetEvidenceByEvidenceFolderOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvidenceByEvidenceFolder")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceByEvidenceFolder", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceByEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceByEvidenceFolder indicates an expected call of GetEvidenceByEvidenceFolder.
func (mr *MockAuditmanagerClientMockRecorder) GetEvidenceByEvidenceFolder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByEvidenceFolder", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetEvidenceByEvidenceFolder), varargs...)
}

// GetEvidenceFileUploadUrl mocks base method.
func (m *MockAuditmanagerClient) GetEvidenceFileUploadUrl(arg0 context.Context, arg1 *auditmanager.GetEvidenceFileUploadUrlInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetEvidenceFileUploadUrlOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvidenceFileUploadUrl")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFileUploadUrl", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFileUploadUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFileUploadUrl indicates an expected call of GetEvidenceFileUploadUrl.
func (mr *MockAuditmanagerClientMockRecorder) GetEvidenceFileUploadUrl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFileUploadUrl", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetEvidenceFileUploadUrl), varargs...)
}

// GetEvidenceFolder mocks base method.
func (m *MockAuditmanagerClient) GetEvidenceFolder(arg0 context.Context, arg1 *auditmanager.GetEvidenceFolderInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetEvidenceFolderOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvidenceFolder")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFolder", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFolder indicates an expected call of GetEvidenceFolder.
func (mr *MockAuditmanagerClientMockRecorder) GetEvidenceFolder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFolder", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetEvidenceFolder), varargs...)
}

// GetEvidenceFoldersByAssessment mocks base method.
func (m *MockAuditmanagerClient) GetEvidenceFoldersByAssessment(arg0 context.Context, arg1 *auditmanager.GetEvidenceFoldersByAssessmentInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetEvidenceFoldersByAssessmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvidenceFoldersByAssessment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessment", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFoldersByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessment indicates an expected call of GetEvidenceFoldersByAssessment.
func (mr *MockAuditmanagerClientMockRecorder) GetEvidenceFoldersByAssessment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessment", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetEvidenceFoldersByAssessment), varargs...)
}

// GetEvidenceFoldersByAssessmentControl mocks base method.
func (m *MockAuditmanagerClient) GetEvidenceFoldersByAssessmentControl(arg0 context.Context, arg1 *auditmanager.GetEvidenceFoldersByAssessmentControlInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvidenceFoldersByAssessmentControl")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentControl", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFoldersByAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessmentControl indicates an expected call of GetEvidenceFoldersByAssessmentControl.
func (mr *MockAuditmanagerClientMockRecorder) GetEvidenceFoldersByAssessmentControl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentControl", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetEvidenceFoldersByAssessmentControl), varargs...)
}

// GetInsights mocks base method.
func (m *MockAuditmanagerClient) GetInsights(arg0 context.Context, arg1 *auditmanager.GetInsightsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetInsightsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsights")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsights", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsights indicates an expected call of GetInsights.
func (mr *MockAuditmanagerClientMockRecorder) GetInsights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsights", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetInsights), varargs...)
}

// GetInsightsByAssessment mocks base method.
func (m *MockAuditmanagerClient) GetInsightsByAssessment(arg0 context.Context, arg1 *auditmanager.GetInsightsByAssessmentInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetInsightsByAssessmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsightsByAssessment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsByAssessment", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetInsightsByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsByAssessment indicates an expected call of GetInsightsByAssessment.
func (mr *MockAuditmanagerClientMockRecorder) GetInsightsByAssessment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsByAssessment", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetInsightsByAssessment), varargs...)
}

// GetOrganizationAdminAccount mocks base method.
func (m *MockAuditmanagerClient) GetOrganizationAdminAccount(arg0 context.Context, arg1 *auditmanager.GetOrganizationAdminAccountInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetOrganizationAdminAccountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOrganizationAdminAccount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationAdminAccount", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationAdminAccount indicates an expected call of GetOrganizationAdminAccount.
func (mr *MockAuditmanagerClientMockRecorder) GetOrganizationAdminAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationAdminAccount", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetOrganizationAdminAccount), varargs...)
}

// GetServicesInScope mocks base method.
func (m *MockAuditmanagerClient) GetServicesInScope(arg0 context.Context, arg1 *auditmanager.GetServicesInScopeInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetServicesInScopeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetServicesInScope")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServicesInScope", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetServicesInScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesInScope indicates an expected call of GetServicesInScope.
func (mr *MockAuditmanagerClientMockRecorder) GetServicesInScope(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesInScope", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetServicesInScope), varargs...)
}

// GetSettings mocks base method.
func (m *MockAuditmanagerClient) GetSettings(arg0 context.Context, arg1 *auditmanager.GetSettingsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.GetSettingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSettings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockAuditmanagerClientMockRecorder) GetSettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockAuditmanagerClient)(nil).GetSettings), varargs...)
}

// ListAssessmentControlInsightsByControlDomain mocks base method.
func (m *MockAuditmanagerClient) ListAssessmentControlInsightsByControlDomain(arg0 context.Context, arg1 *auditmanager.ListAssessmentControlInsightsByControlDomainInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListAssessmentControlInsightsByControlDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssessmentControlInsightsByControlDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentControlInsightsByControlDomain", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentControlInsightsByControlDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentControlInsightsByControlDomain indicates an expected call of ListAssessmentControlInsightsByControlDomain.
func (mr *MockAuditmanagerClientMockRecorder) ListAssessmentControlInsightsByControlDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentControlInsightsByControlDomain", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListAssessmentControlInsightsByControlDomain), varargs...)
}

// ListAssessmentFrameworkShareRequests mocks base method.
func (m *MockAuditmanagerClient) ListAssessmentFrameworkShareRequests(arg0 context.Context, arg1 *auditmanager.ListAssessmentFrameworkShareRequestsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListAssessmentFrameworkShareRequestsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssessmentFrameworkShareRequests")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentFrameworkShareRequests", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentFrameworkShareRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentFrameworkShareRequests indicates an expected call of ListAssessmentFrameworkShareRequests.
func (mr *MockAuditmanagerClientMockRecorder) ListAssessmentFrameworkShareRequests(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworkShareRequests", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListAssessmentFrameworkShareRequests), varargs...)
}

// ListAssessmentFrameworks mocks base method.
func (m *MockAuditmanagerClient) ListAssessmentFrameworks(arg0 context.Context, arg1 *auditmanager.ListAssessmentFrameworksInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListAssessmentFrameworksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssessmentFrameworks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentFrameworks", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentFrameworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentFrameworks indicates an expected call of ListAssessmentFrameworks.
func (mr *MockAuditmanagerClientMockRecorder) ListAssessmentFrameworks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworks", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListAssessmentFrameworks), varargs...)
}

// ListAssessmentReports mocks base method.
func (m *MockAuditmanagerClient) ListAssessmentReports(arg0 context.Context, arg1 *auditmanager.ListAssessmentReportsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListAssessmentReportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssessmentReports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentReports", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentReports indicates an expected call of ListAssessmentReports.
func (mr *MockAuditmanagerClientMockRecorder) ListAssessmentReports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentReports", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListAssessmentReports), varargs...)
}

// ListAssessments mocks base method.
func (m *MockAuditmanagerClient) ListAssessments(arg0 context.Context, arg1 *auditmanager.ListAssessmentsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListAssessmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssessments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessments", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessments indicates an expected call of ListAssessments.
func (mr *MockAuditmanagerClientMockRecorder) ListAssessments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessments", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListAssessments), varargs...)
}

// ListControlDomainInsights mocks base method.
func (m *MockAuditmanagerClient) ListControlDomainInsights(arg0 context.Context, arg1 *auditmanager.ListControlDomainInsightsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListControlDomainInsightsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListControlDomainInsights")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlDomainInsights", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlDomainInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlDomainInsights indicates an expected call of ListControlDomainInsights.
func (mr *MockAuditmanagerClientMockRecorder) ListControlDomainInsights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsights", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListControlDomainInsights), varargs...)
}

// ListControlDomainInsightsByAssessment mocks base method.
func (m *MockAuditmanagerClient) ListControlDomainInsightsByAssessment(arg0 context.Context, arg1 *auditmanager.ListControlDomainInsightsByAssessmentInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListControlDomainInsightsByAssessmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListControlDomainInsightsByAssessment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlDomainInsightsByAssessment", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlDomainInsightsByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlDomainInsightsByAssessment indicates an expected call of ListControlDomainInsightsByAssessment.
func (mr *MockAuditmanagerClientMockRecorder) ListControlDomainInsightsByAssessment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsByAssessment", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListControlDomainInsightsByAssessment), varargs...)
}

// ListControlInsightsByControlDomain mocks base method.
func (m *MockAuditmanagerClient) ListControlInsightsByControlDomain(arg0 context.Context, arg1 *auditmanager.ListControlInsightsByControlDomainInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListControlInsightsByControlDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListControlInsightsByControlDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlInsightsByControlDomain", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlInsightsByControlDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlInsightsByControlDomain indicates an expected call of ListControlInsightsByControlDomain.
func (mr *MockAuditmanagerClientMockRecorder) ListControlInsightsByControlDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlInsightsByControlDomain", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListControlInsightsByControlDomain), varargs...)
}

// ListControls mocks base method.
func (m *MockAuditmanagerClient) ListControls(arg0 context.Context, arg1 *auditmanager.ListControlsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListControlsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListControls")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControls", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControls indicates an expected call of ListControls.
func (mr *MockAuditmanagerClientMockRecorder) ListControls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControls", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListControls), varargs...)
}

// ListKeywordsForDataSource mocks base method.
func (m *MockAuditmanagerClient) ListKeywordsForDataSource(arg0 context.Context, arg1 *auditmanager.ListKeywordsForDataSourceInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListKeywordsForDataSourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListKeywordsForDataSource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeywordsForDataSource", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListKeywordsForDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeywordsForDataSource indicates an expected call of ListKeywordsForDataSource.
func (mr *MockAuditmanagerClientMockRecorder) ListKeywordsForDataSource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeywordsForDataSource", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListKeywordsForDataSource), varargs...)
}

// ListNotifications mocks base method.
func (m *MockAuditmanagerClient) ListNotifications(arg0 context.Context, arg1 *auditmanager.ListNotificationsInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListNotificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNotifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotifications", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockAuditmanagerClientMockRecorder) ListNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListNotifications), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAuditmanagerClient) ListTagsForResource(arg0 context.Context, arg1 *auditmanager.ListTagsForResourceInput, arg2 ...func(*auditmanager.Options)) (*auditmanager.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &auditmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAuditmanagerClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAuditmanagerClient)(nil).ListTagsForResource), varargs...)
}
