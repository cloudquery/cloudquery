// Code generated by MockGen. DO NOT EDIT.
// Source: dynamodb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
)

// MockDynamodbClient is a mock of DynamodbClient interface.
type MockDynamodbClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynamodbClientMockRecorder
}

// MockDynamodbClientMockRecorder is the mock recorder for MockDynamodbClient.
type MockDynamodbClientMockRecorder struct {
	mock *MockDynamodbClient
}

// NewMockDynamodbClient creates a new mock instance.
func NewMockDynamodbClient(ctrl *gomock.Controller) *MockDynamodbClient {
	mock := &MockDynamodbClient{ctrl: ctrl}
	mock.recorder = &MockDynamodbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamodbClient) EXPECT() *MockDynamodbClientMockRecorder {
	return m.recorder
}

// BatchGetItem mocks base method.
func (m *MockDynamodbClient) BatchGetItem(arg0 context.Context, arg1 *dynamodb.BatchGetItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetItem")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.BatchGetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetItem indicates an expected call of BatchGetItem.
func (mr *MockDynamodbClientMockRecorder) BatchGetItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItem", reflect.TypeOf((*MockDynamodbClient)(nil).BatchGetItem), varargs...)
}

// DescribeBackup mocks base method.
func (m *MockDynamodbClient) DescribeBackup(arg0 context.Context, arg1 *dynamodb.DescribeBackupInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeBackupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBackup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackup", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackup indicates an expected call of DescribeBackup.
func (mr *MockDynamodbClientMockRecorder) DescribeBackup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackup", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeBackup), varargs...)
}

// DescribeContinuousBackups mocks base method.
func (m *MockDynamodbClient) DescribeContinuousBackups(arg0 context.Context, arg1 *dynamodb.DescribeContinuousBackupsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeContinuousBackupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeContinuousBackups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContinuousBackups", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeContinuousBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContinuousBackups indicates an expected call of DescribeContinuousBackups.
func (mr *MockDynamodbClientMockRecorder) DescribeContinuousBackups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContinuousBackups", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeContinuousBackups), varargs...)
}

// DescribeContributorInsights mocks base method.
func (m *MockDynamodbClient) DescribeContributorInsights(arg0 context.Context, arg1 *dynamodb.DescribeContributorInsightsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeContributorInsightsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeContributorInsights")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContributorInsights", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContributorInsights indicates an expected call of DescribeContributorInsights.
func (mr *MockDynamodbClientMockRecorder) DescribeContributorInsights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContributorInsights", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeContributorInsights), varargs...)
}

// DescribeEndpoints mocks base method.
func (m *MockDynamodbClient) DescribeEndpoints(arg0 context.Context, arg1 *dynamodb.DescribeEndpointsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpoints", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoints indicates an expected call of DescribeEndpoints.
func (mr *MockDynamodbClientMockRecorder) DescribeEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoints", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeEndpoints), varargs...)
}

// DescribeExport mocks base method.
func (m *MockDynamodbClient) DescribeExport(arg0 context.Context, arg1 *dynamodb.DescribeExportInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeExportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeExport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExport", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExport indicates an expected call of DescribeExport.
func (mr *MockDynamodbClientMockRecorder) DescribeExport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExport", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeExport), varargs...)
}

// DescribeGlobalTable mocks base method.
func (m *MockDynamodbClient) DescribeGlobalTable(arg0 context.Context, arg1 *dynamodb.DescribeGlobalTableInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeGlobalTableOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGlobalTable")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalTable indicates an expected call of DescribeGlobalTable.
func (mr *MockDynamodbClientMockRecorder) DescribeGlobalTable(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTable", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeGlobalTable), varargs...)
}

// DescribeGlobalTableSettings mocks base method.
func (m *MockDynamodbClient) DescribeGlobalTableSettings(arg0 context.Context, arg1 *dynamodb.DescribeGlobalTableSettingsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGlobalTableSettings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalTableSettings", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeGlobalTableSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalTableSettings indicates an expected call of DescribeGlobalTableSettings.
func (mr *MockDynamodbClientMockRecorder) DescribeGlobalTableSettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTableSettings", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeGlobalTableSettings), varargs...)
}

// DescribeImport mocks base method.
func (m *MockDynamodbClient) DescribeImport(arg0 context.Context, arg1 *dynamodb.DescribeImportInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeImportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImport", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImport indicates an expected call of DescribeImport.
func (mr *MockDynamodbClientMockRecorder) DescribeImport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImport", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeImport), varargs...)
}

// DescribeKinesisStreamingDestination mocks base method.
func (m *MockDynamodbClient) DescribeKinesisStreamingDestination(arg0 context.Context, arg1 *dynamodb.DescribeKinesisStreamingDestinationInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeKinesisStreamingDestination")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKinesisStreamingDestination", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKinesisStreamingDestination indicates an expected call of DescribeKinesisStreamingDestination.
func (mr *MockDynamodbClientMockRecorder) DescribeKinesisStreamingDestination(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKinesisStreamingDestination", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeKinesisStreamingDestination), varargs...)
}

// DescribeLimits mocks base method.
func (m *MockDynamodbClient) DescribeLimits(arg0 context.Context, arg1 *dynamodb.DescribeLimitsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeLimitsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLimits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLimits", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLimits indicates an expected call of DescribeLimits.
func (mr *MockDynamodbClientMockRecorder) DescribeLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLimits", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeLimits), varargs...)
}

// DescribeTable mocks base method.
func (m *MockDynamodbClient) DescribeTable(arg0 context.Context, arg1 *dynamodb.DescribeTableInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeTableOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTable")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTable", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockDynamodbClientMockRecorder) DescribeTable(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeTable), varargs...)
}

// DescribeTableReplicaAutoScaling mocks base method.
func (m *MockDynamodbClient) DescribeTableReplicaAutoScaling(arg0 context.Context, arg1 *dynamodb.DescribeTableReplicaAutoScalingInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTableReplicaAutoScaling")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableReplicaAutoScaling", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableReplicaAutoScaling indicates an expected call of DescribeTableReplicaAutoScaling.
func (mr *MockDynamodbClientMockRecorder) DescribeTableReplicaAutoScaling(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableReplicaAutoScaling", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeTableReplicaAutoScaling), varargs...)
}

// DescribeTimeToLive mocks base method.
func (m *MockDynamodbClient) DescribeTimeToLive(arg0 context.Context, arg1 *dynamodb.DescribeTimeToLiveInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.DescribeTimeToLiveOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTimeToLive")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTimeToLive", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTimeToLiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTimeToLive indicates an expected call of DescribeTimeToLive.
func (mr *MockDynamodbClientMockRecorder) DescribeTimeToLive(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeToLive", reflect.TypeOf((*MockDynamodbClient)(nil).DescribeTimeToLive), varargs...)
}

// GetItem mocks base method.
func (m *MockDynamodbClient) GetItem(arg0 context.Context, arg1 *dynamodb.GetItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetItem")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamodbClientMockRecorder) GetItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamodbClient)(nil).GetItem), varargs...)
}

// ListBackups mocks base method.
func (m *MockDynamodbClient) ListBackups(arg0 context.Context, arg1 *dynamodb.ListBackupsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListBackupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListBackups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackups", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockDynamodbClientMockRecorder) ListBackups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockDynamodbClient)(nil).ListBackups), varargs...)
}

// ListContributorInsights mocks base method.
func (m *MockDynamodbClient) ListContributorInsights(arg0 context.Context, arg1 *dynamodb.ListContributorInsightsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListContributorInsightsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListContributorInsights")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContributorInsights", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContributorInsights indicates an expected call of ListContributorInsights.
func (mr *MockDynamodbClientMockRecorder) ListContributorInsights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorInsights", reflect.TypeOf((*MockDynamodbClient)(nil).ListContributorInsights), varargs...)
}

// ListExports mocks base method.
func (m *MockDynamodbClient) ListExports(arg0 context.Context, arg1 *dynamodb.ListExportsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListExportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListExports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExports", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports.
func (mr *MockDynamodbClientMockRecorder) ListExports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockDynamodbClient)(nil).ListExports), varargs...)
}

// ListGlobalTables mocks base method.
func (m *MockDynamodbClient) ListGlobalTables(arg0 context.Context, arg1 *dynamodb.ListGlobalTablesInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListGlobalTablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListGlobalTables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGlobalTables", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListGlobalTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlobalTables indicates an expected call of ListGlobalTables.
func (mr *MockDynamodbClientMockRecorder) ListGlobalTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalTables", reflect.TypeOf((*MockDynamodbClient)(nil).ListGlobalTables), varargs...)
}

// ListImports mocks base method.
func (m *MockDynamodbClient) ListImports(arg0 context.Context, arg1 *dynamodb.ListImportsInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListImportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListImports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImports", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListImportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockDynamodbClientMockRecorder) ListImports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockDynamodbClient)(nil).ListImports), varargs...)
}

// ListTables mocks base method.
func (m *MockDynamodbClient) ListTables(arg0 context.Context, arg1 *dynamodb.ListTablesInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListTablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTables", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockDynamodbClientMockRecorder) ListTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockDynamodbClient)(nil).ListTables), varargs...)
}

// ListTagsOfResource mocks base method.
func (m *MockDynamodbClient) ListTagsOfResource(arg0 context.Context, arg1 *dynamodb.ListTagsOfResourceInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.ListTagsOfResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &dynamodb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsOfResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsOfResource", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListTagsOfResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsOfResource indicates an expected call of ListTagsOfResource.
func (mr *MockDynamodbClientMockRecorder) ListTagsOfResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsOfResource", reflect.TypeOf((*MockDynamodbClient)(nil).ListTagsOfResource), varargs...)
}
