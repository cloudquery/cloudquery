// Code generated by MockGen. DO NOT EDIT.
// Source: elasticsearchservice.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	elasticsearchservice "github.com/aws/aws-sdk-go-v2/service/elasticsearchservice"
	gomock "github.com/golang/mock/gomock"
)

// MockElasticsearchserviceClient is a mock of ElasticsearchserviceClient interface.
type MockElasticsearchserviceClient struct {
	ctrl     *gomock.Controller
	recorder *MockElasticsearchserviceClientMockRecorder
}

// MockElasticsearchserviceClientMockRecorder is the mock recorder for MockElasticsearchserviceClient.
type MockElasticsearchserviceClientMockRecorder struct {
	mock *MockElasticsearchserviceClient
}

// NewMockElasticsearchserviceClient creates a new mock instance.
func NewMockElasticsearchserviceClient(ctrl *gomock.Controller) *MockElasticsearchserviceClient {
	mock := &MockElasticsearchserviceClient{ctrl: ctrl}
	mock.recorder = &MockElasticsearchserviceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticsearchserviceClient) EXPECT() *MockElasticsearchserviceClientMockRecorder {
	return m.recorder
}

// DescribeDomainAutoTunes mocks base method.
func (m *MockElasticsearchserviceClient) DescribeDomainAutoTunes(arg0 context.Context, arg1 *elasticsearchservice.DescribeDomainAutoTunesInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeDomainAutoTunesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDomainAutoTunes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainAutoTunes", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeDomainAutoTunesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainAutoTunes indicates an expected call of DescribeDomainAutoTunes.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeDomainAutoTunes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainAutoTunes", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeDomainAutoTunes), varargs...)
}

// DescribeDomainChangeProgress mocks base method.
func (m *MockElasticsearchserviceClient) DescribeDomainChangeProgress(arg0 context.Context, arg1 *elasticsearchservice.DescribeDomainChangeProgressInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeDomainChangeProgressOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDomainChangeProgress")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainChangeProgress", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeDomainChangeProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainChangeProgress indicates an expected call of DescribeDomainChangeProgress.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeDomainChangeProgress(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainChangeProgress", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeDomainChangeProgress), varargs...)
}

// DescribeElasticsearchDomain mocks base method.
func (m *MockElasticsearchserviceClient) DescribeElasticsearchDomain(arg0 context.Context, arg1 *elasticsearchservice.DescribeElasticsearchDomainInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeElasticsearchDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeElasticsearchDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticsearchDomain", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeElasticsearchDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticsearchDomain indicates an expected call of DescribeElasticsearchDomain.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeElasticsearchDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticsearchDomain", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeElasticsearchDomain), varargs...)
}

// DescribeElasticsearchDomainConfig mocks base method.
func (m *MockElasticsearchserviceClient) DescribeElasticsearchDomainConfig(arg0 context.Context, arg1 *elasticsearchservice.DescribeElasticsearchDomainConfigInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeElasticsearchDomainConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeElasticsearchDomainConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticsearchDomainConfig", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeElasticsearchDomainConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticsearchDomainConfig indicates an expected call of DescribeElasticsearchDomainConfig.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeElasticsearchDomainConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticsearchDomainConfig", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeElasticsearchDomainConfig), varargs...)
}

// DescribeElasticsearchDomains mocks base method.
func (m *MockElasticsearchserviceClient) DescribeElasticsearchDomains(arg0 context.Context, arg1 *elasticsearchservice.DescribeElasticsearchDomainsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeElasticsearchDomainsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeElasticsearchDomains")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticsearchDomains", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeElasticsearchDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticsearchDomains indicates an expected call of DescribeElasticsearchDomains.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeElasticsearchDomains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticsearchDomains", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeElasticsearchDomains), varargs...)
}

// DescribeElasticsearchInstanceTypeLimits mocks base method.
func (m *MockElasticsearchserviceClient) DescribeElasticsearchInstanceTypeLimits(arg0 context.Context, arg1 *elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeElasticsearchInstanceTypeLimits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticsearchInstanceTypeLimits", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeElasticsearchInstanceTypeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticsearchInstanceTypeLimits indicates an expected call of DescribeElasticsearchInstanceTypeLimits.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeElasticsearchInstanceTypeLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticsearchInstanceTypeLimits", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeElasticsearchInstanceTypeLimits), varargs...)
}

// DescribeInboundCrossClusterSearchConnections mocks base method.
func (m *MockElasticsearchserviceClient) DescribeInboundCrossClusterSearchConnections(arg0 context.Context, arg1 *elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInboundCrossClusterSearchConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInboundCrossClusterSearchConnections", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeInboundCrossClusterSearchConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInboundCrossClusterSearchConnections indicates an expected call of DescribeInboundCrossClusterSearchConnections.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeInboundCrossClusterSearchConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInboundCrossClusterSearchConnections", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeInboundCrossClusterSearchConnections), varargs...)
}

// DescribeOutboundCrossClusterSearchConnections mocks base method.
func (m *MockElasticsearchserviceClient) DescribeOutboundCrossClusterSearchConnections(arg0 context.Context, arg1 *elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOutboundCrossClusterSearchConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOutboundCrossClusterSearchConnections", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeOutboundCrossClusterSearchConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOutboundCrossClusterSearchConnections indicates an expected call of DescribeOutboundCrossClusterSearchConnections.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeOutboundCrossClusterSearchConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOutboundCrossClusterSearchConnections", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeOutboundCrossClusterSearchConnections), varargs...)
}

// DescribePackages mocks base method.
func (m *MockElasticsearchserviceClient) DescribePackages(arg0 context.Context, arg1 *elasticsearchservice.DescribePackagesInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribePackagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePackages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePackages", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribePackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackages indicates an expected call of DescribePackages.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribePackages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackages", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribePackages), varargs...)
}

// DescribeReservedElasticsearchInstanceOfferings mocks base method.
func (m *MockElasticsearchserviceClient) DescribeReservedElasticsearchInstanceOfferings(arg0 context.Context, arg1 *elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedElasticsearchInstanceOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedElasticsearchInstanceOfferings", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeReservedElasticsearchInstanceOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedElasticsearchInstanceOfferings indicates an expected call of DescribeReservedElasticsearchInstanceOfferings.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeReservedElasticsearchInstanceOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedElasticsearchInstanceOfferings", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeReservedElasticsearchInstanceOfferings), varargs...)
}

// DescribeReservedElasticsearchInstances mocks base method.
func (m *MockElasticsearchserviceClient) DescribeReservedElasticsearchInstances(arg0 context.Context, arg1 *elasticsearchservice.DescribeReservedElasticsearchInstancesInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedElasticsearchInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedElasticsearchInstances", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeReservedElasticsearchInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedElasticsearchInstances indicates an expected call of DescribeReservedElasticsearchInstances.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeReservedElasticsearchInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedElasticsearchInstances", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeReservedElasticsearchInstances), varargs...)
}

// DescribeVpcEndpoints mocks base method.
func (m *MockElasticsearchserviceClient) DescribeVpcEndpoints(arg0 context.Context, arg1 *elasticsearchservice.DescribeVpcEndpointsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.DescribeVpcEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeVpcEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcEndpoints", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.DescribeVpcEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcEndpoints indicates an expected call of DescribeVpcEndpoints.
func (mr *MockElasticsearchserviceClientMockRecorder) DescribeVpcEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcEndpoints", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).DescribeVpcEndpoints), varargs...)
}

// GetCompatibleElasticsearchVersions mocks base method.
func (m *MockElasticsearchserviceClient) GetCompatibleElasticsearchVersions(arg0 context.Context, arg1 *elasticsearchservice.GetCompatibleElasticsearchVersionsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCompatibleElasticsearchVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompatibleElasticsearchVersions", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.GetCompatibleElasticsearchVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibleElasticsearchVersions indicates an expected call of GetCompatibleElasticsearchVersions.
func (mr *MockElasticsearchserviceClientMockRecorder) GetCompatibleElasticsearchVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleElasticsearchVersions", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).GetCompatibleElasticsearchVersions), varargs...)
}

// GetPackageVersionHistory mocks base method.
func (m *MockElasticsearchserviceClient) GetPackageVersionHistory(arg0 context.Context, arg1 *elasticsearchservice.GetPackageVersionHistoryInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.GetPackageVersionHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPackageVersionHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackageVersionHistory", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.GetPackageVersionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionHistory indicates an expected call of GetPackageVersionHistory.
func (mr *MockElasticsearchserviceClientMockRecorder) GetPackageVersionHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionHistory", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).GetPackageVersionHistory), varargs...)
}

// GetUpgradeHistory mocks base method.
func (m *MockElasticsearchserviceClient) GetUpgradeHistory(arg0 context.Context, arg1 *elasticsearchservice.GetUpgradeHistoryInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.GetUpgradeHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUpgradeHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpgradeHistory", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.GetUpgradeHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeHistory indicates an expected call of GetUpgradeHistory.
func (mr *MockElasticsearchserviceClientMockRecorder) GetUpgradeHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeHistory", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).GetUpgradeHistory), varargs...)
}

// GetUpgradeStatus mocks base method.
func (m *MockElasticsearchserviceClient) GetUpgradeStatus(arg0 context.Context, arg1 *elasticsearchservice.GetUpgradeStatusInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.GetUpgradeStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUpgradeStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpgradeStatus", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.GetUpgradeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeStatus indicates an expected call of GetUpgradeStatus.
func (mr *MockElasticsearchserviceClientMockRecorder) GetUpgradeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeStatus", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).GetUpgradeStatus), varargs...)
}

// ListDomainNames mocks base method.
func (m *MockElasticsearchserviceClient) ListDomainNames(arg0 context.Context, arg1 *elasticsearchservice.ListDomainNamesInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListDomainNamesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDomainNames")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainNames", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainNames indicates an expected call of ListDomainNames.
func (mr *MockElasticsearchserviceClientMockRecorder) ListDomainNames(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainNames", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListDomainNames), varargs...)
}

// ListDomainsForPackage mocks base method.
func (m *MockElasticsearchserviceClient) ListDomainsForPackage(arg0 context.Context, arg1 *elasticsearchservice.ListDomainsForPackageInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListDomainsForPackageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDomainsForPackage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsForPackage", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListDomainsForPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsForPackage indicates an expected call of ListDomainsForPackage.
func (mr *MockElasticsearchserviceClientMockRecorder) ListDomainsForPackage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsForPackage", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListDomainsForPackage), varargs...)
}

// ListElasticsearchInstanceTypes mocks base method.
func (m *MockElasticsearchserviceClient) ListElasticsearchInstanceTypes(arg0 context.Context, arg1 *elasticsearchservice.ListElasticsearchInstanceTypesInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListElasticsearchInstanceTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListElasticsearchInstanceTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListElasticsearchInstanceTypes", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListElasticsearchInstanceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListElasticsearchInstanceTypes indicates an expected call of ListElasticsearchInstanceTypes.
func (mr *MockElasticsearchserviceClientMockRecorder) ListElasticsearchInstanceTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListElasticsearchInstanceTypes", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListElasticsearchInstanceTypes), varargs...)
}

// ListElasticsearchVersions mocks base method.
func (m *MockElasticsearchserviceClient) ListElasticsearchVersions(arg0 context.Context, arg1 *elasticsearchservice.ListElasticsearchVersionsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListElasticsearchVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListElasticsearchVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListElasticsearchVersions", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListElasticsearchVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListElasticsearchVersions indicates an expected call of ListElasticsearchVersions.
func (mr *MockElasticsearchserviceClientMockRecorder) ListElasticsearchVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListElasticsearchVersions", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListElasticsearchVersions), varargs...)
}

// ListPackagesForDomain mocks base method.
func (m *MockElasticsearchserviceClient) ListPackagesForDomain(arg0 context.Context, arg1 *elasticsearchservice.ListPackagesForDomainInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListPackagesForDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPackagesForDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackagesForDomain", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListPackagesForDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackagesForDomain indicates an expected call of ListPackagesForDomain.
func (mr *MockElasticsearchserviceClientMockRecorder) ListPackagesForDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesForDomain", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListPackagesForDomain), varargs...)
}

// ListTags mocks base method.
func (m *MockElasticsearchserviceClient) ListTags(arg0 context.Context, arg1 *elasticsearchservice.ListTagsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTags", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockElasticsearchserviceClientMockRecorder) ListTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListTags), varargs...)
}

// ListVpcEndpointAccess mocks base method.
func (m *MockElasticsearchserviceClient) ListVpcEndpointAccess(arg0 context.Context, arg1 *elasticsearchservice.ListVpcEndpointAccessInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListVpcEndpointAccessOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVpcEndpointAccess")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcEndpointAccess", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListVpcEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcEndpointAccess indicates an expected call of ListVpcEndpointAccess.
func (mr *MockElasticsearchserviceClientMockRecorder) ListVpcEndpointAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpointAccess", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListVpcEndpointAccess), varargs...)
}

// ListVpcEndpoints mocks base method.
func (m *MockElasticsearchserviceClient) ListVpcEndpoints(arg0 context.Context, arg1 *elasticsearchservice.ListVpcEndpointsInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListVpcEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVpcEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcEndpoints", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListVpcEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcEndpoints indicates an expected call of ListVpcEndpoints.
func (mr *MockElasticsearchserviceClientMockRecorder) ListVpcEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpoints", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListVpcEndpoints), varargs...)
}

// ListVpcEndpointsForDomain mocks base method.
func (m *MockElasticsearchserviceClient) ListVpcEndpointsForDomain(arg0 context.Context, arg1 *elasticsearchservice.ListVpcEndpointsForDomainInput, arg2 ...func(*elasticsearchservice.Options)) (*elasticsearchservice.ListVpcEndpointsForDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticsearchservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVpcEndpointsForDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcEndpointsForDomain", varargs...)
	ret0, _ := ret[0].(*elasticsearchservice.ListVpcEndpointsForDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcEndpointsForDomain indicates an expected call of ListVpcEndpointsForDomain.
func (mr *MockElasticsearchserviceClientMockRecorder) ListVpcEndpointsForDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcEndpointsForDomain", reflect.TypeOf((*MockElasticsearchserviceClient)(nil).ListVpcEndpointsForDomain), varargs...)
}
