// Code generated by MockGen. DO NOT EDIT.
// Source: cloudwatch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cloudwatch "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudwatchClient is a mock of CloudwatchClient interface.
type MockCloudwatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudwatchClientMockRecorder
}

// MockCloudwatchClientMockRecorder is the mock recorder for MockCloudwatchClient.
type MockCloudwatchClientMockRecorder struct {
	mock *MockCloudwatchClient
}

// NewMockCloudwatchClient creates a new mock instance.
func NewMockCloudwatchClient(ctrl *gomock.Controller) *MockCloudwatchClient {
	mock := &MockCloudwatchClient{ctrl: ctrl}
	mock.recorder = &MockCloudwatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudwatchClient) EXPECT() *MockCloudwatchClientMockRecorder {
	return m.recorder
}

// DescribeAlarmHistory mocks base method.
func (m *MockCloudwatchClient) DescribeAlarmHistory(arg0 context.Context, arg1 *cloudwatch.DescribeAlarmHistoryInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAlarmHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmHistory", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmHistory indicates an expected call of DescribeAlarmHistory.
func (mr *MockCloudwatchClientMockRecorder) DescribeAlarmHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmHistory", reflect.TypeOf((*MockCloudwatchClient)(nil).DescribeAlarmHistory), varargs...)
}

// DescribeAlarms mocks base method.
func (m *MockCloudwatchClient) DescribeAlarms(arg0 context.Context, arg1 *cloudwatch.DescribeAlarmsInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAlarms")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarms", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarms indicates an expected call of DescribeAlarms.
func (mr *MockCloudwatchClientMockRecorder) DescribeAlarms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarms", reflect.TypeOf((*MockCloudwatchClient)(nil).DescribeAlarms), varargs...)
}

// DescribeAlarmsForMetric mocks base method.
func (m *MockCloudwatchClient) DescribeAlarmsForMetric(arg0 context.Context, arg1 *cloudwatch.DescribeAlarmsForMetricInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAlarmsForMetric")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmsForMetric", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmsForMetricOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmsForMetric indicates an expected call of DescribeAlarmsForMetric.
func (mr *MockCloudwatchClientMockRecorder) DescribeAlarmsForMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsForMetric", reflect.TypeOf((*MockCloudwatchClient)(nil).DescribeAlarmsForMetric), varargs...)
}

// DescribeAnomalyDetectors mocks base method.
func (m *MockCloudwatchClient) DescribeAnomalyDetectors(arg0 context.Context, arg1 *cloudwatch.DescribeAnomalyDetectorsInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAnomalyDetectors")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectors", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAnomalyDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAnomalyDetectors indicates an expected call of DescribeAnomalyDetectors.
func (mr *MockCloudwatchClientMockRecorder) DescribeAnomalyDetectors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectors", reflect.TypeOf((*MockCloudwatchClient)(nil).DescribeAnomalyDetectors), varargs...)
}

// DescribeInsightRules mocks base method.
func (m *MockCloudwatchClient) DescribeInsightRules(arg0 context.Context, arg1 *cloudwatch.DescribeInsightRulesInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.DescribeInsightRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInsightRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInsightRules", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeInsightRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInsightRules indicates an expected call of DescribeInsightRules.
func (mr *MockCloudwatchClientMockRecorder) DescribeInsightRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInsightRules", reflect.TypeOf((*MockCloudwatchClient)(nil).DescribeInsightRules), varargs...)
}

// GetDashboard mocks base method.
func (m *MockCloudwatchClient) GetDashboard(arg0 context.Context, arg1 *cloudwatch.GetDashboardInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.GetDashboardOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDashboard")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDashboard", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockCloudwatchClientMockRecorder) GetDashboard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockCloudwatchClient)(nil).GetDashboard), varargs...)
}

// GetInsightRuleReport mocks base method.
func (m *MockCloudwatchClient) GetInsightRuleReport(arg0 context.Context, arg1 *cloudwatch.GetInsightRuleReportInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.GetInsightRuleReportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsightRuleReport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightRuleReport", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetInsightRuleReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightRuleReport indicates an expected call of GetInsightRuleReport.
func (mr *MockCloudwatchClientMockRecorder) GetInsightRuleReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightRuleReport", reflect.TypeOf((*MockCloudwatchClient)(nil).GetInsightRuleReport), varargs...)
}

// GetMetricData mocks base method.
func (m *MockCloudwatchClient) GetMetricData(arg0 context.Context, arg1 *cloudwatch.GetMetricDataInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricData", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricData indicates an expected call of GetMetricData.
func (mr *MockCloudwatchClientMockRecorder) GetMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricData", reflect.TypeOf((*MockCloudwatchClient)(nil).GetMetricData), varargs...)
}

// GetMetricStatistics mocks base method.
func (m *MockCloudwatchClient) GetMetricStatistics(arg0 context.Context, arg1 *cloudwatch.GetMetricStatisticsInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMetricStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricStatistics", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetMetricStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricStatistics indicates an expected call of GetMetricStatistics.
func (mr *MockCloudwatchClientMockRecorder) GetMetricStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricStatistics", reflect.TypeOf((*MockCloudwatchClient)(nil).GetMetricStatistics), varargs...)
}

// GetMetricStream mocks base method.
func (m *MockCloudwatchClient) GetMetricStream(arg0 context.Context, arg1 *cloudwatch.GetMetricStreamInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStreamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMetricStream")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricStream", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetMetricStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricStream indicates an expected call of GetMetricStream.
func (mr *MockCloudwatchClientMockRecorder) GetMetricStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricStream", reflect.TypeOf((*MockCloudwatchClient)(nil).GetMetricStream), varargs...)
}

// GetMetricWidgetImage mocks base method.
func (m *MockCloudwatchClient) GetMetricWidgetImage(arg0 context.Context, arg1 *cloudwatch.GetMetricWidgetImageInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricWidgetImageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMetricWidgetImage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricWidgetImage", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetMetricWidgetImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricWidgetImage indicates an expected call of GetMetricWidgetImage.
func (mr *MockCloudwatchClientMockRecorder) GetMetricWidgetImage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricWidgetImage", reflect.TypeOf((*MockCloudwatchClient)(nil).GetMetricWidgetImage), varargs...)
}

// ListDashboards mocks base method.
func (m *MockCloudwatchClient) ListDashboards(arg0 context.Context, arg1 *cloudwatch.ListDashboardsInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.ListDashboardsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDashboards")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDashboards", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboards indicates an expected call of ListDashboards.
func (mr *MockCloudwatchClientMockRecorder) ListDashboards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboards", reflect.TypeOf((*MockCloudwatchClient)(nil).ListDashboards), varargs...)
}

// ListManagedInsightRules mocks base method.
func (m *MockCloudwatchClient) ListManagedInsightRules(arg0 context.Context, arg1 *cloudwatch.ListManagedInsightRulesInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.ListManagedInsightRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListManagedInsightRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedInsightRules", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListManagedInsightRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedInsightRules indicates an expected call of ListManagedInsightRules.
func (mr *MockCloudwatchClientMockRecorder) ListManagedInsightRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedInsightRules", reflect.TypeOf((*MockCloudwatchClient)(nil).ListManagedInsightRules), varargs...)
}

// ListMetricStreams mocks base method.
func (m *MockCloudwatchClient) ListMetricStreams(arg0 context.Context, arg1 *cloudwatch.ListMetricStreamsInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricStreamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMetricStreams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricStreams", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListMetricStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricStreams indicates an expected call of ListMetricStreams.
func (mr *MockCloudwatchClientMockRecorder) ListMetricStreams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricStreams", reflect.TypeOf((*MockCloudwatchClient)(nil).ListMetricStreams), varargs...)
}

// ListMetrics mocks base method.
func (m *MockCloudwatchClient) ListMetrics(arg0 context.Context, arg1 *cloudwatch.ListMetricsInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMetrics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetrics", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrics indicates an expected call of ListMetrics.
func (mr *MockCloudwatchClientMockRecorder) ListMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrics", reflect.TypeOf((*MockCloudwatchClient)(nil).ListMetrics), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockCloudwatchClient) ListTagsForResource(arg0 context.Context, arg1 *cloudwatch.ListTagsForResourceInput, arg2 ...func(*cloudwatch.Options)) (*cloudwatch.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudwatch.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockCloudwatchClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudwatchClient)(nil).ListTagsForResource), varargs...)
}
