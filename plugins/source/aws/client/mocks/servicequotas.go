// Code generated by MockGen. DO NOT EDIT.
// Source: servicequotas.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	servicequotas "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	gomock "github.com/golang/mock/gomock"
)

// MockServicequotasClient is a mock of ServicequotasClient interface.
type MockServicequotasClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicequotasClientMockRecorder
}

// MockServicequotasClientMockRecorder is the mock recorder for MockServicequotasClient.
type MockServicequotasClientMockRecorder struct {
	mock *MockServicequotasClient
}

// NewMockServicequotasClient creates a new mock instance.
func NewMockServicequotasClient(ctrl *gomock.Controller) *MockServicequotasClient {
	mock := &MockServicequotasClient{ctrl: ctrl}
	mock.recorder = &MockServicequotasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicequotasClient) EXPECT() *MockServicequotasClientMockRecorder {
	return m.recorder
}

// GetAWSDefaultServiceQuota mocks base method.
func (m *MockServicequotasClient) GetAWSDefaultServiceQuota(arg0 context.Context, arg1 *servicequotas.GetAWSDefaultServiceQuotaInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.GetAWSDefaultServiceQuotaOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAWSDefaultServiceQuota")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAWSDefaultServiceQuota", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetAWSDefaultServiceQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSDefaultServiceQuota indicates an expected call of GetAWSDefaultServiceQuota.
func (mr *MockServicequotasClientMockRecorder) GetAWSDefaultServiceQuota(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSDefaultServiceQuota", reflect.TypeOf((*MockServicequotasClient)(nil).GetAWSDefaultServiceQuota), varargs...)
}

// GetAssociationForServiceQuotaTemplate mocks base method.
func (m *MockServicequotasClient) GetAssociationForServiceQuotaTemplate(arg0 context.Context, arg1 *servicequotas.GetAssociationForServiceQuotaTemplateInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.GetAssociationForServiceQuotaTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAssociationForServiceQuotaTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssociationForServiceQuotaTemplate", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetAssociationForServiceQuotaTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssociationForServiceQuotaTemplate indicates an expected call of GetAssociationForServiceQuotaTemplate.
func (mr *MockServicequotasClientMockRecorder) GetAssociationForServiceQuotaTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociationForServiceQuotaTemplate", reflect.TypeOf((*MockServicequotasClient)(nil).GetAssociationForServiceQuotaTemplate), varargs...)
}

// GetRequestedServiceQuotaChange mocks base method.
func (m *MockServicequotasClient) GetRequestedServiceQuotaChange(arg0 context.Context, arg1 *servicequotas.GetRequestedServiceQuotaChangeInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.GetRequestedServiceQuotaChangeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRequestedServiceQuotaChange")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestedServiceQuotaChange", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetRequestedServiceQuotaChangeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestedServiceQuotaChange indicates an expected call of GetRequestedServiceQuotaChange.
func (mr *MockServicequotasClientMockRecorder) GetRequestedServiceQuotaChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedServiceQuotaChange", reflect.TypeOf((*MockServicequotasClient)(nil).GetRequestedServiceQuotaChange), varargs...)
}

// GetServiceQuota mocks base method.
func (m *MockServicequotasClient) GetServiceQuota(arg0 context.Context, arg1 *servicequotas.GetServiceQuotaInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetServiceQuota")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceQuota", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetServiceQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceQuota indicates an expected call of GetServiceQuota.
func (mr *MockServicequotasClientMockRecorder) GetServiceQuota(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceQuota", reflect.TypeOf((*MockServicequotasClient)(nil).GetServiceQuota), varargs...)
}

// GetServiceQuotaIncreaseRequestFromTemplate mocks base method.
func (m *MockServicequotasClient) GetServiceQuotaIncreaseRequestFromTemplate(arg0 context.Context, arg1 *servicequotas.GetServiceQuotaIncreaseRequestFromTemplateInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetServiceQuotaIncreaseRequestFromTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceQuotaIncreaseRequestFromTemplate", varargs...)
	ret0, _ := ret[0].(*servicequotas.GetServiceQuotaIncreaseRequestFromTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceQuotaIncreaseRequestFromTemplate indicates an expected call of GetServiceQuotaIncreaseRequestFromTemplate.
func (mr *MockServicequotasClientMockRecorder) GetServiceQuotaIncreaseRequestFromTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceQuotaIncreaseRequestFromTemplate", reflect.TypeOf((*MockServicequotasClient)(nil).GetServiceQuotaIncreaseRequestFromTemplate), varargs...)
}

// ListAWSDefaultServiceQuotas mocks base method.
func (m *MockServicequotasClient) ListAWSDefaultServiceQuotas(arg0 context.Context, arg1 *servicequotas.ListAWSDefaultServiceQuotasInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListAWSDefaultServiceQuotasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAWSDefaultServiceQuotas")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAWSDefaultServiceQuotas", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListAWSDefaultServiceQuotasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAWSDefaultServiceQuotas indicates an expected call of ListAWSDefaultServiceQuotas.
func (mr *MockServicequotasClientMockRecorder) ListAWSDefaultServiceQuotas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAWSDefaultServiceQuotas", reflect.TypeOf((*MockServicequotasClient)(nil).ListAWSDefaultServiceQuotas), varargs...)
}

// ListRequestedServiceQuotaChangeHistory mocks base method.
func (m *MockServicequotasClient) ListRequestedServiceQuotaChangeHistory(arg0 context.Context, arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRequestedServiceQuotaChangeHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRequestedServiceQuotaChangeHistory", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListRequestedServiceQuotaChangeHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequestedServiceQuotaChangeHistory indicates an expected call of ListRequestedServiceQuotaChangeHistory.
func (mr *MockServicequotasClientMockRecorder) ListRequestedServiceQuotaChangeHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequestedServiceQuotaChangeHistory", reflect.TypeOf((*MockServicequotasClient)(nil).ListRequestedServiceQuotaChangeHistory), varargs...)
}

// ListRequestedServiceQuotaChangeHistoryByQuota mocks base method.
func (m *MockServicequotasClient) ListRequestedServiceQuotaChangeHistoryByQuota(arg0 context.Context, arg1 *servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRequestedServiceQuotaChangeHistoryByQuota")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRequestedServiceQuotaChangeHistoryByQuota", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListRequestedServiceQuotaChangeHistoryByQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRequestedServiceQuotaChangeHistoryByQuota indicates an expected call of ListRequestedServiceQuotaChangeHistoryByQuota.
func (mr *MockServicequotasClientMockRecorder) ListRequestedServiceQuotaChangeHistoryByQuota(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRequestedServiceQuotaChangeHistoryByQuota", reflect.TypeOf((*MockServicequotasClient)(nil).ListRequestedServiceQuotaChangeHistoryByQuota), varargs...)
}

// ListServiceQuotaIncreaseRequestsInTemplate mocks base method.
func (m *MockServicequotasClient) ListServiceQuotaIncreaseRequestsInTemplate(arg0 context.Context, arg1 *servicequotas.ListServiceQuotaIncreaseRequestsInTemplateInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListServiceQuotaIncreaseRequestsInTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceQuotaIncreaseRequestsInTemplate", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListServiceQuotaIncreaseRequestsInTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceQuotaIncreaseRequestsInTemplate indicates an expected call of ListServiceQuotaIncreaseRequestsInTemplate.
func (mr *MockServicequotasClientMockRecorder) ListServiceQuotaIncreaseRequestsInTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceQuotaIncreaseRequestsInTemplate", reflect.TypeOf((*MockServicequotasClient)(nil).ListServiceQuotaIncreaseRequestsInTemplate), varargs...)
}

// ListServiceQuotas mocks base method.
func (m *MockServicequotasClient) ListServiceQuotas(arg0 context.Context, arg1 *servicequotas.ListServiceQuotasInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListServiceQuotas")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceQuotas", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListServiceQuotasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceQuotas indicates an expected call of ListServiceQuotas.
func (mr *MockServicequotasClientMockRecorder) ListServiceQuotas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceQuotas", reflect.TypeOf((*MockServicequotasClient)(nil).ListServiceQuotas), varargs...)
}

// ListServices mocks base method.
func (m *MockServicequotasClient) ListServices(arg0 context.Context, arg1 *servicequotas.ListServicesInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListServicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListServices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockServicequotasClientMockRecorder) ListServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockServicequotasClient)(nil).ListServices), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockServicequotasClient) ListTagsForResource(arg0 context.Context, arg1 *servicequotas.ListTagsForResourceInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicequotas.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockServicequotasClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockServicequotasClient)(nil).ListTagsForResource), varargs...)
}
