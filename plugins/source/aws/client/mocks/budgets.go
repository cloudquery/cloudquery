// Code generated by MockGen. DO NOT EDIT.
// Source: budgets.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	budgets "github.com/aws/aws-sdk-go-v2/service/budgets"
	gomock "github.com/golang/mock/gomock"
)

// MockBudgetsClient is a mock of BudgetsClient interface.
type MockBudgetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetsClientMockRecorder
}

// MockBudgetsClientMockRecorder is the mock recorder for MockBudgetsClient.
type MockBudgetsClientMockRecorder struct {
	mock *MockBudgetsClient
}

// NewMockBudgetsClient creates a new mock instance.
func NewMockBudgetsClient(ctrl *gomock.Controller) *MockBudgetsClient {
	mock := &MockBudgetsClient{ctrl: ctrl}
	mock.recorder = &MockBudgetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudgetsClient) EXPECT() *MockBudgetsClientMockRecorder {
	return m.recorder
}

// DescribeBudget mocks base method.
func (m *MockBudgetsClient) DescribeBudget(arg0 context.Context, arg1 *budgets.DescribeBudgetInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudget")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudget", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudget indicates an expected call of DescribeBudget.
func (mr *MockBudgetsClientMockRecorder) DescribeBudget(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudget", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudget), varargs...)
}

// DescribeBudgetAction mocks base method.
func (m *MockBudgetsClient) DescribeBudgetAction(arg0 context.Context, arg1 *budgets.DescribeBudgetActionInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetActionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgetAction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgetAction", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgetAction indicates an expected call of DescribeBudgetAction.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgetAction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgetAction", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgetAction), varargs...)
}

// DescribeBudgetActionHistories mocks base method.
func (m *MockBudgetsClient) DescribeBudgetActionHistories(arg0 context.Context, arg1 *budgets.DescribeBudgetActionHistoriesInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetActionHistoriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgetActionHistories")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgetActionHistories", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetActionHistoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgetActionHistories indicates an expected call of DescribeBudgetActionHistories.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgetActionHistories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgetActionHistories", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgetActionHistories), varargs...)
}

// DescribeBudgetActionsForAccount mocks base method.
func (m *MockBudgetsClient) DescribeBudgetActionsForAccount(arg0 context.Context, arg1 *budgets.DescribeBudgetActionsForAccountInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetActionsForAccountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgetActionsForAccount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgetActionsForAccount", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetActionsForAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgetActionsForAccount indicates an expected call of DescribeBudgetActionsForAccount.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgetActionsForAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgetActionsForAccount", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgetActionsForAccount), varargs...)
}

// DescribeBudgetActionsForBudget mocks base method.
func (m *MockBudgetsClient) DescribeBudgetActionsForBudget(arg0 context.Context, arg1 *budgets.DescribeBudgetActionsForBudgetInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetActionsForBudgetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgetActionsForBudget")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgetActionsForBudget", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetActionsForBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgetActionsForBudget indicates an expected call of DescribeBudgetActionsForBudget.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgetActionsForBudget(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgetActionsForBudget", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgetActionsForBudget), varargs...)
}

// DescribeBudgetNotificationsForAccount mocks base method.
func (m *MockBudgetsClient) DescribeBudgetNotificationsForAccount(arg0 context.Context, arg1 *budgets.DescribeBudgetNotificationsForAccountInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetNotificationsForAccountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgetNotificationsForAccount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgetNotificationsForAccount", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetNotificationsForAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgetNotificationsForAccount indicates an expected call of DescribeBudgetNotificationsForAccount.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgetNotificationsForAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgetNotificationsForAccount", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgetNotificationsForAccount), varargs...)
}

// DescribeBudgetPerformanceHistory mocks base method.
func (m *MockBudgetsClient) DescribeBudgetPerformanceHistory(arg0 context.Context, arg1 *budgets.DescribeBudgetPerformanceHistoryInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetPerformanceHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgetPerformanceHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgetPerformanceHistory", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetPerformanceHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgetPerformanceHistory indicates an expected call of DescribeBudgetPerformanceHistory.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgetPerformanceHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgetPerformanceHistory", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgetPerformanceHistory), varargs...)
}

// DescribeBudgets mocks base method.
func (m *MockBudgetsClient) DescribeBudgets(arg0 context.Context, arg1 *budgets.DescribeBudgetsInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeBudgetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBudgets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBudgets", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeBudgetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBudgets indicates an expected call of DescribeBudgets.
func (mr *MockBudgetsClientMockRecorder) DescribeBudgets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBudgets", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeBudgets), varargs...)
}

// DescribeNotificationsForBudget mocks base method.
func (m *MockBudgetsClient) DescribeNotificationsForBudget(arg0 context.Context, arg1 *budgets.DescribeNotificationsForBudgetInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeNotificationsForBudgetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNotificationsForBudget")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNotificationsForBudget", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeNotificationsForBudgetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotificationsForBudget indicates an expected call of DescribeNotificationsForBudget.
func (mr *MockBudgetsClientMockRecorder) DescribeNotificationsForBudget(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotificationsForBudget", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeNotificationsForBudget), varargs...)
}

// DescribeSubscribersForNotification mocks base method.
func (m *MockBudgetsClient) DescribeSubscribersForNotification(arg0 context.Context, arg1 *budgets.DescribeSubscribersForNotificationInput, arg2 ...func(*budgets.Options)) (*budgets.DescribeSubscribersForNotificationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &budgets.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSubscribersForNotification")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubscribersForNotification", varargs...)
	ret0, _ := ret[0].(*budgets.DescribeSubscribersForNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubscribersForNotification indicates an expected call of DescribeSubscribersForNotification.
func (mr *MockBudgetsClientMockRecorder) DescribeSubscribersForNotification(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubscribersForNotification", reflect.TypeOf((*MockBudgetsClient)(nil).DescribeSubscribersForNotification), varargs...)
}
