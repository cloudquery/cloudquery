// Code generated by MockGen. DO NOT EDIT.
// Source: elasticloadbalancingv2.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	elasticloadbalancingv2 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	gomock "github.com/golang/mock/gomock"
)

// MockElasticloadbalancingv2Client is a mock of Elasticloadbalancingv2Client interface.
type MockElasticloadbalancingv2Client struct {
	ctrl     *gomock.Controller
	recorder *MockElasticloadbalancingv2ClientMockRecorder
}

// MockElasticloadbalancingv2ClientMockRecorder is the mock recorder for MockElasticloadbalancingv2Client.
type MockElasticloadbalancingv2ClientMockRecorder struct {
	mock *MockElasticloadbalancingv2Client
}

// NewMockElasticloadbalancingv2Client creates a new mock instance.
func NewMockElasticloadbalancingv2Client(ctrl *gomock.Controller) *MockElasticloadbalancingv2Client {
	mock := &MockElasticloadbalancingv2Client{ctrl: ctrl}
	mock.recorder = &MockElasticloadbalancingv2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticloadbalancingv2Client) EXPECT() *MockElasticloadbalancingv2ClientMockRecorder {
	return m.recorder
}

// DescribeAccountLimits mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeAccountLimits(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeAccountLimitsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeAccountLimitsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountLimits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountLimits", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeAccountLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountLimits indicates an expected call of DescribeAccountLimits.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeAccountLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimits", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeAccountLimits), varargs...)
}

// DescribeListenerCertificates mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeListenerCertificates(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeListenerCertificatesInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeListenerCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeListenerCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeListenerCertificates", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeListenerCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeListenerCertificates indicates an expected call of DescribeListenerCertificates.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeListenerCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListenerCertificates", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeListenerCertificates), varargs...)
}

// DescribeListeners mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeListeners(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeListenersInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeListenersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeListeners")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeListeners", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeListeners indicates an expected call of DescribeListeners.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeListeners(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListeners", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeListeners), varargs...)
}

// DescribeLoadBalancerAttributes mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeLoadBalancerAttributes(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeLoadBalancerAttributesInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeLoadBalancerAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoadBalancerAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancerAttributes", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeLoadBalancerAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancerAttributes indicates an expected call of DescribeLoadBalancerAttributes.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeLoadBalancerAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancerAttributes", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeLoadBalancerAttributes), varargs...)
}

// DescribeLoadBalancers mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeLoadBalancers(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeLoadBalancersInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeLoadBalancersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoadBalancers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancers", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancers indicates an expected call of DescribeLoadBalancers.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeLoadBalancers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancers", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeLoadBalancers), varargs...)
}

// DescribeRules mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeRules(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeRulesInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRules", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRules indicates an expected call of DescribeRules.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRules", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeRules), varargs...)
}

// DescribeSSLPolicies mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeSSLPolicies(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeSSLPoliciesInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeSSLPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSSLPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSSLPolicies", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeSSLPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSSLPolicies indicates an expected call of DescribeSSLPolicies.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeSSLPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSSLPolicies", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeSSLPolicies), varargs...)
}

// DescribeTags mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeTags(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeTagsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTags", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeTags), varargs...)
}

// DescribeTargetGroupAttributes mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeTargetGroupAttributes(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeTargetGroupAttributesInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeTargetGroupAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTargetGroupAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTargetGroupAttributes", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeTargetGroupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTargetGroupAttributes indicates an expected call of DescribeTargetGroupAttributes.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeTargetGroupAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTargetGroupAttributes", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeTargetGroupAttributes), varargs...)
}

// DescribeTargetGroups mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeTargetGroups(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeTargetGroupsInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeTargetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTargetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTargetGroups", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeTargetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTargetGroups indicates an expected call of DescribeTargetGroups.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeTargetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTargetGroups", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeTargetGroups), varargs...)
}

// DescribeTargetHealth mocks base method.
func (m *MockElasticloadbalancingv2Client) DescribeTargetHealth(arg0 context.Context, arg1 *elasticloadbalancingv2.DescribeTargetHealthInput, arg2 ...func(*elasticloadbalancingv2.Options)) (*elasticloadbalancingv2.DescribeTargetHealthOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancingv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTargetHealth")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTargetHealth", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancingv2.DescribeTargetHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTargetHealth indicates an expected call of DescribeTargetHealth.
func (mr *MockElasticloadbalancingv2ClientMockRecorder) DescribeTargetHealth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTargetHealth", reflect.TypeOf((*MockElasticloadbalancingv2Client)(nil).DescribeTargetHealth), varargs...)
}
