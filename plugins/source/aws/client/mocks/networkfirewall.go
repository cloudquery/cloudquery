// Code generated by MockGen. DO NOT EDIT.
// Source: networkfirewall.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	networkfirewall "github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkfirewallClient is a mock of NetworkfirewallClient interface.
type MockNetworkfirewallClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkfirewallClientMockRecorder
}

// MockNetworkfirewallClientMockRecorder is the mock recorder for MockNetworkfirewallClient.
type MockNetworkfirewallClientMockRecorder struct {
	mock *MockNetworkfirewallClient
}

// NewMockNetworkfirewallClient creates a new mock instance.
func NewMockNetworkfirewallClient(ctrl *gomock.Controller) *MockNetworkfirewallClient {
	mock := &MockNetworkfirewallClient{ctrl: ctrl}
	mock.recorder = &MockNetworkfirewallClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkfirewallClient) EXPECT() *MockNetworkfirewallClientMockRecorder {
	return m.recorder
}

// DescribeFirewall mocks base method.
func (m *MockNetworkfirewallClient) DescribeFirewall(arg0 context.Context, arg1 *networkfirewall.DescribeFirewallInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeFirewallOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFirewall")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFirewall", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeFirewallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFirewall indicates an expected call of DescribeFirewall.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeFirewall(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFirewall", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeFirewall), varargs...)
}

// DescribeFirewallPolicy mocks base method.
func (m *MockNetworkfirewallClient) DescribeFirewallPolicy(arg0 context.Context, arg1 *networkfirewall.DescribeFirewallPolicyInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeFirewallPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFirewallPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFirewallPolicy", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeFirewallPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFirewallPolicy indicates an expected call of DescribeFirewallPolicy.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeFirewallPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFirewallPolicy", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeFirewallPolicy), varargs...)
}

// DescribeLoggingConfiguration mocks base method.
func (m *MockNetworkfirewallClient) DescribeLoggingConfiguration(arg0 context.Context, arg1 *networkfirewall.DescribeLoggingConfigurationInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeLoggingConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoggingConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoggingConfiguration", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingConfiguration indicates an expected call of DescribeLoggingConfiguration.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeLoggingConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingConfiguration", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeLoggingConfiguration), varargs...)
}

// DescribeResourcePolicy mocks base method.
func (m *MockNetworkfirewallClient) DescribeResourcePolicy(arg0 context.Context, arg1 *networkfirewall.DescribeResourcePolicyInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeResourcePolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeResourcePolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourcePolicy", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourcePolicy indicates an expected call of DescribeResourcePolicy.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeResourcePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePolicy", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeResourcePolicy), varargs...)
}

// DescribeRuleGroup mocks base method.
func (m *MockNetworkfirewallClient) DescribeRuleGroup(arg0 context.Context, arg1 *networkfirewall.DescribeRuleGroupInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeRuleGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRuleGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRuleGroup", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuleGroup indicates an expected call of DescribeRuleGroup.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeRuleGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleGroup", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeRuleGroup), varargs...)
}

// DescribeRuleGroupMetadata mocks base method.
func (m *MockNetworkfirewallClient) DescribeRuleGroupMetadata(arg0 context.Context, arg1 *networkfirewall.DescribeRuleGroupMetadataInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeRuleGroupMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRuleGroupMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRuleGroupMetadata", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeRuleGroupMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuleGroupMetadata indicates an expected call of DescribeRuleGroupMetadata.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeRuleGroupMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleGroupMetadata", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeRuleGroupMetadata), varargs...)
}

// DescribeTLSInspectionConfiguration mocks base method.
func (m *MockNetworkfirewallClient) DescribeTLSInspectionConfiguration(arg0 context.Context, arg1 *networkfirewall.DescribeTLSInspectionConfigurationInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.DescribeTLSInspectionConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTLSInspectionConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTLSInspectionConfiguration", varargs...)
	ret0, _ := ret[0].(*networkfirewall.DescribeTLSInspectionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTLSInspectionConfiguration indicates an expected call of DescribeTLSInspectionConfiguration.
func (mr *MockNetworkfirewallClientMockRecorder) DescribeTLSInspectionConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTLSInspectionConfiguration", reflect.TypeOf((*MockNetworkfirewallClient)(nil).DescribeTLSInspectionConfiguration), varargs...)
}

// ListFirewallPolicies mocks base method.
func (m *MockNetworkfirewallClient) ListFirewallPolicies(arg0 context.Context, arg1 *networkfirewall.ListFirewallPoliciesInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.ListFirewallPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewallPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewallPolicies", varargs...)
	ret0, _ := ret[0].(*networkfirewall.ListFirewallPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewallPolicies indicates an expected call of ListFirewallPolicies.
func (mr *MockNetworkfirewallClientMockRecorder) ListFirewallPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewallPolicies", reflect.TypeOf((*MockNetworkfirewallClient)(nil).ListFirewallPolicies), varargs...)
}

// ListFirewalls mocks base method.
func (m *MockNetworkfirewallClient) ListFirewalls(arg0 context.Context, arg1 *networkfirewall.ListFirewallsInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.ListFirewallsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFirewalls")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFirewalls", varargs...)
	ret0, _ := ret[0].(*networkfirewall.ListFirewallsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFirewalls indicates an expected call of ListFirewalls.
func (mr *MockNetworkfirewallClientMockRecorder) ListFirewalls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFirewalls", reflect.TypeOf((*MockNetworkfirewallClient)(nil).ListFirewalls), varargs...)
}

// ListRuleGroups mocks base method.
func (m *MockNetworkfirewallClient) ListRuleGroups(arg0 context.Context, arg1 *networkfirewall.ListRuleGroupsInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.ListRuleGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRuleGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleGroups", varargs...)
	ret0, _ := ret[0].(*networkfirewall.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroups indicates an expected call of ListRuleGroups.
func (mr *MockNetworkfirewallClientMockRecorder) ListRuleGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroups", reflect.TypeOf((*MockNetworkfirewallClient)(nil).ListRuleGroups), varargs...)
}

// ListTLSInspectionConfigurations mocks base method.
func (m *MockNetworkfirewallClient) ListTLSInspectionConfigurations(arg0 context.Context, arg1 *networkfirewall.ListTLSInspectionConfigurationsInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.ListTLSInspectionConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTLSInspectionConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTLSInspectionConfigurations", varargs...)
	ret0, _ := ret[0].(*networkfirewall.ListTLSInspectionConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTLSInspectionConfigurations indicates an expected call of ListTLSInspectionConfigurations.
func (mr *MockNetworkfirewallClientMockRecorder) ListTLSInspectionConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTLSInspectionConfigurations", reflect.TypeOf((*MockNetworkfirewallClient)(nil).ListTLSInspectionConfigurations), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockNetworkfirewallClient) ListTagsForResource(arg0 context.Context, arg1 *networkfirewall.ListTagsForResourceInput, arg2 ...func(*networkfirewall.Options)) (*networkfirewall.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkfirewall.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*networkfirewall.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockNetworkfirewallClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNetworkfirewallClient)(nil).ListTagsForResource), varargs...)
}
