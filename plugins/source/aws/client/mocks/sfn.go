// Code generated by MockGen. DO NOT EDIT.
// Source: sfn.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sfn "github.com/aws/aws-sdk-go-v2/service/sfn"
	gomock "github.com/golang/mock/gomock"
)

// MockSfnClient is a mock of SfnClient interface.
type MockSfnClient struct {
	ctrl     *gomock.Controller
	recorder *MockSfnClientMockRecorder
}

// MockSfnClientMockRecorder is the mock recorder for MockSfnClient.
type MockSfnClientMockRecorder struct {
	mock *MockSfnClient
}

// NewMockSfnClient creates a new mock instance.
func NewMockSfnClient(ctrl *gomock.Controller) *MockSfnClient {
	mock := &MockSfnClient{ctrl: ctrl}
	mock.recorder = &MockSfnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSfnClient) EXPECT() *MockSfnClientMockRecorder {
	return m.recorder
}

// DescribeActivity mocks base method.
func (m *MockSfnClient) DescribeActivity(arg0 context.Context, arg1 *sfn.DescribeActivityInput, arg2 ...func(*sfn.Options)) (*sfn.DescribeActivityOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeActivity")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActivity", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActivity indicates an expected call of DescribeActivity.
func (mr *MockSfnClientMockRecorder) DescribeActivity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivity", reflect.TypeOf((*MockSfnClient)(nil).DescribeActivity), varargs...)
}

// DescribeExecution mocks base method.
func (m *MockSfnClient) DescribeExecution(arg0 context.Context, arg1 *sfn.DescribeExecutionInput, arg2 ...func(*sfn.Options)) (*sfn.DescribeExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExecution", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecution indicates an expected call of DescribeExecution.
func (mr *MockSfnClientMockRecorder) DescribeExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecution", reflect.TypeOf((*MockSfnClient)(nil).DescribeExecution), varargs...)
}

// DescribeMapRun mocks base method.
func (m *MockSfnClient) DescribeMapRun(arg0 context.Context, arg1 *sfn.DescribeMapRunInput, arg2 ...func(*sfn.Options)) (*sfn.DescribeMapRunOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMapRun")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMapRun", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeMapRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMapRun indicates an expected call of DescribeMapRun.
func (mr *MockSfnClientMockRecorder) DescribeMapRun(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMapRun", reflect.TypeOf((*MockSfnClient)(nil).DescribeMapRun), varargs...)
}

// DescribeStateMachine mocks base method.
func (m *MockSfnClient) DescribeStateMachine(arg0 context.Context, arg1 *sfn.DescribeStateMachineInput, arg2 ...func(*sfn.Options)) (*sfn.DescribeStateMachineOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStateMachine")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachine", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachine indicates an expected call of DescribeStateMachine.
func (mr *MockSfnClientMockRecorder) DescribeStateMachine(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachine", reflect.TypeOf((*MockSfnClient)(nil).DescribeStateMachine), varargs...)
}

// DescribeStateMachineAlias mocks base method.
func (m *MockSfnClient) DescribeStateMachineAlias(arg0 context.Context, arg1 *sfn.DescribeStateMachineAliasInput, arg2 ...func(*sfn.Options)) (*sfn.DescribeStateMachineAliasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStateMachineAlias")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachineAlias", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineAlias indicates an expected call of DescribeStateMachineAlias.
func (mr *MockSfnClientMockRecorder) DescribeStateMachineAlias(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineAlias", reflect.TypeOf((*MockSfnClient)(nil).DescribeStateMachineAlias), varargs...)
}

// DescribeStateMachineForExecution mocks base method.
func (m *MockSfnClient) DescribeStateMachineForExecution(arg0 context.Context, arg1 *sfn.DescribeStateMachineForExecutionInput, arg2 ...func(*sfn.Options)) (*sfn.DescribeStateMachineForExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStateMachineForExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachineForExecution", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineForExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineForExecution indicates an expected call of DescribeStateMachineForExecution.
func (mr *MockSfnClientMockRecorder) DescribeStateMachineForExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineForExecution", reflect.TypeOf((*MockSfnClient)(nil).DescribeStateMachineForExecution), varargs...)
}

// GetActivityTask mocks base method.
func (m *MockSfnClient) GetActivityTask(arg0 context.Context, arg1 *sfn.GetActivityTaskInput, arg2 ...func(*sfn.Options)) (*sfn.GetActivityTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetActivityTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActivityTask", varargs...)
	ret0, _ := ret[0].(*sfn.GetActivityTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityTask indicates an expected call of GetActivityTask.
func (mr *MockSfnClientMockRecorder) GetActivityTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityTask", reflect.TypeOf((*MockSfnClient)(nil).GetActivityTask), varargs...)
}

// GetExecutionHistory mocks base method.
func (m *MockSfnClient) GetExecutionHistory(arg0 context.Context, arg1 *sfn.GetExecutionHistoryInput, arg2 ...func(*sfn.Options)) (*sfn.GetExecutionHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetExecutionHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionHistory", varargs...)
	ret0, _ := ret[0].(*sfn.GetExecutionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionHistory indicates an expected call of GetExecutionHistory.
func (mr *MockSfnClientMockRecorder) GetExecutionHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistory", reflect.TypeOf((*MockSfnClient)(nil).GetExecutionHistory), varargs...)
}

// ListActivities mocks base method.
func (m *MockSfnClient) ListActivities(arg0 context.Context, arg1 *sfn.ListActivitiesInput, arg2 ...func(*sfn.Options)) (*sfn.ListActivitiesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListActivities")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActivities", varargs...)
	ret0, _ := ret[0].(*sfn.ListActivitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivities indicates an expected call of ListActivities.
func (mr *MockSfnClientMockRecorder) ListActivities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivities", reflect.TypeOf((*MockSfnClient)(nil).ListActivities), varargs...)
}

// ListExecutions mocks base method.
func (m *MockSfnClient) ListExecutions(arg0 context.Context, arg1 *sfn.ListExecutionsInput, arg2 ...func(*sfn.Options)) (*sfn.ListExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutions", varargs...)
	ret0, _ := ret[0].(*sfn.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutions indicates an expected call of ListExecutions.
func (mr *MockSfnClientMockRecorder) ListExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutions", reflect.TypeOf((*MockSfnClient)(nil).ListExecutions), varargs...)
}

// ListMapRuns mocks base method.
func (m *MockSfnClient) ListMapRuns(arg0 context.Context, arg1 *sfn.ListMapRunsInput, arg2 ...func(*sfn.Options)) (*sfn.ListMapRunsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMapRuns")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMapRuns", varargs...)
	ret0, _ := ret[0].(*sfn.ListMapRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMapRuns indicates an expected call of ListMapRuns.
func (mr *MockSfnClientMockRecorder) ListMapRuns(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapRuns", reflect.TypeOf((*MockSfnClient)(nil).ListMapRuns), varargs...)
}

// ListStateMachineAliases mocks base method.
func (m *MockSfnClient) ListStateMachineAliases(arg0 context.Context, arg1 *sfn.ListStateMachineAliasesInput, arg2 ...func(*sfn.Options)) (*sfn.ListStateMachineAliasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStateMachineAliases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachineAliases", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachineAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineAliases indicates an expected call of ListStateMachineAliases.
func (mr *MockSfnClientMockRecorder) ListStateMachineAliases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineAliases", reflect.TypeOf((*MockSfnClient)(nil).ListStateMachineAliases), varargs...)
}

// ListStateMachineVersions mocks base method.
func (m *MockSfnClient) ListStateMachineVersions(arg0 context.Context, arg1 *sfn.ListStateMachineVersionsInput, arg2 ...func(*sfn.Options)) (*sfn.ListStateMachineVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStateMachineVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachineVersions", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineVersions indicates an expected call of ListStateMachineVersions.
func (mr *MockSfnClientMockRecorder) ListStateMachineVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineVersions", reflect.TypeOf((*MockSfnClient)(nil).ListStateMachineVersions), varargs...)
}

// ListStateMachines mocks base method.
func (m *MockSfnClient) ListStateMachines(arg0 context.Context, arg1 *sfn.ListStateMachinesInput, arg2 ...func(*sfn.Options)) (*sfn.ListStateMachinesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStateMachines")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachines", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachines indicates an expected call of ListStateMachines.
func (mr *MockSfnClientMockRecorder) ListStateMachines(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachines", reflect.TypeOf((*MockSfnClient)(nil).ListStateMachines), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSfnClient) ListTagsForResource(arg0 context.Context, arg1 *sfn.ListTagsForResourceInput, arg2 ...func(*sfn.Options)) (*sfn.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sfn.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*sfn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSfnClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSfnClient)(nil).ListTagsForResource), varargs...)
}
