// Code generated by MockGen. DO NOT EDIT.
// Source: networkmanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	networkmanager "github.com/aws/aws-sdk-go-v2/service/networkmanager"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkmanagerClient is a mock of NetworkmanagerClient interface.
type MockNetworkmanagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkmanagerClientMockRecorder
}

// MockNetworkmanagerClientMockRecorder is the mock recorder for MockNetworkmanagerClient.
type MockNetworkmanagerClientMockRecorder struct {
	mock *MockNetworkmanagerClient
}

// NewMockNetworkmanagerClient creates a new mock instance.
func NewMockNetworkmanagerClient(ctrl *gomock.Controller) *MockNetworkmanagerClient {
	mock := &MockNetworkmanagerClient{ctrl: ctrl}
	mock.recorder = &MockNetworkmanagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkmanagerClient) EXPECT() *MockNetworkmanagerClientMockRecorder {
	return m.recorder
}

// DescribeGlobalNetworks mocks base method.
func (m *MockNetworkmanagerClient) DescribeGlobalNetworks(arg0 context.Context, arg1 *networkmanager.DescribeGlobalNetworksInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.DescribeGlobalNetworksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGlobalNetworks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalNetworks", varargs...)
	ret0, _ := ret[0].(*networkmanager.DescribeGlobalNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalNetworks indicates an expected call of DescribeGlobalNetworks.
func (mr *MockNetworkmanagerClientMockRecorder) DescribeGlobalNetworks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalNetworks", reflect.TypeOf((*MockNetworkmanagerClient)(nil).DescribeGlobalNetworks), varargs...)
}

// GetConnectAttachment mocks base method.
func (m *MockNetworkmanagerClient) GetConnectAttachment(arg0 context.Context, arg1 *networkmanager.GetConnectAttachmentInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetConnectAttachmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConnectAttachment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectAttachment", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectAttachment indicates an expected call of GetConnectAttachment.
func (mr *MockNetworkmanagerClientMockRecorder) GetConnectAttachment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectAttachment", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetConnectAttachment), varargs...)
}

// GetConnectPeer mocks base method.
func (m *MockNetworkmanagerClient) GetConnectPeer(arg0 context.Context, arg1 *networkmanager.GetConnectPeerInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetConnectPeerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConnectPeer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectPeer", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectPeer indicates an expected call of GetConnectPeer.
func (mr *MockNetworkmanagerClientMockRecorder) GetConnectPeer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeer", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetConnectPeer), varargs...)
}

// GetConnectPeerAssociations mocks base method.
func (m *MockNetworkmanagerClient) GetConnectPeerAssociations(arg0 context.Context, arg1 *networkmanager.GetConnectPeerAssociationsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetConnectPeerAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConnectPeerAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectPeerAssociations", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectPeerAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectPeerAssociations indicates an expected call of GetConnectPeerAssociations.
func (mr *MockNetworkmanagerClientMockRecorder) GetConnectPeerAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerAssociations", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetConnectPeerAssociations), varargs...)
}

// GetConnections mocks base method.
func (m *MockNetworkmanagerClient) GetConnections(arg0 context.Context, arg1 *networkmanager.GetConnectionsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnections", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnections indicates an expected call of GetConnections.
func (mr *MockNetworkmanagerClientMockRecorder) GetConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnections", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetConnections), varargs...)
}

// GetCoreNetwork mocks base method.
func (m *MockNetworkmanagerClient) GetCoreNetwork(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCoreNetwork")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetwork", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetwork indicates an expected call of GetCoreNetwork.
func (mr *MockNetworkmanagerClientMockRecorder) GetCoreNetwork(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetwork", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetCoreNetwork), varargs...)
}

// GetCoreNetworkChangeEvents mocks base method.
func (m *MockNetworkmanagerClient) GetCoreNetworkChangeEvents(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkChangeEventsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkChangeEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCoreNetworkChangeEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeEvents", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkChangeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkChangeEvents indicates an expected call of GetCoreNetworkChangeEvents.
func (mr *MockNetworkmanagerClientMockRecorder) GetCoreNetworkChangeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeEvents", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetCoreNetworkChangeEvents), varargs...)
}

// GetCoreNetworkChangeSet mocks base method.
func (m *MockNetworkmanagerClient) GetCoreNetworkChangeSet(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkChangeSetInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkChangeSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCoreNetworkChangeSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeSet", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkChangeSet indicates an expected call of GetCoreNetworkChangeSet.
func (mr *MockNetworkmanagerClientMockRecorder) GetCoreNetworkChangeSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeSet", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetCoreNetworkChangeSet), varargs...)
}

// GetCoreNetworkPolicy mocks base method.
func (m *MockNetworkmanagerClient) GetCoreNetworkPolicy(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkPolicyInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCoreNetworkPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkPolicy", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkPolicy indicates an expected call of GetCoreNetworkPolicy.
func (mr *MockNetworkmanagerClientMockRecorder) GetCoreNetworkPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkPolicy", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetCoreNetworkPolicy), varargs...)
}

// GetCustomerGatewayAssociations mocks base method.
func (m *MockNetworkmanagerClient) GetCustomerGatewayAssociations(arg0 context.Context, arg1 *networkmanager.GetCustomerGatewayAssociationsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCustomerGatewayAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomerGatewayAssociations", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerGatewayAssociations indicates an expected call of GetCustomerGatewayAssociations.
func (mr *MockNetworkmanagerClientMockRecorder) GetCustomerGatewayAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGatewayAssociations", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetCustomerGatewayAssociations), varargs...)
}

// GetDevices mocks base method.
func (m *MockNetworkmanagerClient) GetDevices(arg0 context.Context, arg1 *networkmanager.GetDevicesInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetDevicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDevices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevices", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockNetworkmanagerClientMockRecorder) GetDevices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetDevices), varargs...)
}

// GetLinkAssociations mocks base method.
func (m *MockNetworkmanagerClient) GetLinkAssociations(arg0 context.Context, arg1 *networkmanager.GetLinkAssociationsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetLinkAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLinkAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkAssociations", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetLinkAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkAssociations indicates an expected call of GetLinkAssociations.
func (mr *MockNetworkmanagerClientMockRecorder) GetLinkAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAssociations", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetLinkAssociations), varargs...)
}

// GetLinks mocks base method.
func (m *MockNetworkmanagerClient) GetLinks(arg0 context.Context, arg1 *networkmanager.GetLinksInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetLinksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLinks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinks", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockNetworkmanagerClientMockRecorder) GetLinks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetLinks), varargs...)
}

// GetNetworkResourceCounts mocks base method.
func (m *MockNetworkmanagerClient) GetNetworkResourceCounts(arg0 context.Context, arg1 *networkmanager.GetNetworkResourceCountsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourceCountsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkResourceCounts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourceCounts", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourceCounts indicates an expected call of GetNetworkResourceCounts.
func (mr *MockNetworkmanagerClientMockRecorder) GetNetworkResourceCounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceCounts", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetNetworkResourceCounts), varargs...)
}

// GetNetworkResourceRelationships mocks base method.
func (m *MockNetworkmanagerClient) GetNetworkResourceRelationships(arg0 context.Context, arg1 *networkmanager.GetNetworkResourceRelationshipsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourceRelationshipsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkResourceRelationships")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourceRelationships", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourceRelationshipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourceRelationships indicates an expected call of GetNetworkResourceRelationships.
func (mr *MockNetworkmanagerClientMockRecorder) GetNetworkResourceRelationships(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceRelationships", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetNetworkResourceRelationships), varargs...)
}

// GetNetworkResources mocks base method.
func (m *MockNetworkmanagerClient) GetNetworkResources(arg0 context.Context, arg1 *networkmanager.GetNetworkResourcesInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResources", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResources indicates an expected call of GetNetworkResources.
func (mr *MockNetworkmanagerClientMockRecorder) GetNetworkResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResources", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetNetworkResources), varargs...)
}

// GetNetworkRoutes mocks base method.
func (m *MockNetworkmanagerClient) GetNetworkRoutes(arg0 context.Context, arg1 *networkmanager.GetNetworkRoutesInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetNetworkRoutesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkRoutes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkRoutes", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRoutes indicates an expected call of GetNetworkRoutes.
func (mr *MockNetworkmanagerClientMockRecorder) GetNetworkRoutes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRoutes", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetNetworkRoutes), varargs...)
}

// GetNetworkTelemetry mocks base method.
func (m *MockNetworkmanagerClient) GetNetworkTelemetry(arg0 context.Context, arg1 *networkmanager.GetNetworkTelemetryInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetNetworkTelemetryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetNetworkTelemetry")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkTelemetry", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkTelemetryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTelemetry indicates an expected call of GetNetworkTelemetry.
func (mr *MockNetworkmanagerClientMockRecorder) GetNetworkTelemetry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTelemetry", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetNetworkTelemetry), varargs...)
}

// GetResourcePolicy mocks base method.
func (m *MockNetworkmanagerClient) GetResourcePolicy(arg0 context.Context, arg1 *networkmanager.GetResourcePolicyInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetResourcePolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResourcePolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicy", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockNetworkmanagerClientMockRecorder) GetResourcePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetResourcePolicy), varargs...)
}

// GetRouteAnalysis mocks base method.
func (m *MockNetworkmanagerClient) GetRouteAnalysis(arg0 context.Context, arg1 *networkmanager.GetRouteAnalysisInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetRouteAnalysisOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRouteAnalysis")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteAnalysis", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetRouteAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteAnalysis indicates an expected call of GetRouteAnalysis.
func (mr *MockNetworkmanagerClientMockRecorder) GetRouteAnalysis(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteAnalysis", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetRouteAnalysis), varargs...)
}

// GetSiteToSiteVpnAttachment mocks base method.
func (m *MockNetworkmanagerClient) GetSiteToSiteVpnAttachment(arg0 context.Context, arg1 *networkmanager.GetSiteToSiteVpnAttachmentInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetSiteToSiteVpnAttachmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSiteToSiteVpnAttachment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSiteToSiteVpnAttachment", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetSiteToSiteVpnAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteToSiteVpnAttachment indicates an expected call of GetSiteToSiteVpnAttachment.
func (mr *MockNetworkmanagerClientMockRecorder) GetSiteToSiteVpnAttachment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteToSiteVpnAttachment", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetSiteToSiteVpnAttachment), varargs...)
}

// GetSites mocks base method.
func (m *MockNetworkmanagerClient) GetSites(arg0 context.Context, arg1 *networkmanager.GetSitesInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetSitesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSites")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSites", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSites indicates an expected call of GetSites.
func (mr *MockNetworkmanagerClientMockRecorder) GetSites(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSites", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetSites), varargs...)
}

// GetTransitGatewayConnectPeerAssociations mocks base method.
func (m *MockNetworkmanagerClient) GetTransitGatewayConnectPeerAssociations(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayConnectPeerAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayConnectPeerAssociations", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayConnectPeerAssociations indicates an expected call of GetTransitGatewayConnectPeerAssociations.
func (mr *MockNetworkmanagerClientMockRecorder) GetTransitGatewayConnectPeerAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnectPeerAssociations", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetTransitGatewayConnectPeerAssociations), varargs...)
}

// GetTransitGatewayPeering mocks base method.
func (m *MockNetworkmanagerClient) GetTransitGatewayPeering(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayPeeringInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayPeeringOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayPeering")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayPeering", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayPeeringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayPeering indicates an expected call of GetTransitGatewayPeering.
func (mr *MockNetworkmanagerClientMockRecorder) GetTransitGatewayPeering(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayPeering", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetTransitGatewayPeering), varargs...)
}

// GetTransitGatewayRegistrations mocks base method.
func (m *MockNetworkmanagerClient) GetTransitGatewayRegistrations(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayRegistrationsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayRegistrations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayRegistrations", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayRegistrations indicates an expected call of GetTransitGatewayRegistrations.
func (mr *MockNetworkmanagerClientMockRecorder) GetTransitGatewayRegistrations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRegistrations", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetTransitGatewayRegistrations), varargs...)
}

// GetTransitGatewayRouteTableAttachment mocks base method.
func (m *MockNetworkmanagerClient) GetTransitGatewayRouteTableAttachment(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayRouteTableAttachmentInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayRouteTableAttachmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTransitGatewayRouteTableAttachment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayRouteTableAttachment", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayRouteTableAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayRouteTableAttachment indicates an expected call of GetTransitGatewayRouteTableAttachment.
func (mr *MockNetworkmanagerClientMockRecorder) GetTransitGatewayRouteTableAttachment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRouteTableAttachment", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetTransitGatewayRouteTableAttachment), varargs...)
}

// GetVpcAttachment mocks base method.
func (m *MockNetworkmanagerClient) GetVpcAttachment(arg0 context.Context, arg1 *networkmanager.GetVpcAttachmentInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.GetVpcAttachmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpcAttachment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcAttachment", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcAttachment indicates an expected call of GetVpcAttachment.
func (mr *MockNetworkmanagerClientMockRecorder) GetVpcAttachment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcAttachment", reflect.TypeOf((*MockNetworkmanagerClient)(nil).GetVpcAttachment), varargs...)
}

// ListAttachments mocks base method.
func (m *MockNetworkmanagerClient) ListAttachments(arg0 context.Context, arg1 *networkmanager.ListAttachmentsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListAttachmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAttachments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachments", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachments indicates an expected call of ListAttachments.
func (mr *MockNetworkmanagerClientMockRecorder) ListAttachments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachments", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListAttachments), varargs...)
}

// ListConnectPeers mocks base method.
func (m *MockNetworkmanagerClient) ListConnectPeers(arg0 context.Context, arg1 *networkmanager.ListConnectPeersInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListConnectPeersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListConnectPeers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectPeers", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListConnectPeersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectPeers indicates an expected call of ListConnectPeers.
func (mr *MockNetworkmanagerClientMockRecorder) ListConnectPeers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectPeers", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListConnectPeers), varargs...)
}

// ListCoreNetworkPolicyVersions mocks base method.
func (m *MockNetworkmanagerClient) ListCoreNetworkPolicyVersions(arg0 context.Context, arg1 *networkmanager.ListCoreNetworkPolicyVersionsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListCoreNetworkPolicyVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCoreNetworkPolicyVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoreNetworkPolicyVersions", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListCoreNetworkPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoreNetworkPolicyVersions indicates an expected call of ListCoreNetworkPolicyVersions.
func (mr *MockNetworkmanagerClientMockRecorder) ListCoreNetworkPolicyVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworkPolicyVersions", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListCoreNetworkPolicyVersions), varargs...)
}

// ListCoreNetworks mocks base method.
func (m *MockNetworkmanagerClient) ListCoreNetworks(arg0 context.Context, arg1 *networkmanager.ListCoreNetworksInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListCoreNetworksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCoreNetworks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoreNetworks", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListCoreNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoreNetworks indicates an expected call of ListCoreNetworks.
func (mr *MockNetworkmanagerClientMockRecorder) ListCoreNetworks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworks", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListCoreNetworks), varargs...)
}

// ListOrganizationServiceAccessStatus mocks base method.
func (m *MockNetworkmanagerClient) ListOrganizationServiceAccessStatus(arg0 context.Context, arg1 *networkmanager.ListOrganizationServiceAccessStatusInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListOrganizationServiceAccessStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOrganizationServiceAccessStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationServiceAccessStatus", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListOrganizationServiceAccessStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationServiceAccessStatus indicates an expected call of ListOrganizationServiceAccessStatus.
func (mr *MockNetworkmanagerClientMockRecorder) ListOrganizationServiceAccessStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationServiceAccessStatus", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListOrganizationServiceAccessStatus), varargs...)
}

// ListPeerings mocks base method.
func (m *MockNetworkmanagerClient) ListPeerings(arg0 context.Context, arg1 *networkmanager.ListPeeringsInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListPeeringsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPeerings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPeerings", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListPeeringsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPeerings indicates an expected call of ListPeerings.
func (mr *MockNetworkmanagerClientMockRecorder) ListPeerings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPeerings", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListPeerings), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockNetworkmanagerClient) ListTagsForResource(arg0 context.Context, arg1 *networkmanager.ListTagsForResourceInput, arg2 ...func(*networkmanager.Options)) (*networkmanager.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &networkmanager.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockNetworkmanagerClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNetworkmanagerClient)(nil).ListTagsForResource), varargs...)
}
