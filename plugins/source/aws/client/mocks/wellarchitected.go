// Code generated by MockGen. DO NOT EDIT.
// Source: wellarchitected.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	wellarchitected "github.com/aws/aws-sdk-go-v2/service/wellarchitected"
	gomock "github.com/golang/mock/gomock"
)

// MockWellarchitectedClient is a mock of WellarchitectedClient interface.
type MockWellarchitectedClient struct {
	ctrl     *gomock.Controller
	recorder *MockWellarchitectedClientMockRecorder
}

// MockWellarchitectedClientMockRecorder is the mock recorder for MockWellarchitectedClient.
type MockWellarchitectedClientMockRecorder struct {
	mock *MockWellarchitectedClient
}

// NewMockWellarchitectedClient creates a new mock instance.
func NewMockWellarchitectedClient(ctrl *gomock.Controller) *MockWellarchitectedClient {
	mock := &MockWellarchitectedClient{ctrl: ctrl}
	mock.recorder = &MockWellarchitectedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWellarchitectedClient) EXPECT() *MockWellarchitectedClientMockRecorder {
	return m.recorder
}

// GetAnswer mocks base method.
func (m *MockWellarchitectedClient) GetAnswer(arg0 context.Context, arg1 *wellarchitected.GetAnswerInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetAnswerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAnswer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnswer", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswer indicates an expected call of GetAnswer.
func (mr *MockWellarchitectedClientMockRecorder) GetAnswer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswer", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetAnswer), varargs...)
}

// GetConsolidatedReport mocks base method.
func (m *MockWellarchitectedClient) GetConsolidatedReport(arg0 context.Context, arg1 *wellarchitected.GetConsolidatedReportInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetConsolidatedReportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConsolidatedReport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConsolidatedReport", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetConsolidatedReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsolidatedReport indicates an expected call of GetConsolidatedReport.
func (mr *MockWellarchitectedClientMockRecorder) GetConsolidatedReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsolidatedReport", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetConsolidatedReport), varargs...)
}

// GetLens mocks base method.
func (m *MockWellarchitectedClient) GetLens(arg0 context.Context, arg1 *wellarchitected.GetLensInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetLensOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLens")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLens", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLens indicates an expected call of GetLens.
func (mr *MockWellarchitectedClientMockRecorder) GetLens(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLens", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetLens), varargs...)
}

// GetLensReview mocks base method.
func (m *MockWellarchitectedClient) GetLensReview(arg0 context.Context, arg1 *wellarchitected.GetLensReviewInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetLensReviewOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLensReview")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensReview", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReview indicates an expected call of GetLensReview.
func (mr *MockWellarchitectedClientMockRecorder) GetLensReview(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReview", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetLensReview), varargs...)
}

// GetLensReviewReport mocks base method.
func (m *MockWellarchitectedClient) GetLensReviewReport(arg0 context.Context, arg1 *wellarchitected.GetLensReviewReportInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetLensReviewReportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLensReviewReport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensReviewReport", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewReport indicates an expected call of GetLensReviewReport.
func (mr *MockWellarchitectedClientMockRecorder) GetLensReviewReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReport", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetLensReviewReport), varargs...)
}

// GetLensVersionDifference mocks base method.
func (m *MockWellarchitectedClient) GetLensVersionDifference(arg0 context.Context, arg1 *wellarchitected.GetLensVersionDifferenceInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetLensVersionDifferenceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLensVersionDifference")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensVersionDifference", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensVersionDifferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensVersionDifference indicates an expected call of GetLensVersionDifference.
func (mr *MockWellarchitectedClientMockRecorder) GetLensVersionDifference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifference", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetLensVersionDifference), varargs...)
}

// GetMilestone mocks base method.
func (m *MockWellarchitectedClient) GetMilestone(arg0 context.Context, arg1 *wellarchitected.GetMilestoneInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetMilestoneOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMilestone")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMilestone", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockWellarchitectedClientMockRecorder) GetMilestone(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetMilestone), varargs...)
}

// GetProfile mocks base method.
func (m *MockWellarchitectedClient) GetProfile(arg0 context.Context, arg1 *wellarchitected.GetProfileInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetProfileOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetProfile")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockWellarchitectedClientMockRecorder) GetProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetProfile), varargs...)
}

// GetProfileTemplate mocks base method.
func (m *MockWellarchitectedClient) GetProfileTemplate(arg0 context.Context, arg1 *wellarchitected.GetProfileTemplateInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetProfileTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetProfileTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileTemplate", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetProfileTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileTemplate indicates an expected call of GetProfileTemplate.
func (mr *MockWellarchitectedClientMockRecorder) GetProfileTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileTemplate", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetProfileTemplate), varargs...)
}

// GetWorkload mocks base method.
func (m *MockWellarchitectedClient) GetWorkload(arg0 context.Context, arg1 *wellarchitected.GetWorkloadInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.GetWorkloadOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetWorkload")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkload", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload.
func (mr *MockWellarchitectedClientMockRecorder) GetWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockWellarchitectedClient)(nil).GetWorkload), varargs...)
}

// ListAnswers mocks base method.
func (m *MockWellarchitectedClient) ListAnswers(arg0 context.Context, arg1 *wellarchitected.ListAnswersInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListAnswersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAnswers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnswers", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswers indicates an expected call of ListAnswers.
func (mr *MockWellarchitectedClientMockRecorder) ListAnswers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswers", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListAnswers), varargs...)
}

// ListCheckDetails mocks base method.
func (m *MockWellarchitectedClient) ListCheckDetails(arg0 context.Context, arg1 *wellarchitected.ListCheckDetailsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListCheckDetailsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCheckDetails")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckDetails", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListCheckDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckDetails indicates an expected call of ListCheckDetails.
func (mr *MockWellarchitectedClientMockRecorder) ListCheckDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckDetails", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListCheckDetails), varargs...)
}

// ListCheckSummaries mocks base method.
func (m *MockWellarchitectedClient) ListCheckSummaries(arg0 context.Context, arg1 *wellarchitected.ListCheckSummariesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListCheckSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCheckSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckSummaries", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListCheckSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckSummaries indicates an expected call of ListCheckSummaries.
func (mr *MockWellarchitectedClientMockRecorder) ListCheckSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckSummaries", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListCheckSummaries), varargs...)
}

// ListLensReviewImprovements mocks base method.
func (m *MockWellarchitectedClient) ListLensReviewImprovements(arg0 context.Context, arg1 *wellarchitected.ListLensReviewImprovementsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListLensReviewImprovementsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLensReviewImprovements")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewImprovements", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewImprovementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewImprovements indicates an expected call of ListLensReviewImprovements.
func (mr *MockWellarchitectedClientMockRecorder) ListLensReviewImprovements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovements", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListLensReviewImprovements), varargs...)
}

// ListLensReviews mocks base method.
func (m *MockWellarchitectedClient) ListLensReviews(arg0 context.Context, arg1 *wellarchitected.ListLensReviewsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListLensReviewsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLensReviews")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviews", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviews indicates an expected call of ListLensReviews.
func (mr *MockWellarchitectedClientMockRecorder) ListLensReviews(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviews", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListLensReviews), varargs...)
}

// ListLensShares mocks base method.
func (m *MockWellarchitectedClient) ListLensShares(arg0 context.Context, arg1 *wellarchitected.ListLensSharesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListLensSharesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLensShares")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensShares", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensShares indicates an expected call of ListLensShares.
func (mr *MockWellarchitectedClientMockRecorder) ListLensShares(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensShares", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListLensShares), varargs...)
}

// ListLenses mocks base method.
func (m *MockWellarchitectedClient) ListLenses(arg0 context.Context, arg1 *wellarchitected.ListLensesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListLensesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLenses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLenses", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLenses indicates an expected call of ListLenses.
func (mr *MockWellarchitectedClientMockRecorder) ListLenses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLenses", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListLenses), varargs...)
}

// ListMilestones mocks base method.
func (m *MockWellarchitectedClient) ListMilestones(arg0 context.Context, arg1 *wellarchitected.ListMilestonesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListMilestonesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMilestones")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMilestones", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListMilestonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestones indicates an expected call of ListMilestones.
func (mr *MockWellarchitectedClientMockRecorder) ListMilestones(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListMilestones), varargs...)
}

// ListNotifications mocks base method.
func (m *MockWellarchitectedClient) ListNotifications(arg0 context.Context, arg1 *wellarchitected.ListNotificationsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListNotificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNotifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotifications", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockWellarchitectedClientMockRecorder) ListNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListNotifications), varargs...)
}

// ListProfileNotifications mocks base method.
func (m *MockWellarchitectedClient) ListProfileNotifications(arg0 context.Context, arg1 *wellarchitected.ListProfileNotificationsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListProfileNotificationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProfileNotifications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileNotifications", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListProfileNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileNotifications indicates an expected call of ListProfileNotifications.
func (mr *MockWellarchitectedClientMockRecorder) ListProfileNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileNotifications", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListProfileNotifications), varargs...)
}

// ListProfileShares mocks base method.
func (m *MockWellarchitectedClient) ListProfileShares(arg0 context.Context, arg1 *wellarchitected.ListProfileSharesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListProfileSharesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProfileShares")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileShares", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListProfileSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileShares indicates an expected call of ListProfileShares.
func (mr *MockWellarchitectedClientMockRecorder) ListProfileShares(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileShares", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListProfileShares), varargs...)
}

// ListProfiles mocks base method.
func (m *MockWellarchitectedClient) ListProfiles(arg0 context.Context, arg1 *wellarchitected.ListProfilesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListProfilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProfiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfiles", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfiles indicates an expected call of ListProfiles.
func (mr *MockWellarchitectedClientMockRecorder) ListProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfiles", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListProfiles), varargs...)
}

// ListShareInvitations mocks base method.
func (m *MockWellarchitectedClient) ListShareInvitations(arg0 context.Context, arg1 *wellarchitected.ListShareInvitationsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListShareInvitationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListShareInvitations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShareInvitations", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShareInvitations indicates an expected call of ListShareInvitations.
func (mr *MockWellarchitectedClientMockRecorder) ListShareInvitations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitations", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListShareInvitations), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockWellarchitectedClient) ListTagsForResource(arg0 context.Context, arg1 *wellarchitected.ListTagsForResourceInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockWellarchitectedClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListTagsForResource), varargs...)
}

// ListWorkloadShares mocks base method.
func (m *MockWellarchitectedClient) ListWorkloadShares(arg0 context.Context, arg1 *wellarchitected.ListWorkloadSharesInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListWorkloadSharesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListWorkloadShares")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadShares", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadShares indicates an expected call of ListWorkloadShares.
func (mr *MockWellarchitectedClientMockRecorder) ListWorkloadShares(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadShares", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListWorkloadShares), varargs...)
}

// ListWorkloads mocks base method.
func (m *MockWellarchitectedClient) ListWorkloads(arg0 context.Context, arg1 *wellarchitected.ListWorkloadsInput, arg2 ...func(*wellarchitected.Options)) (*wellarchitected.ListWorkloadsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &wellarchitected.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListWorkloads")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloads", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads.
func (mr *MockWellarchitectedClientMockRecorder) ListWorkloads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*MockWellarchitectedClient)(nil).ListWorkloads), varargs...)
}
