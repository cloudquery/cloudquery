// Code generated by MockGen. DO NOT EDIT.
// Source: qldb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	qldb "github.com/aws/aws-sdk-go-v2/service/qldb"
	gomock "github.com/golang/mock/gomock"
)

// MockQldbClient is a mock of QldbClient interface.
type MockQldbClient struct {
	ctrl     *gomock.Controller
	recorder *MockQldbClientMockRecorder
}

// MockQldbClientMockRecorder is the mock recorder for MockQldbClient.
type MockQldbClientMockRecorder struct {
	mock *MockQldbClient
}

// NewMockQldbClient creates a new mock instance.
func NewMockQldbClient(ctrl *gomock.Controller) *MockQldbClient {
	mock := &MockQldbClient{ctrl: ctrl}
	mock.recorder = &MockQldbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQldbClient) EXPECT() *MockQldbClientMockRecorder {
	return m.recorder
}

// DescribeJournalKinesisStream mocks base method.
func (m *MockQldbClient) DescribeJournalKinesisStream(arg0 context.Context, arg1 *qldb.DescribeJournalKinesisStreamInput, arg2 ...func(*qldb.Options)) (*qldb.DescribeJournalKinesisStreamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeJournalKinesisStream")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJournalKinesisStream", varargs...)
	ret0, _ := ret[0].(*qldb.DescribeJournalKinesisStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJournalKinesisStream indicates an expected call of DescribeJournalKinesisStream.
func (mr *MockQldbClientMockRecorder) DescribeJournalKinesisStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalKinesisStream", reflect.TypeOf((*MockQldbClient)(nil).DescribeJournalKinesisStream), varargs...)
}

// DescribeJournalS3Export mocks base method.
func (m *MockQldbClient) DescribeJournalS3Export(arg0 context.Context, arg1 *qldb.DescribeJournalS3ExportInput, arg2 ...func(*qldb.Options)) (*qldb.DescribeJournalS3ExportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeJournalS3Export")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJournalS3Export", varargs...)
	ret0, _ := ret[0].(*qldb.DescribeJournalS3ExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJournalS3Export indicates an expected call of DescribeJournalS3Export.
func (mr *MockQldbClientMockRecorder) DescribeJournalS3Export(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalS3Export", reflect.TypeOf((*MockQldbClient)(nil).DescribeJournalS3Export), varargs...)
}

// DescribeLedger mocks base method.
func (m *MockQldbClient) DescribeLedger(arg0 context.Context, arg1 *qldb.DescribeLedgerInput, arg2 ...func(*qldb.Options)) (*qldb.DescribeLedgerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLedger")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLedger", varargs...)
	ret0, _ := ret[0].(*qldb.DescribeLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLedger indicates an expected call of DescribeLedger.
func (mr *MockQldbClientMockRecorder) DescribeLedger(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLedger", reflect.TypeOf((*MockQldbClient)(nil).DescribeLedger), varargs...)
}

// GetBlock mocks base method.
func (m *MockQldbClient) GetBlock(arg0 context.Context, arg1 *qldb.GetBlockInput, arg2 ...func(*qldb.Options)) (*qldb.GetBlockOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBlock")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(*qldb.GetBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockQldbClientMockRecorder) GetBlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockQldbClient)(nil).GetBlock), varargs...)
}

// GetDigest mocks base method.
func (m *MockQldbClient) GetDigest(arg0 context.Context, arg1 *qldb.GetDigestInput, arg2 ...func(*qldb.Options)) (*qldb.GetDigestOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDigest")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDigest", varargs...)
	ret0, _ := ret[0].(*qldb.GetDigestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigest indicates an expected call of GetDigest.
func (mr *MockQldbClientMockRecorder) GetDigest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigest", reflect.TypeOf((*MockQldbClient)(nil).GetDigest), varargs...)
}

// GetRevision mocks base method.
func (m *MockQldbClient) GetRevision(arg0 context.Context, arg1 *qldb.GetRevisionInput, arg2 ...func(*qldb.Options)) (*qldb.GetRevisionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRevision")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRevision", varargs...)
	ret0, _ := ret[0].(*qldb.GetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockQldbClientMockRecorder) GetRevision(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockQldbClient)(nil).GetRevision), varargs...)
}

// ListJournalKinesisStreamsForLedger mocks base method.
func (m *MockQldbClient) ListJournalKinesisStreamsForLedger(arg0 context.Context, arg1 *qldb.ListJournalKinesisStreamsForLedgerInput, arg2 ...func(*qldb.Options)) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJournalKinesisStreamsForLedger")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalKinesisStreamsForLedger", varargs...)
	ret0, _ := ret[0].(*qldb.ListJournalKinesisStreamsForLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalKinesisStreamsForLedger indicates an expected call of ListJournalKinesisStreamsForLedger.
func (mr *MockQldbClientMockRecorder) ListJournalKinesisStreamsForLedger(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalKinesisStreamsForLedger", reflect.TypeOf((*MockQldbClient)(nil).ListJournalKinesisStreamsForLedger), varargs...)
}

// ListJournalS3Exports mocks base method.
func (m *MockQldbClient) ListJournalS3Exports(arg0 context.Context, arg1 *qldb.ListJournalS3ExportsInput, arg2 ...func(*qldb.Options)) (*qldb.ListJournalS3ExportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJournalS3Exports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalS3Exports", varargs...)
	ret0, _ := ret[0].(*qldb.ListJournalS3ExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalS3Exports indicates an expected call of ListJournalS3Exports.
func (mr *MockQldbClientMockRecorder) ListJournalS3Exports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3Exports", reflect.TypeOf((*MockQldbClient)(nil).ListJournalS3Exports), varargs...)
}

// ListJournalS3ExportsForLedger mocks base method.
func (m *MockQldbClient) ListJournalS3ExportsForLedger(arg0 context.Context, arg1 *qldb.ListJournalS3ExportsForLedgerInput, arg2 ...func(*qldb.Options)) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJournalS3ExportsForLedger")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalS3ExportsForLedger", varargs...)
	ret0, _ := ret[0].(*qldb.ListJournalS3ExportsForLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalS3ExportsForLedger indicates an expected call of ListJournalS3ExportsForLedger.
func (mr *MockQldbClientMockRecorder) ListJournalS3ExportsForLedger(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsForLedger", reflect.TypeOf((*MockQldbClient)(nil).ListJournalS3ExportsForLedger), varargs...)
}

// ListLedgers mocks base method.
func (m *MockQldbClient) ListLedgers(arg0 context.Context, arg1 *qldb.ListLedgersInput, arg2 ...func(*qldb.Options)) (*qldb.ListLedgersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLedgers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLedgers", varargs...)
	ret0, _ := ret[0].(*qldb.ListLedgersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLedgers indicates an expected call of ListLedgers.
func (mr *MockQldbClientMockRecorder) ListLedgers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgers", reflect.TypeOf((*MockQldbClient)(nil).ListLedgers), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockQldbClient) ListTagsForResource(arg0 context.Context, arg1 *qldb.ListTagsForResourceInput, arg2 ...func(*qldb.Options)) (*qldb.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &qldb.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*qldb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockQldbClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockQldbClient)(nil).ListTagsForResource), varargs...)
}
