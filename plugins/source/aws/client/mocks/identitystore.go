// Code generated by MockGen. DO NOT EDIT.
// Source: identitystore.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	identitystore "github.com/aws/aws-sdk-go-v2/service/identitystore"
	gomock "github.com/golang/mock/gomock"
)

// MockIdentitystoreClient is a mock of IdentitystoreClient interface.
type MockIdentitystoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentitystoreClientMockRecorder
}

// MockIdentitystoreClientMockRecorder is the mock recorder for MockIdentitystoreClient.
type MockIdentitystoreClientMockRecorder struct {
	mock *MockIdentitystoreClient
}

// NewMockIdentitystoreClient creates a new mock instance.
func NewMockIdentitystoreClient(ctrl *gomock.Controller) *MockIdentitystoreClient {
	mock := &MockIdentitystoreClient{ctrl: ctrl}
	mock.recorder = &MockIdentitystoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentitystoreClient) EXPECT() *MockIdentitystoreClientMockRecorder {
	return m.recorder
}

// DescribeGroup mocks base method.
func (m *MockIdentitystoreClient) DescribeGroup(arg0 context.Context, arg1 *identitystore.DescribeGroupInput, arg2 ...func(*identitystore.Options)) (*identitystore.DescribeGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGroup", varargs...)
	ret0, _ := ret[0].(*identitystore.DescribeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroup indicates an expected call of DescribeGroup.
func (mr *MockIdentitystoreClientMockRecorder) DescribeGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroup", reflect.TypeOf((*MockIdentitystoreClient)(nil).DescribeGroup), varargs...)
}

// DescribeGroupMembership mocks base method.
func (m *MockIdentitystoreClient) DescribeGroupMembership(arg0 context.Context, arg1 *identitystore.DescribeGroupMembershipInput, arg2 ...func(*identitystore.Options)) (*identitystore.DescribeGroupMembershipOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeGroupMembership")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGroupMembership", varargs...)
	ret0, _ := ret[0].(*identitystore.DescribeGroupMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroupMembership indicates an expected call of DescribeGroupMembership.
func (mr *MockIdentitystoreClientMockRecorder) DescribeGroupMembership(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupMembership", reflect.TypeOf((*MockIdentitystoreClient)(nil).DescribeGroupMembership), varargs...)
}

// DescribeUser mocks base method.
func (m *MockIdentitystoreClient) DescribeUser(arg0 context.Context, arg1 *identitystore.DescribeUserInput, arg2 ...func(*identitystore.Options)) (*identitystore.DescribeUserOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeUser")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUser", varargs...)
	ret0, _ := ret[0].(*identitystore.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUser indicates an expected call of DescribeUser.
func (mr *MockIdentitystoreClientMockRecorder) DescribeUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUser", reflect.TypeOf((*MockIdentitystoreClient)(nil).DescribeUser), varargs...)
}

// GetGroupId mocks base method.
func (m *MockIdentitystoreClient) GetGroupId(arg0 context.Context, arg1 *identitystore.GetGroupIdInput, arg2 ...func(*identitystore.Options)) (*identitystore.GetGroupIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGroupId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupId", varargs...)
	ret0, _ := ret[0].(*identitystore.GetGroupIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupId indicates an expected call of GetGroupId.
func (mr *MockIdentitystoreClientMockRecorder) GetGroupId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupId", reflect.TypeOf((*MockIdentitystoreClient)(nil).GetGroupId), varargs...)
}

// GetGroupMembershipId mocks base method.
func (m *MockIdentitystoreClient) GetGroupMembershipId(arg0 context.Context, arg1 *identitystore.GetGroupMembershipIdInput, arg2 ...func(*identitystore.Options)) (*identitystore.GetGroupMembershipIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGroupMembershipId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMembershipId", varargs...)
	ret0, _ := ret[0].(*identitystore.GetGroupMembershipIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembershipId indicates an expected call of GetGroupMembershipId.
func (mr *MockIdentitystoreClientMockRecorder) GetGroupMembershipId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembershipId", reflect.TypeOf((*MockIdentitystoreClient)(nil).GetGroupMembershipId), varargs...)
}

// GetUserId mocks base method.
func (m *MockIdentitystoreClient) GetUserId(arg0 context.Context, arg1 *identitystore.GetUserIdInput, arg2 ...func(*identitystore.Options)) (*identitystore.GetUserIdOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetUserId")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserId", varargs...)
	ret0, _ := ret[0].(*identitystore.GetUserIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockIdentitystoreClientMockRecorder) GetUserId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockIdentitystoreClient)(nil).GetUserId), varargs...)
}

// ListGroupMemberships mocks base method.
func (m *MockIdentitystoreClient) ListGroupMemberships(arg0 context.Context, arg1 *identitystore.ListGroupMembershipsInput, arg2 ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListGroupMemberships")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMemberships", varargs...)
	ret0, _ := ret[0].(*identitystore.ListGroupMembershipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMemberships indicates an expected call of ListGroupMemberships.
func (mr *MockIdentitystoreClientMockRecorder) ListGroupMemberships(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMemberships", reflect.TypeOf((*MockIdentitystoreClient)(nil).ListGroupMemberships), varargs...)
}

// ListGroupMembershipsForMember mocks base method.
func (m *MockIdentitystoreClient) ListGroupMembershipsForMember(arg0 context.Context, arg1 *identitystore.ListGroupMembershipsForMemberInput, arg2 ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsForMemberOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListGroupMembershipsForMember")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembershipsForMember", varargs...)
	ret0, _ := ret[0].(*identitystore.ListGroupMembershipsForMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembershipsForMember indicates an expected call of ListGroupMembershipsForMember.
func (mr *MockIdentitystoreClientMockRecorder) ListGroupMembershipsForMember(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembershipsForMember", reflect.TypeOf((*MockIdentitystoreClient)(nil).ListGroupMembershipsForMember), varargs...)
}

// ListGroups mocks base method.
func (m *MockIdentitystoreClient) ListGroups(arg0 context.Context, arg1 *identitystore.ListGroupsInput, arg2 ...func(*identitystore.Options)) (*identitystore.ListGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroups", varargs...)
	ret0, _ := ret[0].(*identitystore.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockIdentitystoreClientMockRecorder) ListGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockIdentitystoreClient)(nil).ListGroups), varargs...)
}

// ListUsers mocks base method.
func (m *MockIdentitystoreClient) ListUsers(arg0 context.Context, arg1 *identitystore.ListUsersInput, arg2 ...func(*identitystore.Options)) (*identitystore.ListUsersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &identitystore.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListUsers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(*identitystore.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockIdentitystoreClientMockRecorder) ListUsers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockIdentitystoreClient)(nil).ListUsers), varargs...)
}
