// Code generated by MockGen. DO NOT EDIT.
// Source: ssm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
	gomock "github.com/golang/mock/gomock"
)

// MockSsmClient is a mock of SsmClient interface.
type MockSsmClient struct {
	ctrl     *gomock.Controller
	recorder *MockSsmClientMockRecorder
}

// MockSsmClientMockRecorder is the mock recorder for MockSsmClient.
type MockSsmClientMockRecorder struct {
	mock *MockSsmClient
}

// NewMockSsmClient creates a new mock instance.
func NewMockSsmClient(ctrl *gomock.Controller) *MockSsmClient {
	mock := &MockSsmClient{ctrl: ctrl}
	mock.recorder = &MockSsmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSsmClient) EXPECT() *MockSsmClientMockRecorder {
	return m.recorder
}

// DescribeActivations mocks base method.
func (m *MockSsmClient) DescribeActivations(arg0 context.Context, arg1 *ssm.DescribeActivationsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeActivationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeActivations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActivations", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeActivationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActivations indicates an expected call of DescribeActivations.
func (mr *MockSsmClientMockRecorder) DescribeActivations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivations", reflect.TypeOf((*MockSsmClient)(nil).DescribeActivations), varargs...)
}

// DescribeAssociation mocks base method.
func (m *MockSsmClient) DescribeAssociation(arg0 context.Context, arg1 *ssm.DescribeAssociationInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeAssociationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAssociation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssociation", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssociation indicates an expected call of DescribeAssociation.
func (mr *MockSsmClientMockRecorder) DescribeAssociation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssociation", reflect.TypeOf((*MockSsmClient)(nil).DescribeAssociation), varargs...)
}

// DescribeAssociationExecutionTargets mocks base method.
func (m *MockSsmClient) DescribeAssociationExecutionTargets(arg0 context.Context, arg1 *ssm.DescribeAssociationExecutionTargetsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeAssociationExecutionTargetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAssociationExecutionTargets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssociationExecutionTargets", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeAssociationExecutionTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssociationExecutionTargets indicates an expected call of DescribeAssociationExecutionTargets.
func (mr *MockSsmClientMockRecorder) DescribeAssociationExecutionTargets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssociationExecutionTargets", reflect.TypeOf((*MockSsmClient)(nil).DescribeAssociationExecutionTargets), varargs...)
}

// DescribeAssociationExecutions mocks base method.
func (m *MockSsmClient) DescribeAssociationExecutions(arg0 context.Context, arg1 *ssm.DescribeAssociationExecutionsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeAssociationExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAssociationExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssociationExecutions", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeAssociationExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssociationExecutions indicates an expected call of DescribeAssociationExecutions.
func (mr *MockSsmClientMockRecorder) DescribeAssociationExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssociationExecutions", reflect.TypeOf((*MockSsmClient)(nil).DescribeAssociationExecutions), varargs...)
}

// DescribeAutomationExecutions mocks base method.
func (m *MockSsmClient) DescribeAutomationExecutions(arg0 context.Context, arg1 *ssm.DescribeAutomationExecutionsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeAutomationExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAutomationExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAutomationExecutions", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeAutomationExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutomationExecutions indicates an expected call of DescribeAutomationExecutions.
func (mr *MockSsmClientMockRecorder) DescribeAutomationExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutomationExecutions", reflect.TypeOf((*MockSsmClient)(nil).DescribeAutomationExecutions), varargs...)
}

// DescribeAutomationStepExecutions mocks base method.
func (m *MockSsmClient) DescribeAutomationStepExecutions(arg0 context.Context, arg1 *ssm.DescribeAutomationStepExecutionsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeAutomationStepExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAutomationStepExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAutomationStepExecutions", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeAutomationStepExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutomationStepExecutions indicates an expected call of DescribeAutomationStepExecutions.
func (mr *MockSsmClientMockRecorder) DescribeAutomationStepExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutomationStepExecutions", reflect.TypeOf((*MockSsmClient)(nil).DescribeAutomationStepExecutions), varargs...)
}

// DescribeAvailablePatches mocks base method.
func (m *MockSsmClient) DescribeAvailablePatches(arg0 context.Context, arg1 *ssm.DescribeAvailablePatchesInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeAvailablePatchesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAvailablePatches")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAvailablePatches", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeAvailablePatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAvailablePatches indicates an expected call of DescribeAvailablePatches.
func (mr *MockSsmClientMockRecorder) DescribeAvailablePatches(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAvailablePatches", reflect.TypeOf((*MockSsmClient)(nil).DescribeAvailablePatches), varargs...)
}

// DescribeDocument mocks base method.
func (m *MockSsmClient) DescribeDocument(arg0 context.Context, arg1 *ssm.DescribeDocumentInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeDocumentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDocument")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDocument", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDocument indicates an expected call of DescribeDocument.
func (mr *MockSsmClientMockRecorder) DescribeDocument(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDocument", reflect.TypeOf((*MockSsmClient)(nil).DescribeDocument), varargs...)
}

// DescribeDocumentPermission mocks base method.
func (m *MockSsmClient) DescribeDocumentPermission(arg0 context.Context, arg1 *ssm.DescribeDocumentPermissionInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeDocumentPermissionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDocumentPermission")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDocumentPermission", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeDocumentPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDocumentPermission indicates an expected call of DescribeDocumentPermission.
func (mr *MockSsmClientMockRecorder) DescribeDocumentPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDocumentPermission", reflect.TypeOf((*MockSsmClient)(nil).DescribeDocumentPermission), varargs...)
}

// DescribeEffectiveInstanceAssociations mocks base method.
func (m *MockSsmClient) DescribeEffectiveInstanceAssociations(arg0 context.Context, arg1 *ssm.DescribeEffectiveInstanceAssociationsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEffectiveInstanceAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEffectiveInstanceAssociations", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEffectiveInstanceAssociations indicates an expected call of DescribeEffectiveInstanceAssociations.
func (mr *MockSsmClientMockRecorder) DescribeEffectiveInstanceAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEffectiveInstanceAssociations", reflect.TypeOf((*MockSsmClient)(nil).DescribeEffectiveInstanceAssociations), varargs...)
}

// DescribeEffectivePatchesForPatchBaseline mocks base method.
func (m *MockSsmClient) DescribeEffectivePatchesForPatchBaseline(arg0 context.Context, arg1 *ssm.DescribeEffectivePatchesForPatchBaselineInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEffectivePatchesForPatchBaseline")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEffectivePatchesForPatchBaseline", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEffectivePatchesForPatchBaseline indicates an expected call of DescribeEffectivePatchesForPatchBaseline.
func (mr *MockSsmClientMockRecorder) DescribeEffectivePatchesForPatchBaseline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEffectivePatchesForPatchBaseline", reflect.TypeOf((*MockSsmClient)(nil).DescribeEffectivePatchesForPatchBaseline), varargs...)
}

// DescribeInstanceAssociationsStatus mocks base method.
func (m *MockSsmClient) DescribeInstanceAssociationsStatus(arg0 context.Context, arg1 *ssm.DescribeInstanceAssociationsStatusInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceAssociationsStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceAssociationsStatus", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeInstanceAssociationsStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAssociationsStatus indicates an expected call of DescribeInstanceAssociationsStatus.
func (mr *MockSsmClientMockRecorder) DescribeInstanceAssociationsStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAssociationsStatus", reflect.TypeOf((*MockSsmClient)(nil).DescribeInstanceAssociationsStatus), varargs...)
}

// DescribeInstanceInformation mocks base method.
func (m *MockSsmClient) DescribeInstanceInformation(arg0 context.Context, arg1 *ssm.DescribeInstanceInformationInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeInstanceInformationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceInformation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceInformation", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeInstanceInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceInformation indicates an expected call of DescribeInstanceInformation.
func (mr *MockSsmClientMockRecorder) DescribeInstanceInformation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceInformation", reflect.TypeOf((*MockSsmClient)(nil).DescribeInstanceInformation), varargs...)
}

// DescribeInstancePatchStates mocks base method.
func (m *MockSsmClient) DescribeInstancePatchStates(arg0 context.Context, arg1 *ssm.DescribeInstancePatchStatesInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeInstancePatchStatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstancePatchStates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstancePatchStates", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchStatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancePatchStates indicates an expected call of DescribeInstancePatchStates.
func (mr *MockSsmClientMockRecorder) DescribeInstancePatchStates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancePatchStates", reflect.TypeOf((*MockSsmClient)(nil).DescribeInstancePatchStates), varargs...)
}

// DescribeInstancePatchStatesForPatchGroup mocks base method.
func (m *MockSsmClient) DescribeInstancePatchStatesForPatchGroup(arg0 context.Context, arg1 *ssm.DescribeInstancePatchStatesForPatchGroupInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstancePatchStatesForPatchGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstancePatchStatesForPatchGroup", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancePatchStatesForPatchGroup indicates an expected call of DescribeInstancePatchStatesForPatchGroup.
func (mr *MockSsmClientMockRecorder) DescribeInstancePatchStatesForPatchGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancePatchStatesForPatchGroup", reflect.TypeOf((*MockSsmClient)(nil).DescribeInstancePatchStatesForPatchGroup), varargs...)
}

// DescribeInstancePatches mocks base method.
func (m *MockSsmClient) DescribeInstancePatches(arg0 context.Context, arg1 *ssm.DescribeInstancePatchesInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeInstancePatchesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstancePatches")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstancePatches", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancePatches indicates an expected call of DescribeInstancePatches.
func (mr *MockSsmClientMockRecorder) DescribeInstancePatches(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancePatches", reflect.TypeOf((*MockSsmClient)(nil).DescribeInstancePatches), varargs...)
}

// DescribeInventoryDeletions mocks base method.
func (m *MockSsmClient) DescribeInventoryDeletions(arg0 context.Context, arg1 *ssm.DescribeInventoryDeletionsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeInventoryDeletionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInventoryDeletions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInventoryDeletions", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeInventoryDeletionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInventoryDeletions indicates an expected call of DescribeInventoryDeletions.
func (mr *MockSsmClientMockRecorder) DescribeInventoryDeletions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInventoryDeletions", reflect.TypeOf((*MockSsmClient)(nil).DescribeInventoryDeletions), varargs...)
}

// DescribeMaintenanceWindowExecutionTaskInvocations mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowExecutionTaskInvocations(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowExecutionTaskInvocations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowExecutionTaskInvocations", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowExecutionTaskInvocations indicates an expected call of DescribeMaintenanceWindowExecutionTaskInvocations.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowExecutionTaskInvocations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowExecutionTaskInvocations", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowExecutionTaskInvocations), varargs...)
}

// DescribeMaintenanceWindowExecutionTasks mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowExecutionTasks(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowExecutionTasksInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowExecutionTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowExecutionTasks", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowExecutionTasks indicates an expected call of DescribeMaintenanceWindowExecutionTasks.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowExecutionTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowExecutionTasks", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowExecutionTasks), varargs...)
}

// DescribeMaintenanceWindowExecutions mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowExecutions(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowExecutionsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowExecutions", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowExecutions indicates an expected call of DescribeMaintenanceWindowExecutions.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowExecutions", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowExecutions), varargs...)
}

// DescribeMaintenanceWindowSchedule mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowSchedule(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowScheduleInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowScheduleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowSchedule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowSchedule", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowSchedule indicates an expected call of DescribeMaintenanceWindowSchedule.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowSchedule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowSchedule", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowSchedule), varargs...)
}

// DescribeMaintenanceWindowTargets mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowTargets(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowTargetsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowTargets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowTargets", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowTargets indicates an expected call of DescribeMaintenanceWindowTargets.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowTargets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowTargets", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowTargets), varargs...)
}

// DescribeMaintenanceWindowTasks mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowTasks(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowTasksInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowTasks", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowTasks indicates an expected call of DescribeMaintenanceWindowTasks.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowTasks", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowTasks), varargs...)
}

// DescribeMaintenanceWindows mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindows(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindows")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindows", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindows indicates an expected call of DescribeMaintenanceWindows.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindows(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindows", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindows), varargs...)
}

// DescribeMaintenanceWindowsForTarget mocks base method.
func (m *MockSsmClient) DescribeMaintenanceWindowsForTarget(arg0 context.Context, arg1 *ssm.DescribeMaintenanceWindowsForTargetInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeMaintenanceWindowsForTargetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMaintenanceWindowsForTarget")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMaintenanceWindowsForTarget", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowsForTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMaintenanceWindowsForTarget indicates an expected call of DescribeMaintenanceWindowsForTarget.
func (mr *MockSsmClientMockRecorder) DescribeMaintenanceWindowsForTarget(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMaintenanceWindowsForTarget", reflect.TypeOf((*MockSsmClient)(nil).DescribeMaintenanceWindowsForTarget), varargs...)
}

// DescribeOpsItems mocks base method.
func (m *MockSsmClient) DescribeOpsItems(arg0 context.Context, arg1 *ssm.DescribeOpsItemsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeOpsItemsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOpsItems")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOpsItems", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeOpsItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOpsItems indicates an expected call of DescribeOpsItems.
func (mr *MockSsmClientMockRecorder) DescribeOpsItems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOpsItems", reflect.TypeOf((*MockSsmClient)(nil).DescribeOpsItems), varargs...)
}

// DescribeParameters mocks base method.
func (m *MockSsmClient) DescribeParameters(arg0 context.Context, arg1 *ssm.DescribeParametersInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeParameters", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameters indicates an expected call of DescribeParameters.
func (mr *MockSsmClientMockRecorder) DescribeParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameters", reflect.TypeOf((*MockSsmClient)(nil).DescribeParameters), varargs...)
}

// DescribePatchBaselines mocks base method.
func (m *MockSsmClient) DescribePatchBaselines(arg0 context.Context, arg1 *ssm.DescribePatchBaselinesInput, arg2 ...func(*ssm.Options)) (*ssm.DescribePatchBaselinesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePatchBaselines")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePatchBaselines", varargs...)
	ret0, _ := ret[0].(*ssm.DescribePatchBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePatchBaselines indicates an expected call of DescribePatchBaselines.
func (mr *MockSsmClientMockRecorder) DescribePatchBaselines(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePatchBaselines", reflect.TypeOf((*MockSsmClient)(nil).DescribePatchBaselines), varargs...)
}

// DescribePatchGroupState mocks base method.
func (m *MockSsmClient) DescribePatchGroupState(arg0 context.Context, arg1 *ssm.DescribePatchGroupStateInput, arg2 ...func(*ssm.Options)) (*ssm.DescribePatchGroupStateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePatchGroupState")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePatchGroupState", varargs...)
	ret0, _ := ret[0].(*ssm.DescribePatchGroupStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePatchGroupState indicates an expected call of DescribePatchGroupState.
func (mr *MockSsmClientMockRecorder) DescribePatchGroupState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePatchGroupState", reflect.TypeOf((*MockSsmClient)(nil).DescribePatchGroupState), varargs...)
}

// DescribePatchGroups mocks base method.
func (m *MockSsmClient) DescribePatchGroups(arg0 context.Context, arg1 *ssm.DescribePatchGroupsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribePatchGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePatchGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePatchGroups", varargs...)
	ret0, _ := ret[0].(*ssm.DescribePatchGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePatchGroups indicates an expected call of DescribePatchGroups.
func (mr *MockSsmClientMockRecorder) DescribePatchGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePatchGroups", reflect.TypeOf((*MockSsmClient)(nil).DescribePatchGroups), varargs...)
}

// DescribePatchProperties mocks base method.
func (m *MockSsmClient) DescribePatchProperties(arg0 context.Context, arg1 *ssm.DescribePatchPropertiesInput, arg2 ...func(*ssm.Options)) (*ssm.DescribePatchPropertiesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePatchProperties")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePatchProperties", varargs...)
	ret0, _ := ret[0].(*ssm.DescribePatchPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePatchProperties indicates an expected call of DescribePatchProperties.
func (mr *MockSsmClientMockRecorder) DescribePatchProperties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePatchProperties", reflect.TypeOf((*MockSsmClient)(nil).DescribePatchProperties), varargs...)
}

// DescribeSessions mocks base method.
func (m *MockSsmClient) DescribeSessions(arg0 context.Context, arg1 *ssm.DescribeSessionsInput, arg2 ...func(*ssm.Options)) (*ssm.DescribeSessionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSessions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSessions", varargs...)
	ret0, _ := ret[0].(*ssm.DescribeSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSessions indicates an expected call of DescribeSessions.
func (mr *MockSsmClientMockRecorder) DescribeSessions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSessions", reflect.TypeOf((*MockSsmClient)(nil).DescribeSessions), varargs...)
}

// GetAutomationExecution mocks base method.
func (m *MockSsmClient) GetAutomationExecution(arg0 context.Context, arg1 *ssm.GetAutomationExecutionInput, arg2 ...func(*ssm.Options)) (*ssm.GetAutomationExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAutomationExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutomationExecution", varargs...)
	ret0, _ := ret[0].(*ssm.GetAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationExecution indicates an expected call of GetAutomationExecution.
func (mr *MockSsmClientMockRecorder) GetAutomationExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationExecution", reflect.TypeOf((*MockSsmClient)(nil).GetAutomationExecution), varargs...)
}

// GetCalendarState mocks base method.
func (m *MockSsmClient) GetCalendarState(arg0 context.Context, arg1 *ssm.GetCalendarStateInput, arg2 ...func(*ssm.Options)) (*ssm.GetCalendarStateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCalendarState")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCalendarState", varargs...)
	ret0, _ := ret[0].(*ssm.GetCalendarStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalendarState indicates an expected call of GetCalendarState.
func (mr *MockSsmClientMockRecorder) GetCalendarState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalendarState", reflect.TypeOf((*MockSsmClient)(nil).GetCalendarState), varargs...)
}

// GetCommandInvocation mocks base method.
func (m *MockSsmClient) GetCommandInvocation(arg0 context.Context, arg1 *ssm.GetCommandInvocationInput, arg2 ...func(*ssm.Options)) (*ssm.GetCommandInvocationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCommandInvocation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommandInvocation", varargs...)
	ret0, _ := ret[0].(*ssm.GetCommandInvocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandInvocation indicates an expected call of GetCommandInvocation.
func (mr *MockSsmClientMockRecorder) GetCommandInvocation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandInvocation", reflect.TypeOf((*MockSsmClient)(nil).GetCommandInvocation), varargs...)
}

// GetConnectionStatus mocks base method.
func (m *MockSsmClient) GetConnectionStatus(arg0 context.Context, arg1 *ssm.GetConnectionStatusInput, arg2 ...func(*ssm.Options)) (*ssm.GetConnectionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConnectionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionStatus", varargs...)
	ret0, _ := ret[0].(*ssm.GetConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionStatus indicates an expected call of GetConnectionStatus.
func (mr *MockSsmClientMockRecorder) GetConnectionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionStatus", reflect.TypeOf((*MockSsmClient)(nil).GetConnectionStatus), varargs...)
}

// GetDefaultPatchBaseline mocks base method.
func (m *MockSsmClient) GetDefaultPatchBaseline(arg0 context.Context, arg1 *ssm.GetDefaultPatchBaselineInput, arg2 ...func(*ssm.Options)) (*ssm.GetDefaultPatchBaselineOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDefaultPatchBaseline")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultPatchBaseline", varargs...)
	ret0, _ := ret[0].(*ssm.GetDefaultPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultPatchBaseline indicates an expected call of GetDefaultPatchBaseline.
func (mr *MockSsmClientMockRecorder) GetDefaultPatchBaseline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPatchBaseline", reflect.TypeOf((*MockSsmClient)(nil).GetDefaultPatchBaseline), varargs...)
}

// GetDeployablePatchSnapshotForInstance mocks base method.
func (m *MockSsmClient) GetDeployablePatchSnapshotForInstance(arg0 context.Context, arg1 *ssm.GetDeployablePatchSnapshotForInstanceInput, arg2 ...func(*ssm.Options)) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeployablePatchSnapshotForInstance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployablePatchSnapshotForInstance", varargs...)
	ret0, _ := ret[0].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployablePatchSnapshotForInstance indicates an expected call of GetDeployablePatchSnapshotForInstance.
func (mr *MockSsmClientMockRecorder) GetDeployablePatchSnapshotForInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployablePatchSnapshotForInstance", reflect.TypeOf((*MockSsmClient)(nil).GetDeployablePatchSnapshotForInstance), varargs...)
}

// GetDocument mocks base method.
func (m *MockSsmClient) GetDocument(arg0 context.Context, arg1 *ssm.GetDocumentInput, arg2 ...func(*ssm.Options)) (*ssm.GetDocumentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDocument")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocument", varargs...)
	ret0, _ := ret[0].(*ssm.GetDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockSsmClientMockRecorder) GetDocument(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockSsmClient)(nil).GetDocument), varargs...)
}

// GetInventory mocks base method.
func (m *MockSsmClient) GetInventory(arg0 context.Context, arg1 *ssm.GetInventoryInput, arg2 ...func(*ssm.Options)) (*ssm.GetInventoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInventory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInventory", varargs...)
	ret0, _ := ret[0].(*ssm.GetInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockSsmClientMockRecorder) GetInventory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockSsmClient)(nil).GetInventory), varargs...)
}

// GetInventorySchema mocks base method.
func (m *MockSsmClient) GetInventorySchema(arg0 context.Context, arg1 *ssm.GetInventorySchemaInput, arg2 ...func(*ssm.Options)) (*ssm.GetInventorySchemaOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInventorySchema")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInventorySchema", varargs...)
	ret0, _ := ret[0].(*ssm.GetInventorySchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventorySchema indicates an expected call of GetInventorySchema.
func (mr *MockSsmClientMockRecorder) GetInventorySchema(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventorySchema", reflect.TypeOf((*MockSsmClient)(nil).GetInventorySchema), varargs...)
}

// GetMaintenanceWindow mocks base method.
func (m *MockSsmClient) GetMaintenanceWindow(arg0 context.Context, arg1 *ssm.GetMaintenanceWindowInput, arg2 ...func(*ssm.Options)) (*ssm.GetMaintenanceWindowOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMaintenanceWindow")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaintenanceWindow", varargs...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceWindow indicates an expected call of GetMaintenanceWindow.
func (mr *MockSsmClientMockRecorder) GetMaintenanceWindow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceWindow", reflect.TypeOf((*MockSsmClient)(nil).GetMaintenanceWindow), varargs...)
}

// GetMaintenanceWindowExecution mocks base method.
func (m *MockSsmClient) GetMaintenanceWindowExecution(arg0 context.Context, arg1 *ssm.GetMaintenanceWindowExecutionInput, arg2 ...func(*ssm.Options)) (*ssm.GetMaintenanceWindowExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMaintenanceWindowExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaintenanceWindowExecution", varargs...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceWindowExecution indicates an expected call of GetMaintenanceWindowExecution.
func (mr *MockSsmClientMockRecorder) GetMaintenanceWindowExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceWindowExecution", reflect.TypeOf((*MockSsmClient)(nil).GetMaintenanceWindowExecution), varargs...)
}

// GetMaintenanceWindowExecutionTask mocks base method.
func (m *MockSsmClient) GetMaintenanceWindowExecutionTask(arg0 context.Context, arg1 *ssm.GetMaintenanceWindowExecutionTaskInput, arg2 ...func(*ssm.Options)) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMaintenanceWindowExecutionTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaintenanceWindowExecutionTask", varargs...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceWindowExecutionTask indicates an expected call of GetMaintenanceWindowExecutionTask.
func (mr *MockSsmClientMockRecorder) GetMaintenanceWindowExecutionTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceWindowExecutionTask", reflect.TypeOf((*MockSsmClient)(nil).GetMaintenanceWindowExecutionTask), varargs...)
}

// GetMaintenanceWindowExecutionTaskInvocation mocks base method.
func (m *MockSsmClient) GetMaintenanceWindowExecutionTaskInvocation(arg0 context.Context, arg1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, arg2 ...func(*ssm.Options)) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMaintenanceWindowExecutionTaskInvocation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaintenanceWindowExecutionTaskInvocation", varargs...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceWindowExecutionTaskInvocation indicates an expected call of GetMaintenanceWindowExecutionTaskInvocation.
func (mr *MockSsmClientMockRecorder) GetMaintenanceWindowExecutionTaskInvocation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceWindowExecutionTaskInvocation", reflect.TypeOf((*MockSsmClient)(nil).GetMaintenanceWindowExecutionTaskInvocation), varargs...)
}

// GetMaintenanceWindowTask mocks base method.
func (m *MockSsmClient) GetMaintenanceWindowTask(arg0 context.Context, arg1 *ssm.GetMaintenanceWindowTaskInput, arg2 ...func(*ssm.Options)) (*ssm.GetMaintenanceWindowTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetMaintenanceWindowTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaintenanceWindowTask", varargs...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceWindowTask indicates an expected call of GetMaintenanceWindowTask.
func (mr *MockSsmClientMockRecorder) GetMaintenanceWindowTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceWindowTask", reflect.TypeOf((*MockSsmClient)(nil).GetMaintenanceWindowTask), varargs...)
}

// GetOpsItem mocks base method.
func (m *MockSsmClient) GetOpsItem(arg0 context.Context, arg1 *ssm.GetOpsItemInput, arg2 ...func(*ssm.Options)) (*ssm.GetOpsItemOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOpsItem")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpsItem", varargs...)
	ret0, _ := ret[0].(*ssm.GetOpsItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpsItem indicates an expected call of GetOpsItem.
func (mr *MockSsmClientMockRecorder) GetOpsItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpsItem", reflect.TypeOf((*MockSsmClient)(nil).GetOpsItem), varargs...)
}

// GetOpsMetadata mocks base method.
func (m *MockSsmClient) GetOpsMetadata(arg0 context.Context, arg1 *ssm.GetOpsMetadataInput, arg2 ...func(*ssm.Options)) (*ssm.GetOpsMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOpsMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpsMetadata", varargs...)
	ret0, _ := ret[0].(*ssm.GetOpsMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpsMetadata indicates an expected call of GetOpsMetadata.
func (mr *MockSsmClientMockRecorder) GetOpsMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpsMetadata", reflect.TypeOf((*MockSsmClient)(nil).GetOpsMetadata), varargs...)
}

// GetOpsSummary mocks base method.
func (m *MockSsmClient) GetOpsSummary(arg0 context.Context, arg1 *ssm.GetOpsSummaryInput, arg2 ...func(*ssm.Options)) (*ssm.GetOpsSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOpsSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpsSummary", varargs...)
	ret0, _ := ret[0].(*ssm.GetOpsSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpsSummary indicates an expected call of GetOpsSummary.
func (mr *MockSsmClientMockRecorder) GetOpsSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpsSummary", reflect.TypeOf((*MockSsmClient)(nil).GetOpsSummary), varargs...)
}

// GetParameter mocks base method.
func (m *MockSsmClient) GetParameter(arg0 context.Context, arg1 *ssm.GetParameterInput, arg2 ...func(*ssm.Options)) (*ssm.GetParameterOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetParameter")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameter", varargs...)
	ret0, _ := ret[0].(*ssm.GetParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameter indicates an expected call of GetParameter.
func (mr *MockSsmClientMockRecorder) GetParameter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameter", reflect.TypeOf((*MockSsmClient)(nil).GetParameter), varargs...)
}

// GetParameterHistory mocks base method.
func (m *MockSsmClient) GetParameterHistory(arg0 context.Context, arg1 *ssm.GetParameterHistoryInput, arg2 ...func(*ssm.Options)) (*ssm.GetParameterHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetParameterHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameterHistory", varargs...)
	ret0, _ := ret[0].(*ssm.GetParameterHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameterHistory indicates an expected call of GetParameterHistory.
func (mr *MockSsmClientMockRecorder) GetParameterHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameterHistory", reflect.TypeOf((*MockSsmClient)(nil).GetParameterHistory), varargs...)
}

// GetParameters mocks base method.
func (m *MockSsmClient) GetParameters(arg0 context.Context, arg1 *ssm.GetParametersInput, arg2 ...func(*ssm.Options)) (*ssm.GetParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameters", varargs...)
	ret0, _ := ret[0].(*ssm.GetParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameters indicates an expected call of GetParameters.
func (mr *MockSsmClientMockRecorder) GetParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameters", reflect.TypeOf((*MockSsmClient)(nil).GetParameters), varargs...)
}

// GetParametersByPath mocks base method.
func (m *MockSsmClient) GetParametersByPath(arg0 context.Context, arg1 *ssm.GetParametersByPathInput, arg2 ...func(*ssm.Options)) (*ssm.GetParametersByPathOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetParametersByPath")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParametersByPath", varargs...)
	ret0, _ := ret[0].(*ssm.GetParametersByPathOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParametersByPath indicates an expected call of GetParametersByPath.
func (mr *MockSsmClientMockRecorder) GetParametersByPath(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParametersByPath", reflect.TypeOf((*MockSsmClient)(nil).GetParametersByPath), varargs...)
}

// GetPatchBaseline mocks base method.
func (m *MockSsmClient) GetPatchBaseline(arg0 context.Context, arg1 *ssm.GetPatchBaselineInput, arg2 ...func(*ssm.Options)) (*ssm.GetPatchBaselineOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPatchBaseline")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatchBaseline", varargs...)
	ret0, _ := ret[0].(*ssm.GetPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatchBaseline indicates an expected call of GetPatchBaseline.
func (mr *MockSsmClientMockRecorder) GetPatchBaseline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatchBaseline", reflect.TypeOf((*MockSsmClient)(nil).GetPatchBaseline), varargs...)
}

// GetPatchBaselineForPatchGroup mocks base method.
func (m *MockSsmClient) GetPatchBaselineForPatchGroup(arg0 context.Context, arg1 *ssm.GetPatchBaselineForPatchGroupInput, arg2 ...func(*ssm.Options)) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPatchBaselineForPatchGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatchBaselineForPatchGroup", varargs...)
	ret0, _ := ret[0].(*ssm.GetPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatchBaselineForPatchGroup indicates an expected call of GetPatchBaselineForPatchGroup.
func (mr *MockSsmClientMockRecorder) GetPatchBaselineForPatchGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatchBaselineForPatchGroup", reflect.TypeOf((*MockSsmClient)(nil).GetPatchBaselineForPatchGroup), varargs...)
}

// GetResourcePolicies mocks base method.
func (m *MockSsmClient) GetResourcePolicies(arg0 context.Context, arg1 *ssm.GetResourcePoliciesInput, arg2 ...func(*ssm.Options)) (*ssm.GetResourcePoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResourcePolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicies", varargs...)
	ret0, _ := ret[0].(*ssm.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies.
func (mr *MockSsmClientMockRecorder) GetResourcePolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockSsmClient)(nil).GetResourcePolicies), varargs...)
}

// GetServiceSetting mocks base method.
func (m *MockSsmClient) GetServiceSetting(arg0 context.Context, arg1 *ssm.GetServiceSettingInput, arg2 ...func(*ssm.Options)) (*ssm.GetServiceSettingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetServiceSetting")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceSetting", varargs...)
	ret0, _ := ret[0].(*ssm.GetServiceSettingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceSetting indicates an expected call of GetServiceSetting.
func (mr *MockSsmClientMockRecorder) GetServiceSetting(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceSetting", reflect.TypeOf((*MockSsmClient)(nil).GetServiceSetting), varargs...)
}

// ListAssociationVersions mocks base method.
func (m *MockSsmClient) ListAssociationVersions(arg0 context.Context, arg1 *ssm.ListAssociationVersionsInput, arg2 ...func(*ssm.Options)) (*ssm.ListAssociationVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssociationVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociationVersions", varargs...)
	ret0, _ := ret[0].(*ssm.ListAssociationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociationVersions indicates an expected call of ListAssociationVersions.
func (mr *MockSsmClientMockRecorder) ListAssociationVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociationVersions", reflect.TypeOf((*MockSsmClient)(nil).ListAssociationVersions), varargs...)
}

// ListAssociations mocks base method.
func (m *MockSsmClient) ListAssociations(arg0 context.Context, arg1 *ssm.ListAssociationsInput, arg2 ...func(*ssm.Options)) (*ssm.ListAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociations", varargs...)
	ret0, _ := ret[0].(*ssm.ListAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociations indicates an expected call of ListAssociations.
func (mr *MockSsmClientMockRecorder) ListAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociations", reflect.TypeOf((*MockSsmClient)(nil).ListAssociations), varargs...)
}

// ListCommandInvocations mocks base method.
func (m *MockSsmClient) ListCommandInvocations(arg0 context.Context, arg1 *ssm.ListCommandInvocationsInput, arg2 ...func(*ssm.Options)) (*ssm.ListCommandInvocationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCommandInvocations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommandInvocations", varargs...)
	ret0, _ := ret[0].(*ssm.ListCommandInvocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommandInvocations indicates an expected call of ListCommandInvocations.
func (mr *MockSsmClientMockRecorder) ListCommandInvocations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommandInvocations", reflect.TypeOf((*MockSsmClient)(nil).ListCommandInvocations), varargs...)
}

// ListCommands mocks base method.
func (m *MockSsmClient) ListCommands(arg0 context.Context, arg1 *ssm.ListCommandsInput, arg2 ...func(*ssm.Options)) (*ssm.ListCommandsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCommands")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommands", varargs...)
	ret0, _ := ret[0].(*ssm.ListCommandsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands.
func (mr *MockSsmClientMockRecorder) ListCommands(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockSsmClient)(nil).ListCommands), varargs...)
}

// ListComplianceItems mocks base method.
func (m *MockSsmClient) ListComplianceItems(arg0 context.Context, arg1 *ssm.ListComplianceItemsInput, arg2 ...func(*ssm.Options)) (*ssm.ListComplianceItemsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListComplianceItems")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComplianceItems", varargs...)
	ret0, _ := ret[0].(*ssm.ListComplianceItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplianceItems indicates an expected call of ListComplianceItems.
func (mr *MockSsmClientMockRecorder) ListComplianceItems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplianceItems", reflect.TypeOf((*MockSsmClient)(nil).ListComplianceItems), varargs...)
}

// ListComplianceSummaries mocks base method.
func (m *MockSsmClient) ListComplianceSummaries(arg0 context.Context, arg1 *ssm.ListComplianceSummariesInput, arg2 ...func(*ssm.Options)) (*ssm.ListComplianceSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListComplianceSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComplianceSummaries", varargs...)
	ret0, _ := ret[0].(*ssm.ListComplianceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplianceSummaries indicates an expected call of ListComplianceSummaries.
func (mr *MockSsmClientMockRecorder) ListComplianceSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplianceSummaries", reflect.TypeOf((*MockSsmClient)(nil).ListComplianceSummaries), varargs...)
}

// ListDocumentMetadataHistory mocks base method.
func (m *MockSsmClient) ListDocumentMetadataHistory(arg0 context.Context, arg1 *ssm.ListDocumentMetadataHistoryInput, arg2 ...func(*ssm.Options)) (*ssm.ListDocumentMetadataHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDocumentMetadataHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDocumentMetadataHistory", varargs...)
	ret0, _ := ret[0].(*ssm.ListDocumentMetadataHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocumentMetadataHistory indicates an expected call of ListDocumentMetadataHistory.
func (mr *MockSsmClientMockRecorder) ListDocumentMetadataHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocumentMetadataHistory", reflect.TypeOf((*MockSsmClient)(nil).ListDocumentMetadataHistory), varargs...)
}

// ListDocumentVersions mocks base method.
func (m *MockSsmClient) ListDocumentVersions(arg0 context.Context, arg1 *ssm.ListDocumentVersionsInput, arg2 ...func(*ssm.Options)) (*ssm.ListDocumentVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDocumentVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDocumentVersions", varargs...)
	ret0, _ := ret[0].(*ssm.ListDocumentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocumentVersions indicates an expected call of ListDocumentVersions.
func (mr *MockSsmClientMockRecorder) ListDocumentVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocumentVersions", reflect.TypeOf((*MockSsmClient)(nil).ListDocumentVersions), varargs...)
}

// ListDocuments mocks base method.
func (m *MockSsmClient) ListDocuments(arg0 context.Context, arg1 *ssm.ListDocumentsInput, arg2 ...func(*ssm.Options)) (*ssm.ListDocumentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDocuments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDocuments", varargs...)
	ret0, _ := ret[0].(*ssm.ListDocumentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocuments indicates an expected call of ListDocuments.
func (mr *MockSsmClientMockRecorder) ListDocuments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocuments", reflect.TypeOf((*MockSsmClient)(nil).ListDocuments), varargs...)
}

// ListInventoryEntries mocks base method.
func (m *MockSsmClient) ListInventoryEntries(arg0 context.Context, arg1 *ssm.ListInventoryEntriesInput, arg2 ...func(*ssm.Options)) (*ssm.ListInventoryEntriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInventoryEntries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInventoryEntries", varargs...)
	ret0, _ := ret[0].(*ssm.ListInventoryEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoryEntries indicates an expected call of ListInventoryEntries.
func (mr *MockSsmClientMockRecorder) ListInventoryEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoryEntries", reflect.TypeOf((*MockSsmClient)(nil).ListInventoryEntries), varargs...)
}

// ListOpsItemEvents mocks base method.
func (m *MockSsmClient) ListOpsItemEvents(arg0 context.Context, arg1 *ssm.ListOpsItemEventsInput, arg2 ...func(*ssm.Options)) (*ssm.ListOpsItemEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOpsItemEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOpsItemEvents", varargs...)
	ret0, _ := ret[0].(*ssm.ListOpsItemEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpsItemEvents indicates an expected call of ListOpsItemEvents.
func (mr *MockSsmClientMockRecorder) ListOpsItemEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpsItemEvents", reflect.TypeOf((*MockSsmClient)(nil).ListOpsItemEvents), varargs...)
}

// ListOpsItemRelatedItems mocks base method.
func (m *MockSsmClient) ListOpsItemRelatedItems(arg0 context.Context, arg1 *ssm.ListOpsItemRelatedItemsInput, arg2 ...func(*ssm.Options)) (*ssm.ListOpsItemRelatedItemsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOpsItemRelatedItems")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOpsItemRelatedItems", varargs...)
	ret0, _ := ret[0].(*ssm.ListOpsItemRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpsItemRelatedItems indicates an expected call of ListOpsItemRelatedItems.
func (mr *MockSsmClientMockRecorder) ListOpsItemRelatedItems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpsItemRelatedItems", reflect.TypeOf((*MockSsmClient)(nil).ListOpsItemRelatedItems), varargs...)
}

// ListOpsMetadata mocks base method.
func (m *MockSsmClient) ListOpsMetadata(arg0 context.Context, arg1 *ssm.ListOpsMetadataInput, arg2 ...func(*ssm.Options)) (*ssm.ListOpsMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOpsMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOpsMetadata", varargs...)
	ret0, _ := ret[0].(*ssm.ListOpsMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOpsMetadata indicates an expected call of ListOpsMetadata.
func (mr *MockSsmClientMockRecorder) ListOpsMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOpsMetadata", reflect.TypeOf((*MockSsmClient)(nil).ListOpsMetadata), varargs...)
}

// ListResourceComplianceSummaries mocks base method.
func (m *MockSsmClient) ListResourceComplianceSummaries(arg0 context.Context, arg1 *ssm.ListResourceComplianceSummariesInput, arg2 ...func(*ssm.Options)) (*ssm.ListResourceComplianceSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourceComplianceSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceComplianceSummaries", varargs...)
	ret0, _ := ret[0].(*ssm.ListResourceComplianceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceComplianceSummaries indicates an expected call of ListResourceComplianceSummaries.
func (mr *MockSsmClientMockRecorder) ListResourceComplianceSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceComplianceSummaries", reflect.TypeOf((*MockSsmClient)(nil).ListResourceComplianceSummaries), varargs...)
}

// ListResourceDataSync mocks base method.
func (m *MockSsmClient) ListResourceDataSync(arg0 context.Context, arg1 *ssm.ListResourceDataSyncInput, arg2 ...func(*ssm.Options)) (*ssm.ListResourceDataSyncOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourceDataSync")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceDataSync", varargs...)
	ret0, _ := ret[0].(*ssm.ListResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceDataSync indicates an expected call of ListResourceDataSync.
func (mr *MockSsmClientMockRecorder) ListResourceDataSync(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDataSync", reflect.TypeOf((*MockSsmClient)(nil).ListResourceDataSync), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSsmClient) ListTagsForResource(arg0 context.Context, arg1 *ssm.ListTagsForResourceInput, arg2 ...func(*ssm.Options)) (*ssm.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssm.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ssm.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSsmClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSsmClient)(nil).ListTagsForResource), varargs...)
}
