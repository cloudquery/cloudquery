// Code generated by MockGen. DO NOT EDIT.
// Source: ssoadmin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ssoadmin "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	gomock "github.com/golang/mock/gomock"
)

// MockSsoadminClient is a mock of SsoadminClient interface.
type MockSsoadminClient struct {
	ctrl     *gomock.Controller
	recorder *MockSsoadminClientMockRecorder
}

// MockSsoadminClientMockRecorder is the mock recorder for MockSsoadminClient.
type MockSsoadminClientMockRecorder struct {
	mock *MockSsoadminClient
}

// NewMockSsoadminClient creates a new mock instance.
func NewMockSsoadminClient(ctrl *gomock.Controller) *MockSsoadminClient {
	mock := &MockSsoadminClient{ctrl: ctrl}
	mock.recorder = &MockSsoadminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSsoadminClient) EXPECT() *MockSsoadminClientMockRecorder {
	return m.recorder
}

// DescribeAccountAssignmentCreationStatus mocks base method.
func (m *MockSsoadminClient) DescribeAccountAssignmentCreationStatus(arg0 context.Context, arg1 *ssoadmin.DescribeAccountAssignmentCreationStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAssignmentCreationStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentCreationStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentCreationStatus indicates an expected call of DescribeAccountAssignmentCreationStatus.
func (mr *MockSsoadminClientMockRecorder) DescribeAccountAssignmentCreationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentCreationStatus", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeAccountAssignmentCreationStatus), varargs...)
}

// DescribeAccountAssignmentDeletionStatus mocks base method.
func (m *MockSsoadminClient) DescribeAccountAssignmentDeletionStatus(arg0 context.Context, arg1 *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAssignmentDeletionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentDeletionStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentDeletionStatus indicates an expected call of DescribeAccountAssignmentDeletionStatus.
func (mr *MockSsoadminClientMockRecorder) DescribeAccountAssignmentDeletionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentDeletionStatus", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeAccountAssignmentDeletionStatus), varargs...)
}

// DescribeInstanceAccessControlAttributeConfiguration mocks base method.
func (m *MockSsoadminClient) DescribeInstanceAccessControlAttributeConfiguration(arg0 context.Context, arg1 *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceAccessControlAttributeConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceAccessControlAttributeConfiguration", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAccessControlAttributeConfiguration indicates an expected call of DescribeInstanceAccessControlAttributeConfiguration.
func (mr *MockSsoadminClientMockRecorder) DescribeInstanceAccessControlAttributeConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAccessControlAttributeConfiguration", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeInstanceAccessControlAttributeConfiguration), varargs...)
}

// DescribePermissionSet mocks base method.
func (m *MockSsoadminClient) DescribePermissionSet(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSet indicates an expected call of DescribePermissionSet.
func (mr *MockSsoadminClientMockRecorder) DescribePermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).DescribePermissionSet), varargs...)
}

// DescribePermissionSetProvisioningStatus mocks base method.
func (m *MockSsoadminClient) DescribePermissionSetProvisioningStatus(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetProvisioningStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePermissionSetProvisioningStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSetProvisioningStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSetProvisioningStatus indicates an expected call of DescribePermissionSetProvisioningStatus.
func (mr *MockSsoadminClientMockRecorder) DescribePermissionSetProvisioningStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetProvisioningStatus", reflect.TypeOf((*MockSsoadminClient)(nil).DescribePermissionSetProvisioningStatus), varargs...)
}

// GetInlinePolicyForPermissionSet mocks base method.
func (m *MockSsoadminClient) GetInlinePolicyForPermissionSet(arg0 context.Context, arg1 *ssoadmin.GetInlinePolicyForPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInlinePolicyForPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInlinePolicyForPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlinePolicyForPermissionSet indicates an expected call of GetInlinePolicyForPermissionSet.
func (mr *MockSsoadminClientMockRecorder) GetInlinePolicyForPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlinePolicyForPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).GetInlinePolicyForPermissionSet), varargs...)
}

// GetPermissionsBoundaryForPermissionSet mocks base method.
func (m *MockSsoadminClient) GetPermissionsBoundaryForPermissionSet(arg0 context.Context, arg1 *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPermissionsBoundaryForPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionsBoundaryForPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsBoundaryForPermissionSet indicates an expected call of GetPermissionsBoundaryForPermissionSet.
func (mr *MockSsoadminClientMockRecorder) GetPermissionsBoundaryForPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsBoundaryForPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).GetPermissionsBoundaryForPermissionSet), varargs...)
}

// ListAccountAssignmentCreationStatus mocks base method.
func (m *MockSsoadminClient) ListAccountAssignmentCreationStatus(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentCreationStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignmentCreationStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentCreationStatus indicates an expected call of ListAccountAssignmentCreationStatus.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignmentCreationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatus", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignmentCreationStatus), varargs...)
}

// ListAccountAssignmentDeletionStatus mocks base method.
func (m *MockSsoadminClient) ListAccountAssignmentDeletionStatus(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentDeletionStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignmentDeletionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentDeletionStatus indicates an expected call of ListAccountAssignmentDeletionStatus.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignmentDeletionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatus", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignmentDeletionStatus), varargs...)
}

// ListAccountAssignments mocks base method.
func (m *MockSsoadminClient) ListAccountAssignments(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignments", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignments indicates an expected call of ListAccountAssignments.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignments", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignments), varargs...)
}

// ListAccountsForProvisionedPermissionSet mocks base method.
func (m *MockSsoadminClient) ListAccountsForProvisionedPermissionSet(arg0 context.Context, arg1 *ssoadmin.ListAccountsForProvisionedPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountsForProvisionedPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsForProvisionedPermissionSet indicates an expected call of ListAccountsForProvisionedPermissionSet.
func (mr *MockSsoadminClientMockRecorder) ListAccountsForProvisionedPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountsForProvisionedPermissionSet), varargs...)
}

// ListCustomerManagedPolicyReferencesInPermissionSet mocks base method.
func (m *MockSsoadminClient) ListCustomerManagedPolicyReferencesInPermissionSet(arg0 context.Context, arg1 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCustomerManagedPolicyReferencesInPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerManagedPolicyReferencesInPermissionSet indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSet.
func (mr *MockSsoadminClientMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).ListCustomerManagedPolicyReferencesInPermissionSet), varargs...)
}

// ListInstances mocks base method.
func (m *MockSsoadminClient) ListInstances(arg0 context.Context, arg1 *ssoadmin.ListInstancesInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockSsoadminClientMockRecorder) ListInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockSsoadminClient)(nil).ListInstances), varargs...)
}

// ListManagedPoliciesInPermissionSet mocks base method.
func (m *MockSsoadminClient) ListManagedPoliciesInPermissionSet(arg0 context.Context, arg1 *ssoadmin.ListManagedPoliciesInPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListManagedPoliciesInPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListManagedPoliciesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedPoliciesInPermissionSet indicates an expected call of ListManagedPoliciesInPermissionSet.
func (mr *MockSsoadminClientMockRecorder) ListManagedPoliciesInPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).ListManagedPoliciesInPermissionSet), varargs...)
}

// ListPermissionSetProvisioningStatus mocks base method.
func (m *MockSsoadminClient) ListPermissionSetProvisioningStatus(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetProvisioningStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissionSetProvisioningStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetProvisioningStatus indicates an expected call of ListPermissionSetProvisioningStatus.
func (mr *MockSsoadminClientMockRecorder) ListPermissionSetProvisioningStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatus", reflect.TypeOf((*MockSsoadminClient)(nil).ListPermissionSetProvisioningStatus), varargs...)
}

// ListPermissionSets mocks base method.
func (m *MockSsoadminClient) ListPermissionSets(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissionSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSets", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSets indicates an expected call of ListPermissionSets.
func (mr *MockSsoadminClientMockRecorder) ListPermissionSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSets", reflect.TypeOf((*MockSsoadminClient)(nil).ListPermissionSets), varargs...)
}

// ListPermissionSetsProvisionedToAccount mocks base method.
func (m *MockSsoadminClient) ListPermissionSetsProvisionedToAccount(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsProvisionedToAccountInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissionSetsProvisionedToAccount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccount", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetsProvisionedToAccount indicates an expected call of ListPermissionSetsProvisionedToAccount.
func (mr *MockSsoadminClientMockRecorder) ListPermissionSetsProvisionedToAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccount", reflect.TypeOf((*MockSsoadminClient)(nil).ListPermissionSetsProvisionedToAccount), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSsoadminClient) ListTagsForResource(arg0 context.Context, arg1 *ssoadmin.ListTagsForResourceInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSsoadminClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSsoadminClient)(nil).ListTagsForResource), varargs...)
}
