// Code generated by MockGen. DO NOT EDIT.
// Source: ssoadmin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ssoadmin "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	gomock "github.com/golang/mock/gomock"
)

// MockSsoadminClient is a mock of SsoadminClient interface.
type MockSsoadminClient struct {
	ctrl     *gomock.Controller
	recorder *MockSsoadminClientMockRecorder
}

// MockSsoadminClientMockRecorder is the mock recorder for MockSsoadminClient.
type MockSsoadminClientMockRecorder struct {
	mock *MockSsoadminClient
}

// NewMockSsoadminClient creates a new mock instance.
func NewMockSsoadminClient(ctrl *gomock.Controller) *MockSsoadminClient {
	mock := &MockSsoadminClient{ctrl: ctrl}
	mock.recorder = &MockSsoadminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSsoadminClient) EXPECT() *MockSsoadminClientMockRecorder {
	return m.recorder
}

// DescribeAccountAssignmentCreationStatus mocks base method.
func (m *MockSsoadminClient) DescribeAccountAssignmentCreationStatus(arg0 context.Context, arg1 *ssoadmin.DescribeAccountAssignmentCreationStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAssignmentCreationStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentCreationStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentCreationStatus indicates an expected call of DescribeAccountAssignmentCreationStatus.
func (mr *MockSsoadminClientMockRecorder) DescribeAccountAssignmentCreationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentCreationStatus", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeAccountAssignmentCreationStatus), varargs...)
}

// DescribeAccountAssignmentDeletionStatus mocks base method.
func (m *MockSsoadminClient) DescribeAccountAssignmentDeletionStatus(arg0 context.Context, arg1 *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAssignmentDeletionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAssignmentDeletionStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAssignmentDeletionStatus indicates an expected call of DescribeAccountAssignmentDeletionStatus.
func (mr *MockSsoadminClientMockRecorder) DescribeAccountAssignmentDeletionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAssignmentDeletionStatus", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeAccountAssignmentDeletionStatus), varargs...)
}

// DescribeApplication mocks base method.
func (m *MockSsoadminClient) DescribeApplication(arg0 context.Context, arg1 *ssoadmin.DescribeApplicationInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeApplication")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplication", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplication indicates an expected call of DescribeApplication.
func (mr *MockSsoadminClientMockRecorder) DescribeApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplication", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeApplication), varargs...)
}

// DescribeApplicationAssignment mocks base method.
func (m *MockSsoadminClient) DescribeApplicationAssignment(arg0 context.Context, arg1 *ssoadmin.DescribeApplicationAssignmentInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationAssignmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeApplicationAssignment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationAssignment", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationAssignmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationAssignment indicates an expected call of DescribeApplicationAssignment.
func (mr *MockSsoadminClientMockRecorder) DescribeApplicationAssignment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationAssignment", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeApplicationAssignment), varargs...)
}

// DescribeApplicationProvider mocks base method.
func (m *MockSsoadminClient) DescribeApplicationProvider(arg0 context.Context, arg1 *ssoadmin.DescribeApplicationProviderInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationProviderOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeApplicationProvider")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationProvider", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeApplicationProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationProvider indicates an expected call of DescribeApplicationProvider.
func (mr *MockSsoadminClientMockRecorder) DescribeApplicationProvider(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationProvider", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeApplicationProvider), varargs...)
}

// DescribeInstance mocks base method.
func (m *MockSsoadminClient) DescribeInstance(arg0 context.Context, arg1 *ssoadmin.DescribeInstanceInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstance", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstance indicates an expected call of DescribeInstance.
func (mr *MockSsoadminClientMockRecorder) DescribeInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstance", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeInstance), varargs...)
}

// DescribeInstanceAccessControlAttributeConfiguration mocks base method.
func (m *MockSsoadminClient) DescribeInstanceAccessControlAttributeConfiguration(arg0 context.Context, arg1 *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceAccessControlAttributeConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceAccessControlAttributeConfiguration", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAccessControlAttributeConfiguration indicates an expected call of DescribeInstanceAccessControlAttributeConfiguration.
func (mr *MockSsoadminClientMockRecorder) DescribeInstanceAccessControlAttributeConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAccessControlAttributeConfiguration", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeInstanceAccessControlAttributeConfiguration), varargs...)
}

// DescribePermissionSet mocks base method.
func (m *MockSsoadminClient) DescribePermissionSet(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSet indicates an expected call of DescribePermissionSet.
func (mr *MockSsoadminClientMockRecorder) DescribePermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).DescribePermissionSet), varargs...)
}

// DescribePermissionSetProvisioningStatus mocks base method.
func (m *MockSsoadminClient) DescribePermissionSetProvisioningStatus(arg0 context.Context, arg1 *ssoadmin.DescribePermissionSetProvisioningStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePermissionSetProvisioningStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionSetProvisioningStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribePermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionSetProvisioningStatus indicates an expected call of DescribePermissionSetProvisioningStatus.
func (mr *MockSsoadminClientMockRecorder) DescribePermissionSetProvisioningStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionSetProvisioningStatus", reflect.TypeOf((*MockSsoadminClient)(nil).DescribePermissionSetProvisioningStatus), varargs...)
}

// DescribeTrustedTokenIssuer mocks base method.
func (m *MockSsoadminClient) DescribeTrustedTokenIssuer(arg0 context.Context, arg1 *ssoadmin.DescribeTrustedTokenIssuerInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.DescribeTrustedTokenIssuerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrustedTokenIssuer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustedTokenIssuer", varargs...)
	ret0, _ := ret[0].(*ssoadmin.DescribeTrustedTokenIssuerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedTokenIssuer indicates an expected call of DescribeTrustedTokenIssuer.
func (mr *MockSsoadminClientMockRecorder) DescribeTrustedTokenIssuer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedTokenIssuer", reflect.TypeOf((*MockSsoadminClient)(nil).DescribeTrustedTokenIssuer), varargs...)
}

// GetApplicationAccessScope mocks base method.
func (m *MockSsoadminClient) GetApplicationAccessScope(arg0 context.Context, arg1 *ssoadmin.GetApplicationAccessScopeInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAccessScopeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApplicationAccessScope")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAccessScope", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAccessScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAccessScope indicates an expected call of GetApplicationAccessScope.
func (mr *MockSsoadminClientMockRecorder) GetApplicationAccessScope(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAccessScope", reflect.TypeOf((*MockSsoadminClient)(nil).GetApplicationAccessScope), varargs...)
}

// GetApplicationAssignmentConfiguration mocks base method.
func (m *MockSsoadminClient) GetApplicationAssignmentConfiguration(arg0 context.Context, arg1 *ssoadmin.GetApplicationAssignmentConfigurationInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAssignmentConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApplicationAssignmentConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAssignmentConfiguration", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAssignmentConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAssignmentConfiguration indicates an expected call of GetApplicationAssignmentConfiguration.
func (mr *MockSsoadminClientMockRecorder) GetApplicationAssignmentConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAssignmentConfiguration", reflect.TypeOf((*MockSsoadminClient)(nil).GetApplicationAssignmentConfiguration), varargs...)
}

// GetApplicationAuthenticationMethod mocks base method.
func (m *MockSsoadminClient) GetApplicationAuthenticationMethod(arg0 context.Context, arg1 *ssoadmin.GetApplicationAuthenticationMethodInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAuthenticationMethodOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApplicationAuthenticationMethod")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAuthenticationMethod", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationAuthenticationMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAuthenticationMethod indicates an expected call of GetApplicationAuthenticationMethod.
func (mr *MockSsoadminClientMockRecorder) GetApplicationAuthenticationMethod(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAuthenticationMethod", reflect.TypeOf((*MockSsoadminClient)(nil).GetApplicationAuthenticationMethod), varargs...)
}

// GetApplicationGrant mocks base method.
func (m *MockSsoadminClient) GetApplicationGrant(arg0 context.Context, arg1 *ssoadmin.GetApplicationGrantInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationGrantOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApplicationGrant")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationGrant", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetApplicationGrantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationGrant indicates an expected call of GetApplicationGrant.
func (mr *MockSsoadminClientMockRecorder) GetApplicationGrant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationGrant", reflect.TypeOf((*MockSsoadminClient)(nil).GetApplicationGrant), varargs...)
}

// GetInlinePolicyForPermissionSet mocks base method.
func (m *MockSsoadminClient) GetInlinePolicyForPermissionSet(arg0 context.Context, arg1 *ssoadmin.GetInlinePolicyForPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInlinePolicyForPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInlinePolicyForPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInlinePolicyForPermissionSet indicates an expected call of GetInlinePolicyForPermissionSet.
func (mr *MockSsoadminClientMockRecorder) GetInlinePolicyForPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInlinePolicyForPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).GetInlinePolicyForPermissionSet), varargs...)
}

// GetPermissionsBoundaryForPermissionSet mocks base method.
func (m *MockSsoadminClient) GetPermissionsBoundaryForPermissionSet(arg0 context.Context, arg1 *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPermissionsBoundaryForPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionsBoundaryForPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsBoundaryForPermissionSet indicates an expected call of GetPermissionsBoundaryForPermissionSet.
func (mr *MockSsoadminClientMockRecorder) GetPermissionsBoundaryForPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsBoundaryForPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).GetPermissionsBoundaryForPermissionSet), varargs...)
}

// ListAccountAssignmentCreationStatus mocks base method.
func (m *MockSsoadminClient) ListAccountAssignmentCreationStatus(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentCreationStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignmentCreationStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentCreationStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentCreationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentCreationStatus indicates an expected call of ListAccountAssignmentCreationStatus.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignmentCreationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentCreationStatus", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignmentCreationStatus), varargs...)
}

// ListAccountAssignmentDeletionStatus mocks base method.
func (m *MockSsoadminClient) ListAccountAssignmentDeletionStatus(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentDeletionStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignmentDeletionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentDeletionStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentDeletionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentDeletionStatus indicates an expected call of ListAccountAssignmentDeletionStatus.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignmentDeletionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentDeletionStatus", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignmentDeletionStatus), varargs...)
}

// ListAccountAssignments mocks base method.
func (m *MockSsoadminClient) ListAccountAssignments(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignments", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignments indicates an expected call of ListAccountAssignments.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignments", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignments), varargs...)
}

// ListAccountAssignmentsForPrincipal mocks base method.
func (m *MockSsoadminClient) ListAccountAssignmentsForPrincipal(arg0 context.Context, arg1 *ssoadmin.ListAccountAssignmentsForPrincipalInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsForPrincipalOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountAssignmentsForPrincipal")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssignmentsForPrincipal", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountAssignmentsForPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssignmentsForPrincipal indicates an expected call of ListAccountAssignmentsForPrincipal.
func (mr *MockSsoadminClientMockRecorder) ListAccountAssignmentsForPrincipal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssignmentsForPrincipal", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountAssignmentsForPrincipal), varargs...)
}

// ListAccountsForProvisionedPermissionSet mocks base method.
func (m *MockSsoadminClient) ListAccountsForProvisionedPermissionSet(arg0 context.Context, arg1 *ssoadmin.ListAccountsForProvisionedPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAccountsForProvisionedPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsForProvisionedPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsForProvisionedPermissionSet indicates an expected call of ListAccountsForProvisionedPermissionSet.
func (mr *MockSsoadminClientMockRecorder) ListAccountsForProvisionedPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsForProvisionedPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).ListAccountsForProvisionedPermissionSet), varargs...)
}

// ListApplicationAccessScopes mocks base method.
func (m *MockSsoadminClient) ListApplicationAccessScopes(arg0 context.Context, arg1 *ssoadmin.ListApplicationAccessScopesInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAccessScopesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationAccessScopes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAccessScopes", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAccessScopesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAccessScopes indicates an expected call of ListApplicationAccessScopes.
func (mr *MockSsoadminClientMockRecorder) ListApplicationAccessScopes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAccessScopes", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplicationAccessScopes), varargs...)
}

// ListApplicationAssignments mocks base method.
func (m *MockSsoadminClient) ListApplicationAssignments(arg0 context.Context, arg1 *ssoadmin.ListApplicationAssignmentsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAssignmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationAssignments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAssignments", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAssignmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAssignments indicates an expected call of ListApplicationAssignments.
func (mr *MockSsoadminClientMockRecorder) ListApplicationAssignments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignments", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplicationAssignments), varargs...)
}

// ListApplicationAssignmentsForPrincipal mocks base method.
func (m *MockSsoadminClient) ListApplicationAssignmentsForPrincipal(arg0 context.Context, arg1 *ssoadmin.ListApplicationAssignmentsForPrincipalInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationAssignmentsForPrincipal")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAssignmentsForPrincipal", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAssignmentsForPrincipal indicates an expected call of ListApplicationAssignmentsForPrincipal.
func (mr *MockSsoadminClientMockRecorder) ListApplicationAssignmentsForPrincipal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAssignmentsForPrincipal", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplicationAssignmentsForPrincipal), varargs...)
}

// ListApplicationAuthenticationMethods mocks base method.
func (m *MockSsoadminClient) ListApplicationAuthenticationMethods(arg0 context.Context, arg1 *ssoadmin.ListApplicationAuthenticationMethodsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAuthenticationMethodsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationAuthenticationMethods")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationAuthenticationMethods", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationAuthenticationMethodsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationAuthenticationMethods indicates an expected call of ListApplicationAuthenticationMethods.
func (mr *MockSsoadminClientMockRecorder) ListApplicationAuthenticationMethods(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationAuthenticationMethods", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplicationAuthenticationMethods), varargs...)
}

// ListApplicationGrants mocks base method.
func (m *MockSsoadminClient) ListApplicationGrants(arg0 context.Context, arg1 *ssoadmin.ListApplicationGrantsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationGrantsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationGrants")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationGrants", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationGrants indicates an expected call of ListApplicationGrants.
func (mr *MockSsoadminClientMockRecorder) ListApplicationGrants(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationGrants", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplicationGrants), varargs...)
}

// ListApplicationProviders mocks base method.
func (m *MockSsoadminClient) ListApplicationProviders(arg0 context.Context, arg1 *ssoadmin.ListApplicationProvidersInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationProvidersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplicationProviders")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationProviders", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationProvidersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationProviders indicates an expected call of ListApplicationProviders.
func (mr *MockSsoadminClientMockRecorder) ListApplicationProviders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationProviders", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplicationProviders), varargs...)
}

// ListApplications mocks base method.
func (m *MockSsoadminClient) ListApplications(arg0 context.Context, arg1 *ssoadmin.ListApplicationsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApplications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplications", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockSsoadminClientMockRecorder) ListApplications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockSsoadminClient)(nil).ListApplications), varargs...)
}

// ListCustomerManagedPolicyReferencesInPermissionSet mocks base method.
func (m *MockSsoadminClient) ListCustomerManagedPolicyReferencesInPermissionSet(arg0 context.Context, arg1 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCustomerManagedPolicyReferencesInPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomerManagedPolicyReferencesInPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerManagedPolicyReferencesInPermissionSet indicates an expected call of ListCustomerManagedPolicyReferencesInPermissionSet.
func (mr *MockSsoadminClientMockRecorder) ListCustomerManagedPolicyReferencesInPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerManagedPolicyReferencesInPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).ListCustomerManagedPolicyReferencesInPermissionSet), varargs...)
}

// ListInstances mocks base method.
func (m *MockSsoadminClient) ListInstances(arg0 context.Context, arg1 *ssoadmin.ListInstancesInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockSsoadminClientMockRecorder) ListInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockSsoadminClient)(nil).ListInstances), varargs...)
}

// ListManagedPoliciesInPermissionSet mocks base method.
func (m *MockSsoadminClient) ListManagedPoliciesInPermissionSet(arg0 context.Context, arg1 *ssoadmin.ListManagedPoliciesInPermissionSetInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListManagedPoliciesInPermissionSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedPoliciesInPermissionSet", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListManagedPoliciesInPermissionSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedPoliciesInPermissionSet indicates an expected call of ListManagedPoliciesInPermissionSet.
func (mr *MockSsoadminClientMockRecorder) ListManagedPoliciesInPermissionSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedPoliciesInPermissionSet", reflect.TypeOf((*MockSsoadminClient)(nil).ListManagedPoliciesInPermissionSet), varargs...)
}

// ListPermissionSetProvisioningStatus mocks base method.
func (m *MockSsoadminClient) ListPermissionSetProvisioningStatus(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetProvisioningStatusInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissionSetProvisioningStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetProvisioningStatus", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetProvisioningStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetProvisioningStatus indicates an expected call of ListPermissionSetProvisioningStatus.
func (mr *MockSsoadminClientMockRecorder) ListPermissionSetProvisioningStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetProvisioningStatus", reflect.TypeOf((*MockSsoadminClient)(nil).ListPermissionSetProvisioningStatus), varargs...)
}

// ListPermissionSets mocks base method.
func (m *MockSsoadminClient) ListPermissionSets(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissionSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSets", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSets indicates an expected call of ListPermissionSets.
func (mr *MockSsoadminClientMockRecorder) ListPermissionSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSets", reflect.TypeOf((*MockSsoadminClient)(nil).ListPermissionSets), varargs...)
}

// ListPermissionSetsProvisionedToAccount mocks base method.
func (m *MockSsoadminClient) ListPermissionSetsProvisionedToAccount(arg0 context.Context, arg1 *ssoadmin.ListPermissionSetsProvisionedToAccountInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissionSetsProvisionedToAccount")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionSetsProvisionedToAccount", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionSetsProvisionedToAccount indicates an expected call of ListPermissionSetsProvisionedToAccount.
func (mr *MockSsoadminClientMockRecorder) ListPermissionSetsProvisionedToAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionSetsProvisionedToAccount", reflect.TypeOf((*MockSsoadminClient)(nil).ListPermissionSetsProvisionedToAccount), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSsoadminClient) ListTagsForResource(arg0 context.Context, arg1 *ssoadmin.ListTagsForResourceInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSsoadminClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSsoadminClient)(nil).ListTagsForResource), varargs...)
}

// ListTrustedTokenIssuers mocks base method.
func (m *MockSsoadminClient) ListTrustedTokenIssuers(arg0 context.Context, arg1 *ssoadmin.ListTrustedTokenIssuersInput, arg2 ...func(*ssoadmin.Options)) (*ssoadmin.ListTrustedTokenIssuersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ssoadmin.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrustedTokenIssuers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustedTokenIssuers", varargs...)
	ret0, _ := ret[0].(*ssoadmin.ListTrustedTokenIssuersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustedTokenIssuers indicates an expected call of ListTrustedTokenIssuers.
func (mr *MockSsoadminClientMockRecorder) ListTrustedTokenIssuers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustedTokenIssuers", reflect.TypeOf((*MockSsoadminClient)(nil).ListTrustedTokenIssuers), varargs...)
}
