// Code generated by MockGen. DO NOT EDIT.
// Source: sagemaker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sagemaker "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	gomock "github.com/golang/mock/gomock"
)

// MockSagemakerClient is a mock of SagemakerClient interface.
type MockSagemakerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSagemakerClientMockRecorder
}

// MockSagemakerClientMockRecorder is the mock recorder for MockSagemakerClient.
type MockSagemakerClientMockRecorder struct {
	mock *MockSagemakerClient
}

// NewMockSagemakerClient creates a new mock instance.
func NewMockSagemakerClient(ctrl *gomock.Controller) *MockSagemakerClient {
	mock := &MockSagemakerClient{ctrl: ctrl}
	mock.recorder = &MockSagemakerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSagemakerClient) EXPECT() *MockSagemakerClientMockRecorder {
	return m.recorder
}

// DescribeAction mocks base method.
func (m *MockSagemakerClient) DescribeAction(arg0 context.Context, arg1 *sagemaker.DescribeActionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeActionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAction", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAction indicates an expected call of DescribeAction.
func (mr *MockSagemakerClientMockRecorder) DescribeAction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAction", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeAction), varargs...)
}

// DescribeAlgorithm mocks base method.
func (m *MockSagemakerClient) DescribeAlgorithm(arg0 context.Context, arg1 *sagemaker.DescribeAlgorithmInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeAlgorithmOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAlgorithm")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlgorithm", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeAlgorithmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlgorithm indicates an expected call of DescribeAlgorithm.
func (mr *MockSagemakerClientMockRecorder) DescribeAlgorithm(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlgorithm", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeAlgorithm), varargs...)
}

// DescribeApp mocks base method.
func (m *MockSagemakerClient) DescribeApp(arg0 context.Context, arg1 *sagemaker.DescribeAppInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeAppOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeApp")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApp", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApp indicates an expected call of DescribeApp.
func (mr *MockSagemakerClientMockRecorder) DescribeApp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApp", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeApp), varargs...)
}

// DescribeAppImageConfig mocks base method.
func (m *MockSagemakerClient) DescribeAppImageConfig(arg0 context.Context, arg1 *sagemaker.DescribeAppImageConfigInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeAppImageConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAppImageConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppImageConfig", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeAppImageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppImageConfig indicates an expected call of DescribeAppImageConfig.
func (mr *MockSagemakerClientMockRecorder) DescribeAppImageConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppImageConfig", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeAppImageConfig), varargs...)
}

// DescribeArtifact mocks base method.
func (m *MockSagemakerClient) DescribeArtifact(arg0 context.Context, arg1 *sagemaker.DescribeArtifactInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeArtifactOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeArtifact")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeArtifact", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeArtifact indicates an expected call of DescribeArtifact.
func (mr *MockSagemakerClientMockRecorder) DescribeArtifact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeArtifact", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeArtifact), varargs...)
}

// DescribeAutoMLJob mocks base method.
func (m *MockSagemakerClient) DescribeAutoMLJob(arg0 context.Context, arg1 *sagemaker.DescribeAutoMLJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeAutoMLJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAutoMLJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAutoMLJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeAutoMLJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutoMLJob indicates an expected call of DescribeAutoMLJob.
func (mr *MockSagemakerClientMockRecorder) DescribeAutoMLJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutoMLJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeAutoMLJob), varargs...)
}

// DescribeAutoMLJobV2 mocks base method.
func (m *MockSagemakerClient) DescribeAutoMLJobV2(arg0 context.Context, arg1 *sagemaker.DescribeAutoMLJobV2Input, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeAutoMLJobV2Output, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAutoMLJobV2")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAutoMLJobV2", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeAutoMLJobV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutoMLJobV2 indicates an expected call of DescribeAutoMLJobV2.
func (mr *MockSagemakerClientMockRecorder) DescribeAutoMLJobV2(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutoMLJobV2", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeAutoMLJobV2), varargs...)
}

// DescribeCodeRepository mocks base method.
func (m *MockSagemakerClient) DescribeCodeRepository(arg0 context.Context, arg1 *sagemaker.DescribeCodeRepositoryInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeCodeRepositoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCodeRepository")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCodeRepository", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeCodeRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCodeRepository indicates an expected call of DescribeCodeRepository.
func (mr *MockSagemakerClientMockRecorder) DescribeCodeRepository(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCodeRepository", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeCodeRepository), varargs...)
}

// DescribeCompilationJob mocks base method.
func (m *MockSagemakerClient) DescribeCompilationJob(arg0 context.Context, arg1 *sagemaker.DescribeCompilationJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeCompilationJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCompilationJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCompilationJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeCompilationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompilationJob indicates an expected call of DescribeCompilationJob.
func (mr *MockSagemakerClientMockRecorder) DescribeCompilationJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompilationJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeCompilationJob), varargs...)
}

// DescribeContext mocks base method.
func (m *MockSagemakerClient) DescribeContext(arg0 context.Context, arg1 *sagemaker.DescribeContextInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeContextOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeContext")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContext", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeContextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContext indicates an expected call of DescribeContext.
func (mr *MockSagemakerClientMockRecorder) DescribeContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContext", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeContext), varargs...)
}

// DescribeDataQualityJobDefinition mocks base method.
func (m *MockSagemakerClient) DescribeDataQualityJobDefinition(arg0 context.Context, arg1 *sagemaker.DescribeDataQualityJobDefinitionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDataQualityJobDefinition")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataQualityJobDefinition", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeDataQualityJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataQualityJobDefinition indicates an expected call of DescribeDataQualityJobDefinition.
func (mr *MockSagemakerClientMockRecorder) DescribeDataQualityJobDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataQualityJobDefinition", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeDataQualityJobDefinition), varargs...)
}

// DescribeDevice mocks base method.
func (m *MockSagemakerClient) DescribeDevice(arg0 context.Context, arg1 *sagemaker.DescribeDeviceInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeDeviceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDevice")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDevice", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDevice indicates an expected call of DescribeDevice.
func (mr *MockSagemakerClientMockRecorder) DescribeDevice(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDevice", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeDevice), varargs...)
}

// DescribeDeviceFleet mocks base method.
func (m *MockSagemakerClient) DescribeDeviceFleet(arg0 context.Context, arg1 *sagemaker.DescribeDeviceFleetInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeDeviceFleetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDeviceFleet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeviceFleet", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeDeviceFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceFleet indicates an expected call of DescribeDeviceFleet.
func (mr *MockSagemakerClientMockRecorder) DescribeDeviceFleet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceFleet", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeDeviceFleet), varargs...)
}

// DescribeDomain mocks base method.
func (m *MockSagemakerClient) DescribeDomain(arg0 context.Context, arg1 *sagemaker.DescribeDomainInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomain", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomain indicates an expected call of DescribeDomain.
func (mr *MockSagemakerClientMockRecorder) DescribeDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomain", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeDomain), varargs...)
}

// DescribeEdgeDeploymentPlan mocks base method.
func (m *MockSagemakerClient) DescribeEdgeDeploymentPlan(arg0 context.Context, arg1 *sagemaker.DescribeEdgeDeploymentPlanInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeEdgeDeploymentPlanOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEdgeDeploymentPlan")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEdgeDeploymentPlan", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeEdgeDeploymentPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEdgeDeploymentPlan indicates an expected call of DescribeEdgeDeploymentPlan.
func (mr *MockSagemakerClientMockRecorder) DescribeEdgeDeploymentPlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEdgeDeploymentPlan", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeEdgeDeploymentPlan), varargs...)
}

// DescribeEdgePackagingJob mocks base method.
func (m *MockSagemakerClient) DescribeEdgePackagingJob(arg0 context.Context, arg1 *sagemaker.DescribeEdgePackagingJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeEdgePackagingJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEdgePackagingJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEdgePackagingJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeEdgePackagingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEdgePackagingJob indicates an expected call of DescribeEdgePackagingJob.
func (mr *MockSagemakerClientMockRecorder) DescribeEdgePackagingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEdgePackagingJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeEdgePackagingJob), varargs...)
}

// DescribeEndpoint mocks base method.
func (m *MockSagemakerClient) DescribeEndpoint(arg0 context.Context, arg1 *sagemaker.DescribeEndpointInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeEndpointOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpoint")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpoint", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoint indicates an expected call of DescribeEndpoint.
func (mr *MockSagemakerClientMockRecorder) DescribeEndpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoint", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeEndpoint), varargs...)
}

// DescribeEndpointConfig mocks base method.
func (m *MockSagemakerClient) DescribeEndpointConfig(arg0 context.Context, arg1 *sagemaker.DescribeEndpointConfigInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeEndpointConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpointConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointConfig", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeEndpointConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointConfig indicates an expected call of DescribeEndpointConfig.
func (mr *MockSagemakerClientMockRecorder) DescribeEndpointConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointConfig", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeEndpointConfig), varargs...)
}

// DescribeExperiment mocks base method.
func (m *MockSagemakerClient) DescribeExperiment(arg0 context.Context, arg1 *sagemaker.DescribeExperimentInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeExperimentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeExperiment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExperiment", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExperiment indicates an expected call of DescribeExperiment.
func (mr *MockSagemakerClientMockRecorder) DescribeExperiment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExperiment", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeExperiment), varargs...)
}

// DescribeFeatureGroup mocks base method.
func (m *MockSagemakerClient) DescribeFeatureGroup(arg0 context.Context, arg1 *sagemaker.DescribeFeatureGroupInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeFeatureGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFeatureGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFeatureGroup", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeFeatureGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFeatureGroup indicates an expected call of DescribeFeatureGroup.
func (mr *MockSagemakerClientMockRecorder) DescribeFeatureGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFeatureGroup", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeFeatureGroup), varargs...)
}

// DescribeFeatureMetadata mocks base method.
func (m *MockSagemakerClient) DescribeFeatureMetadata(arg0 context.Context, arg1 *sagemaker.DescribeFeatureMetadataInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeFeatureMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFeatureMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFeatureMetadata", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeFeatureMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFeatureMetadata indicates an expected call of DescribeFeatureMetadata.
func (mr *MockSagemakerClientMockRecorder) DescribeFeatureMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFeatureMetadata", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeFeatureMetadata), varargs...)
}

// DescribeFlowDefinition mocks base method.
func (m *MockSagemakerClient) DescribeFlowDefinition(arg0 context.Context, arg1 *sagemaker.DescribeFlowDefinitionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeFlowDefinitionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFlowDefinition")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFlowDefinition", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeFlowDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFlowDefinition indicates an expected call of DescribeFlowDefinition.
func (mr *MockSagemakerClientMockRecorder) DescribeFlowDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFlowDefinition", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeFlowDefinition), varargs...)
}

// DescribeHub mocks base method.
func (m *MockSagemakerClient) DescribeHub(arg0 context.Context, arg1 *sagemaker.DescribeHubInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeHubOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHub")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHub", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeHubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHub indicates an expected call of DescribeHub.
func (mr *MockSagemakerClientMockRecorder) DescribeHub(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHub", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeHub), varargs...)
}

// DescribeHubContent mocks base method.
func (m *MockSagemakerClient) DescribeHubContent(arg0 context.Context, arg1 *sagemaker.DescribeHubContentInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeHubContentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHubContent")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHubContent", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeHubContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHubContent indicates an expected call of DescribeHubContent.
func (mr *MockSagemakerClientMockRecorder) DescribeHubContent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHubContent", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeHubContent), varargs...)
}

// DescribeHumanTaskUi mocks base method.
func (m *MockSagemakerClient) DescribeHumanTaskUi(arg0 context.Context, arg1 *sagemaker.DescribeHumanTaskUiInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeHumanTaskUiOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHumanTaskUi")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHumanTaskUi", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeHumanTaskUiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHumanTaskUi indicates an expected call of DescribeHumanTaskUi.
func (mr *MockSagemakerClientMockRecorder) DescribeHumanTaskUi(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHumanTaskUi", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeHumanTaskUi), varargs...)
}

// DescribeHyperParameterTuningJob mocks base method.
func (m *MockSagemakerClient) DescribeHyperParameterTuningJob(arg0 context.Context, arg1 *sagemaker.DescribeHyperParameterTuningJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHyperParameterTuningJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHyperParameterTuningJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHyperParameterTuningJob indicates an expected call of DescribeHyperParameterTuningJob.
func (mr *MockSagemakerClientMockRecorder) DescribeHyperParameterTuningJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHyperParameterTuningJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeHyperParameterTuningJob), varargs...)
}

// DescribeImage mocks base method.
func (m *MockSagemakerClient) DescribeImage(arg0 context.Context, arg1 *sagemaker.DescribeImageInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeImageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImage", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImage indicates an expected call of DescribeImage.
func (mr *MockSagemakerClientMockRecorder) DescribeImage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImage", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeImage), varargs...)
}

// DescribeImageVersion mocks base method.
func (m *MockSagemakerClient) DescribeImageVersion(arg0 context.Context, arg1 *sagemaker.DescribeImageVersionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeImageVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeImageVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImageVersion", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeImageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImageVersion indicates an expected call of DescribeImageVersion.
func (mr *MockSagemakerClientMockRecorder) DescribeImageVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageVersion", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeImageVersion), varargs...)
}

// DescribeInferenceExperiment mocks base method.
func (m *MockSagemakerClient) DescribeInferenceExperiment(arg0 context.Context, arg1 *sagemaker.DescribeInferenceExperimentInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceExperimentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInferenceExperiment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInferenceExperiment", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeInferenceExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInferenceExperiment indicates an expected call of DescribeInferenceExperiment.
func (mr *MockSagemakerClientMockRecorder) DescribeInferenceExperiment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInferenceExperiment", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeInferenceExperiment), varargs...)
}

// DescribeInferenceRecommendationsJob mocks base method.
func (m *MockSagemakerClient) DescribeInferenceRecommendationsJob(arg0 context.Context, arg1 *sagemaker.DescribeInferenceRecommendationsJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceRecommendationsJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInferenceRecommendationsJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInferenceRecommendationsJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeInferenceRecommendationsJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInferenceRecommendationsJob indicates an expected call of DescribeInferenceRecommendationsJob.
func (mr *MockSagemakerClientMockRecorder) DescribeInferenceRecommendationsJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInferenceRecommendationsJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeInferenceRecommendationsJob), varargs...)
}

// DescribeLabelingJob mocks base method.
func (m *MockSagemakerClient) DescribeLabelingJob(arg0 context.Context, arg1 *sagemaker.DescribeLabelingJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeLabelingJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLabelingJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLabelingJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeLabelingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLabelingJob indicates an expected call of DescribeLabelingJob.
func (mr *MockSagemakerClientMockRecorder) DescribeLabelingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLabelingJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeLabelingJob), varargs...)
}

// DescribeLineageGroup mocks base method.
func (m *MockSagemakerClient) DescribeLineageGroup(arg0 context.Context, arg1 *sagemaker.DescribeLineageGroupInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeLineageGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLineageGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLineageGroup", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeLineageGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLineageGroup indicates an expected call of DescribeLineageGroup.
func (mr *MockSagemakerClientMockRecorder) DescribeLineageGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLineageGroup", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeLineageGroup), varargs...)
}

// DescribeModel mocks base method.
func (m *MockSagemakerClient) DescribeModel(arg0 context.Context, arg1 *sagemaker.DescribeModelInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModel")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModel", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModel indicates an expected call of DescribeModel.
func (mr *MockSagemakerClientMockRecorder) DescribeModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModel", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModel), varargs...)
}

// DescribeModelBiasJobDefinition mocks base method.
func (m *MockSagemakerClient) DescribeModelBiasJobDefinition(arg0 context.Context, arg1 *sagemaker.DescribeModelBiasJobDefinitionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelBiasJobDefinition")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelBiasJobDefinition", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelBiasJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelBiasJobDefinition indicates an expected call of DescribeModelBiasJobDefinition.
func (mr *MockSagemakerClientMockRecorder) DescribeModelBiasJobDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelBiasJobDefinition", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelBiasJobDefinition), varargs...)
}

// DescribeModelCard mocks base method.
func (m *MockSagemakerClient) DescribeModelCard(arg0 context.Context, arg1 *sagemaker.DescribeModelCardInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelCardOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelCard")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelCard", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelCardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelCard indicates an expected call of DescribeModelCard.
func (mr *MockSagemakerClientMockRecorder) DescribeModelCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelCard", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelCard), varargs...)
}

// DescribeModelCardExportJob mocks base method.
func (m *MockSagemakerClient) DescribeModelCardExportJob(arg0 context.Context, arg1 *sagemaker.DescribeModelCardExportJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelCardExportJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelCardExportJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelCardExportJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelCardExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelCardExportJob indicates an expected call of DescribeModelCardExportJob.
func (mr *MockSagemakerClientMockRecorder) DescribeModelCardExportJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelCardExportJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelCardExportJob), varargs...)
}

// DescribeModelExplainabilityJobDefinition mocks base method.
func (m *MockSagemakerClient) DescribeModelExplainabilityJobDefinition(arg0 context.Context, arg1 *sagemaker.DescribeModelExplainabilityJobDefinitionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelExplainabilityJobDefinition")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelExplainabilityJobDefinition", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelExplainabilityJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelExplainabilityJobDefinition indicates an expected call of DescribeModelExplainabilityJobDefinition.
func (mr *MockSagemakerClientMockRecorder) DescribeModelExplainabilityJobDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelExplainabilityJobDefinition", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelExplainabilityJobDefinition), varargs...)
}

// DescribeModelPackage mocks base method.
func (m *MockSagemakerClient) DescribeModelPackage(arg0 context.Context, arg1 *sagemaker.DescribeModelPackageInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelPackageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelPackage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelPackage", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelPackage indicates an expected call of DescribeModelPackage.
func (mr *MockSagemakerClientMockRecorder) DescribeModelPackage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelPackage", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelPackage), varargs...)
}

// DescribeModelPackageGroup mocks base method.
func (m *MockSagemakerClient) DescribeModelPackageGroup(arg0 context.Context, arg1 *sagemaker.DescribeModelPackageGroupInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelPackageGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelPackageGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelPackageGroup", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelPackageGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelPackageGroup indicates an expected call of DescribeModelPackageGroup.
func (mr *MockSagemakerClientMockRecorder) DescribeModelPackageGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelPackageGroup", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelPackageGroup), varargs...)
}

// DescribeModelQualityJobDefinition mocks base method.
func (m *MockSagemakerClient) DescribeModelQualityJobDefinition(arg0 context.Context, arg1 *sagemaker.DescribeModelQualityJobDefinitionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelQualityJobDefinition")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelQualityJobDefinition", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeModelQualityJobDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelQualityJobDefinition indicates an expected call of DescribeModelQualityJobDefinition.
func (mr *MockSagemakerClientMockRecorder) DescribeModelQualityJobDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelQualityJobDefinition", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeModelQualityJobDefinition), varargs...)
}

// DescribeMonitoringSchedule mocks base method.
func (m *MockSagemakerClient) DescribeMonitoringSchedule(arg0 context.Context, arg1 *sagemaker.DescribeMonitoringScheduleInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeMonitoringScheduleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMonitoringSchedule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMonitoringSchedule", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeMonitoringScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMonitoringSchedule indicates an expected call of DescribeMonitoringSchedule.
func (mr *MockSagemakerClientMockRecorder) DescribeMonitoringSchedule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMonitoringSchedule", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeMonitoringSchedule), varargs...)
}

// DescribeNotebookInstance mocks base method.
func (m *MockSagemakerClient) DescribeNotebookInstance(arg0 context.Context, arg1 *sagemaker.DescribeNotebookInstanceInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeNotebookInstanceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNotebookInstance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNotebookInstance", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeNotebookInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotebookInstance indicates an expected call of DescribeNotebookInstance.
func (mr *MockSagemakerClientMockRecorder) DescribeNotebookInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstance", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeNotebookInstance), varargs...)
}

// DescribeNotebookInstanceLifecycleConfig mocks base method.
func (m *MockSagemakerClient) DescribeNotebookInstanceLifecycleConfig(arg0 context.Context, arg1 *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNotebookInstanceLifecycleConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNotebookInstanceLifecycleConfig", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNotebookInstanceLifecycleConfig indicates an expected call of DescribeNotebookInstanceLifecycleConfig.
func (mr *MockSagemakerClientMockRecorder) DescribeNotebookInstanceLifecycleConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNotebookInstanceLifecycleConfig", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeNotebookInstanceLifecycleConfig), varargs...)
}

// DescribePipeline mocks base method.
func (m *MockSagemakerClient) DescribePipeline(arg0 context.Context, arg1 *sagemaker.DescribePipelineInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePipeline")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePipeline", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipeline indicates an expected call of DescribePipeline.
func (mr *MockSagemakerClientMockRecorder) DescribePipeline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipeline", reflect.TypeOf((*MockSagemakerClient)(nil).DescribePipeline), varargs...)
}

// DescribePipelineDefinitionForExecution mocks base method.
func (m *MockSagemakerClient) DescribePipelineDefinitionForExecution(arg0 context.Context, arg1 *sagemaker.DescribePipelineDefinitionForExecutionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePipelineDefinitionForExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePipelineDefinitionForExecution", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribePipelineDefinitionForExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipelineDefinitionForExecution indicates an expected call of DescribePipelineDefinitionForExecution.
func (mr *MockSagemakerClientMockRecorder) DescribePipelineDefinitionForExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelineDefinitionForExecution", reflect.TypeOf((*MockSagemakerClient)(nil).DescribePipelineDefinitionForExecution), varargs...)
}

// DescribePipelineExecution mocks base method.
func (m *MockSagemakerClient) DescribePipelineExecution(arg0 context.Context, arg1 *sagemaker.DescribePipelineExecutionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePipelineExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePipelineExecution", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribePipelineExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipelineExecution indicates an expected call of DescribePipelineExecution.
func (mr *MockSagemakerClientMockRecorder) DescribePipelineExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelineExecution", reflect.TypeOf((*MockSagemakerClient)(nil).DescribePipelineExecution), varargs...)
}

// DescribeProcessingJob mocks base method.
func (m *MockSagemakerClient) DescribeProcessingJob(arg0 context.Context, arg1 *sagemaker.DescribeProcessingJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeProcessingJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProcessingJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProcessingJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeProcessingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProcessingJob indicates an expected call of DescribeProcessingJob.
func (mr *MockSagemakerClientMockRecorder) DescribeProcessingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProcessingJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeProcessingJob), varargs...)
}

// DescribeProject mocks base method.
func (m *MockSagemakerClient) DescribeProject(arg0 context.Context, arg1 *sagemaker.DescribeProjectInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeProjectOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProject")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProject", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProject indicates an expected call of DescribeProject.
func (mr *MockSagemakerClientMockRecorder) DescribeProject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProject", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeProject), varargs...)
}

// DescribeSpace mocks base method.
func (m *MockSagemakerClient) DescribeSpace(arg0 context.Context, arg1 *sagemaker.DescribeSpaceInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeSpaceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSpace")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpace", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeSpaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpace indicates an expected call of DescribeSpace.
func (mr *MockSagemakerClientMockRecorder) DescribeSpace(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpace", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeSpace), varargs...)
}

// DescribeStudioLifecycleConfig mocks base method.
func (m *MockSagemakerClient) DescribeStudioLifecycleConfig(arg0 context.Context, arg1 *sagemaker.DescribeStudioLifecycleConfigInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeStudioLifecycleConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStudioLifecycleConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStudioLifecycleConfig", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeStudioLifecycleConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStudioLifecycleConfig indicates an expected call of DescribeStudioLifecycleConfig.
func (mr *MockSagemakerClientMockRecorder) DescribeStudioLifecycleConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStudioLifecycleConfig", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeStudioLifecycleConfig), varargs...)
}

// DescribeSubscribedWorkteam mocks base method.
func (m *MockSagemakerClient) DescribeSubscribedWorkteam(arg0 context.Context, arg1 *sagemaker.DescribeSubscribedWorkteamInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSubscribedWorkteam")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubscribedWorkteam", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeSubscribedWorkteamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubscribedWorkteam indicates an expected call of DescribeSubscribedWorkteam.
func (mr *MockSagemakerClientMockRecorder) DescribeSubscribedWorkteam(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubscribedWorkteam", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeSubscribedWorkteam), varargs...)
}

// DescribeTrainingJob mocks base method.
func (m *MockSagemakerClient) DescribeTrainingJob(arg0 context.Context, arg1 *sagemaker.DescribeTrainingJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeTrainingJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrainingJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrainingJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeTrainingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrainingJob indicates an expected call of DescribeTrainingJob.
func (mr *MockSagemakerClientMockRecorder) DescribeTrainingJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrainingJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeTrainingJob), varargs...)
}

// DescribeTransformJob mocks base method.
func (m *MockSagemakerClient) DescribeTransformJob(arg0 context.Context, arg1 *sagemaker.DescribeTransformJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeTransformJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTransformJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransformJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeTransformJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransformJob indicates an expected call of DescribeTransformJob.
func (mr *MockSagemakerClientMockRecorder) DescribeTransformJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransformJob", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeTransformJob), varargs...)
}

// DescribeTrial mocks base method.
func (m *MockSagemakerClient) DescribeTrial(arg0 context.Context, arg1 *sagemaker.DescribeTrialInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeTrialOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrial")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrial", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeTrialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrial indicates an expected call of DescribeTrial.
func (mr *MockSagemakerClientMockRecorder) DescribeTrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrial", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeTrial), varargs...)
}

// DescribeTrialComponent mocks base method.
func (m *MockSagemakerClient) DescribeTrialComponent(arg0 context.Context, arg1 *sagemaker.DescribeTrialComponentInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeTrialComponentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrialComponent")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrialComponent", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeTrialComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrialComponent indicates an expected call of DescribeTrialComponent.
func (mr *MockSagemakerClientMockRecorder) DescribeTrialComponent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrialComponent", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeTrialComponent), varargs...)
}

// DescribeUserProfile mocks base method.
func (m *MockSagemakerClient) DescribeUserProfile(arg0 context.Context, arg1 *sagemaker.DescribeUserProfileInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeUserProfileOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeUserProfile")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserProfile", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserProfile indicates an expected call of DescribeUserProfile.
func (mr *MockSagemakerClientMockRecorder) DescribeUserProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserProfile", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeUserProfile), varargs...)
}

// DescribeWorkforce mocks base method.
func (m *MockSagemakerClient) DescribeWorkforce(arg0 context.Context, arg1 *sagemaker.DescribeWorkforceInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeWorkforceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeWorkforce")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkforce", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeWorkforceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkforce indicates an expected call of DescribeWorkforce.
func (mr *MockSagemakerClientMockRecorder) DescribeWorkforce(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkforce", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeWorkforce), varargs...)
}

// DescribeWorkteam mocks base method.
func (m *MockSagemakerClient) DescribeWorkteam(arg0 context.Context, arg1 *sagemaker.DescribeWorkteamInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.DescribeWorkteamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeWorkteam")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkteam", varargs...)
	ret0, _ := ret[0].(*sagemaker.DescribeWorkteamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkteam indicates an expected call of DescribeWorkteam.
func (mr *MockSagemakerClientMockRecorder) DescribeWorkteam(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkteam", reflect.TypeOf((*MockSagemakerClient)(nil).DescribeWorkteam), varargs...)
}

// GetDeviceFleetReport mocks base method.
func (m *MockSagemakerClient) GetDeviceFleetReport(arg0 context.Context, arg1 *sagemaker.GetDeviceFleetReportInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.GetDeviceFleetReportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeviceFleetReport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceFleetReport", varargs...)
	ret0, _ := ret[0].(*sagemaker.GetDeviceFleetReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceFleetReport indicates an expected call of GetDeviceFleetReport.
func (mr *MockSagemakerClientMockRecorder) GetDeviceFleetReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceFleetReport", reflect.TypeOf((*MockSagemakerClient)(nil).GetDeviceFleetReport), varargs...)
}

// GetLineageGroupPolicy mocks base method.
func (m *MockSagemakerClient) GetLineageGroupPolicy(arg0 context.Context, arg1 *sagemaker.GetLineageGroupPolicyInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.GetLineageGroupPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLineageGroupPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLineageGroupPolicy", varargs...)
	ret0, _ := ret[0].(*sagemaker.GetLineageGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineageGroupPolicy indicates an expected call of GetLineageGroupPolicy.
func (mr *MockSagemakerClientMockRecorder) GetLineageGroupPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineageGroupPolicy", reflect.TypeOf((*MockSagemakerClient)(nil).GetLineageGroupPolicy), varargs...)
}

// GetModelPackageGroupPolicy mocks base method.
func (m *MockSagemakerClient) GetModelPackageGroupPolicy(arg0 context.Context, arg1 *sagemaker.GetModelPackageGroupPolicyInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.GetModelPackageGroupPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModelPackageGroupPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelPackageGroupPolicy", varargs...)
	ret0, _ := ret[0].(*sagemaker.GetModelPackageGroupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelPackageGroupPolicy indicates an expected call of GetModelPackageGroupPolicy.
func (mr *MockSagemakerClientMockRecorder) GetModelPackageGroupPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelPackageGroupPolicy", reflect.TypeOf((*MockSagemakerClient)(nil).GetModelPackageGroupPolicy), varargs...)
}

// GetSagemakerServicecatalogPortfolioStatus mocks base method.
func (m *MockSagemakerClient) GetSagemakerServicecatalogPortfolioStatus(arg0 context.Context, arg1 *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSagemakerServicecatalogPortfolioStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSagemakerServicecatalogPortfolioStatus", varargs...)
	ret0, _ := ret[0].(*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSagemakerServicecatalogPortfolioStatus indicates an expected call of GetSagemakerServicecatalogPortfolioStatus.
func (mr *MockSagemakerClientMockRecorder) GetSagemakerServicecatalogPortfolioStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSagemakerServicecatalogPortfolioStatus", reflect.TypeOf((*MockSagemakerClient)(nil).GetSagemakerServicecatalogPortfolioStatus), varargs...)
}

// GetScalingConfigurationRecommendation mocks base method.
func (m *MockSagemakerClient) GetScalingConfigurationRecommendation(arg0 context.Context, arg1 *sagemaker.GetScalingConfigurationRecommendationInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.GetScalingConfigurationRecommendationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetScalingConfigurationRecommendation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScalingConfigurationRecommendation", varargs...)
	ret0, _ := ret[0].(*sagemaker.GetScalingConfigurationRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScalingConfigurationRecommendation indicates an expected call of GetScalingConfigurationRecommendation.
func (mr *MockSagemakerClientMockRecorder) GetScalingConfigurationRecommendation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScalingConfigurationRecommendation", reflect.TypeOf((*MockSagemakerClient)(nil).GetScalingConfigurationRecommendation), varargs...)
}

// GetSearchSuggestions mocks base method.
func (m *MockSagemakerClient) GetSearchSuggestions(arg0 context.Context, arg1 *sagemaker.GetSearchSuggestionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.GetSearchSuggestionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSearchSuggestions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchSuggestions", varargs...)
	ret0, _ := ret[0].(*sagemaker.GetSearchSuggestionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchSuggestions indicates an expected call of GetSearchSuggestions.
func (mr *MockSagemakerClientMockRecorder) GetSearchSuggestions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchSuggestions", reflect.TypeOf((*MockSagemakerClient)(nil).GetSearchSuggestions), varargs...)
}

// ListActions mocks base method.
func (m *MockSagemakerClient) ListActions(arg0 context.Context, arg1 *sagemaker.ListActionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActions indicates an expected call of ListActions.
func (mr *MockSagemakerClientMockRecorder) ListActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActions", reflect.TypeOf((*MockSagemakerClient)(nil).ListActions), varargs...)
}

// ListAlgorithms mocks base method.
func (m *MockSagemakerClient) ListAlgorithms(arg0 context.Context, arg1 *sagemaker.ListAlgorithmsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListAlgorithmsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAlgorithms")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlgorithms", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListAlgorithmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlgorithms indicates an expected call of ListAlgorithms.
func (mr *MockSagemakerClientMockRecorder) ListAlgorithms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlgorithms", reflect.TypeOf((*MockSagemakerClient)(nil).ListAlgorithms), varargs...)
}

// ListAliases mocks base method.
func (m *MockSagemakerClient) ListAliases(arg0 context.Context, arg1 *sagemaker.ListAliasesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListAliasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAliases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliases", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases.
func (mr *MockSagemakerClientMockRecorder) ListAliases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockSagemakerClient)(nil).ListAliases), varargs...)
}

// ListAppImageConfigs mocks base method.
func (m *MockSagemakerClient) ListAppImageConfigs(arg0 context.Context, arg1 *sagemaker.ListAppImageConfigsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListAppImageConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAppImageConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppImageConfigs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListAppImageConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppImageConfigs indicates an expected call of ListAppImageConfigs.
func (mr *MockSagemakerClientMockRecorder) ListAppImageConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppImageConfigs", reflect.TypeOf((*MockSagemakerClient)(nil).ListAppImageConfigs), varargs...)
}

// ListApps mocks base method.
func (m *MockSagemakerClient) ListApps(arg0 context.Context, arg1 *sagemaker.ListAppsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListAppsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApps")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApps", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockSagemakerClientMockRecorder) ListApps(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockSagemakerClient)(nil).ListApps), varargs...)
}

// ListArtifacts mocks base method.
func (m *MockSagemakerClient) ListArtifacts(arg0 context.Context, arg1 *sagemaker.ListArtifactsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListArtifactsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListArtifacts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArtifacts", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListArtifactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockSagemakerClientMockRecorder) ListArtifacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockSagemakerClient)(nil).ListArtifacts), varargs...)
}

// ListAssociations mocks base method.
func (m *MockSagemakerClient) ListAssociations(arg0 context.Context, arg1 *sagemaker.ListAssociationsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociations", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociations indicates an expected call of ListAssociations.
func (mr *MockSagemakerClientMockRecorder) ListAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociations", reflect.TypeOf((*MockSagemakerClient)(nil).ListAssociations), varargs...)
}

// ListAutoMLJobs mocks base method.
func (m *MockSagemakerClient) ListAutoMLJobs(arg0 context.Context, arg1 *sagemaker.ListAutoMLJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListAutoMLJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAutoMLJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAutoMLJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListAutoMLJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoMLJobs indicates an expected call of ListAutoMLJobs.
func (mr *MockSagemakerClientMockRecorder) ListAutoMLJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoMLJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListAutoMLJobs), varargs...)
}

// ListCandidatesForAutoMLJob mocks base method.
func (m *MockSagemakerClient) ListCandidatesForAutoMLJob(arg0 context.Context, arg1 *sagemaker.ListCandidatesForAutoMLJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCandidatesForAutoMLJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCandidatesForAutoMLJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListCandidatesForAutoMLJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCandidatesForAutoMLJob indicates an expected call of ListCandidatesForAutoMLJob.
func (mr *MockSagemakerClientMockRecorder) ListCandidatesForAutoMLJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCandidatesForAutoMLJob", reflect.TypeOf((*MockSagemakerClient)(nil).ListCandidatesForAutoMLJob), varargs...)
}

// ListCodeRepositories mocks base method.
func (m *MockSagemakerClient) ListCodeRepositories(arg0 context.Context, arg1 *sagemaker.ListCodeRepositoriesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListCodeRepositoriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCodeRepositories")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCodeRepositories", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListCodeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCodeRepositories indicates an expected call of ListCodeRepositories.
func (mr *MockSagemakerClientMockRecorder) ListCodeRepositories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeRepositories", reflect.TypeOf((*MockSagemakerClient)(nil).ListCodeRepositories), varargs...)
}

// ListCompilationJobs mocks base method.
func (m *MockSagemakerClient) ListCompilationJobs(arg0 context.Context, arg1 *sagemaker.ListCompilationJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListCompilationJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCompilationJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCompilationJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListCompilationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompilationJobs indicates an expected call of ListCompilationJobs.
func (mr *MockSagemakerClientMockRecorder) ListCompilationJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompilationJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListCompilationJobs), varargs...)
}

// ListContexts mocks base method.
func (m *MockSagemakerClient) ListContexts(arg0 context.Context, arg1 *sagemaker.ListContextsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListContextsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListContexts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContexts", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListContextsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContexts indicates an expected call of ListContexts.
func (mr *MockSagemakerClientMockRecorder) ListContexts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContexts", reflect.TypeOf((*MockSagemakerClient)(nil).ListContexts), varargs...)
}

// ListDataQualityJobDefinitions mocks base method.
func (m *MockSagemakerClient) ListDataQualityJobDefinitions(arg0 context.Context, arg1 *sagemaker.ListDataQualityJobDefinitionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListDataQualityJobDefinitionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDataQualityJobDefinitions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityJobDefinitions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListDataQualityJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityJobDefinitions indicates an expected call of ListDataQualityJobDefinitions.
func (mr *MockSagemakerClientMockRecorder) ListDataQualityJobDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityJobDefinitions", reflect.TypeOf((*MockSagemakerClient)(nil).ListDataQualityJobDefinitions), varargs...)
}

// ListDeviceFleets mocks base method.
func (m *MockSagemakerClient) ListDeviceFleets(arg0 context.Context, arg1 *sagemaker.ListDeviceFleetsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListDeviceFleetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDeviceFleets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeviceFleets", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListDeviceFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeviceFleets indicates an expected call of ListDeviceFleets.
func (mr *MockSagemakerClientMockRecorder) ListDeviceFleets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceFleets", reflect.TypeOf((*MockSagemakerClient)(nil).ListDeviceFleets), varargs...)
}

// ListDevices mocks base method.
func (m *MockSagemakerClient) ListDevices(arg0 context.Context, arg1 *sagemaker.ListDevicesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListDevicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDevices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevices", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockSagemakerClientMockRecorder) ListDevices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockSagemakerClient)(nil).ListDevices), varargs...)
}

// ListDomains mocks base method.
func (m *MockSagemakerClient) ListDomains(arg0 context.Context, arg1 *sagemaker.ListDomainsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListDomainsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDomains")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomains", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockSagemakerClientMockRecorder) ListDomains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockSagemakerClient)(nil).ListDomains), varargs...)
}

// ListEdgeDeploymentPlans mocks base method.
func (m *MockSagemakerClient) ListEdgeDeploymentPlans(arg0 context.Context, arg1 *sagemaker.ListEdgeDeploymentPlansInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListEdgeDeploymentPlansOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEdgeDeploymentPlans")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEdgeDeploymentPlans", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListEdgeDeploymentPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgeDeploymentPlans indicates an expected call of ListEdgeDeploymentPlans.
func (mr *MockSagemakerClientMockRecorder) ListEdgeDeploymentPlans(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgeDeploymentPlans", reflect.TypeOf((*MockSagemakerClient)(nil).ListEdgeDeploymentPlans), varargs...)
}

// ListEdgePackagingJobs mocks base method.
func (m *MockSagemakerClient) ListEdgePackagingJobs(arg0 context.Context, arg1 *sagemaker.ListEdgePackagingJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListEdgePackagingJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEdgePackagingJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEdgePackagingJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListEdgePackagingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgePackagingJobs indicates an expected call of ListEdgePackagingJobs.
func (mr *MockSagemakerClientMockRecorder) ListEdgePackagingJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgePackagingJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListEdgePackagingJobs), varargs...)
}

// ListEndpointConfigs mocks base method.
func (m *MockSagemakerClient) ListEndpointConfigs(arg0 context.Context, arg1 *sagemaker.ListEndpointConfigsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListEndpointConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEndpointConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointConfigs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListEndpointConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointConfigs indicates an expected call of ListEndpointConfigs.
func (mr *MockSagemakerClientMockRecorder) ListEndpointConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointConfigs", reflect.TypeOf((*MockSagemakerClient)(nil).ListEndpointConfigs), varargs...)
}

// ListEndpoints mocks base method.
func (m *MockSagemakerClient) ListEndpoints(arg0 context.Context, arg1 *sagemaker.ListEndpointsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpoints", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints.
func (mr *MockSagemakerClientMockRecorder) ListEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockSagemakerClient)(nil).ListEndpoints), varargs...)
}

// ListExperiments mocks base method.
func (m *MockSagemakerClient) ListExperiments(arg0 context.Context, arg1 *sagemaker.ListExperimentsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListExperimentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListExperiments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperiments", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListExperimentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperiments indicates an expected call of ListExperiments.
func (mr *MockSagemakerClientMockRecorder) ListExperiments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperiments", reflect.TypeOf((*MockSagemakerClient)(nil).ListExperiments), varargs...)
}

// ListFeatureGroups mocks base method.
func (m *MockSagemakerClient) ListFeatureGroups(arg0 context.Context, arg1 *sagemaker.ListFeatureGroupsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListFeatureGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFeatureGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeatureGroups", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListFeatureGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeatureGroups indicates an expected call of ListFeatureGroups.
func (mr *MockSagemakerClientMockRecorder) ListFeatureGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureGroups", reflect.TypeOf((*MockSagemakerClient)(nil).ListFeatureGroups), varargs...)
}

// ListFlowDefinitions mocks base method.
func (m *MockSagemakerClient) ListFlowDefinitions(arg0 context.Context, arg1 *sagemaker.ListFlowDefinitionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListFlowDefinitionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFlowDefinitions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlowDefinitions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListFlowDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlowDefinitions indicates an expected call of ListFlowDefinitions.
func (mr *MockSagemakerClientMockRecorder) ListFlowDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlowDefinitions", reflect.TypeOf((*MockSagemakerClient)(nil).ListFlowDefinitions), varargs...)
}

// ListHubContentVersions mocks base method.
func (m *MockSagemakerClient) ListHubContentVersions(arg0 context.Context, arg1 *sagemaker.ListHubContentVersionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListHubContentVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHubContentVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHubContentVersions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListHubContentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHubContentVersions indicates an expected call of ListHubContentVersions.
func (mr *MockSagemakerClientMockRecorder) ListHubContentVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHubContentVersions", reflect.TypeOf((*MockSagemakerClient)(nil).ListHubContentVersions), varargs...)
}

// ListHubContents mocks base method.
func (m *MockSagemakerClient) ListHubContents(arg0 context.Context, arg1 *sagemaker.ListHubContentsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListHubContentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHubContents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHubContents", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListHubContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHubContents indicates an expected call of ListHubContents.
func (mr *MockSagemakerClientMockRecorder) ListHubContents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHubContents", reflect.TypeOf((*MockSagemakerClient)(nil).ListHubContents), varargs...)
}

// ListHubs mocks base method.
func (m *MockSagemakerClient) ListHubs(arg0 context.Context, arg1 *sagemaker.ListHubsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListHubsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHubs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHubs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListHubsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHubs indicates an expected call of ListHubs.
func (mr *MockSagemakerClientMockRecorder) ListHubs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHubs", reflect.TypeOf((*MockSagemakerClient)(nil).ListHubs), varargs...)
}

// ListHumanTaskUis mocks base method.
func (m *MockSagemakerClient) ListHumanTaskUis(arg0 context.Context, arg1 *sagemaker.ListHumanTaskUisInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListHumanTaskUisOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHumanTaskUis")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHumanTaskUis", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListHumanTaskUisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHumanTaskUis indicates an expected call of ListHumanTaskUis.
func (mr *MockSagemakerClientMockRecorder) ListHumanTaskUis(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHumanTaskUis", reflect.TypeOf((*MockSagemakerClient)(nil).ListHumanTaskUis), varargs...)
}

// ListHyperParameterTuningJobs mocks base method.
func (m *MockSagemakerClient) ListHyperParameterTuningJobs(arg0 context.Context, arg1 *sagemaker.ListHyperParameterTuningJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListHyperParameterTuningJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHyperParameterTuningJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListHyperParameterTuningJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHyperParameterTuningJobs indicates an expected call of ListHyperParameterTuningJobs.
func (mr *MockSagemakerClientMockRecorder) ListHyperParameterTuningJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHyperParameterTuningJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListHyperParameterTuningJobs), varargs...)
}

// ListImageVersions mocks base method.
func (m *MockSagemakerClient) ListImageVersions(arg0 context.Context, arg1 *sagemaker.ListImageVersionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListImageVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListImageVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImageVersions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListImageVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImageVersions indicates an expected call of ListImageVersions.
func (mr *MockSagemakerClientMockRecorder) ListImageVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImageVersions", reflect.TypeOf((*MockSagemakerClient)(nil).ListImageVersions), varargs...)
}

// ListImages mocks base method.
func (m *MockSagemakerClient) ListImages(arg0 context.Context, arg1 *sagemaker.ListImagesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListImagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListImages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockSagemakerClientMockRecorder) ListImages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockSagemakerClient)(nil).ListImages), varargs...)
}

// ListInferenceExperiments mocks base method.
func (m *MockSagemakerClient) ListInferenceExperiments(arg0 context.Context, arg1 *sagemaker.ListInferenceExperimentsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListInferenceExperimentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInferenceExperiments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceExperiments", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListInferenceExperimentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceExperiments indicates an expected call of ListInferenceExperiments.
func (mr *MockSagemakerClientMockRecorder) ListInferenceExperiments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceExperiments", reflect.TypeOf((*MockSagemakerClient)(nil).ListInferenceExperiments), varargs...)
}

// ListInferenceRecommendationsJobSteps mocks base method.
func (m *MockSagemakerClient) ListInferenceRecommendationsJobSteps(arg0 context.Context, arg1 *sagemaker.ListInferenceRecommendationsJobStepsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListInferenceRecommendationsJobStepsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInferenceRecommendationsJobSteps")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceRecommendationsJobSteps", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListInferenceRecommendationsJobStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceRecommendationsJobSteps indicates an expected call of ListInferenceRecommendationsJobSteps.
func (mr *MockSagemakerClientMockRecorder) ListInferenceRecommendationsJobSteps(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceRecommendationsJobSteps", reflect.TypeOf((*MockSagemakerClient)(nil).ListInferenceRecommendationsJobSteps), varargs...)
}

// ListInferenceRecommendationsJobs mocks base method.
func (m *MockSagemakerClient) ListInferenceRecommendationsJobs(arg0 context.Context, arg1 *sagemaker.ListInferenceRecommendationsJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListInferenceRecommendationsJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListInferenceRecommendationsJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInferenceRecommendationsJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListInferenceRecommendationsJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInferenceRecommendationsJobs indicates an expected call of ListInferenceRecommendationsJobs.
func (mr *MockSagemakerClientMockRecorder) ListInferenceRecommendationsJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInferenceRecommendationsJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListInferenceRecommendationsJobs), varargs...)
}

// ListLabelingJobs mocks base method.
func (m *MockSagemakerClient) ListLabelingJobs(arg0 context.Context, arg1 *sagemaker.ListLabelingJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListLabelingJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLabelingJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLabelingJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListLabelingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabelingJobs indicates an expected call of ListLabelingJobs.
func (mr *MockSagemakerClientMockRecorder) ListLabelingJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelingJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListLabelingJobs), varargs...)
}

// ListLabelingJobsForWorkteam mocks base method.
func (m *MockSagemakerClient) ListLabelingJobsForWorkteam(arg0 context.Context, arg1 *sagemaker.ListLabelingJobsForWorkteamInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLabelingJobsForWorkteam")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLabelingJobsForWorkteam", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListLabelingJobsForWorkteamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabelingJobsForWorkteam indicates an expected call of ListLabelingJobsForWorkteam.
func (mr *MockSagemakerClientMockRecorder) ListLabelingJobsForWorkteam(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabelingJobsForWorkteam", reflect.TypeOf((*MockSagemakerClient)(nil).ListLabelingJobsForWorkteam), varargs...)
}

// ListLineageGroups mocks base method.
func (m *MockSagemakerClient) ListLineageGroups(arg0 context.Context, arg1 *sagemaker.ListLineageGroupsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListLineageGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLineageGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLineageGroups", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListLineageGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLineageGroups indicates an expected call of ListLineageGroups.
func (mr *MockSagemakerClientMockRecorder) ListLineageGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLineageGroups", reflect.TypeOf((*MockSagemakerClient)(nil).ListLineageGroups), varargs...)
}

// ListModelBiasJobDefinitions mocks base method.
func (m *MockSagemakerClient) ListModelBiasJobDefinitions(arg0 context.Context, arg1 *sagemaker.ListModelBiasJobDefinitionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelBiasJobDefinitionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelBiasJobDefinitions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelBiasJobDefinitions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelBiasJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelBiasJobDefinitions indicates an expected call of ListModelBiasJobDefinitions.
func (mr *MockSagemakerClientMockRecorder) ListModelBiasJobDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelBiasJobDefinitions", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelBiasJobDefinitions), varargs...)
}

// ListModelCardExportJobs mocks base method.
func (m *MockSagemakerClient) ListModelCardExportJobs(arg0 context.Context, arg1 *sagemaker.ListModelCardExportJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelCardExportJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelCardExportJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelCardExportJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelCardExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelCardExportJobs indicates an expected call of ListModelCardExportJobs.
func (mr *MockSagemakerClientMockRecorder) ListModelCardExportJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCardExportJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelCardExportJobs), varargs...)
}

// ListModelCardVersions mocks base method.
func (m *MockSagemakerClient) ListModelCardVersions(arg0 context.Context, arg1 *sagemaker.ListModelCardVersionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelCardVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelCardVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelCardVersions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelCardVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelCardVersions indicates an expected call of ListModelCardVersions.
func (mr *MockSagemakerClientMockRecorder) ListModelCardVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCardVersions", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelCardVersions), varargs...)
}

// ListModelCards mocks base method.
func (m *MockSagemakerClient) ListModelCards(arg0 context.Context, arg1 *sagemaker.ListModelCardsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelCardsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelCards")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelCards", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelCardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelCards indicates an expected call of ListModelCards.
func (mr *MockSagemakerClientMockRecorder) ListModelCards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelCards", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelCards), varargs...)
}

// ListModelExplainabilityJobDefinitions mocks base method.
func (m *MockSagemakerClient) ListModelExplainabilityJobDefinitions(arg0 context.Context, arg1 *sagemaker.ListModelExplainabilityJobDefinitionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelExplainabilityJobDefinitions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelExplainabilityJobDefinitions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelExplainabilityJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelExplainabilityJobDefinitions indicates an expected call of ListModelExplainabilityJobDefinitions.
func (mr *MockSagemakerClientMockRecorder) ListModelExplainabilityJobDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelExplainabilityJobDefinitions", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelExplainabilityJobDefinitions), varargs...)
}

// ListModelMetadata mocks base method.
func (m *MockSagemakerClient) ListModelMetadata(arg0 context.Context, arg1 *sagemaker.ListModelMetadataInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelMetadata", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelMetadata indicates an expected call of ListModelMetadata.
func (mr *MockSagemakerClientMockRecorder) ListModelMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelMetadata", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelMetadata), varargs...)
}

// ListModelPackageGroups mocks base method.
func (m *MockSagemakerClient) ListModelPackageGroups(arg0 context.Context, arg1 *sagemaker.ListModelPackageGroupsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelPackageGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelPackageGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelPackageGroups", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelPackageGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelPackageGroups indicates an expected call of ListModelPackageGroups.
func (mr *MockSagemakerClientMockRecorder) ListModelPackageGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelPackageGroups", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelPackageGroups), varargs...)
}

// ListModelPackages mocks base method.
func (m *MockSagemakerClient) ListModelPackages(arg0 context.Context, arg1 *sagemaker.ListModelPackagesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelPackagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelPackages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelPackages", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelPackages indicates an expected call of ListModelPackages.
func (mr *MockSagemakerClientMockRecorder) ListModelPackages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelPackages", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelPackages), varargs...)
}

// ListModelQualityJobDefinitions mocks base method.
func (m *MockSagemakerClient) ListModelQualityJobDefinitions(arg0 context.Context, arg1 *sagemaker.ListModelQualityJobDefinitionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelQualityJobDefinitionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModelQualityJobDefinitions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelQualityJobDefinitions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelQualityJobDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelQualityJobDefinitions indicates an expected call of ListModelQualityJobDefinitions.
func (mr *MockSagemakerClientMockRecorder) ListModelQualityJobDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelQualityJobDefinitions", reflect.TypeOf((*MockSagemakerClient)(nil).ListModelQualityJobDefinitions), varargs...)
}

// ListModels mocks base method.
func (m *MockSagemakerClient) ListModels(arg0 context.Context, arg1 *sagemaker.ListModelsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListModelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListModels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModels", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockSagemakerClientMockRecorder) ListModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockSagemakerClient)(nil).ListModels), varargs...)
}

// ListMonitoringAlertHistory mocks base method.
func (m *MockSagemakerClient) ListMonitoringAlertHistory(arg0 context.Context, arg1 *sagemaker.ListMonitoringAlertHistoryInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringAlertHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMonitoringAlertHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitoringAlertHistory", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListMonitoringAlertHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitoringAlertHistory indicates an expected call of ListMonitoringAlertHistory.
func (mr *MockSagemakerClientMockRecorder) ListMonitoringAlertHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitoringAlertHistory", reflect.TypeOf((*MockSagemakerClient)(nil).ListMonitoringAlertHistory), varargs...)
}

// ListMonitoringAlerts mocks base method.
func (m *MockSagemakerClient) ListMonitoringAlerts(arg0 context.Context, arg1 *sagemaker.ListMonitoringAlertsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringAlertsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMonitoringAlerts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitoringAlerts", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListMonitoringAlertsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitoringAlerts indicates an expected call of ListMonitoringAlerts.
func (mr *MockSagemakerClientMockRecorder) ListMonitoringAlerts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitoringAlerts", reflect.TypeOf((*MockSagemakerClient)(nil).ListMonitoringAlerts), varargs...)
}

// ListMonitoringExecutions mocks base method.
func (m *MockSagemakerClient) ListMonitoringExecutions(arg0 context.Context, arg1 *sagemaker.ListMonitoringExecutionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMonitoringExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitoringExecutions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListMonitoringExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitoringExecutions indicates an expected call of ListMonitoringExecutions.
func (mr *MockSagemakerClientMockRecorder) ListMonitoringExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitoringExecutions", reflect.TypeOf((*MockSagemakerClient)(nil).ListMonitoringExecutions), varargs...)
}

// ListMonitoringSchedules mocks base method.
func (m *MockSagemakerClient) ListMonitoringSchedules(arg0 context.Context, arg1 *sagemaker.ListMonitoringSchedulesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringSchedulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMonitoringSchedules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitoringSchedules", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListMonitoringSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitoringSchedules indicates an expected call of ListMonitoringSchedules.
func (mr *MockSagemakerClientMockRecorder) ListMonitoringSchedules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitoringSchedules", reflect.TypeOf((*MockSagemakerClient)(nil).ListMonitoringSchedules), varargs...)
}

// ListNotebookInstanceLifecycleConfigs mocks base method.
func (m *MockSagemakerClient) ListNotebookInstanceLifecycleConfigs(arg0 context.Context, arg1 *sagemaker.ListNotebookInstanceLifecycleConfigsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNotebookInstanceLifecycleConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookInstanceLifecycleConfigs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookInstanceLifecycleConfigs indicates an expected call of ListNotebookInstanceLifecycleConfigs.
func (mr *MockSagemakerClientMockRecorder) ListNotebookInstanceLifecycleConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstanceLifecycleConfigs", reflect.TypeOf((*MockSagemakerClient)(nil).ListNotebookInstanceLifecycleConfigs), varargs...)
}

// ListNotebookInstances mocks base method.
func (m *MockSagemakerClient) ListNotebookInstances(arg0 context.Context, arg1 *sagemaker.ListNotebookInstancesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListNotebookInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListNotebookInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebookInstances", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListNotebookInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebookInstances indicates an expected call of ListNotebookInstances.
func (mr *MockSagemakerClientMockRecorder) ListNotebookInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebookInstances", reflect.TypeOf((*MockSagemakerClient)(nil).ListNotebookInstances), varargs...)
}

// ListPipelineExecutionSteps mocks base method.
func (m *MockSagemakerClient) ListPipelineExecutionSteps(arg0 context.Context, arg1 *sagemaker.ListPipelineExecutionStepsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListPipelineExecutionStepsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPipelineExecutionSteps")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineExecutionSteps", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListPipelineExecutionStepsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineExecutionSteps indicates an expected call of ListPipelineExecutionSteps.
func (mr *MockSagemakerClientMockRecorder) ListPipelineExecutionSteps(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineExecutionSteps", reflect.TypeOf((*MockSagemakerClient)(nil).ListPipelineExecutionSteps), varargs...)
}

// ListPipelineExecutions mocks base method.
func (m *MockSagemakerClient) ListPipelineExecutions(arg0 context.Context, arg1 *sagemaker.ListPipelineExecutionsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListPipelineExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPipelineExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineExecutions", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListPipelineExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineExecutions indicates an expected call of ListPipelineExecutions.
func (mr *MockSagemakerClientMockRecorder) ListPipelineExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineExecutions", reflect.TypeOf((*MockSagemakerClient)(nil).ListPipelineExecutions), varargs...)
}

// ListPipelineParametersForExecution mocks base method.
func (m *MockSagemakerClient) ListPipelineParametersForExecution(arg0 context.Context, arg1 *sagemaker.ListPipelineParametersForExecutionInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListPipelineParametersForExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPipelineParametersForExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelineParametersForExecution", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListPipelineParametersForExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelineParametersForExecution indicates an expected call of ListPipelineParametersForExecution.
func (mr *MockSagemakerClientMockRecorder) ListPipelineParametersForExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineParametersForExecution", reflect.TypeOf((*MockSagemakerClient)(nil).ListPipelineParametersForExecution), varargs...)
}

// ListPipelines mocks base method.
func (m *MockSagemakerClient) ListPipelines(arg0 context.Context, arg1 *sagemaker.ListPipelinesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListPipelinesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPipelines")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelines", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockSagemakerClientMockRecorder) ListPipelines(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockSagemakerClient)(nil).ListPipelines), varargs...)
}

// ListProcessingJobs mocks base method.
func (m *MockSagemakerClient) ListProcessingJobs(arg0 context.Context, arg1 *sagemaker.ListProcessingJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListProcessingJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProcessingJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProcessingJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListProcessingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcessingJobs indicates an expected call of ListProcessingJobs.
func (mr *MockSagemakerClientMockRecorder) ListProcessingJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcessingJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListProcessingJobs), varargs...)
}

// ListProjects mocks base method.
func (m *MockSagemakerClient) ListProjects(arg0 context.Context, arg1 *sagemaker.ListProjectsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListProjectsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProjects")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockSagemakerClientMockRecorder) ListProjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockSagemakerClient)(nil).ListProjects), varargs...)
}

// ListResourceCatalogs mocks base method.
func (m *MockSagemakerClient) ListResourceCatalogs(arg0 context.Context, arg1 *sagemaker.ListResourceCatalogsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListResourceCatalogsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourceCatalogs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceCatalogs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListResourceCatalogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceCatalogs indicates an expected call of ListResourceCatalogs.
func (mr *MockSagemakerClientMockRecorder) ListResourceCatalogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceCatalogs", reflect.TypeOf((*MockSagemakerClient)(nil).ListResourceCatalogs), varargs...)
}

// ListSpaces mocks base method.
func (m *MockSagemakerClient) ListSpaces(arg0 context.Context, arg1 *sagemaker.ListSpacesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListSpacesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSpaces")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpaces", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListSpacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpaces indicates an expected call of ListSpaces.
func (mr *MockSagemakerClientMockRecorder) ListSpaces(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpaces", reflect.TypeOf((*MockSagemakerClient)(nil).ListSpaces), varargs...)
}

// ListStageDevices mocks base method.
func (m *MockSagemakerClient) ListStageDevices(arg0 context.Context, arg1 *sagemaker.ListStageDevicesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListStageDevicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStageDevices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStageDevices", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListStageDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStageDevices indicates an expected call of ListStageDevices.
func (mr *MockSagemakerClientMockRecorder) ListStageDevices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageDevices", reflect.TypeOf((*MockSagemakerClient)(nil).ListStageDevices), varargs...)
}

// ListStudioLifecycleConfigs mocks base method.
func (m *MockSagemakerClient) ListStudioLifecycleConfigs(arg0 context.Context, arg1 *sagemaker.ListStudioLifecycleConfigsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListStudioLifecycleConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStudioLifecycleConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudioLifecycleConfigs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListStudioLifecycleConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudioLifecycleConfigs indicates an expected call of ListStudioLifecycleConfigs.
func (mr *MockSagemakerClientMockRecorder) ListStudioLifecycleConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioLifecycleConfigs", reflect.TypeOf((*MockSagemakerClient)(nil).ListStudioLifecycleConfigs), varargs...)
}

// ListSubscribedWorkteams mocks base method.
func (m *MockSagemakerClient) ListSubscribedWorkteams(arg0 context.Context, arg1 *sagemaker.ListSubscribedWorkteamsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListSubscribedWorkteamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSubscribedWorkteams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribedWorkteams", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListSubscribedWorkteamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribedWorkteams indicates an expected call of ListSubscribedWorkteams.
func (mr *MockSagemakerClientMockRecorder) ListSubscribedWorkteams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedWorkteams", reflect.TypeOf((*MockSagemakerClient)(nil).ListSubscribedWorkteams), varargs...)
}

// ListTags mocks base method.
func (m *MockSagemakerClient) ListTags(arg0 context.Context, arg1 *sagemaker.ListTagsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTags", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockSagemakerClientMockRecorder) ListTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockSagemakerClient)(nil).ListTags), varargs...)
}

// ListTrainingJobs mocks base method.
func (m *MockSagemakerClient) ListTrainingJobs(arg0 context.Context, arg1 *sagemaker.ListTrainingJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListTrainingJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrainingJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTrainingJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingJobs indicates an expected call of ListTrainingJobs.
func (mr *MockSagemakerClientMockRecorder) ListTrainingJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListTrainingJobs), varargs...)
}

// ListTrainingJobsForHyperParameterTuningJob mocks base method.
func (m *MockSagemakerClient) ListTrainingJobsForHyperParameterTuningJob(arg0 context.Context, arg1 *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrainingJobsForHyperParameterTuningJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrainingJobsForHyperParameterTuningJob", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrainingJobsForHyperParameterTuningJob indicates an expected call of ListTrainingJobsForHyperParameterTuningJob.
func (mr *MockSagemakerClientMockRecorder) ListTrainingJobsForHyperParameterTuningJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrainingJobsForHyperParameterTuningJob", reflect.TypeOf((*MockSagemakerClient)(nil).ListTrainingJobsForHyperParameterTuningJob), varargs...)
}

// ListTransformJobs mocks base method.
func (m *MockSagemakerClient) ListTransformJobs(arg0 context.Context, arg1 *sagemaker.ListTransformJobsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListTransformJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTransformJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransformJobs", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTransformJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransformJobs indicates an expected call of ListTransformJobs.
func (mr *MockSagemakerClientMockRecorder) ListTransformJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransformJobs", reflect.TypeOf((*MockSagemakerClient)(nil).ListTransformJobs), varargs...)
}

// ListTrialComponents mocks base method.
func (m *MockSagemakerClient) ListTrialComponents(arg0 context.Context, arg1 *sagemaker.ListTrialComponentsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListTrialComponentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrialComponents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrialComponents", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTrialComponentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrialComponents indicates an expected call of ListTrialComponents.
func (mr *MockSagemakerClientMockRecorder) ListTrialComponents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrialComponents", reflect.TypeOf((*MockSagemakerClient)(nil).ListTrialComponents), varargs...)
}

// ListTrials mocks base method.
func (m *MockSagemakerClient) ListTrials(arg0 context.Context, arg1 *sagemaker.ListTrialsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListTrialsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTrials")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrials", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListTrialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrials indicates an expected call of ListTrials.
func (mr *MockSagemakerClientMockRecorder) ListTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrials", reflect.TypeOf((*MockSagemakerClient)(nil).ListTrials), varargs...)
}

// ListUserProfiles mocks base method.
func (m *MockSagemakerClient) ListUserProfiles(arg0 context.Context, arg1 *sagemaker.ListUserProfilesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListUserProfilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListUserProfiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserProfiles", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListUserProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserProfiles indicates an expected call of ListUserProfiles.
func (mr *MockSagemakerClientMockRecorder) ListUserProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserProfiles", reflect.TypeOf((*MockSagemakerClient)(nil).ListUserProfiles), varargs...)
}

// ListWorkforces mocks base method.
func (m *MockSagemakerClient) ListWorkforces(arg0 context.Context, arg1 *sagemaker.ListWorkforcesInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListWorkforcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListWorkforces")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkforces", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListWorkforcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkforces indicates an expected call of ListWorkforces.
func (mr *MockSagemakerClientMockRecorder) ListWorkforces(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkforces", reflect.TypeOf((*MockSagemakerClient)(nil).ListWorkforces), varargs...)
}

// ListWorkteams mocks base method.
func (m *MockSagemakerClient) ListWorkteams(arg0 context.Context, arg1 *sagemaker.ListWorkteamsInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.ListWorkteamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListWorkteams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkteams", varargs...)
	ret0, _ := ret[0].(*sagemaker.ListWorkteamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkteams indicates an expected call of ListWorkteams.
func (mr *MockSagemakerClientMockRecorder) ListWorkteams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkteams", reflect.TypeOf((*MockSagemakerClient)(nil).ListWorkteams), varargs...)
}

// Search mocks base method.
func (m *MockSagemakerClient) Search(arg0 context.Context, arg1 *sagemaker.SearchInput, arg2 ...func(*sagemaker.Options)) (*sagemaker.SearchOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &sagemaker.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to Search")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*sagemaker.SearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSagemakerClientMockRecorder) Search(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSagemakerClient)(nil).Search), varargs...)
}
