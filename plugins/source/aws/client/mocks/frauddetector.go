// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/aws/client (interfaces: FraudDetectorClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	frauddetector "github.com/aws/aws-sdk-go-v2/service/frauddetector"
	gomock "github.com/golang/mock/gomock"
)

// MockFraudDetectorClient is a mock of FraudDetectorClient interface.
type MockFraudDetectorClient struct {
	ctrl     *gomock.Controller
	recorder *MockFraudDetectorClientMockRecorder
}

// MockFraudDetectorClientMockRecorder is the mock recorder for MockFraudDetectorClient.
type MockFraudDetectorClientMockRecorder struct {
	mock *MockFraudDetectorClient
}

// NewMockFraudDetectorClient creates a new mock instance.
func NewMockFraudDetectorClient(ctrl *gomock.Controller) *MockFraudDetectorClient {
	mock := &MockFraudDetectorClient{ctrl: ctrl}
	mock.recorder = &MockFraudDetectorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFraudDetectorClient) EXPECT() *MockFraudDetectorClientMockRecorder {
	return m.recorder
}

// DescribeModelVersions mocks base method.
func (m *MockFraudDetectorClient) DescribeModelVersions(arg0 context.Context, arg1 *frauddetector.DescribeModelVersionsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.DescribeModelVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelVersions", varargs...)
	ret0, _ := ret[0].(*frauddetector.DescribeModelVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelVersions indicates an expected call of DescribeModelVersions.
func (mr *MockFraudDetectorClientMockRecorder) DescribeModelVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersions", reflect.TypeOf((*MockFraudDetectorClient)(nil).DescribeModelVersions), varargs...)
}

// GetBatchImportJobs mocks base method.
func (m *MockFraudDetectorClient) GetBatchImportJobs(arg0 context.Context, arg1 *frauddetector.GetBatchImportJobsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetBatchImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBatchImportJobs", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetBatchImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchImportJobs indicates an expected call of GetBatchImportJobs.
func (mr *MockFraudDetectorClientMockRecorder) GetBatchImportJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchImportJobs", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetBatchImportJobs), varargs...)
}

// GetBatchPredictionJobs mocks base method.
func (m *MockFraudDetectorClient) GetBatchPredictionJobs(arg0 context.Context, arg1 *frauddetector.GetBatchPredictionJobsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetBatchPredictionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBatchPredictionJobs", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetBatchPredictionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchPredictionJobs indicates an expected call of GetBatchPredictionJobs.
func (mr *MockFraudDetectorClientMockRecorder) GetBatchPredictionJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchPredictionJobs", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetBatchPredictionJobs), varargs...)
}

// GetDetectors mocks base method.
func (m *MockFraudDetectorClient) GetDetectors(arg0 context.Context, arg1 *frauddetector.GetDetectorsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetDetectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetectors", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectors indicates an expected call of GetDetectors.
func (mr *MockFraudDetectorClientMockRecorder) GetDetectors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectors", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetDetectors), varargs...)
}

// GetEntityTypes mocks base method.
func (m *MockFraudDetectorClient) GetEntityTypes(arg0 context.Context, arg1 *frauddetector.GetEntityTypesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityTypes", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityTypes indicates an expected call of GetEntityTypes.
func (mr *MockFraudDetectorClientMockRecorder) GetEntityTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypes", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetEntityTypes), varargs...)
}

// GetEventTypes mocks base method.
func (m *MockFraudDetectorClient) GetEventTypes(arg0 context.Context, arg1 *frauddetector.GetEventTypesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEventTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventTypes", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypes indicates an expected call of GetEventTypes.
func (mr *MockFraudDetectorClientMockRecorder) GetEventTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypes", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetEventTypes), varargs...)
}

// GetExternalModels mocks base method.
func (m *MockFraudDetectorClient) GetExternalModels(arg0 context.Context, arg1 *frauddetector.GetExternalModelsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetExternalModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExternalModels", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetExternalModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalModels indicates an expected call of GetExternalModels.
func (mr *MockFraudDetectorClientMockRecorder) GetExternalModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModels", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetExternalModels), varargs...)
}

// GetLabels mocks base method.
func (m *MockFraudDetectorClient) GetLabels(arg0 context.Context, arg1 *frauddetector.GetLabelsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabels", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockFraudDetectorClientMockRecorder) GetLabels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetLabels), varargs...)
}

// GetModels mocks base method.
func (m *MockFraudDetectorClient) GetModels(arg0 context.Context, arg1 *frauddetector.GetModelsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModels", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockFraudDetectorClientMockRecorder) GetModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetModels), varargs...)
}

// GetOutcomes mocks base method.
func (m *MockFraudDetectorClient) GetOutcomes(arg0 context.Context, arg1 *frauddetector.GetOutcomesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetOutcomesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutcomes", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetOutcomesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomes indicates an expected call of GetOutcomes.
func (mr *MockFraudDetectorClientMockRecorder) GetOutcomes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomes", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetOutcomes), varargs...)
}

// GetRules mocks base method.
func (m *MockFraudDetectorClient) GetRules(arg0 context.Context, arg1 *frauddetector.GetRulesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRules", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRules indicates an expected call of GetRules.
func (mr *MockFraudDetectorClientMockRecorder) GetRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetRules), varargs...)
}

// GetVariables mocks base method.
func (m *MockFraudDetectorClient) GetVariables(arg0 context.Context, arg1 *frauddetector.GetVariablesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetVariablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariables", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetVariablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariables indicates an expected call of GetVariables.
func (mr *MockFraudDetectorClientMockRecorder) GetVariables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariables", reflect.TypeOf((*MockFraudDetectorClient)(nil).GetVariables), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockFraudDetectorClient) ListTagsForResource(arg0 context.Context, arg1 *frauddetector.ListTagsForResourceInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*frauddetector.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockFraudDetectorClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFraudDetectorClient)(nil).ListTagsForResource), varargs...)
}
