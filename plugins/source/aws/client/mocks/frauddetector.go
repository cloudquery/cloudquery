// Code generated by MockGen. DO NOT EDIT.
// Source: frauddetector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	frauddetector "github.com/aws/aws-sdk-go-v2/service/frauddetector"
	gomock "github.com/golang/mock/gomock"
)

// MockFrauddetectorClient is a mock of FrauddetectorClient interface.
type MockFrauddetectorClient struct {
	ctrl     *gomock.Controller
	recorder *MockFrauddetectorClientMockRecorder
}

// MockFrauddetectorClientMockRecorder is the mock recorder for MockFrauddetectorClient.
type MockFrauddetectorClientMockRecorder struct {
	mock *MockFrauddetectorClient
}

// NewMockFrauddetectorClient creates a new mock instance.
func NewMockFrauddetectorClient(ctrl *gomock.Controller) *MockFrauddetectorClient {
	mock := &MockFrauddetectorClient{ctrl: ctrl}
	mock.recorder = &MockFrauddetectorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFrauddetectorClient) EXPECT() *MockFrauddetectorClientMockRecorder {
	return m.recorder
}

// BatchGetVariable mocks base method.
func (m *MockFrauddetectorClient) BatchGetVariable(arg0 context.Context, arg1 *frauddetector.BatchGetVariableInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.BatchGetVariableOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetVariable")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetVariable", varargs...)
	ret0, _ := ret[0].(*frauddetector.BatchGetVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVariable indicates an expected call of BatchGetVariable.
func (mr *MockFrauddetectorClientMockRecorder) BatchGetVariable(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVariable", reflect.TypeOf((*MockFrauddetectorClient)(nil).BatchGetVariable), varargs...)
}

// DescribeDetector mocks base method.
func (m *MockFrauddetectorClient) DescribeDetector(arg0 context.Context, arg1 *frauddetector.DescribeDetectorInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.DescribeDetectorOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDetector")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDetector", varargs...)
	ret0, _ := ret[0].(*frauddetector.DescribeDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDetector indicates an expected call of DescribeDetector.
func (mr *MockFrauddetectorClientMockRecorder) DescribeDetector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetector", reflect.TypeOf((*MockFrauddetectorClient)(nil).DescribeDetector), varargs...)
}

// DescribeModelVersions mocks base method.
func (m *MockFrauddetectorClient) DescribeModelVersions(arg0 context.Context, arg1 *frauddetector.DescribeModelVersionsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.DescribeModelVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeModelVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelVersions", varargs...)
	ret0, _ := ret[0].(*frauddetector.DescribeModelVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelVersions indicates an expected call of DescribeModelVersions.
func (mr *MockFrauddetectorClientMockRecorder) DescribeModelVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersions", reflect.TypeOf((*MockFrauddetectorClient)(nil).DescribeModelVersions), varargs...)
}

// GetBatchImportJobs mocks base method.
func (m *MockFrauddetectorClient) GetBatchImportJobs(arg0 context.Context, arg1 *frauddetector.GetBatchImportJobsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetBatchImportJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBatchImportJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBatchImportJobs", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetBatchImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchImportJobs indicates an expected call of GetBatchImportJobs.
func (mr *MockFrauddetectorClientMockRecorder) GetBatchImportJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchImportJobs", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetBatchImportJobs), varargs...)
}

// GetBatchPredictionJobs mocks base method.
func (m *MockFrauddetectorClient) GetBatchPredictionJobs(arg0 context.Context, arg1 *frauddetector.GetBatchPredictionJobsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetBatchPredictionJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBatchPredictionJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBatchPredictionJobs", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetBatchPredictionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchPredictionJobs indicates an expected call of GetBatchPredictionJobs.
func (mr *MockFrauddetectorClientMockRecorder) GetBatchPredictionJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchPredictionJobs", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetBatchPredictionJobs), varargs...)
}

// GetDeleteEventsByEventTypeStatus mocks base method.
func (m *MockFrauddetectorClient) GetDeleteEventsByEventTypeStatus(arg0 context.Context, arg1 *frauddetector.GetDeleteEventsByEventTypeStatusInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetDeleteEventsByEventTypeStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeleteEventsByEventTypeStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeleteEventsByEventTypeStatus", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetDeleteEventsByEventTypeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleteEventsByEventTypeStatus indicates an expected call of GetDeleteEventsByEventTypeStatus.
func (mr *MockFrauddetectorClientMockRecorder) GetDeleteEventsByEventTypeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleteEventsByEventTypeStatus", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetDeleteEventsByEventTypeStatus), varargs...)
}

// GetDetectorVersion mocks base method.
func (m *MockFrauddetectorClient) GetDetectorVersion(arg0 context.Context, arg1 *frauddetector.GetDetectorVersionInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetDetectorVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDetectorVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetectorVersion", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectorVersion indicates an expected call of GetDetectorVersion.
func (mr *MockFrauddetectorClientMockRecorder) GetDetectorVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorVersion", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetDetectorVersion), varargs...)
}

// GetDetectors mocks base method.
func (m *MockFrauddetectorClient) GetDetectors(arg0 context.Context, arg1 *frauddetector.GetDetectorsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetDetectorsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDetectors")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetectors", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectors indicates an expected call of GetDetectors.
func (mr *MockFrauddetectorClientMockRecorder) GetDetectors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectors", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetDetectors), varargs...)
}

// GetEntityTypes mocks base method.
func (m *MockFrauddetectorClient) GetEntityTypes(arg0 context.Context, arg1 *frauddetector.GetEntityTypesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEntityTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEntityTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityTypes", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityTypes indicates an expected call of GetEntityTypes.
func (mr *MockFrauddetectorClientMockRecorder) GetEntityTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypes", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetEntityTypes), varargs...)
}

// GetEvent mocks base method.
func (m *MockFrauddetectorClient) GetEvent(arg0 context.Context, arg1 *frauddetector.GetEventInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEventOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEvent")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvent", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockFrauddetectorClientMockRecorder) GetEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetEvent), varargs...)
}

// GetEventPrediction mocks base method.
func (m *MockFrauddetectorClient) GetEventPrediction(arg0 context.Context, arg1 *frauddetector.GetEventPredictionInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEventPredictionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEventPrediction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventPrediction", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventPredictionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventPrediction indicates an expected call of GetEventPrediction.
func (mr *MockFrauddetectorClientMockRecorder) GetEventPrediction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPrediction", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetEventPrediction), varargs...)
}

// GetEventPredictionMetadata mocks base method.
func (m *MockFrauddetectorClient) GetEventPredictionMetadata(arg0 context.Context, arg1 *frauddetector.GetEventPredictionMetadataInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEventPredictionMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEventPredictionMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventPredictionMetadata", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventPredictionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventPredictionMetadata indicates an expected call of GetEventPredictionMetadata.
func (mr *MockFrauddetectorClientMockRecorder) GetEventPredictionMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPredictionMetadata", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetEventPredictionMetadata), varargs...)
}

// GetEventTypes mocks base method.
func (m *MockFrauddetectorClient) GetEventTypes(arg0 context.Context, arg1 *frauddetector.GetEventTypesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetEventTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEventTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventTypes", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypes indicates an expected call of GetEventTypes.
func (mr *MockFrauddetectorClientMockRecorder) GetEventTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypes", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetEventTypes), varargs...)
}

// GetExternalModels mocks base method.
func (m *MockFrauddetectorClient) GetExternalModels(arg0 context.Context, arg1 *frauddetector.GetExternalModelsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetExternalModelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetExternalModels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExternalModels", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetExternalModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalModels indicates an expected call of GetExternalModels.
func (mr *MockFrauddetectorClientMockRecorder) GetExternalModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModels", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetExternalModels), varargs...)
}

// GetKMSEncryptionKey mocks base method.
func (m *MockFrauddetectorClient) GetKMSEncryptionKey(arg0 context.Context, arg1 *frauddetector.GetKMSEncryptionKeyInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetKMSEncryptionKeyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetKMSEncryptionKey")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKMSEncryptionKey", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetKMSEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKMSEncryptionKey indicates an expected call of GetKMSEncryptionKey.
func (mr *MockFrauddetectorClientMockRecorder) GetKMSEncryptionKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKMSEncryptionKey", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetKMSEncryptionKey), varargs...)
}

// GetLabels mocks base method.
func (m *MockFrauddetectorClient) GetLabels(arg0 context.Context, arg1 *frauddetector.GetLabelsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetLabelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLabels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabels", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockFrauddetectorClientMockRecorder) GetLabels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetLabels), varargs...)
}

// GetListElements mocks base method.
func (m *MockFrauddetectorClient) GetListElements(arg0 context.Context, arg1 *frauddetector.GetListElementsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetListElementsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetListElements")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListElements", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetListElementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListElements indicates an expected call of GetListElements.
func (mr *MockFrauddetectorClientMockRecorder) GetListElements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListElements", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetListElements), varargs...)
}

// GetListsMetadata mocks base method.
func (m *MockFrauddetectorClient) GetListsMetadata(arg0 context.Context, arg1 *frauddetector.GetListsMetadataInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetListsMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetListsMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListsMetadata", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetListsMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListsMetadata indicates an expected call of GetListsMetadata.
func (mr *MockFrauddetectorClientMockRecorder) GetListsMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListsMetadata", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetListsMetadata), varargs...)
}

// GetModelVersion mocks base method.
func (m *MockFrauddetectorClient) GetModelVersion(arg0 context.Context, arg1 *frauddetector.GetModelVersionInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetModelVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModelVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelVersion", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion.
func (mr *MockFrauddetectorClientMockRecorder) GetModelVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetModelVersion), varargs...)
}

// GetModels mocks base method.
func (m *MockFrauddetectorClient) GetModels(arg0 context.Context, arg1 *frauddetector.GetModelsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetModelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModels", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockFrauddetectorClientMockRecorder) GetModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetModels), varargs...)
}

// GetOutcomes mocks base method.
func (m *MockFrauddetectorClient) GetOutcomes(arg0 context.Context, arg1 *frauddetector.GetOutcomesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetOutcomesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOutcomes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutcomes", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetOutcomesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomes indicates an expected call of GetOutcomes.
func (mr *MockFrauddetectorClientMockRecorder) GetOutcomes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomes", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetOutcomes), varargs...)
}

// GetRules mocks base method.
func (m *MockFrauddetectorClient) GetRules(arg0 context.Context, arg1 *frauddetector.GetRulesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRules", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRules indicates an expected call of GetRules.
func (mr *MockFrauddetectorClientMockRecorder) GetRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetRules), varargs...)
}

// GetVariables mocks base method.
func (m *MockFrauddetectorClient) GetVariables(arg0 context.Context, arg1 *frauddetector.GetVariablesInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.GetVariablesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVariables")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariables", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetVariablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariables indicates an expected call of GetVariables.
func (mr *MockFrauddetectorClientMockRecorder) GetVariables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariables", reflect.TypeOf((*MockFrauddetectorClient)(nil).GetVariables), varargs...)
}

// ListEventPredictions mocks base method.
func (m *MockFrauddetectorClient) ListEventPredictions(arg0 context.Context, arg1 *frauddetector.ListEventPredictionsInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.ListEventPredictionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEventPredictions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventPredictions", varargs...)
	ret0, _ := ret[0].(*frauddetector.ListEventPredictionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventPredictions indicates an expected call of ListEventPredictions.
func (mr *MockFrauddetectorClientMockRecorder) ListEventPredictions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventPredictions", reflect.TypeOf((*MockFrauddetectorClient)(nil).ListEventPredictions), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockFrauddetectorClient) ListTagsForResource(arg0 context.Context, arg1 *frauddetector.ListTagsForResourceInput, arg2 ...func(*frauddetector.Options)) (*frauddetector.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &frauddetector.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*frauddetector.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockFrauddetectorClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFrauddetectorClient)(nil).ListTagsForResource), varargs...)
}
