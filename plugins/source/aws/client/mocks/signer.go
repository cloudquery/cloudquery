// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	signer "github.com/aws/aws-sdk-go-v2/service/signer"
	gomock "github.com/golang/mock/gomock"
)

// MockSignerClient is a mock of SignerClient interface.
type MockSignerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSignerClientMockRecorder
}

// MockSignerClientMockRecorder is the mock recorder for MockSignerClient.
type MockSignerClientMockRecorder struct {
	mock *MockSignerClient
}

// NewMockSignerClient creates a new mock instance.
func NewMockSignerClient(ctrl *gomock.Controller) *MockSignerClient {
	mock := &MockSignerClient{ctrl: ctrl}
	mock.recorder = &MockSignerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerClient) EXPECT() *MockSignerClientMockRecorder {
	return m.recorder
}

// DescribeSigningJob mocks base method.
func (m *MockSignerClient) DescribeSigningJob(arg0 context.Context, arg1 *signer.DescribeSigningJobInput, arg2 ...func(*signer.Options)) (*signer.DescribeSigningJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSigningJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSigningJob", varargs...)
	ret0, _ := ret[0].(*signer.DescribeSigningJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSigningJob indicates an expected call of DescribeSigningJob.
func (mr *MockSignerClientMockRecorder) DescribeSigningJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSigningJob", reflect.TypeOf((*MockSignerClient)(nil).DescribeSigningJob), varargs...)
}

// GetRevocationStatus mocks base method.
func (m *MockSignerClient) GetRevocationStatus(arg0 context.Context, arg1 *signer.GetRevocationStatusInput, arg2 ...func(*signer.Options)) (*signer.GetRevocationStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRevocationStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRevocationStatus", varargs...)
	ret0, _ := ret[0].(*signer.GetRevocationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevocationStatus indicates an expected call of GetRevocationStatus.
func (mr *MockSignerClientMockRecorder) GetRevocationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevocationStatus", reflect.TypeOf((*MockSignerClient)(nil).GetRevocationStatus), varargs...)
}

// GetSigningPlatform mocks base method.
func (m *MockSignerClient) GetSigningPlatform(arg0 context.Context, arg1 *signer.GetSigningPlatformInput, arg2 ...func(*signer.Options)) (*signer.GetSigningPlatformOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSigningPlatform")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSigningPlatform", varargs...)
	ret0, _ := ret[0].(*signer.GetSigningPlatformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningPlatform indicates an expected call of GetSigningPlatform.
func (mr *MockSignerClientMockRecorder) GetSigningPlatform(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningPlatform", reflect.TypeOf((*MockSignerClient)(nil).GetSigningPlatform), varargs...)
}

// GetSigningProfile mocks base method.
func (m *MockSignerClient) GetSigningProfile(arg0 context.Context, arg1 *signer.GetSigningProfileInput, arg2 ...func(*signer.Options)) (*signer.GetSigningProfileOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSigningProfile")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSigningProfile", varargs...)
	ret0, _ := ret[0].(*signer.GetSigningProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningProfile indicates an expected call of GetSigningProfile.
func (mr *MockSignerClientMockRecorder) GetSigningProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningProfile", reflect.TypeOf((*MockSignerClient)(nil).GetSigningProfile), varargs...)
}

// ListProfilePermissions mocks base method.
func (m *MockSignerClient) ListProfilePermissions(arg0 context.Context, arg1 *signer.ListProfilePermissionsInput, arg2 ...func(*signer.Options)) (*signer.ListProfilePermissionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProfilePermissions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilePermissions", varargs...)
	ret0, _ := ret[0].(*signer.ListProfilePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilePermissions indicates an expected call of ListProfilePermissions.
func (mr *MockSignerClientMockRecorder) ListProfilePermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilePermissions", reflect.TypeOf((*MockSignerClient)(nil).ListProfilePermissions), varargs...)
}

// ListSigningJobs mocks base method.
func (m *MockSignerClient) ListSigningJobs(arg0 context.Context, arg1 *signer.ListSigningJobsInput, arg2 ...func(*signer.Options)) (*signer.ListSigningJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSigningJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSigningJobs", varargs...)
	ret0, _ := ret[0].(*signer.ListSigningJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSigningJobs indicates an expected call of ListSigningJobs.
func (mr *MockSignerClientMockRecorder) ListSigningJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSigningJobs", reflect.TypeOf((*MockSignerClient)(nil).ListSigningJobs), varargs...)
}

// ListSigningPlatforms mocks base method.
func (m *MockSignerClient) ListSigningPlatforms(arg0 context.Context, arg1 *signer.ListSigningPlatformsInput, arg2 ...func(*signer.Options)) (*signer.ListSigningPlatformsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSigningPlatforms")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSigningPlatforms", varargs...)
	ret0, _ := ret[0].(*signer.ListSigningPlatformsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSigningPlatforms indicates an expected call of ListSigningPlatforms.
func (mr *MockSignerClientMockRecorder) ListSigningPlatforms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSigningPlatforms", reflect.TypeOf((*MockSignerClient)(nil).ListSigningPlatforms), varargs...)
}

// ListSigningProfiles mocks base method.
func (m *MockSignerClient) ListSigningProfiles(arg0 context.Context, arg1 *signer.ListSigningProfilesInput, arg2 ...func(*signer.Options)) (*signer.ListSigningProfilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSigningProfiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSigningProfiles", varargs...)
	ret0, _ := ret[0].(*signer.ListSigningProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSigningProfiles indicates an expected call of ListSigningProfiles.
func (mr *MockSignerClientMockRecorder) ListSigningProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSigningProfiles", reflect.TypeOf((*MockSignerClient)(nil).ListSigningProfiles), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSignerClient) ListTagsForResource(arg0 context.Context, arg1 *signer.ListTagsForResourceInput, arg2 ...func(*signer.Options)) (*signer.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &signer.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*signer.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSignerClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSignerClient)(nil).ListTagsForResource), varargs...)
}
