// Code generated by MockGen. DO NOT EDIT.
// Source: xray.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	xray "github.com/aws/aws-sdk-go-v2/service/xray"
	gomock "github.com/golang/mock/gomock"
)

// MockXrayClient is a mock of XrayClient interface.
type MockXrayClient struct {
	ctrl     *gomock.Controller
	recorder *MockXrayClientMockRecorder
}

// MockXrayClientMockRecorder is the mock recorder for MockXrayClient.
type MockXrayClientMockRecorder struct {
	mock *MockXrayClient
}

// NewMockXrayClient creates a new mock instance.
func NewMockXrayClient(ctrl *gomock.Controller) *MockXrayClient {
	mock := &MockXrayClient{ctrl: ctrl}
	mock.recorder = &MockXrayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXrayClient) EXPECT() *MockXrayClientMockRecorder {
	return m.recorder
}

// BatchGetTraces mocks base method.
func (m *MockXrayClient) BatchGetTraces(arg0 context.Context, arg1 *xray.BatchGetTracesInput, arg2 ...func(*xray.Options)) (*xray.BatchGetTracesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetTraces")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTraces", varargs...)
	ret0, _ := ret[0].(*xray.BatchGetTracesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTraces indicates an expected call of BatchGetTraces.
func (mr *MockXrayClientMockRecorder) BatchGetTraces(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTraces", reflect.TypeOf((*MockXrayClient)(nil).BatchGetTraces), varargs...)
}

// GetEncryptionConfig mocks base method.
func (m *MockXrayClient) GetEncryptionConfig(arg0 context.Context, arg1 *xray.GetEncryptionConfigInput, arg2 ...func(*xray.Options)) (*xray.GetEncryptionConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEncryptionConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEncryptionConfig", varargs...)
	ret0, _ := ret[0].(*xray.GetEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfig indicates an expected call of GetEncryptionConfig.
func (mr *MockXrayClientMockRecorder) GetEncryptionConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfig", reflect.TypeOf((*MockXrayClient)(nil).GetEncryptionConfig), varargs...)
}

// GetGroup mocks base method.
func (m *MockXrayClient) GetGroup(arg0 context.Context, arg1 *xray.GetGroupInput, arg2 ...func(*xray.Options)) (*xray.GetGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroup", varargs...)
	ret0, _ := ret[0].(*xray.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockXrayClientMockRecorder) GetGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockXrayClient)(nil).GetGroup), varargs...)
}

// GetGroups mocks base method.
func (m *MockXrayClient) GetGroups(arg0 context.Context, arg1 *xray.GetGroupsInput, arg2 ...func(*xray.Options)) (*xray.GetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroups", varargs...)
	ret0, _ := ret[0].(*xray.GetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockXrayClientMockRecorder) GetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockXrayClient)(nil).GetGroups), varargs...)
}

// GetInsight mocks base method.
func (m *MockXrayClient) GetInsight(arg0 context.Context, arg1 *xray.GetInsightInput, arg2 ...func(*xray.Options)) (*xray.GetInsightOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsight")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsight", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsight indicates an expected call of GetInsight.
func (mr *MockXrayClientMockRecorder) GetInsight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsight", reflect.TypeOf((*MockXrayClient)(nil).GetInsight), varargs...)
}

// GetInsightEvents mocks base method.
func (m *MockXrayClient) GetInsightEvents(arg0 context.Context, arg1 *xray.GetInsightEventsInput, arg2 ...func(*xray.Options)) (*xray.GetInsightEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsightEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightEvents", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightEvents indicates an expected call of GetInsightEvents.
func (mr *MockXrayClientMockRecorder) GetInsightEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightEvents", reflect.TypeOf((*MockXrayClient)(nil).GetInsightEvents), varargs...)
}

// GetInsightImpactGraph mocks base method.
func (m *MockXrayClient) GetInsightImpactGraph(arg0 context.Context, arg1 *xray.GetInsightImpactGraphInput, arg2 ...func(*xray.Options)) (*xray.GetInsightImpactGraphOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsightImpactGraph")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightImpactGraph", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightImpactGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightImpactGraph indicates an expected call of GetInsightImpactGraph.
func (mr *MockXrayClientMockRecorder) GetInsightImpactGraph(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightImpactGraph", reflect.TypeOf((*MockXrayClient)(nil).GetInsightImpactGraph), varargs...)
}

// GetInsightSummaries mocks base method.
func (m *MockXrayClient) GetInsightSummaries(arg0 context.Context, arg1 *xray.GetInsightSummariesInput, arg2 ...func(*xray.Options)) (*xray.GetInsightSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInsightSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightSummaries", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightSummaries indicates an expected call of GetInsightSummaries.
func (mr *MockXrayClientMockRecorder) GetInsightSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightSummaries", reflect.TypeOf((*MockXrayClient)(nil).GetInsightSummaries), varargs...)
}

// GetSamplingRules mocks base method.
func (m *MockXrayClient) GetSamplingRules(arg0 context.Context, arg1 *xray.GetSamplingRulesInput, arg2 ...func(*xray.Options)) (*xray.GetSamplingRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSamplingRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingRules", varargs...)
	ret0, _ := ret[0].(*xray.GetSamplingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingRules indicates an expected call of GetSamplingRules.
func (mr *MockXrayClientMockRecorder) GetSamplingRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingRules", reflect.TypeOf((*MockXrayClient)(nil).GetSamplingRules), varargs...)
}

// GetSamplingStatisticSummaries mocks base method.
func (m *MockXrayClient) GetSamplingStatisticSummaries(arg0 context.Context, arg1 *xray.GetSamplingStatisticSummariesInput, arg2 ...func(*xray.Options)) (*xray.GetSamplingStatisticSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSamplingStatisticSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingStatisticSummaries", varargs...)
	ret0, _ := ret[0].(*xray.GetSamplingStatisticSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingStatisticSummaries indicates an expected call of GetSamplingStatisticSummaries.
func (mr *MockXrayClientMockRecorder) GetSamplingStatisticSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingStatisticSummaries", reflect.TypeOf((*MockXrayClient)(nil).GetSamplingStatisticSummaries), varargs...)
}

// GetSamplingTargets mocks base method.
func (m *MockXrayClient) GetSamplingTargets(arg0 context.Context, arg1 *xray.GetSamplingTargetsInput, arg2 ...func(*xray.Options)) (*xray.GetSamplingTargetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSamplingTargets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingTargets", varargs...)
	ret0, _ := ret[0].(*xray.GetSamplingTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingTargets indicates an expected call of GetSamplingTargets.
func (mr *MockXrayClientMockRecorder) GetSamplingTargets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingTargets", reflect.TypeOf((*MockXrayClient)(nil).GetSamplingTargets), varargs...)
}

// GetServiceGraph mocks base method.
func (m *MockXrayClient) GetServiceGraph(arg0 context.Context, arg1 *xray.GetServiceGraphInput, arg2 ...func(*xray.Options)) (*xray.GetServiceGraphOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetServiceGraph")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceGraph", varargs...)
	ret0, _ := ret[0].(*xray.GetServiceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceGraph indicates an expected call of GetServiceGraph.
func (mr *MockXrayClientMockRecorder) GetServiceGraph(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraph", reflect.TypeOf((*MockXrayClient)(nil).GetServiceGraph), varargs...)
}

// GetTimeSeriesServiceStatistics mocks base method.
func (m *MockXrayClient) GetTimeSeriesServiceStatistics(arg0 context.Context, arg1 *xray.GetTimeSeriesServiceStatisticsInput, arg2 ...func(*xray.Options)) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTimeSeriesServiceStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeSeriesServiceStatistics", varargs...)
	ret0, _ := ret[0].(*xray.GetTimeSeriesServiceStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSeriesServiceStatistics indicates an expected call of GetTimeSeriesServiceStatistics.
func (mr *MockXrayClientMockRecorder) GetTimeSeriesServiceStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesServiceStatistics", reflect.TypeOf((*MockXrayClient)(nil).GetTimeSeriesServiceStatistics), varargs...)
}

// GetTraceGraph mocks base method.
func (m *MockXrayClient) GetTraceGraph(arg0 context.Context, arg1 *xray.GetTraceGraphInput, arg2 ...func(*xray.Options)) (*xray.GetTraceGraphOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTraceGraph")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceGraph", varargs...)
	ret0, _ := ret[0].(*xray.GetTraceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceGraph indicates an expected call of GetTraceGraph.
func (mr *MockXrayClientMockRecorder) GetTraceGraph(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraph", reflect.TypeOf((*MockXrayClient)(nil).GetTraceGraph), varargs...)
}

// GetTraceSummaries mocks base method.
func (m *MockXrayClient) GetTraceSummaries(arg0 context.Context, arg1 *xray.GetTraceSummariesInput, arg2 ...func(*xray.Options)) (*xray.GetTraceSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTraceSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceSummaries", varargs...)
	ret0, _ := ret[0].(*xray.GetTraceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSummaries indicates an expected call of GetTraceSummaries.
func (mr *MockXrayClientMockRecorder) GetTraceSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummaries", reflect.TypeOf((*MockXrayClient)(nil).GetTraceSummaries), varargs...)
}

// ListResourcePolicies mocks base method.
func (m *MockXrayClient) ListResourcePolicies(arg0 context.Context, arg1 *xray.ListResourcePoliciesInput, arg2 ...func(*xray.Options)) (*xray.ListResourcePoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourcePolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcePolicies", varargs...)
	ret0, _ := ret[0].(*xray.ListResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcePolicies indicates an expected call of ListResourcePolicies.
func (mr *MockXrayClientMockRecorder) ListResourcePolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcePolicies", reflect.TypeOf((*MockXrayClient)(nil).ListResourcePolicies), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockXrayClient) ListTagsForResource(arg0 context.Context, arg1 *xray.ListTagsForResourceInput, arg2 ...func(*xray.Options)) (*xray.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &xray.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*xray.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockXrayClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockXrayClient)(nil).ListTagsForResource), varargs...)
}
