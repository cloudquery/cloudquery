// Code generated by MockGen. DO NOT EDIT.
// Source: configservice.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	configservice "github.com/aws/aws-sdk-go-v2/service/configservice"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigserviceClient is a mock of ConfigserviceClient interface.
type MockConfigserviceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigserviceClientMockRecorder
}

// MockConfigserviceClientMockRecorder is the mock recorder for MockConfigserviceClient.
type MockConfigserviceClientMockRecorder struct {
	mock *MockConfigserviceClient
}

// NewMockConfigserviceClient creates a new mock instance.
func NewMockConfigserviceClient(ctrl *gomock.Controller) *MockConfigserviceClient {
	mock := &MockConfigserviceClient{ctrl: ctrl}
	mock.recorder = &MockConfigserviceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigserviceClient) EXPECT() *MockConfigserviceClientMockRecorder {
	return m.recorder
}

// BatchGetAggregateResourceConfig mocks base method.
func (m *MockConfigserviceClient) BatchGetAggregateResourceConfig(arg0 context.Context, arg1 *configservice.BatchGetAggregateResourceConfigInput, arg2 ...func(*configservice.Options)) (*configservice.BatchGetAggregateResourceConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetAggregateResourceConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetAggregateResourceConfig", varargs...)
	ret0, _ := ret[0].(*configservice.BatchGetAggregateResourceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAggregateResourceConfig indicates an expected call of BatchGetAggregateResourceConfig.
func (mr *MockConfigserviceClientMockRecorder) BatchGetAggregateResourceConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAggregateResourceConfig", reflect.TypeOf((*MockConfigserviceClient)(nil).BatchGetAggregateResourceConfig), varargs...)
}

// BatchGetResourceConfig mocks base method.
func (m *MockConfigserviceClient) BatchGetResourceConfig(arg0 context.Context, arg1 *configservice.BatchGetResourceConfigInput, arg2 ...func(*configservice.Options)) (*configservice.BatchGetResourceConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to BatchGetResourceConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetResourceConfig", varargs...)
	ret0, _ := ret[0].(*configservice.BatchGetResourceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetResourceConfig indicates an expected call of BatchGetResourceConfig.
func (mr *MockConfigserviceClientMockRecorder) BatchGetResourceConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetResourceConfig", reflect.TypeOf((*MockConfigserviceClient)(nil).BatchGetResourceConfig), varargs...)
}

// DescribeAggregateComplianceByConfigRules mocks base method.
func (m *MockConfigserviceClient) DescribeAggregateComplianceByConfigRules(arg0 context.Context, arg1 *configservice.DescribeAggregateComplianceByConfigRulesInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAggregateComplianceByConfigRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAggregateComplianceByConfigRules", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregateComplianceByConfigRules indicates an expected call of DescribeAggregateComplianceByConfigRules.
func (mr *MockConfigserviceClientMockRecorder) DescribeAggregateComplianceByConfigRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregateComplianceByConfigRules", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeAggregateComplianceByConfigRules), varargs...)
}

// DescribeAggregateComplianceByConformancePacks mocks base method.
func (m *MockConfigserviceClient) DescribeAggregateComplianceByConformancePacks(arg0 context.Context, arg1 *configservice.DescribeAggregateComplianceByConformancePacksInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeAggregateComplianceByConformancePacksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAggregateComplianceByConformancePacks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAggregateComplianceByConformancePacks", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeAggregateComplianceByConformancePacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregateComplianceByConformancePacks indicates an expected call of DescribeAggregateComplianceByConformancePacks.
func (mr *MockConfigserviceClientMockRecorder) DescribeAggregateComplianceByConformancePacks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregateComplianceByConformancePacks", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeAggregateComplianceByConformancePacks), varargs...)
}

// DescribeAggregationAuthorizations mocks base method.
func (m *MockConfigserviceClient) DescribeAggregationAuthorizations(arg0 context.Context, arg1 *configservice.DescribeAggregationAuthorizationsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeAggregationAuthorizationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAggregationAuthorizations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAggregationAuthorizations", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeAggregationAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAggregationAuthorizations indicates an expected call of DescribeAggregationAuthorizations.
func (mr *MockConfigserviceClientMockRecorder) DescribeAggregationAuthorizations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAggregationAuthorizations", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeAggregationAuthorizations), varargs...)
}

// DescribeComplianceByConfigRule mocks base method.
func (m *MockConfigserviceClient) DescribeComplianceByConfigRule(arg0 context.Context, arg1 *configservice.DescribeComplianceByConfigRuleInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeComplianceByConfigRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeComplianceByConfigRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeComplianceByConfigRule", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeComplianceByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComplianceByConfigRule indicates an expected call of DescribeComplianceByConfigRule.
func (mr *MockConfigserviceClientMockRecorder) DescribeComplianceByConfigRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByConfigRule", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeComplianceByConfigRule), varargs...)
}

// DescribeComplianceByResource mocks base method.
func (m *MockConfigserviceClient) DescribeComplianceByResource(arg0 context.Context, arg1 *configservice.DescribeComplianceByResourceInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeComplianceByResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeComplianceByResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeComplianceByResource", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeComplianceByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeComplianceByResource indicates an expected call of DescribeComplianceByResource.
func (mr *MockConfigserviceClientMockRecorder) DescribeComplianceByResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeComplianceByResource", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeComplianceByResource), varargs...)
}

// DescribeConfigRuleEvaluationStatus mocks base method.
func (m *MockConfigserviceClient) DescribeConfigRuleEvaluationStatus(arg0 context.Context, arg1 *configservice.DescribeConfigRuleEvaluationStatusInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigRuleEvaluationStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigRuleEvaluationStatus", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigRuleEvaluationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigRuleEvaluationStatus indicates an expected call of DescribeConfigRuleEvaluationStatus.
func (mr *MockConfigserviceClientMockRecorder) DescribeConfigRuleEvaluationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRuleEvaluationStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConfigRuleEvaluationStatus), varargs...)
}

// DescribeConfigRules mocks base method.
func (m *MockConfigserviceClient) DescribeConfigRules(arg0 context.Context, arg1 *configservice.DescribeConfigRulesInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConfigRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigRules", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigRules indicates an expected call of DescribeConfigRules.
func (mr *MockConfigserviceClientMockRecorder) DescribeConfigRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigRules", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConfigRules), varargs...)
}

// DescribeConfigurationAggregatorSourcesStatus mocks base method.
func (m *MockConfigserviceClient) DescribeConfigurationAggregatorSourcesStatus(arg0 context.Context, arg1 *configservice.DescribeConfigurationAggregatorSourcesStatusInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigurationAggregatorSourcesStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregatorSourcesStatus", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationAggregatorSourcesStatus indicates an expected call of DescribeConfigurationAggregatorSourcesStatus.
func (mr *MockConfigserviceClientMockRecorder) DescribeConfigurationAggregatorSourcesStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregatorSourcesStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConfigurationAggregatorSourcesStatus), varargs...)
}

// DescribeConfigurationAggregators mocks base method.
func (m *MockConfigserviceClient) DescribeConfigurationAggregators(arg0 context.Context, arg1 *configservice.DescribeConfigurationAggregatorsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConfigurationAggregatorsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigurationAggregators")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationAggregators", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationAggregatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationAggregators indicates an expected call of DescribeConfigurationAggregators.
func (mr *MockConfigserviceClientMockRecorder) DescribeConfigurationAggregators(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationAggregators", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConfigurationAggregators), varargs...)
}

// DescribeConfigurationRecorderStatus mocks base method.
func (m *MockConfigserviceClient) DescribeConfigurationRecorderStatus(arg0 context.Context, arg1 *configservice.DescribeConfigurationRecorderStatusInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigurationRecorderStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationRecorderStatus", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationRecorderStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRecorderStatus indicates an expected call of DescribeConfigurationRecorderStatus.
func (mr *MockConfigserviceClientMockRecorder) DescribeConfigurationRecorderStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecorderStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConfigurationRecorderStatus), varargs...)
}

// DescribeConfigurationRecorders mocks base method.
func (m *MockConfigserviceClient) DescribeConfigurationRecorders(arg0 context.Context, arg1 *configservice.DescribeConfigurationRecordersInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecordersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigurationRecorders")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationRecorders", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConfigurationRecordersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRecorders indicates an expected call of DescribeConfigurationRecorders.
func (mr *MockConfigserviceClientMockRecorder) DescribeConfigurationRecorders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRecorders", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConfigurationRecorders), varargs...)
}

// DescribeConformancePackCompliance mocks base method.
func (m *MockConfigserviceClient) DescribeConformancePackCompliance(arg0 context.Context, arg1 *configservice.DescribeConformancePackComplianceInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConformancePackComplianceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConformancePackCompliance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConformancePackCompliance", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConformancePackComplianceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConformancePackCompliance indicates an expected call of DescribeConformancePackCompliance.
func (mr *MockConfigserviceClientMockRecorder) DescribeConformancePackCompliance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConformancePackCompliance", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConformancePackCompliance), varargs...)
}

// DescribeConformancePackStatus mocks base method.
func (m *MockConfigserviceClient) DescribeConformancePackStatus(arg0 context.Context, arg1 *configservice.DescribeConformancePackStatusInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConformancePackStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConformancePackStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConformancePackStatus", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConformancePackStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConformancePackStatus indicates an expected call of DescribeConformancePackStatus.
func (mr *MockConfigserviceClientMockRecorder) DescribeConformancePackStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConformancePackStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConformancePackStatus), varargs...)
}

// DescribeConformancePacks mocks base method.
func (m *MockConfigserviceClient) DescribeConformancePacks(arg0 context.Context, arg1 *configservice.DescribeConformancePacksInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeConformancePacksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConformancePacks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConformancePacks", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeConformancePacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConformancePacks indicates an expected call of DescribeConformancePacks.
func (mr *MockConfigserviceClientMockRecorder) DescribeConformancePacks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConformancePacks", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeConformancePacks), varargs...)
}

// DescribeDeliveryChannelStatus mocks base method.
func (m *MockConfigserviceClient) DescribeDeliveryChannelStatus(arg0 context.Context, arg1 *configservice.DescribeDeliveryChannelStatusInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeDeliveryChannelStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDeliveryChannelStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeliveryChannelStatus", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeDeliveryChannelStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryChannelStatus indicates an expected call of DescribeDeliveryChannelStatus.
func (mr *MockConfigserviceClientMockRecorder) DescribeDeliveryChannelStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannelStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeDeliveryChannelStatus), varargs...)
}

// DescribeDeliveryChannels mocks base method.
func (m *MockConfigserviceClient) DescribeDeliveryChannels(arg0 context.Context, arg1 *configservice.DescribeDeliveryChannelsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeDeliveryChannelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDeliveryChannels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeliveryChannels", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeDeliveryChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryChannels indicates an expected call of DescribeDeliveryChannels.
func (mr *MockConfigserviceClientMockRecorder) DescribeDeliveryChannels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryChannels", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeDeliveryChannels), varargs...)
}

// DescribeOrganizationConfigRuleStatuses mocks base method.
func (m *MockConfigserviceClient) DescribeOrganizationConfigRuleStatuses(arg0 context.Context, arg1 *configservice.DescribeOrganizationConfigRuleStatusesInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrganizationConfigRuleStatuses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigRuleStatuses", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeOrganizationConfigRuleStatusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfigRuleStatuses indicates an expected call of DescribeOrganizationConfigRuleStatuses.
func (mr *MockConfigserviceClientMockRecorder) DescribeOrganizationConfigRuleStatuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigRuleStatuses", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeOrganizationConfigRuleStatuses), varargs...)
}

// DescribeOrganizationConfigRules mocks base method.
func (m *MockConfigserviceClient) DescribeOrganizationConfigRules(arg0 context.Context, arg1 *configservice.DescribeOrganizationConfigRulesInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeOrganizationConfigRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrganizationConfigRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigRules", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeOrganizationConfigRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfigRules indicates an expected call of DescribeOrganizationConfigRules.
func (mr *MockConfigserviceClientMockRecorder) DescribeOrganizationConfigRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigRules", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeOrganizationConfigRules), varargs...)
}

// DescribeOrganizationConformancePackStatuses mocks base method.
func (m *MockConfigserviceClient) DescribeOrganizationConformancePackStatuses(arg0 context.Context, arg1 *configservice.DescribeOrganizationConformancePackStatusesInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrganizationConformancePackStatuses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConformancePackStatuses", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeOrganizationConformancePackStatusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConformancePackStatuses indicates an expected call of DescribeOrganizationConformancePackStatuses.
func (mr *MockConfigserviceClientMockRecorder) DescribeOrganizationConformancePackStatuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConformancePackStatuses", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeOrganizationConformancePackStatuses), varargs...)
}

// DescribeOrganizationConformancePacks mocks base method.
func (m *MockConfigserviceClient) DescribeOrganizationConformancePacks(arg0 context.Context, arg1 *configservice.DescribeOrganizationConformancePacksInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeOrganizationConformancePacksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrganizationConformancePacks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConformancePacks", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeOrganizationConformancePacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConformancePacks indicates an expected call of DescribeOrganizationConformancePacks.
func (mr *MockConfigserviceClientMockRecorder) DescribeOrganizationConformancePacks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConformancePacks", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeOrganizationConformancePacks), varargs...)
}

// DescribePendingAggregationRequests mocks base method.
func (m *MockConfigserviceClient) DescribePendingAggregationRequests(arg0 context.Context, arg1 *configservice.DescribePendingAggregationRequestsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribePendingAggregationRequestsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePendingAggregationRequests")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingAggregationRequests", varargs...)
	ret0, _ := ret[0].(*configservice.DescribePendingAggregationRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingAggregationRequests indicates an expected call of DescribePendingAggregationRequests.
func (mr *MockConfigserviceClientMockRecorder) DescribePendingAggregationRequests(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingAggregationRequests", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribePendingAggregationRequests), varargs...)
}

// DescribeRemediationConfigurations mocks base method.
func (m *MockConfigserviceClient) DescribeRemediationConfigurations(arg0 context.Context, arg1 *configservice.DescribeRemediationConfigurationsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeRemediationConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRemediationConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRemediationConfigurations", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeRemediationConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRemediationConfigurations indicates an expected call of DescribeRemediationConfigurations.
func (mr *MockConfigserviceClientMockRecorder) DescribeRemediationConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRemediationConfigurations", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeRemediationConfigurations), varargs...)
}

// DescribeRemediationExceptions mocks base method.
func (m *MockConfigserviceClient) DescribeRemediationExceptions(arg0 context.Context, arg1 *configservice.DescribeRemediationExceptionsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeRemediationExceptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRemediationExceptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRemediationExceptions", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeRemediationExceptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRemediationExceptions indicates an expected call of DescribeRemediationExceptions.
func (mr *MockConfigserviceClientMockRecorder) DescribeRemediationExceptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRemediationExceptions", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeRemediationExceptions), varargs...)
}

// DescribeRemediationExecutionStatus mocks base method.
func (m *MockConfigserviceClient) DescribeRemediationExecutionStatus(arg0 context.Context, arg1 *configservice.DescribeRemediationExecutionStatusInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeRemediationExecutionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRemediationExecutionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRemediationExecutionStatus", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeRemediationExecutionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRemediationExecutionStatus indicates an expected call of DescribeRemediationExecutionStatus.
func (mr *MockConfigserviceClientMockRecorder) DescribeRemediationExecutionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRemediationExecutionStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeRemediationExecutionStatus), varargs...)
}

// DescribeRetentionConfigurations mocks base method.
func (m *MockConfigserviceClient) DescribeRetentionConfigurations(arg0 context.Context, arg1 *configservice.DescribeRetentionConfigurationsInput, arg2 ...func(*configservice.Options)) (*configservice.DescribeRetentionConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRetentionConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRetentionConfigurations", varargs...)
	ret0, _ := ret[0].(*configservice.DescribeRetentionConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRetentionConfigurations indicates an expected call of DescribeRetentionConfigurations.
func (mr *MockConfigserviceClientMockRecorder) DescribeRetentionConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRetentionConfigurations", reflect.TypeOf((*MockConfigserviceClient)(nil).DescribeRetentionConfigurations), varargs...)
}

// GetAggregateComplianceDetailsByConfigRule mocks base method.
func (m *MockConfigserviceClient) GetAggregateComplianceDetailsByConfigRule(arg0 context.Context, arg1 *configservice.GetAggregateComplianceDetailsByConfigRuleInput, arg2 ...func(*configservice.Options)) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAggregateComplianceDetailsByConfigRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateComplianceDetailsByConfigRule", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateComplianceDetailsByConfigRule indicates an expected call of GetAggregateComplianceDetailsByConfigRule.
func (mr *MockConfigserviceClientMockRecorder) GetAggregateComplianceDetailsByConfigRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateComplianceDetailsByConfigRule", reflect.TypeOf((*MockConfigserviceClient)(nil).GetAggregateComplianceDetailsByConfigRule), varargs...)
}

// GetAggregateConfigRuleComplianceSummary mocks base method.
func (m *MockConfigserviceClient) GetAggregateConfigRuleComplianceSummary(arg0 context.Context, arg1 *configservice.GetAggregateConfigRuleComplianceSummaryInput, arg2 ...func(*configservice.Options)) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAggregateConfigRuleComplianceSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateConfigRuleComplianceSummary", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateConfigRuleComplianceSummary indicates an expected call of GetAggregateConfigRuleComplianceSummary.
func (mr *MockConfigserviceClientMockRecorder) GetAggregateConfigRuleComplianceSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateConfigRuleComplianceSummary", reflect.TypeOf((*MockConfigserviceClient)(nil).GetAggregateConfigRuleComplianceSummary), varargs...)
}

// GetAggregateConformancePackComplianceSummary mocks base method.
func (m *MockConfigserviceClient) GetAggregateConformancePackComplianceSummary(arg0 context.Context, arg1 *configservice.GetAggregateConformancePackComplianceSummaryInput, arg2 ...func(*configservice.Options)) (*configservice.GetAggregateConformancePackComplianceSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAggregateConformancePackComplianceSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateConformancePackComplianceSummary", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateConformancePackComplianceSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateConformancePackComplianceSummary indicates an expected call of GetAggregateConformancePackComplianceSummary.
func (mr *MockConfigserviceClientMockRecorder) GetAggregateConformancePackComplianceSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateConformancePackComplianceSummary", reflect.TypeOf((*MockConfigserviceClient)(nil).GetAggregateConformancePackComplianceSummary), varargs...)
}

// GetAggregateDiscoveredResourceCounts mocks base method.
func (m *MockConfigserviceClient) GetAggregateDiscoveredResourceCounts(arg0 context.Context, arg1 *configservice.GetAggregateDiscoveredResourceCountsInput, arg2 ...func(*configservice.Options)) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAggregateDiscoveredResourceCounts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateDiscoveredResourceCounts", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateDiscoveredResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateDiscoveredResourceCounts indicates an expected call of GetAggregateDiscoveredResourceCounts.
func (mr *MockConfigserviceClientMockRecorder) GetAggregateDiscoveredResourceCounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateDiscoveredResourceCounts", reflect.TypeOf((*MockConfigserviceClient)(nil).GetAggregateDiscoveredResourceCounts), varargs...)
}

// GetAggregateResourceConfig mocks base method.
func (m *MockConfigserviceClient) GetAggregateResourceConfig(arg0 context.Context, arg1 *configservice.GetAggregateResourceConfigInput, arg2 ...func(*configservice.Options)) (*configservice.GetAggregateResourceConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAggregateResourceConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAggregateResourceConfig", varargs...)
	ret0, _ := ret[0].(*configservice.GetAggregateResourceConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateResourceConfig indicates an expected call of GetAggregateResourceConfig.
func (mr *MockConfigserviceClientMockRecorder) GetAggregateResourceConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateResourceConfig", reflect.TypeOf((*MockConfigserviceClient)(nil).GetAggregateResourceConfig), varargs...)
}

// GetComplianceDetailsByConfigRule mocks base method.
func (m *MockConfigserviceClient) GetComplianceDetailsByConfigRule(arg0 context.Context, arg1 *configservice.GetComplianceDetailsByConfigRuleInput, arg2 ...func(*configservice.Options)) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetComplianceDetailsByConfigRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceDetailsByConfigRule", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceDetailsByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailsByConfigRule indicates an expected call of GetComplianceDetailsByConfigRule.
func (mr *MockConfigserviceClientMockRecorder) GetComplianceDetailsByConfigRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByConfigRule", reflect.TypeOf((*MockConfigserviceClient)(nil).GetComplianceDetailsByConfigRule), varargs...)
}

// GetComplianceDetailsByResource mocks base method.
func (m *MockConfigserviceClient) GetComplianceDetailsByResource(arg0 context.Context, arg1 *configservice.GetComplianceDetailsByResourceInput, arg2 ...func(*configservice.Options)) (*configservice.GetComplianceDetailsByResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetComplianceDetailsByResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceDetailsByResource", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceDetailsByResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceDetailsByResource indicates an expected call of GetComplianceDetailsByResource.
func (mr *MockConfigserviceClientMockRecorder) GetComplianceDetailsByResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceDetailsByResource", reflect.TypeOf((*MockConfigserviceClient)(nil).GetComplianceDetailsByResource), varargs...)
}

// GetComplianceSummaryByConfigRule mocks base method.
func (m *MockConfigserviceClient) GetComplianceSummaryByConfigRule(arg0 context.Context, arg1 *configservice.GetComplianceSummaryByConfigRuleInput, arg2 ...func(*configservice.Options)) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetComplianceSummaryByConfigRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceSummaryByConfigRule", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceSummaryByConfigRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceSummaryByConfigRule indicates an expected call of GetComplianceSummaryByConfigRule.
func (mr *MockConfigserviceClientMockRecorder) GetComplianceSummaryByConfigRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByConfigRule", reflect.TypeOf((*MockConfigserviceClient)(nil).GetComplianceSummaryByConfigRule), varargs...)
}

// GetComplianceSummaryByResourceType mocks base method.
func (m *MockConfigserviceClient) GetComplianceSummaryByResourceType(arg0 context.Context, arg1 *configservice.GetComplianceSummaryByResourceTypeInput, arg2 ...func(*configservice.Options)) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetComplianceSummaryByResourceType")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComplianceSummaryByResourceType", varargs...)
	ret0, _ := ret[0].(*configservice.GetComplianceSummaryByResourceTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplianceSummaryByResourceType indicates an expected call of GetComplianceSummaryByResourceType.
func (mr *MockConfigserviceClientMockRecorder) GetComplianceSummaryByResourceType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplianceSummaryByResourceType", reflect.TypeOf((*MockConfigserviceClient)(nil).GetComplianceSummaryByResourceType), varargs...)
}

// GetConformancePackComplianceDetails mocks base method.
func (m *MockConfigserviceClient) GetConformancePackComplianceDetails(arg0 context.Context, arg1 *configservice.GetConformancePackComplianceDetailsInput, arg2 ...func(*configservice.Options)) (*configservice.GetConformancePackComplianceDetailsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConformancePackComplianceDetails")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConformancePackComplianceDetails", varargs...)
	ret0, _ := ret[0].(*configservice.GetConformancePackComplianceDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConformancePackComplianceDetails indicates an expected call of GetConformancePackComplianceDetails.
func (mr *MockConfigserviceClientMockRecorder) GetConformancePackComplianceDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConformancePackComplianceDetails", reflect.TypeOf((*MockConfigserviceClient)(nil).GetConformancePackComplianceDetails), varargs...)
}

// GetConformancePackComplianceSummary mocks base method.
func (m *MockConfigserviceClient) GetConformancePackComplianceSummary(arg0 context.Context, arg1 *configservice.GetConformancePackComplianceSummaryInput, arg2 ...func(*configservice.Options)) (*configservice.GetConformancePackComplianceSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetConformancePackComplianceSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConformancePackComplianceSummary", varargs...)
	ret0, _ := ret[0].(*configservice.GetConformancePackComplianceSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConformancePackComplianceSummary indicates an expected call of GetConformancePackComplianceSummary.
func (mr *MockConfigserviceClientMockRecorder) GetConformancePackComplianceSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConformancePackComplianceSummary", reflect.TypeOf((*MockConfigserviceClient)(nil).GetConformancePackComplianceSummary), varargs...)
}

// GetCustomRulePolicy mocks base method.
func (m *MockConfigserviceClient) GetCustomRulePolicy(arg0 context.Context, arg1 *configservice.GetCustomRulePolicyInput, arg2 ...func(*configservice.Options)) (*configservice.GetCustomRulePolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCustomRulePolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomRulePolicy", varargs...)
	ret0, _ := ret[0].(*configservice.GetCustomRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomRulePolicy indicates an expected call of GetCustomRulePolicy.
func (mr *MockConfigserviceClientMockRecorder) GetCustomRulePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomRulePolicy", reflect.TypeOf((*MockConfigserviceClient)(nil).GetCustomRulePolicy), varargs...)
}

// GetDiscoveredResourceCounts mocks base method.
func (m *MockConfigserviceClient) GetDiscoveredResourceCounts(arg0 context.Context, arg1 *configservice.GetDiscoveredResourceCountsInput, arg2 ...func(*configservice.Options)) (*configservice.GetDiscoveredResourceCountsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDiscoveredResourceCounts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiscoveredResourceCounts", varargs...)
	ret0, _ := ret[0].(*configservice.GetDiscoveredResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredResourceCounts indicates an expected call of GetDiscoveredResourceCounts.
func (mr *MockConfigserviceClientMockRecorder) GetDiscoveredResourceCounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredResourceCounts", reflect.TypeOf((*MockConfigserviceClient)(nil).GetDiscoveredResourceCounts), varargs...)
}

// GetOrganizationConfigRuleDetailedStatus mocks base method.
func (m *MockConfigserviceClient) GetOrganizationConfigRuleDetailedStatus(arg0 context.Context, arg1 *configservice.GetOrganizationConfigRuleDetailedStatusInput, arg2 ...func(*configservice.Options)) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOrganizationConfigRuleDetailedStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationConfigRuleDetailedStatus", varargs...)
	ret0, _ := ret[0].(*configservice.GetOrganizationConfigRuleDetailedStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationConfigRuleDetailedStatus indicates an expected call of GetOrganizationConfigRuleDetailedStatus.
func (mr *MockConfigserviceClientMockRecorder) GetOrganizationConfigRuleDetailedStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationConfigRuleDetailedStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).GetOrganizationConfigRuleDetailedStatus), varargs...)
}

// GetOrganizationConformancePackDetailedStatus mocks base method.
func (m *MockConfigserviceClient) GetOrganizationConformancePackDetailedStatus(arg0 context.Context, arg1 *configservice.GetOrganizationConformancePackDetailedStatusInput, arg2 ...func(*configservice.Options)) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOrganizationConformancePackDetailedStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationConformancePackDetailedStatus", varargs...)
	ret0, _ := ret[0].(*configservice.GetOrganizationConformancePackDetailedStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationConformancePackDetailedStatus indicates an expected call of GetOrganizationConformancePackDetailedStatus.
func (mr *MockConfigserviceClientMockRecorder) GetOrganizationConformancePackDetailedStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationConformancePackDetailedStatus", reflect.TypeOf((*MockConfigserviceClient)(nil).GetOrganizationConformancePackDetailedStatus), varargs...)
}

// GetOrganizationCustomRulePolicy mocks base method.
func (m *MockConfigserviceClient) GetOrganizationCustomRulePolicy(arg0 context.Context, arg1 *configservice.GetOrganizationCustomRulePolicyInput, arg2 ...func(*configservice.Options)) (*configservice.GetOrganizationCustomRulePolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOrganizationCustomRulePolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationCustomRulePolicy", varargs...)
	ret0, _ := ret[0].(*configservice.GetOrganizationCustomRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationCustomRulePolicy indicates an expected call of GetOrganizationCustomRulePolicy.
func (mr *MockConfigserviceClientMockRecorder) GetOrganizationCustomRulePolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationCustomRulePolicy", reflect.TypeOf((*MockConfigserviceClient)(nil).GetOrganizationCustomRulePolicy), varargs...)
}

// GetResourceConfigHistory mocks base method.
func (m *MockConfigserviceClient) GetResourceConfigHistory(arg0 context.Context, arg1 *configservice.GetResourceConfigHistoryInput, arg2 ...func(*configservice.Options)) (*configservice.GetResourceConfigHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResourceConfigHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceConfigHistory", varargs...)
	ret0, _ := ret[0].(*configservice.GetResourceConfigHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceConfigHistory indicates an expected call of GetResourceConfigHistory.
func (mr *MockConfigserviceClientMockRecorder) GetResourceConfigHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceConfigHistory", reflect.TypeOf((*MockConfigserviceClient)(nil).GetResourceConfigHistory), varargs...)
}

// GetResourceEvaluationSummary mocks base method.
func (m *MockConfigserviceClient) GetResourceEvaluationSummary(arg0 context.Context, arg1 *configservice.GetResourceEvaluationSummaryInput, arg2 ...func(*configservice.Options)) (*configservice.GetResourceEvaluationSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetResourceEvaluationSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceEvaluationSummary", varargs...)
	ret0, _ := ret[0].(*configservice.GetResourceEvaluationSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceEvaluationSummary indicates an expected call of GetResourceEvaluationSummary.
func (mr *MockConfigserviceClientMockRecorder) GetResourceEvaluationSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceEvaluationSummary", reflect.TypeOf((*MockConfigserviceClient)(nil).GetResourceEvaluationSummary), varargs...)
}

// GetStoredQuery mocks base method.
func (m *MockConfigserviceClient) GetStoredQuery(arg0 context.Context, arg1 *configservice.GetStoredQueryInput, arg2 ...func(*configservice.Options)) (*configservice.GetStoredQueryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStoredQuery")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStoredQuery", varargs...)
	ret0, _ := ret[0].(*configservice.GetStoredQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoredQuery indicates an expected call of GetStoredQuery.
func (mr *MockConfigserviceClientMockRecorder) GetStoredQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoredQuery", reflect.TypeOf((*MockConfigserviceClient)(nil).GetStoredQuery), varargs...)
}

// ListAggregateDiscoveredResources mocks base method.
func (m *MockConfigserviceClient) ListAggregateDiscoveredResources(arg0 context.Context, arg1 *configservice.ListAggregateDiscoveredResourcesInput, arg2 ...func(*configservice.Options)) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAggregateDiscoveredResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregateDiscoveredResources", varargs...)
	ret0, _ := ret[0].(*configservice.ListAggregateDiscoveredResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregateDiscoveredResources indicates an expected call of ListAggregateDiscoveredResources.
func (mr *MockConfigserviceClientMockRecorder) ListAggregateDiscoveredResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregateDiscoveredResources", reflect.TypeOf((*MockConfigserviceClient)(nil).ListAggregateDiscoveredResources), varargs...)
}

// ListConformancePackComplianceScores mocks base method.
func (m *MockConfigserviceClient) ListConformancePackComplianceScores(arg0 context.Context, arg1 *configservice.ListConformancePackComplianceScoresInput, arg2 ...func(*configservice.Options)) (*configservice.ListConformancePackComplianceScoresOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListConformancePackComplianceScores")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConformancePackComplianceScores", varargs...)
	ret0, _ := ret[0].(*configservice.ListConformancePackComplianceScoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConformancePackComplianceScores indicates an expected call of ListConformancePackComplianceScores.
func (mr *MockConfigserviceClientMockRecorder) ListConformancePackComplianceScores(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConformancePackComplianceScores", reflect.TypeOf((*MockConfigserviceClient)(nil).ListConformancePackComplianceScores), varargs...)
}

// ListDiscoveredResources mocks base method.
func (m *MockConfigserviceClient) ListDiscoveredResources(arg0 context.Context, arg1 *configservice.ListDiscoveredResourcesInput, arg2 ...func(*configservice.Options)) (*configservice.ListDiscoveredResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDiscoveredResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoveredResources", varargs...)
	ret0, _ := ret[0].(*configservice.ListDiscoveredResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoveredResources indicates an expected call of ListDiscoveredResources.
func (mr *MockConfigserviceClientMockRecorder) ListDiscoveredResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoveredResources", reflect.TypeOf((*MockConfigserviceClient)(nil).ListDiscoveredResources), varargs...)
}

// ListResourceEvaluations mocks base method.
func (m *MockConfigserviceClient) ListResourceEvaluations(arg0 context.Context, arg1 *configservice.ListResourceEvaluationsInput, arg2 ...func(*configservice.Options)) (*configservice.ListResourceEvaluationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourceEvaluations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceEvaluations", varargs...)
	ret0, _ := ret[0].(*configservice.ListResourceEvaluationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceEvaluations indicates an expected call of ListResourceEvaluations.
func (mr *MockConfigserviceClientMockRecorder) ListResourceEvaluations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceEvaluations", reflect.TypeOf((*MockConfigserviceClient)(nil).ListResourceEvaluations), varargs...)
}

// ListStoredQueries mocks base method.
func (m *MockConfigserviceClient) ListStoredQueries(arg0 context.Context, arg1 *configservice.ListStoredQueriesInput, arg2 ...func(*configservice.Options)) (*configservice.ListStoredQueriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStoredQueries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStoredQueries", varargs...)
	ret0, _ := ret[0].(*configservice.ListStoredQueriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoredQueries indicates an expected call of ListStoredQueries.
func (mr *MockConfigserviceClientMockRecorder) ListStoredQueries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoredQueries", reflect.TypeOf((*MockConfigserviceClient)(nil).ListStoredQueries), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockConfigserviceClient) ListTagsForResource(arg0 context.Context, arg1 *configservice.ListTagsForResourceInput, arg2 ...func(*configservice.Options)) (*configservice.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &configservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*configservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockConfigserviceClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockConfigserviceClient)(nil).ListTagsForResource), varargs...)
}
