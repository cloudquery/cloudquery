// Code generated by MockGen. DO NOT EDIT.
// Source: elasticloadbalancing.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	elasticloadbalancing "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	gomock "github.com/golang/mock/gomock"
)

// MockElasticloadbalancingClient is a mock of ElasticloadbalancingClient interface.
type MockElasticloadbalancingClient struct {
	ctrl     *gomock.Controller
	recorder *MockElasticloadbalancingClientMockRecorder
}

// MockElasticloadbalancingClientMockRecorder is the mock recorder for MockElasticloadbalancingClient.
type MockElasticloadbalancingClientMockRecorder struct {
	mock *MockElasticloadbalancingClient
}

// NewMockElasticloadbalancingClient creates a new mock instance.
func NewMockElasticloadbalancingClient(ctrl *gomock.Controller) *MockElasticloadbalancingClient {
	mock := &MockElasticloadbalancingClient{ctrl: ctrl}
	mock.recorder = &MockElasticloadbalancingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticloadbalancingClient) EXPECT() *MockElasticloadbalancingClientMockRecorder {
	return m.recorder
}

// DescribeAccountLimits mocks base method.
func (m *MockElasticloadbalancingClient) DescribeAccountLimits(arg0 context.Context, arg1 *elasticloadbalancing.DescribeAccountLimitsInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeAccountLimitsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountLimits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountLimits", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeAccountLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountLimits indicates an expected call of DescribeAccountLimits.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeAccountLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimits", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeAccountLimits), varargs...)
}

// DescribeInstanceHealth mocks base method.
func (m *MockElasticloadbalancingClient) DescribeInstanceHealth(arg0 context.Context, arg1 *elasticloadbalancing.DescribeInstanceHealthInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeInstanceHealthOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeInstanceHealth")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceHealth", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeInstanceHealthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceHealth indicates an expected call of DescribeInstanceHealth.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeInstanceHealth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceHealth", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeInstanceHealth), varargs...)
}

// DescribeLoadBalancerAttributes mocks base method.
func (m *MockElasticloadbalancingClient) DescribeLoadBalancerAttributes(arg0 context.Context, arg1 *elasticloadbalancing.DescribeLoadBalancerAttributesInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancerAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoadBalancerAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancerAttributes", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeLoadBalancerAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancerAttributes indicates an expected call of DescribeLoadBalancerAttributes.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeLoadBalancerAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancerAttributes", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeLoadBalancerAttributes), varargs...)
}

// DescribeLoadBalancerPolicies mocks base method.
func (m *MockElasticloadbalancingClient) DescribeLoadBalancerPolicies(arg0 context.Context, arg1 *elasticloadbalancing.DescribeLoadBalancerPoliciesInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancerPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoadBalancerPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancerPolicies", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeLoadBalancerPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancerPolicies indicates an expected call of DescribeLoadBalancerPolicies.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeLoadBalancerPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancerPolicies", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeLoadBalancerPolicies), varargs...)
}

// DescribeLoadBalancerPolicyTypes mocks base method.
func (m *MockElasticloadbalancingClient) DescribeLoadBalancerPolicyTypes(arg0 context.Context, arg1 *elasticloadbalancing.DescribeLoadBalancerPolicyTypesInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancerPolicyTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoadBalancerPolicyTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancerPolicyTypes", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeLoadBalancerPolicyTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancerPolicyTypes indicates an expected call of DescribeLoadBalancerPolicyTypes.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeLoadBalancerPolicyTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancerPolicyTypes", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeLoadBalancerPolicyTypes), varargs...)
}

// DescribeLoadBalancers mocks base method.
func (m *MockElasticloadbalancingClient) DescribeLoadBalancers(arg0 context.Context, arg1 *elasticloadbalancing.DescribeLoadBalancersInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeLoadBalancersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoadBalancers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancers", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancers indicates an expected call of DescribeLoadBalancers.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeLoadBalancers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancers", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeLoadBalancers), varargs...)
}

// DescribeTags mocks base method.
func (m *MockElasticloadbalancingClient) DescribeTags(arg0 context.Context, arg1 *elasticloadbalancing.DescribeTagsInput, arg2 ...func(*elasticloadbalancing.Options)) (*elasticloadbalancing.DescribeTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &elasticloadbalancing.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTags", varargs...)
	ret0, _ := ret[0].(*elasticloadbalancing.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockElasticloadbalancingClientMockRecorder) DescribeTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockElasticloadbalancingClient)(nil).DescribeTags), varargs...)
}
