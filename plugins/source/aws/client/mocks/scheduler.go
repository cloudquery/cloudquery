// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	scheduler "github.com/aws/aws-sdk-go-v2/service/scheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockSchedulerClient is a mock of SchedulerClient interface.
type MockSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerClientMockRecorder
}

// MockSchedulerClientMockRecorder is the mock recorder for MockSchedulerClient.
type MockSchedulerClientMockRecorder struct {
	mock *MockSchedulerClient
}

// NewMockSchedulerClient creates a new mock instance.
func NewMockSchedulerClient(ctrl *gomock.Controller) *MockSchedulerClient {
	mock := &MockSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerClient) EXPECT() *MockSchedulerClientMockRecorder {
	return m.recorder
}

// GetSchedule mocks base method.
func (m *MockSchedulerClient) GetSchedule(arg0 context.Context, arg1 *scheduler.GetScheduleInput, arg2 ...func(*scheduler.Options)) (*scheduler.GetScheduleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &scheduler.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSchedule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchedule", varargs...)
	ret0, _ := ret[0].(*scheduler.GetScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockSchedulerClientMockRecorder) GetSchedule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockSchedulerClient)(nil).GetSchedule), varargs...)
}

// GetScheduleGroup mocks base method.
func (m *MockSchedulerClient) GetScheduleGroup(arg0 context.Context, arg1 *scheduler.GetScheduleGroupInput, arg2 ...func(*scheduler.Options)) (*scheduler.GetScheduleGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &scheduler.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetScheduleGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScheduleGroup", varargs...)
	ret0, _ := ret[0].(*scheduler.GetScheduleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleGroup indicates an expected call of GetScheduleGroup.
func (mr *MockSchedulerClientMockRecorder) GetScheduleGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleGroup", reflect.TypeOf((*MockSchedulerClient)(nil).GetScheduleGroup), varargs...)
}

// ListScheduleGroups mocks base method.
func (m *MockSchedulerClient) ListScheduleGroups(arg0 context.Context, arg1 *scheduler.ListScheduleGroupsInput, arg2 ...func(*scheduler.Options)) (*scheduler.ListScheduleGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &scheduler.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListScheduleGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScheduleGroups", varargs...)
	ret0, _ := ret[0].(*scheduler.ListScheduleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduleGroups indicates an expected call of ListScheduleGroups.
func (mr *MockSchedulerClientMockRecorder) ListScheduleGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduleGroups", reflect.TypeOf((*MockSchedulerClient)(nil).ListScheduleGroups), varargs...)
}

// ListSchedules mocks base method.
func (m *MockSchedulerClient) ListSchedules(arg0 context.Context, arg1 *scheduler.ListSchedulesInput, arg2 ...func(*scheduler.Options)) (*scheduler.ListSchedulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &scheduler.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSchedules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchedules", varargs...)
	ret0, _ := ret[0].(*scheduler.ListSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedules indicates an expected call of ListSchedules.
func (mr *MockSchedulerClientMockRecorder) ListSchedules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedules", reflect.TypeOf((*MockSchedulerClient)(nil).ListSchedules), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSchedulerClient) ListTagsForResource(arg0 context.Context, arg1 *scheduler.ListTagsForResourceInput, arg2 ...func(*scheduler.Options)) (*scheduler.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &scheduler.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*scheduler.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSchedulerClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSchedulerClient)(nil).ListTagsForResource), varargs...)
}
