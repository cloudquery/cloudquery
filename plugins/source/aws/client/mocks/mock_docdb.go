// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/aws/client (interfaces: DocDBClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	docdb "github.com/aws/aws-sdk-go-v2/service/docdb"
	gomock "github.com/golang/mock/gomock"
)

// MockDocDBClient is a mock of DocDBClient interface.
type MockDocDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDocDBClientMockRecorder
}

// MockDocDBClientMockRecorder is the mock recorder for MockDocDBClient.
type MockDocDBClientMockRecorder struct {
	mock *MockDocDBClient
}

// NewMockDocDBClient creates a new mock instance.
func NewMockDocDBClient(ctrl *gomock.Controller) *MockDocDBClient {
	mock := &MockDocDBClient{ctrl: ctrl}
	mock.recorder = &MockDocDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocDBClient) EXPECT() *MockDocDBClientMockRecorder {
	return m.recorder
}

// DescribeCertificates mocks base method.
func (m *MockDocDBClient) DescribeCertificates(arg0 context.Context, arg1 *docdb.DescribeCertificatesInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificates", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificates indicates an expected call of DescribeCertificates.
func (mr *MockDocDBClientMockRecorder) DescribeCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificates", reflect.TypeOf((*MockDocDBClient)(nil).DescribeCertificates), varargs...)
}

// DescribeDBClusterParameterGroups mocks base method.
func (m *MockDocDBClient) DescribeDBClusterParameterGroups(arg0 context.Context, arg1 *docdb.DescribeDBClusterParameterGroupsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroups", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroups indicates an expected call of DescribeDBClusterParameterGroups.
func (mr *MockDocDBClientMockRecorder) DescribeDBClusterParameterGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroups", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBClusterParameterGroups), varargs...)
}

// DescribeDBClusterParameters mocks base method.
func (m *MockDocDBClient) DescribeDBClusterParameters(arg0 context.Context, arg1 *docdb.DescribeDBClusterParametersInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameters", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameters indicates an expected call of DescribeDBClusterParameters.
func (mr *MockDocDBClientMockRecorder) DescribeDBClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameters", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBClusterParameters), varargs...)
}

// DescribeDBClusterSnapshotAttributes mocks base method.
func (m *MockDocDBClient) DescribeDBClusterSnapshotAttributes(arg0 context.Context, arg1 *docdb.DescribeDBClusterSnapshotAttributesInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributes", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributes indicates an expected call of DescribeDBClusterSnapshotAttributes.
func (mr *MockDocDBClientMockRecorder) DescribeDBClusterSnapshotAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributes", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBClusterSnapshotAttributes), varargs...)
}

// DescribeDBClusterSnapshots mocks base method.
func (m *MockDocDBClient) DescribeDBClusterSnapshots(arg0 context.Context, arg1 *docdb.DescribeDBClusterSnapshotsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshots", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshots indicates an expected call of DescribeDBClusterSnapshots.
func (mr *MockDocDBClientMockRecorder) DescribeDBClusterSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshots", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBClusterSnapshots), varargs...)
}

// DescribeDBClusters mocks base method.
func (m *MockDocDBClient) DescribeDBClusters(arg0 context.Context, arg1 *docdb.DescribeDBClustersInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusters", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters.
func (mr *MockDocDBClientMockRecorder) DescribeDBClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBClusters), varargs...)
}

// DescribeDBEngineVersions mocks base method.
func (m *MockDocDBClient) DescribeDBEngineVersions(arg0 context.Context, arg1 *docdb.DescribeDBEngineVersionsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersions", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersions indicates an expected call of DescribeDBEngineVersions.
func (mr *MockDocDBClientMockRecorder) DescribeDBEngineVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersions", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBEngineVersions), varargs...)
}

// DescribeDBInstances mocks base method.
func (m *MockDocDBClient) DescribeDBInstances(arg0 context.Context, arg1 *docdb.DescribeDBInstancesInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstances", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances.
func (mr *MockDocDBClientMockRecorder) DescribeDBInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBInstances), varargs...)
}

// DescribeDBSubnetGroups mocks base method.
func (m *MockDocDBClient) DescribeDBSubnetGroups(arg0 context.Context, arg1 *docdb.DescribeDBSubnetGroupsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroups", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroups indicates an expected call of DescribeDBSubnetGroups.
func (mr *MockDocDBClientMockRecorder) DescribeDBSubnetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroups", reflect.TypeOf((*MockDocDBClient)(nil).DescribeDBSubnetGroups), varargs...)
}

// DescribeEngineDefaultClusterParameters mocks base method.
func (m *MockDocDBClient) DescribeEngineDefaultClusterParameters(arg0 context.Context, arg1 *docdb.DescribeEngineDefaultClusterParametersInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParameters", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParameters indicates an expected call of DescribeEngineDefaultClusterParameters.
func (mr *MockDocDBClientMockRecorder) DescribeEngineDefaultClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParameters", reflect.TypeOf((*MockDocDBClient)(nil).DescribeEngineDefaultClusterParameters), varargs...)
}

// DescribeEventCategories mocks base method.
func (m *MockDocDBClient) DescribeEventCategories(arg0 context.Context, arg1 *docdb.DescribeEventCategoriesInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategories", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories.
func (mr *MockDocDBClientMockRecorder) DescribeEventCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockDocDBClient)(nil).DescribeEventCategories), varargs...)
}

// DescribeEventSubscriptions mocks base method.
func (m *MockDocDBClient) DescribeEventSubscriptions(arg0 context.Context, arg1 *docdb.DescribeEventSubscriptionsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions.
func (mr *MockDocDBClientMockRecorder) DescribeEventSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockDocDBClient)(nil).DescribeEventSubscriptions), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockDocDBClient) DescribeEvents(arg0 context.Context, arg1 *docdb.DescribeEventsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEvents", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockDocDBClientMockRecorder) DescribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockDocDBClient)(nil).DescribeEvents), varargs...)
}

// DescribeGlobalClusters mocks base method.
func (m *MockDocDBClient) DescribeGlobalClusters(arg0 context.Context, arg1 *docdb.DescribeGlobalClustersInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeGlobalClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalClusters", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeGlobalClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalClusters indicates an expected call of DescribeGlobalClusters.
func (mr *MockDocDBClientMockRecorder) DescribeGlobalClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalClusters", reflect.TypeOf((*MockDocDBClient)(nil).DescribeGlobalClusters), varargs...)
}

// DescribeOrderableDBInstanceOptions mocks base method.
func (m *MockDocDBClient) DescribeOrderableDBInstanceOptions(arg0 context.Context, arg1 *docdb.DescribeOrderableDBInstanceOptionsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptions", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptions indicates an expected call of DescribeOrderableDBInstanceOptions.
func (mr *MockDocDBClientMockRecorder) DescribeOrderableDBInstanceOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptions", reflect.TypeOf((*MockDocDBClient)(nil).DescribeOrderableDBInstanceOptions), varargs...)
}

// DescribePendingMaintenanceActions mocks base method.
func (m *MockDocDBClient) DescribePendingMaintenanceActions(arg0 context.Context, arg1 *docdb.DescribePendingMaintenanceActionsInput, arg2 ...func(*docdb.Options)) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", varargs...)
	ret0, _ := ret[0].(*docdb.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions.
func (mr *MockDocDBClientMockRecorder) DescribePendingMaintenanceActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockDocDBClient)(nil).DescribePendingMaintenanceActions), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDocDBClient) ListTagsForResource(arg0 context.Context, arg1 *docdb.ListTagsForResourceInput, arg2 ...func(*docdb.Options)) (*docdb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*docdb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDocDBClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDocDBClient)(nil).ListTagsForResource), varargs...)
}
