// Code generated by MockGen. DO NOT EDIT.
// Source: databasemigrationservice.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	databasemigrationservice "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabasemigrationserviceClient is a mock of DatabasemigrationserviceClient interface.
type MockDatabasemigrationserviceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabasemigrationserviceClientMockRecorder
}

// MockDatabasemigrationserviceClientMockRecorder is the mock recorder for MockDatabasemigrationserviceClient.
type MockDatabasemigrationserviceClientMockRecorder struct {
	mock *MockDatabasemigrationserviceClient
}

// NewMockDatabasemigrationserviceClient creates a new mock instance.
func NewMockDatabasemigrationserviceClient(ctrl *gomock.Controller) *MockDatabasemigrationserviceClient {
	mock := &MockDatabasemigrationserviceClient{ctrl: ctrl}
	mock.recorder = &MockDatabasemigrationserviceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabasemigrationserviceClient) EXPECT() *MockDatabasemigrationserviceClientMockRecorder {
	return m.recorder
}

// DescribeAccountAttributes mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeAccountAttributes(arg0 context.Context, arg1 *databasemigrationservice.DescribeAccountAttributesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributes", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributes indicates an expected call of DescribeAccountAttributes.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeAccountAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributes", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeAccountAttributes), varargs...)
}

// DescribeApplicableIndividualAssessments mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeApplicableIndividualAssessments(arg0 context.Context, arg1 *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeApplicableIndividualAssessments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicableIndividualAssessments", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicableIndividualAssessments indicates an expected call of DescribeApplicableIndividualAssessments.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeApplicableIndividualAssessments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicableIndividualAssessments", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeApplicableIndividualAssessments), varargs...)
}

// DescribeCertificates mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeCertificates(arg0 context.Context, arg1 *databasemigrationservice.DescribeCertificatesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificates", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificates indicates an expected call of DescribeCertificates.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificates", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeCertificates), varargs...)
}

// DescribeConnections mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeConnections(arg0 context.Context, arg1 *databasemigrationservice.DescribeConnectionsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnections", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnections indicates an expected call of DescribeConnections.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnections", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeConnections), varargs...)
}

// DescribeEndpointSettings mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeEndpointSettings(arg0 context.Context, arg1 *databasemigrationservice.DescribeEndpointSettingsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointSettingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpointSettings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointSettings", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointSettings indicates an expected call of DescribeEndpointSettings.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeEndpointSettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointSettings", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeEndpointSettings), varargs...)
}

// DescribeEndpointTypes mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeEndpointTypes(arg0 context.Context, arg1 *databasemigrationservice.DescribeEndpointTypesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpointTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointTypes", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointTypes indicates an expected call of DescribeEndpointTypes.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeEndpointTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointTypes", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeEndpointTypes), varargs...)
}

// DescribeEndpoints mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeEndpoints(arg0 context.Context, arg1 *databasemigrationservice.DescribeEndpointsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpoints", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoints indicates an expected call of DescribeEndpoints.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoints", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeEndpoints), varargs...)
}

// DescribeEventCategories mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeEventCategories(arg0 context.Context, arg1 *databasemigrationservice.DescribeEventCategoriesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventCategories")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategories", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeEventCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeEventCategories), varargs...)
}

// DescribeEventSubscriptions mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeEventSubscriptions(arg0 context.Context, arg1 *databasemigrationservice.DescribeEventSubscriptionsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventSubscriptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeEventSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeEventSubscriptions), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeEvents(arg0 context.Context, arg1 *databasemigrationservice.DescribeEventsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEvents", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeEvents), varargs...)
}

// DescribeFleetAdvisorCollectors mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeFleetAdvisorCollectors(arg0 context.Context, arg1 *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetAdvisorCollectors")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetAdvisorCollectors", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetAdvisorCollectors indicates an expected call of DescribeFleetAdvisorCollectors.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeFleetAdvisorCollectors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetAdvisorCollectors", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeFleetAdvisorCollectors), varargs...)
}

// DescribeFleetAdvisorDatabases mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeFleetAdvisorDatabases(arg0 context.Context, arg1 *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetAdvisorDatabases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetAdvisorDatabases", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetAdvisorDatabases indicates an expected call of DescribeFleetAdvisorDatabases.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeFleetAdvisorDatabases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetAdvisorDatabases", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeFleetAdvisorDatabases), varargs...)
}

// DescribeFleetAdvisorLsaAnalysis mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeFleetAdvisorLsaAnalysis(arg0 context.Context, arg1 *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetAdvisorLsaAnalysis")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetAdvisorLsaAnalysis", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetAdvisorLsaAnalysis indicates an expected call of DescribeFleetAdvisorLsaAnalysis.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeFleetAdvisorLsaAnalysis(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetAdvisorLsaAnalysis", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeFleetAdvisorLsaAnalysis), varargs...)
}

// DescribeFleetAdvisorSchemaObjectSummary mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeFleetAdvisorSchemaObjectSummary(arg0 context.Context, arg1 *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetAdvisorSchemaObjectSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetAdvisorSchemaObjectSummary", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetAdvisorSchemaObjectSummary indicates an expected call of DescribeFleetAdvisorSchemaObjectSummary.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeFleetAdvisorSchemaObjectSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetAdvisorSchemaObjectSummary", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeFleetAdvisorSchemaObjectSummary), varargs...)
}

// DescribeFleetAdvisorSchemas mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeFleetAdvisorSchemas(arg0 context.Context, arg1 *databasemigrationservice.DescribeFleetAdvisorSchemasInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetAdvisorSchemas")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetAdvisorSchemas", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeFleetAdvisorSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetAdvisorSchemas indicates an expected call of DescribeFleetAdvisorSchemas.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeFleetAdvisorSchemas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetAdvisorSchemas", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeFleetAdvisorSchemas), varargs...)
}

// DescribeOrderableReplicationInstances mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeOrderableReplicationInstances(arg0 context.Context, arg1 *databasemigrationservice.DescribeOrderableReplicationInstancesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrderableReplicationInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableReplicationInstances", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableReplicationInstances indicates an expected call of DescribeOrderableReplicationInstances.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeOrderableReplicationInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableReplicationInstances", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeOrderableReplicationInstances), varargs...)
}

// DescribePendingMaintenanceActions mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribePendingMaintenanceActions(arg0 context.Context, arg1 *databasemigrationservice.DescribePendingMaintenanceActionsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePendingMaintenanceActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribePendingMaintenanceActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribePendingMaintenanceActions), varargs...)
}

// DescribeRefreshSchemasStatus mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeRefreshSchemasStatus(arg0 context.Context, arg1 *databasemigrationservice.DescribeRefreshSchemasStatusInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRefreshSchemasStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRefreshSchemasStatus", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRefreshSchemasStatus indicates an expected call of DescribeRefreshSchemasStatus.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeRefreshSchemasStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRefreshSchemasStatus", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeRefreshSchemasStatus), varargs...)
}

// DescribeReplicationInstanceTaskLogs mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationInstanceTaskLogs(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationInstanceTaskLogs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationInstanceTaskLogs", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationInstanceTaskLogs indicates an expected call of DescribeReplicationInstanceTaskLogs.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationInstanceTaskLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstanceTaskLogs", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationInstanceTaskLogs), varargs...)
}

// DescribeReplicationInstances mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationInstances(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationInstancesInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationInstances", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationInstances indicates an expected call of DescribeReplicationInstances.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationInstances", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationInstances), varargs...)
}

// DescribeReplicationSubnetGroups mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationSubnetGroups(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationSubnetGroupsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationSubnetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationSubnetGroups", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationSubnetGroups indicates an expected call of DescribeReplicationSubnetGroups.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationSubnetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationSubnetGroups", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationSubnetGroups), varargs...)
}

// DescribeReplicationTaskAssessmentResults mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationTaskAssessmentResults(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationTaskAssessmentResults")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentResults", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTaskAssessmentResults indicates an expected call of DescribeReplicationTaskAssessmentResults.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationTaskAssessmentResults(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentResults", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationTaskAssessmentResults), varargs...)
}

// DescribeReplicationTaskAssessmentRuns mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationTaskAssessmentRuns(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationTaskAssessmentRuns")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTaskAssessmentRuns", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTaskAssessmentRuns indicates an expected call of DescribeReplicationTaskAssessmentRuns.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationTaskAssessmentRuns(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskAssessmentRuns", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationTaskAssessmentRuns), varargs...)
}

// DescribeReplicationTaskIndividualAssessments mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationTaskIndividualAssessments(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationTaskIndividualAssessments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTaskIndividualAssessments", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTaskIndividualAssessments indicates an expected call of DescribeReplicationTaskIndividualAssessments.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationTaskIndividualAssessments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTaskIndividualAssessments", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationTaskIndividualAssessments), varargs...)
}

// DescribeReplicationTasks mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeReplicationTasks(arg0 context.Context, arg1 *databasemigrationservice.DescribeReplicationTasksInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplicationTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationTasks", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeReplicationTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationTasks indicates an expected call of DescribeReplicationTasks.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeReplicationTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationTasks", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeReplicationTasks), varargs...)
}

// DescribeSchemas mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeSchemas(arg0 context.Context, arg1 *databasemigrationservice.DescribeSchemasInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeSchemasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSchemas")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSchemas", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchemas indicates an expected call of DescribeSchemas.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeSchemas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemas", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeSchemas), varargs...)
}

// DescribeTableStatistics mocks base method.
func (m *MockDatabasemigrationserviceClient) DescribeTableStatistics(arg0 context.Context, arg1 *databasemigrationservice.DescribeTableStatisticsInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTableStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableStatistics", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.DescribeTableStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableStatistics indicates an expected call of DescribeTableStatistics.
func (mr *MockDatabasemigrationserviceClientMockRecorder) DescribeTableStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableStatistics", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).DescribeTableStatistics), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDatabasemigrationserviceClient) ListTagsForResource(arg0 context.Context, arg1 *databasemigrationservice.ListTagsForResourceInput, arg2 ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &databasemigrationservice.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*databasemigrationservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDatabasemigrationserviceClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDatabasemigrationserviceClient)(nil).ListTagsForResource), varargs...)
}
