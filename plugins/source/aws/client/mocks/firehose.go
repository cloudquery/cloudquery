// Code generated by MockGen. DO NOT EDIT.
// Source: firehose.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	firehose "github.com/aws/aws-sdk-go-v2/service/firehose"
	gomock "github.com/golang/mock/gomock"
)

// MockFirehoseClient is a mock of FirehoseClient interface.
type MockFirehoseClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirehoseClientMockRecorder
}

// MockFirehoseClientMockRecorder is the mock recorder for MockFirehoseClient.
type MockFirehoseClientMockRecorder struct {
	mock *MockFirehoseClient
}

// NewMockFirehoseClient creates a new mock instance.
func NewMockFirehoseClient(ctrl *gomock.Controller) *MockFirehoseClient {
	mock := &MockFirehoseClient{ctrl: ctrl}
	mock.recorder = &MockFirehoseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirehoseClient) EXPECT() *MockFirehoseClientMockRecorder {
	return m.recorder
}

// DescribeDeliveryStream mocks base method.
func (m *MockFirehoseClient) DescribeDeliveryStream(arg0 context.Context, arg1 *firehose.DescribeDeliveryStreamInput, arg2 ...func(*firehose.Options)) (*firehose.DescribeDeliveryStreamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &firehose.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDeliveryStream")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeliveryStream", varargs...)
	ret0, _ := ret[0].(*firehose.DescribeDeliveryStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeliveryStream indicates an expected call of DescribeDeliveryStream.
func (mr *MockFirehoseClientMockRecorder) DescribeDeliveryStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeliveryStream", reflect.TypeOf((*MockFirehoseClient)(nil).DescribeDeliveryStream), varargs...)
}

// ListDeliveryStreams mocks base method.
func (m *MockFirehoseClient) ListDeliveryStreams(arg0 context.Context, arg1 *firehose.ListDeliveryStreamsInput, arg2 ...func(*firehose.Options)) (*firehose.ListDeliveryStreamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &firehose.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDeliveryStreams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliveryStreams", varargs...)
	ret0, _ := ret[0].(*firehose.ListDeliveryStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliveryStreams indicates an expected call of ListDeliveryStreams.
func (mr *MockFirehoseClientMockRecorder) ListDeliveryStreams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliveryStreams", reflect.TypeOf((*MockFirehoseClient)(nil).ListDeliveryStreams), varargs...)
}

// ListTagsForDeliveryStream mocks base method.
func (m *MockFirehoseClient) ListTagsForDeliveryStream(arg0 context.Context, arg1 *firehose.ListTagsForDeliveryStreamInput, arg2 ...func(*firehose.Options)) (*firehose.ListTagsForDeliveryStreamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &firehose.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForDeliveryStream")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForDeliveryStream", varargs...)
	ret0, _ := ret[0].(*firehose.ListTagsForDeliveryStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForDeliveryStream indicates an expected call of ListTagsForDeliveryStream.
func (mr *MockFirehoseClientMockRecorder) ListTagsForDeliveryStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForDeliveryStream", reflect.TypeOf((*MockFirehoseClient)(nil).ListTagsForDeliveryStream), varargs...)
}
