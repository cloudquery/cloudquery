// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/aws/client (interfaces: EventBridgeClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	eventbridge "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	gomock "github.com/golang/mock/gomock"
)

// MockEventBridgeClient is a mock of EventBridgeClient interface.
type MockEventBridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventBridgeClientMockRecorder
}

// MockEventBridgeClientMockRecorder is the mock recorder for MockEventBridgeClient.
type MockEventBridgeClientMockRecorder struct {
	mock *MockEventBridgeClient
}

// NewMockEventBridgeClient creates a new mock instance.
func NewMockEventBridgeClient(ctrl *gomock.Controller) *MockEventBridgeClient {
	mock := &MockEventBridgeClient{ctrl: ctrl}
	mock.recorder = &MockEventBridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBridgeClient) EXPECT() *MockEventBridgeClientMockRecorder {
	return m.recorder
}

// ListApiDestinations mocks base method.
func (m *MockEventBridgeClient) ListApiDestinations(arg0 context.Context, arg1 *eventbridge.ListApiDestinationsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListApiDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApiDestinations", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListApiDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiDestinations indicates an expected call of ListApiDestinations.
func (mr *MockEventBridgeClientMockRecorder) ListApiDestinations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiDestinations", reflect.TypeOf((*MockEventBridgeClient)(nil).ListApiDestinations), varargs...)
}

// ListArchives mocks base method.
func (m *MockEventBridgeClient) ListArchives(arg0 context.Context, arg1 *eventbridge.ListArchivesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListArchivesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchives", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListArchivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchives indicates an expected call of ListArchives.
func (mr *MockEventBridgeClientMockRecorder) ListArchives(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchives", reflect.TypeOf((*MockEventBridgeClient)(nil).ListArchives), varargs...)
}

// ListConnections mocks base method.
func (m *MockEventBridgeClient) ListConnections(arg0 context.Context, arg1 *eventbridge.ListConnectionsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnections", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections.
func (mr *MockEventBridgeClientMockRecorder) ListConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockEventBridgeClient)(nil).ListConnections), varargs...)
}

// ListEndpoints mocks base method.
func (m *MockEventBridgeClient) ListEndpoints(arg0 context.Context, arg1 *eventbridge.ListEndpointsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpoints", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints.
func (mr *MockEventBridgeClientMockRecorder) ListEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockEventBridgeClient)(nil).ListEndpoints), varargs...)
}

// ListEventBuses mocks base method.
func (m *MockEventBridgeClient) ListEventBuses(arg0 context.Context, arg1 *eventbridge.ListEventBusesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListEventBusesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventBuses", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListEventBusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventBuses indicates an expected call of ListEventBuses.
func (mr *MockEventBridgeClientMockRecorder) ListEventBuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventBuses", reflect.TypeOf((*MockEventBridgeClient)(nil).ListEventBuses), varargs...)
}

// ListEventSources mocks base method.
func (m *MockEventBridgeClient) ListEventSources(arg0 context.Context, arg1 *eventbridge.ListEventSourcesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListEventSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSources", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSources indicates an expected call of ListEventSources.
func (mr *MockEventBridgeClientMockRecorder) ListEventSources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSources", reflect.TypeOf((*MockEventBridgeClient)(nil).ListEventSources), varargs...)
}

// ListReplays mocks base method.
func (m *MockEventBridgeClient) ListReplays(arg0 context.Context, arg1 *eventbridge.ListReplaysInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListReplaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReplays", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListReplaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplays indicates an expected call of ListReplays.
func (mr *MockEventBridgeClientMockRecorder) ListReplays(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplays", reflect.TypeOf((*MockEventBridgeClient)(nil).ListReplays), varargs...)
}

// ListRules mocks base method.
func (m *MockEventBridgeClient) ListRules(arg0 context.Context, arg1 *eventbridge.ListRulesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRules", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockEventBridgeClientMockRecorder) ListRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockEventBridgeClient)(nil).ListRules), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockEventBridgeClient) ListTagsForResource(arg0 context.Context, arg1 *eventbridge.ListTagsForResourceInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEventBridgeClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEventBridgeClient)(nil).ListTagsForResource), varargs...)
}
