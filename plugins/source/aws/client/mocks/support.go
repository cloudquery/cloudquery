// Code generated by MockGen. DO NOT EDIT.
// Source: support.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	support "github.com/aws/aws-sdk-go-v2/service/support"
	gomock "github.com/golang/mock/gomock"
)

// MockSupportClient is a mock of SupportClient interface.
type MockSupportClient struct {
	ctrl     *gomock.Controller
	recorder *MockSupportClientMockRecorder
}

// MockSupportClientMockRecorder is the mock recorder for MockSupportClient.
type MockSupportClientMockRecorder struct {
	mock *MockSupportClient
}

// NewMockSupportClient creates a new mock instance.
func NewMockSupportClient(ctrl *gomock.Controller) *MockSupportClient {
	mock := &MockSupportClient{ctrl: ctrl}
	mock.recorder = &MockSupportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupportClient) EXPECT() *MockSupportClientMockRecorder {
	return m.recorder
}

// DescribeAttachment mocks base method.
func (m *MockSupportClient) DescribeAttachment(arg0 context.Context, arg1 *support.DescribeAttachmentInput, arg2 ...func(*support.Options)) (*support.DescribeAttachmentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAttachment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAttachment", varargs...)
	ret0, _ := ret[0].(*support.DescribeAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAttachment indicates an expected call of DescribeAttachment.
func (mr *MockSupportClientMockRecorder) DescribeAttachment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAttachment", reflect.TypeOf((*MockSupportClient)(nil).DescribeAttachment), varargs...)
}

// DescribeCases mocks base method.
func (m *MockSupportClient) DescribeCases(arg0 context.Context, arg1 *support.DescribeCasesInput, arg2 ...func(*support.Options)) (*support.DescribeCasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCases", varargs...)
	ret0, _ := ret[0].(*support.DescribeCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCases indicates an expected call of DescribeCases.
func (mr *MockSupportClientMockRecorder) DescribeCases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCases", reflect.TypeOf((*MockSupportClient)(nil).DescribeCases), varargs...)
}

// DescribeCommunications mocks base method.
func (m *MockSupportClient) DescribeCommunications(arg0 context.Context, arg1 *support.DescribeCommunicationsInput, arg2 ...func(*support.Options)) (*support.DescribeCommunicationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCommunications")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCommunications", varargs...)
	ret0, _ := ret[0].(*support.DescribeCommunicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCommunications indicates an expected call of DescribeCommunications.
func (mr *MockSupportClientMockRecorder) DescribeCommunications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCommunications", reflect.TypeOf((*MockSupportClient)(nil).DescribeCommunications), varargs...)
}

// DescribeCreateCaseOptions mocks base method.
func (m *MockSupportClient) DescribeCreateCaseOptions(arg0 context.Context, arg1 *support.DescribeCreateCaseOptionsInput, arg2 ...func(*support.Options)) (*support.DescribeCreateCaseOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCreateCaseOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCreateCaseOptions", varargs...)
	ret0, _ := ret[0].(*support.DescribeCreateCaseOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCreateCaseOptions indicates an expected call of DescribeCreateCaseOptions.
func (mr *MockSupportClientMockRecorder) DescribeCreateCaseOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCreateCaseOptions", reflect.TypeOf((*MockSupportClient)(nil).DescribeCreateCaseOptions), varargs...)
}

// DescribeServices mocks base method.
func (m *MockSupportClient) DescribeServices(arg0 context.Context, arg1 *support.DescribeServicesInput, arg2 ...func(*support.Options)) (*support.DescribeServicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeServices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServices", varargs...)
	ret0, _ := ret[0].(*support.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServices indicates an expected call of DescribeServices.
func (mr *MockSupportClientMockRecorder) DescribeServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServices", reflect.TypeOf((*MockSupportClient)(nil).DescribeServices), varargs...)
}

// DescribeSeverityLevels mocks base method.
func (m *MockSupportClient) DescribeSeverityLevels(arg0 context.Context, arg1 *support.DescribeSeverityLevelsInput, arg2 ...func(*support.Options)) (*support.DescribeSeverityLevelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSeverityLevels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSeverityLevels", varargs...)
	ret0, _ := ret[0].(*support.DescribeSeverityLevelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSeverityLevels indicates an expected call of DescribeSeverityLevels.
func (mr *MockSupportClientMockRecorder) DescribeSeverityLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSeverityLevels", reflect.TypeOf((*MockSupportClient)(nil).DescribeSeverityLevels), varargs...)
}

// DescribeSupportedLanguages mocks base method.
func (m *MockSupportClient) DescribeSupportedLanguages(arg0 context.Context, arg1 *support.DescribeSupportedLanguagesInput, arg2 ...func(*support.Options)) (*support.DescribeSupportedLanguagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSupportedLanguages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSupportedLanguages", varargs...)
	ret0, _ := ret[0].(*support.DescribeSupportedLanguagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSupportedLanguages indicates an expected call of DescribeSupportedLanguages.
func (mr *MockSupportClientMockRecorder) DescribeSupportedLanguages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSupportedLanguages", reflect.TypeOf((*MockSupportClient)(nil).DescribeSupportedLanguages), varargs...)
}

// DescribeTrustedAdvisorCheckRefreshStatuses mocks base method.
func (m *MockSupportClient) DescribeTrustedAdvisorCheckRefreshStatuses(arg0 context.Context, arg1 *support.DescribeTrustedAdvisorCheckRefreshStatusesInput, arg2 ...func(*support.Options)) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrustedAdvisorCheckRefreshStatuses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustedAdvisorCheckRefreshStatuses", varargs...)
	ret0, _ := ret[0].(*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedAdvisorCheckRefreshStatuses indicates an expected call of DescribeTrustedAdvisorCheckRefreshStatuses.
func (mr *MockSupportClientMockRecorder) DescribeTrustedAdvisorCheckRefreshStatuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedAdvisorCheckRefreshStatuses", reflect.TypeOf((*MockSupportClient)(nil).DescribeTrustedAdvisorCheckRefreshStatuses), varargs...)
}

// DescribeTrustedAdvisorCheckResult mocks base method.
func (m *MockSupportClient) DescribeTrustedAdvisorCheckResult(arg0 context.Context, arg1 *support.DescribeTrustedAdvisorCheckResultInput, arg2 ...func(*support.Options)) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrustedAdvisorCheckResult")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustedAdvisorCheckResult", varargs...)
	ret0, _ := ret[0].(*support.DescribeTrustedAdvisorCheckResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedAdvisorCheckResult indicates an expected call of DescribeTrustedAdvisorCheckResult.
func (mr *MockSupportClientMockRecorder) DescribeTrustedAdvisorCheckResult(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedAdvisorCheckResult", reflect.TypeOf((*MockSupportClient)(nil).DescribeTrustedAdvisorCheckResult), varargs...)
}

// DescribeTrustedAdvisorCheckSummaries mocks base method.
func (m *MockSupportClient) DescribeTrustedAdvisorCheckSummaries(arg0 context.Context, arg1 *support.DescribeTrustedAdvisorCheckSummariesInput, arg2 ...func(*support.Options)) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrustedAdvisorCheckSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustedAdvisorCheckSummaries", varargs...)
	ret0, _ := ret[0].(*support.DescribeTrustedAdvisorCheckSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedAdvisorCheckSummaries indicates an expected call of DescribeTrustedAdvisorCheckSummaries.
func (mr *MockSupportClientMockRecorder) DescribeTrustedAdvisorCheckSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedAdvisorCheckSummaries", reflect.TypeOf((*MockSupportClient)(nil).DescribeTrustedAdvisorCheckSummaries), varargs...)
}

// DescribeTrustedAdvisorChecks mocks base method.
func (m *MockSupportClient) DescribeTrustedAdvisorChecks(arg0 context.Context, arg1 *support.DescribeTrustedAdvisorChecksInput, arg2 ...func(*support.Options)) (*support.DescribeTrustedAdvisorChecksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &support.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTrustedAdvisorChecks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustedAdvisorChecks", varargs...)
	ret0, _ := ret[0].(*support.DescribeTrustedAdvisorChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustedAdvisorChecks indicates an expected call of DescribeTrustedAdvisorChecks.
func (mr *MockSupportClientMockRecorder) DescribeTrustedAdvisorChecks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustedAdvisorChecks", reflect.TypeOf((*MockSupportClient)(nil).DescribeTrustedAdvisorChecks), varargs...)
}
