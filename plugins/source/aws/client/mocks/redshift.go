// Code generated by MockGen. DO NOT EDIT.
// Source: redshift.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	redshift "github.com/aws/aws-sdk-go-v2/service/redshift"
	gomock "github.com/golang/mock/gomock"
)

// MockRedshiftClient is a mock of RedshiftClient interface.
type MockRedshiftClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedshiftClientMockRecorder
}

// MockRedshiftClientMockRecorder is the mock recorder for MockRedshiftClient.
type MockRedshiftClientMockRecorder struct {
	mock *MockRedshiftClient
}

// NewMockRedshiftClient creates a new mock instance.
func NewMockRedshiftClient(ctrl *gomock.Controller) *MockRedshiftClient {
	mock := &MockRedshiftClient{ctrl: ctrl}
	mock.recorder = &MockRedshiftClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedshiftClient) EXPECT() *MockRedshiftClientMockRecorder {
	return m.recorder
}

// DescribeAccountAttributes mocks base method.
func (m *MockRedshiftClient) DescribeAccountAttributes(arg0 context.Context, arg1 *redshift.DescribeAccountAttributesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeAccountAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributes", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributes indicates an expected call of DescribeAccountAttributes.
func (mr *MockRedshiftClientMockRecorder) DescribeAccountAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributes", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeAccountAttributes), varargs...)
}

// DescribeAuthenticationProfiles mocks base method.
func (m *MockRedshiftClient) DescribeAuthenticationProfiles(arg0 context.Context, arg1 *redshift.DescribeAuthenticationProfilesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeAuthenticationProfilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAuthenticationProfiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuthenticationProfiles", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeAuthenticationProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuthenticationProfiles indicates an expected call of DescribeAuthenticationProfiles.
func (mr *MockRedshiftClientMockRecorder) DescribeAuthenticationProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuthenticationProfiles", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeAuthenticationProfiles), varargs...)
}

// DescribeClusterDbRevisions mocks base method.
func (m *MockRedshiftClient) DescribeClusterDbRevisions(arg0 context.Context, arg1 *redshift.DescribeClusterDbRevisionsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterDbRevisionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterDbRevisions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterDbRevisions", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterDbRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterDbRevisions indicates an expected call of DescribeClusterDbRevisions.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterDbRevisions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterDbRevisions", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterDbRevisions), varargs...)
}

// DescribeClusterParameterGroups mocks base method.
func (m *MockRedshiftClient) DescribeClusterParameterGroups(arg0 context.Context, arg1 *redshift.DescribeClusterParameterGroupsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterParameterGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterParameterGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterParameterGroups", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterParameterGroups indicates an expected call of DescribeClusterParameterGroups.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterParameterGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterParameterGroups", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterParameterGroups), varargs...)
}

// DescribeClusterParameters mocks base method.
func (m *MockRedshiftClient) DescribeClusterParameters(arg0 context.Context, arg1 *redshift.DescribeClusterParametersInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterParameters", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterParameters indicates an expected call of DescribeClusterParameters.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterParameters", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterParameters), varargs...)
}

// DescribeClusterSecurityGroups mocks base method.
func (m *MockRedshiftClient) DescribeClusterSecurityGroups(arg0 context.Context, arg1 *redshift.DescribeClusterSecurityGroupsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterSecurityGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterSecurityGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterSecurityGroups", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterSecurityGroups indicates an expected call of DescribeClusterSecurityGroups.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterSecurityGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterSecurityGroups", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterSecurityGroups), varargs...)
}

// DescribeClusterSnapshots mocks base method.
func (m *MockRedshiftClient) DescribeClusterSnapshots(arg0 context.Context, arg1 *redshift.DescribeClusterSnapshotsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterSnapshots", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterSnapshots indicates an expected call of DescribeClusterSnapshots.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterSnapshots", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterSnapshots), varargs...)
}

// DescribeClusterSubnetGroups mocks base method.
func (m *MockRedshiftClient) DescribeClusterSubnetGroups(arg0 context.Context, arg1 *redshift.DescribeClusterSubnetGroupsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterSubnetGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterSubnetGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterSubnetGroups", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterSubnetGroups indicates an expected call of DescribeClusterSubnetGroups.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterSubnetGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterSubnetGroups", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterSubnetGroups), varargs...)
}

// DescribeClusterTracks mocks base method.
func (m *MockRedshiftClient) DescribeClusterTracks(arg0 context.Context, arg1 *redshift.DescribeClusterTracksInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterTracksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterTracks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterTracks", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterTracksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterTracks indicates an expected call of DescribeClusterTracks.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterTracks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterTracks", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterTracks), varargs...)
}

// DescribeClusterVersions mocks base method.
func (m *MockRedshiftClient) DescribeClusterVersions(arg0 context.Context, arg1 *redshift.DescribeClusterVersionsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClusterVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusterVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterVersions", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClusterVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterVersions indicates an expected call of DescribeClusterVersions.
func (mr *MockRedshiftClientMockRecorder) DescribeClusterVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterVersions", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusterVersions), varargs...)
}

// DescribeClusters mocks base method.
func (m *MockRedshiftClient) DescribeClusters(arg0 context.Context, arg1 *redshift.DescribeClustersInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeClustersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeClusters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusters", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusters indicates an expected call of DescribeClusters.
func (mr *MockRedshiftClientMockRecorder) DescribeClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusters", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeClusters), varargs...)
}

// DescribeCustomDomainAssociations mocks base method.
func (m *MockRedshiftClient) DescribeCustomDomainAssociations(arg0 context.Context, arg1 *redshift.DescribeCustomDomainAssociationsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeCustomDomainAssociationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCustomDomainAssociations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomDomainAssociations", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeCustomDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomDomainAssociations indicates an expected call of DescribeCustomDomainAssociations.
func (mr *MockRedshiftClientMockRecorder) DescribeCustomDomainAssociations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomDomainAssociations", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeCustomDomainAssociations), varargs...)
}

// DescribeDataShares mocks base method.
func (m *MockRedshiftClient) DescribeDataShares(arg0 context.Context, arg1 *redshift.DescribeDataSharesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeDataSharesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDataShares")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataShares", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeDataSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataShares indicates an expected call of DescribeDataShares.
func (mr *MockRedshiftClientMockRecorder) DescribeDataShares(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataShares", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeDataShares), varargs...)
}

// DescribeDataSharesForConsumer mocks base method.
func (m *MockRedshiftClient) DescribeDataSharesForConsumer(arg0 context.Context, arg1 *redshift.DescribeDataSharesForConsumerInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeDataSharesForConsumerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDataSharesForConsumer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataSharesForConsumer", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeDataSharesForConsumerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataSharesForConsumer indicates an expected call of DescribeDataSharesForConsumer.
func (mr *MockRedshiftClientMockRecorder) DescribeDataSharesForConsumer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataSharesForConsumer", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeDataSharesForConsumer), varargs...)
}

// DescribeDataSharesForProducer mocks base method.
func (m *MockRedshiftClient) DescribeDataSharesForProducer(arg0 context.Context, arg1 *redshift.DescribeDataSharesForProducerInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeDataSharesForProducerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDataSharesForProducer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDataSharesForProducer", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeDataSharesForProducerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataSharesForProducer indicates an expected call of DescribeDataSharesForProducer.
func (mr *MockRedshiftClientMockRecorder) DescribeDataSharesForProducer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataSharesForProducer", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeDataSharesForProducer), varargs...)
}

// DescribeDefaultClusterParameters mocks base method.
func (m *MockRedshiftClient) DescribeDefaultClusterParameters(arg0 context.Context, arg1 *redshift.DescribeDefaultClusterParametersInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeDefaultClusterParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDefaultClusterParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDefaultClusterParameters", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultClusterParameters indicates an expected call of DescribeDefaultClusterParameters.
func (mr *MockRedshiftClientMockRecorder) DescribeDefaultClusterParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultClusterParameters", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeDefaultClusterParameters), varargs...)
}

// DescribeEndpointAccess mocks base method.
func (m *MockRedshiftClient) DescribeEndpointAccess(arg0 context.Context, arg1 *redshift.DescribeEndpointAccessInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeEndpointAccessOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpointAccess")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointAccess", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeEndpointAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointAccess indicates an expected call of DescribeEndpointAccess.
func (mr *MockRedshiftClientMockRecorder) DescribeEndpointAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointAccess", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeEndpointAccess), varargs...)
}

// DescribeEndpointAuthorization mocks base method.
func (m *MockRedshiftClient) DescribeEndpointAuthorization(arg0 context.Context, arg1 *redshift.DescribeEndpointAuthorizationInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeEndpointAuthorizationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpointAuthorization")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointAuthorization", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeEndpointAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointAuthorization indicates an expected call of DescribeEndpointAuthorization.
func (mr *MockRedshiftClientMockRecorder) DescribeEndpointAuthorization(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointAuthorization", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeEndpointAuthorization), varargs...)
}

// DescribeEventCategories mocks base method.
func (m *MockRedshiftClient) DescribeEventCategories(arg0 context.Context, arg1 *redshift.DescribeEventCategoriesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeEventCategoriesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventCategories")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategories", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories.
func (mr *MockRedshiftClientMockRecorder) DescribeEventCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeEventCategories), varargs...)
}

// DescribeEventSubscriptions mocks base method.
func (m *MockRedshiftClient) DescribeEventSubscriptions(arg0 context.Context, arg1 *redshift.DescribeEventSubscriptionsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeEventSubscriptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventSubscriptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions.
func (mr *MockRedshiftClientMockRecorder) DescribeEventSubscriptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeEventSubscriptions), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockRedshiftClient) DescribeEvents(arg0 context.Context, arg1 *redshift.DescribeEventsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEvents", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockRedshiftClientMockRecorder) DescribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeEvents), varargs...)
}

// DescribeHsmClientCertificates mocks base method.
func (m *MockRedshiftClient) DescribeHsmClientCertificates(arg0 context.Context, arg1 *redshift.DescribeHsmClientCertificatesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeHsmClientCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHsmClientCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHsmClientCertificates", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeHsmClientCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHsmClientCertificates indicates an expected call of DescribeHsmClientCertificates.
func (mr *MockRedshiftClientMockRecorder) DescribeHsmClientCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHsmClientCertificates", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeHsmClientCertificates), varargs...)
}

// DescribeHsmConfigurations mocks base method.
func (m *MockRedshiftClient) DescribeHsmConfigurations(arg0 context.Context, arg1 *redshift.DescribeHsmConfigurationsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeHsmConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeHsmConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHsmConfigurations", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeHsmConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHsmConfigurations indicates an expected call of DescribeHsmConfigurations.
func (mr *MockRedshiftClientMockRecorder) DescribeHsmConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHsmConfigurations", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeHsmConfigurations), varargs...)
}

// DescribeLoggingStatus mocks base method.
func (m *MockRedshiftClient) DescribeLoggingStatus(arg0 context.Context, arg1 *redshift.DescribeLoggingStatusInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeLoggingStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeLoggingStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoggingStatus", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeLoggingStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingStatus indicates an expected call of DescribeLoggingStatus.
func (mr *MockRedshiftClientMockRecorder) DescribeLoggingStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingStatus", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeLoggingStatus), varargs...)
}

// DescribeNodeConfigurationOptions mocks base method.
func (m *MockRedshiftClient) DescribeNodeConfigurationOptions(arg0 context.Context, arg1 *redshift.DescribeNodeConfigurationOptionsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeNodeConfigurationOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeNodeConfigurationOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNodeConfigurationOptions", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeNodeConfigurationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNodeConfigurationOptions indicates an expected call of DescribeNodeConfigurationOptions.
func (mr *MockRedshiftClientMockRecorder) DescribeNodeConfigurationOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNodeConfigurationOptions", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeNodeConfigurationOptions), varargs...)
}

// DescribeOrderableClusterOptions mocks base method.
func (m *MockRedshiftClient) DescribeOrderableClusterOptions(arg0 context.Context, arg1 *redshift.DescribeOrderableClusterOptionsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeOrderableClusterOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrderableClusterOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableClusterOptions", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeOrderableClusterOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableClusterOptions indicates an expected call of DescribeOrderableClusterOptions.
func (mr *MockRedshiftClientMockRecorder) DescribeOrderableClusterOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableClusterOptions", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeOrderableClusterOptions), varargs...)
}

// DescribePartners mocks base method.
func (m *MockRedshiftClient) DescribePartners(arg0 context.Context, arg1 *redshift.DescribePartnersInput, arg2 ...func(*redshift.Options)) (*redshift.DescribePartnersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePartners")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePartners", varargs...)
	ret0, _ := ret[0].(*redshift.DescribePartnersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePartners indicates an expected call of DescribePartners.
func (mr *MockRedshiftClientMockRecorder) DescribePartners(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePartners", reflect.TypeOf((*MockRedshiftClient)(nil).DescribePartners), varargs...)
}

// DescribeReservedNodeExchangeStatus mocks base method.
func (m *MockRedshiftClient) DescribeReservedNodeExchangeStatus(arg0 context.Context, arg1 *redshift.DescribeReservedNodeExchangeStatusInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeReservedNodeExchangeStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedNodeExchangeStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedNodeExchangeStatus", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeReservedNodeExchangeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedNodeExchangeStatus indicates an expected call of DescribeReservedNodeExchangeStatus.
func (mr *MockRedshiftClientMockRecorder) DescribeReservedNodeExchangeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedNodeExchangeStatus", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeReservedNodeExchangeStatus), varargs...)
}

// DescribeReservedNodeOfferings mocks base method.
func (m *MockRedshiftClient) DescribeReservedNodeOfferings(arg0 context.Context, arg1 *redshift.DescribeReservedNodeOfferingsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeReservedNodeOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedNodeOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedNodeOfferings", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeReservedNodeOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedNodeOfferings indicates an expected call of DescribeReservedNodeOfferings.
func (mr *MockRedshiftClientMockRecorder) DescribeReservedNodeOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedNodeOfferings", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeReservedNodeOfferings), varargs...)
}

// DescribeReservedNodes mocks base method.
func (m *MockRedshiftClient) DescribeReservedNodes(arg0 context.Context, arg1 *redshift.DescribeReservedNodesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeReservedNodesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReservedNodes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedNodes", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeReservedNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedNodes indicates an expected call of DescribeReservedNodes.
func (mr *MockRedshiftClientMockRecorder) DescribeReservedNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedNodes", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeReservedNodes), varargs...)
}

// DescribeResize mocks base method.
func (m *MockRedshiftClient) DescribeResize(arg0 context.Context, arg1 *redshift.DescribeResizeInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeResizeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeResize")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResize", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeResizeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResize indicates an expected call of DescribeResize.
func (mr *MockRedshiftClientMockRecorder) DescribeResize(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResize", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeResize), varargs...)
}

// DescribeScheduledActions mocks base method.
func (m *MockRedshiftClient) DescribeScheduledActions(arg0 context.Context, arg1 *redshift.DescribeScheduledActionsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeScheduledActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeScheduledActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeScheduledActions", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeScheduledActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeScheduledActions indicates an expected call of DescribeScheduledActions.
func (mr *MockRedshiftClientMockRecorder) DescribeScheduledActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduledActions", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeScheduledActions), varargs...)
}

// DescribeSnapshotCopyGrants mocks base method.
func (m *MockRedshiftClient) DescribeSnapshotCopyGrants(arg0 context.Context, arg1 *redshift.DescribeSnapshotCopyGrantsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSnapshotCopyGrants")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotCopyGrants", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeSnapshotCopyGrantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotCopyGrants indicates an expected call of DescribeSnapshotCopyGrants.
func (mr *MockRedshiftClientMockRecorder) DescribeSnapshotCopyGrants(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotCopyGrants", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeSnapshotCopyGrants), varargs...)
}

// DescribeSnapshotSchedules mocks base method.
func (m *MockRedshiftClient) DescribeSnapshotSchedules(arg0 context.Context, arg1 *redshift.DescribeSnapshotSchedulesInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeSnapshotSchedulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSnapshotSchedules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotSchedules", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeSnapshotSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotSchedules indicates an expected call of DescribeSnapshotSchedules.
func (mr *MockRedshiftClientMockRecorder) DescribeSnapshotSchedules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotSchedules", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeSnapshotSchedules), varargs...)
}

// DescribeStorage mocks base method.
func (m *MockRedshiftClient) DescribeStorage(arg0 context.Context, arg1 *redshift.DescribeStorageInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeStorageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStorage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStorage", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStorage indicates an expected call of DescribeStorage.
func (mr *MockRedshiftClientMockRecorder) DescribeStorage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStorage", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeStorage), varargs...)
}

// DescribeTableRestoreStatus mocks base method.
func (m *MockRedshiftClient) DescribeTableRestoreStatus(arg0 context.Context, arg1 *redshift.DescribeTableRestoreStatusInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeTableRestoreStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTableRestoreStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableRestoreStatus", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeTableRestoreStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableRestoreStatus indicates an expected call of DescribeTableRestoreStatus.
func (mr *MockRedshiftClientMockRecorder) DescribeTableRestoreStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableRestoreStatus", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeTableRestoreStatus), varargs...)
}

// DescribeTags mocks base method.
func (m *MockRedshiftClient) DescribeTags(arg0 context.Context, arg1 *redshift.DescribeTagsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTags", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockRedshiftClientMockRecorder) DescribeTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeTags), varargs...)
}

// DescribeUsageLimits mocks base method.
func (m *MockRedshiftClient) DescribeUsageLimits(arg0 context.Context, arg1 *redshift.DescribeUsageLimitsInput, arg2 ...func(*redshift.Options)) (*redshift.DescribeUsageLimitsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeUsageLimits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUsageLimits", varargs...)
	ret0, _ := ret[0].(*redshift.DescribeUsageLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsageLimits indicates an expected call of DescribeUsageLimits.
func (mr *MockRedshiftClientMockRecorder) DescribeUsageLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsageLimits", reflect.TypeOf((*MockRedshiftClient)(nil).DescribeUsageLimits), varargs...)
}

// GetClusterCredentials mocks base method.
func (m *MockRedshiftClient) GetClusterCredentials(arg0 context.Context, arg1 *redshift.GetClusterCredentialsInput, arg2 ...func(*redshift.Options)) (*redshift.GetClusterCredentialsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetClusterCredentials")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterCredentials", varargs...)
	ret0, _ := ret[0].(*redshift.GetClusterCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterCredentials indicates an expected call of GetClusterCredentials.
func (mr *MockRedshiftClientMockRecorder) GetClusterCredentials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCredentials", reflect.TypeOf((*MockRedshiftClient)(nil).GetClusterCredentials), varargs...)
}

// GetClusterCredentialsWithIAM mocks base method.
func (m *MockRedshiftClient) GetClusterCredentialsWithIAM(arg0 context.Context, arg1 *redshift.GetClusterCredentialsWithIAMInput, arg2 ...func(*redshift.Options)) (*redshift.GetClusterCredentialsWithIAMOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetClusterCredentialsWithIAM")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterCredentialsWithIAM", varargs...)
	ret0, _ := ret[0].(*redshift.GetClusterCredentialsWithIAMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterCredentialsWithIAM indicates an expected call of GetClusterCredentialsWithIAM.
func (mr *MockRedshiftClientMockRecorder) GetClusterCredentialsWithIAM(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterCredentialsWithIAM", reflect.TypeOf((*MockRedshiftClient)(nil).GetClusterCredentialsWithIAM), varargs...)
}

// GetReservedNodeExchangeConfigurationOptions mocks base method.
func (m *MockRedshiftClient) GetReservedNodeExchangeConfigurationOptions(arg0 context.Context, arg1 *redshift.GetReservedNodeExchangeConfigurationOptionsInput, arg2 ...func(*redshift.Options)) (*redshift.GetReservedNodeExchangeConfigurationOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReservedNodeExchangeConfigurationOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReservedNodeExchangeConfigurationOptions", varargs...)
	ret0, _ := ret[0].(*redshift.GetReservedNodeExchangeConfigurationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservedNodeExchangeConfigurationOptions indicates an expected call of GetReservedNodeExchangeConfigurationOptions.
func (mr *MockRedshiftClientMockRecorder) GetReservedNodeExchangeConfigurationOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservedNodeExchangeConfigurationOptions", reflect.TypeOf((*MockRedshiftClient)(nil).GetReservedNodeExchangeConfigurationOptions), varargs...)
}

// GetReservedNodeExchangeOfferings mocks base method.
func (m *MockRedshiftClient) GetReservedNodeExchangeOfferings(arg0 context.Context, arg1 *redshift.GetReservedNodeExchangeOfferingsInput, arg2 ...func(*redshift.Options)) (*redshift.GetReservedNodeExchangeOfferingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &redshift.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetReservedNodeExchangeOfferings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReservedNodeExchangeOfferings", varargs...)
	ret0, _ := ret[0].(*redshift.GetReservedNodeExchangeOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservedNodeExchangeOfferings indicates an expected call of GetReservedNodeExchangeOfferings.
func (mr *MockRedshiftClientMockRecorder) GetReservedNodeExchangeOfferings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservedNodeExchangeOfferings", reflect.TypeOf((*MockRedshiftClient)(nil).GetReservedNodeExchangeOfferings), varargs...)
}
