// Code generated by MockGen. DO NOT EDIT.
// Source: eventbridge.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	eventbridge "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	gomock "github.com/golang/mock/gomock"
)

// MockEventbridgeClient is a mock of EventbridgeClient interface.
type MockEventbridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventbridgeClientMockRecorder
}

// MockEventbridgeClientMockRecorder is the mock recorder for MockEventbridgeClient.
type MockEventbridgeClientMockRecorder struct {
	mock *MockEventbridgeClient
}

// NewMockEventbridgeClient creates a new mock instance.
func NewMockEventbridgeClient(ctrl *gomock.Controller) *MockEventbridgeClient {
	mock := &MockEventbridgeClient{ctrl: ctrl}
	mock.recorder = &MockEventbridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventbridgeClient) EXPECT() *MockEventbridgeClientMockRecorder {
	return m.recorder
}

// DescribeApiDestination mocks base method.
func (m *MockEventbridgeClient) DescribeApiDestination(arg0 context.Context, arg1 *eventbridge.DescribeApiDestinationInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeApiDestinationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeApiDestination")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApiDestination", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeApiDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApiDestination indicates an expected call of DescribeApiDestination.
func (mr *MockEventbridgeClientMockRecorder) DescribeApiDestination(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApiDestination", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeApiDestination), varargs...)
}

// DescribeArchive mocks base method.
func (m *MockEventbridgeClient) DescribeArchive(arg0 context.Context, arg1 *eventbridge.DescribeArchiveInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeArchiveOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeArchive")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeArchive", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeArchive indicates an expected call of DescribeArchive.
func (mr *MockEventbridgeClientMockRecorder) DescribeArchive(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeArchive", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeArchive), varargs...)
}

// DescribeConnection mocks base method.
func (m *MockEventbridgeClient) DescribeConnection(arg0 context.Context, arg1 *eventbridge.DescribeConnectionInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeConnectionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConnection")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnection", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnection indicates an expected call of DescribeConnection.
func (mr *MockEventbridgeClientMockRecorder) DescribeConnection(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnection", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeConnection), varargs...)
}

// DescribeEndpoint mocks base method.
func (m *MockEventbridgeClient) DescribeEndpoint(arg0 context.Context, arg1 *eventbridge.DescribeEndpointInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeEndpointOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpoint")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpoint", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoint indicates an expected call of DescribeEndpoint.
func (mr *MockEventbridgeClientMockRecorder) DescribeEndpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoint", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeEndpoint), varargs...)
}

// DescribeEventBus mocks base method.
func (m *MockEventbridgeClient) DescribeEventBus(arg0 context.Context, arg1 *eventbridge.DescribeEventBusInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeEventBusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventBus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventBus", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventBus indicates an expected call of DescribeEventBus.
func (mr *MockEventbridgeClientMockRecorder) DescribeEventBus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventBus", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeEventBus), varargs...)
}

// DescribeEventSource mocks base method.
func (m *MockEventbridgeClient) DescribeEventSource(arg0 context.Context, arg1 *eventbridge.DescribeEventSourceInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeEventSourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventSource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSource", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSource indicates an expected call of DescribeEventSource.
func (mr *MockEventbridgeClientMockRecorder) DescribeEventSource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSource", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeEventSource), varargs...)
}

// DescribePartnerEventSource mocks base method.
func (m *MockEventbridgeClient) DescribePartnerEventSource(arg0 context.Context, arg1 *eventbridge.DescribePartnerEventSourceInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribePartnerEventSourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePartnerEventSource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePartnerEventSource", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePartnerEventSource indicates an expected call of DescribePartnerEventSource.
func (mr *MockEventbridgeClientMockRecorder) DescribePartnerEventSource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePartnerEventSource", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribePartnerEventSource), varargs...)
}

// DescribeReplay mocks base method.
func (m *MockEventbridgeClient) DescribeReplay(arg0 context.Context, arg1 *eventbridge.DescribeReplayInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeReplayOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReplay")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplay", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplay indicates an expected call of DescribeReplay.
func (mr *MockEventbridgeClientMockRecorder) DescribeReplay(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplay", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeReplay), varargs...)
}

// DescribeRule mocks base method.
func (m *MockEventbridgeClient) DescribeRule(arg0 context.Context, arg1 *eventbridge.DescribeRuleInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.DescribeRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRule indicates an expected call of DescribeRule.
func (mr *MockEventbridgeClientMockRecorder) DescribeRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRule", reflect.TypeOf((*MockEventbridgeClient)(nil).DescribeRule), varargs...)
}

// ListApiDestinations mocks base method.
func (m *MockEventbridgeClient) ListApiDestinations(arg0 context.Context, arg1 *eventbridge.ListApiDestinationsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListApiDestinationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListApiDestinations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApiDestinations", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListApiDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiDestinations indicates an expected call of ListApiDestinations.
func (mr *MockEventbridgeClientMockRecorder) ListApiDestinations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiDestinations", reflect.TypeOf((*MockEventbridgeClient)(nil).ListApiDestinations), varargs...)
}

// ListArchives mocks base method.
func (m *MockEventbridgeClient) ListArchives(arg0 context.Context, arg1 *eventbridge.ListArchivesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListArchivesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListArchives")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchives", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListArchivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchives indicates an expected call of ListArchives.
func (mr *MockEventbridgeClientMockRecorder) ListArchives(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchives", reflect.TypeOf((*MockEventbridgeClient)(nil).ListArchives), varargs...)
}

// ListConnections mocks base method.
func (m *MockEventbridgeClient) ListConnections(arg0 context.Context, arg1 *eventbridge.ListConnectionsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListConnectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListConnections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnections", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections.
func (mr *MockEventbridgeClientMockRecorder) ListConnections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockEventbridgeClient)(nil).ListConnections), varargs...)
}

// ListEndpoints mocks base method.
func (m *MockEventbridgeClient) ListEndpoints(arg0 context.Context, arg1 *eventbridge.ListEndpointsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListEndpointsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEndpoints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpoints", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints.
func (mr *MockEventbridgeClientMockRecorder) ListEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockEventbridgeClient)(nil).ListEndpoints), varargs...)
}

// ListEventBuses mocks base method.
func (m *MockEventbridgeClient) ListEventBuses(arg0 context.Context, arg1 *eventbridge.ListEventBusesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListEventBusesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEventBuses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventBuses", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListEventBusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventBuses indicates an expected call of ListEventBuses.
func (mr *MockEventbridgeClientMockRecorder) ListEventBuses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventBuses", reflect.TypeOf((*MockEventbridgeClient)(nil).ListEventBuses), varargs...)
}

// ListEventSources mocks base method.
func (m *MockEventbridgeClient) ListEventSources(arg0 context.Context, arg1 *eventbridge.ListEventSourcesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListEventSourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEventSources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSources", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSources indicates an expected call of ListEventSources.
func (mr *MockEventbridgeClientMockRecorder) ListEventSources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSources", reflect.TypeOf((*MockEventbridgeClient)(nil).ListEventSources), varargs...)
}

// ListPartnerEventSourceAccounts mocks base method.
func (m *MockEventbridgeClient) ListPartnerEventSourceAccounts(arg0 context.Context, arg1 *eventbridge.ListPartnerEventSourceAccountsInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListPartnerEventSourceAccountsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPartnerEventSourceAccounts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnerEventSourceAccounts", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListPartnerEventSourceAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerEventSourceAccounts indicates an expected call of ListPartnerEventSourceAccounts.
func (mr *MockEventbridgeClientMockRecorder) ListPartnerEventSourceAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSourceAccounts", reflect.TypeOf((*MockEventbridgeClient)(nil).ListPartnerEventSourceAccounts), varargs...)
}

// ListPartnerEventSources mocks base method.
func (m *MockEventbridgeClient) ListPartnerEventSources(arg0 context.Context, arg1 *eventbridge.ListPartnerEventSourcesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListPartnerEventSourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPartnerEventSources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnerEventSources", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListPartnerEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerEventSources indicates an expected call of ListPartnerEventSources.
func (mr *MockEventbridgeClientMockRecorder) ListPartnerEventSources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSources", reflect.TypeOf((*MockEventbridgeClient)(nil).ListPartnerEventSources), varargs...)
}

// ListReplays mocks base method.
func (m *MockEventbridgeClient) ListReplays(arg0 context.Context, arg1 *eventbridge.ListReplaysInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListReplaysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListReplays")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReplays", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListReplaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplays indicates an expected call of ListReplays.
func (mr *MockEventbridgeClientMockRecorder) ListReplays(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplays", reflect.TypeOf((*MockEventbridgeClient)(nil).ListReplays), varargs...)
}

// ListRuleNamesByTarget mocks base method.
func (m *MockEventbridgeClient) ListRuleNamesByTarget(arg0 context.Context, arg1 *eventbridge.ListRuleNamesByTargetInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListRuleNamesByTargetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRuleNamesByTarget")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleNamesByTarget", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListRuleNamesByTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleNamesByTarget indicates an expected call of ListRuleNamesByTarget.
func (mr *MockEventbridgeClientMockRecorder) ListRuleNamesByTarget(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleNamesByTarget", reflect.TypeOf((*MockEventbridgeClient)(nil).ListRuleNamesByTarget), varargs...)
}

// ListRules mocks base method.
func (m *MockEventbridgeClient) ListRules(arg0 context.Context, arg1 *eventbridge.ListRulesInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRules", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockEventbridgeClientMockRecorder) ListRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockEventbridgeClient)(nil).ListRules), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockEventbridgeClient) ListTagsForResource(arg0 context.Context, arg1 *eventbridge.ListTagsForResourceInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEventbridgeClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEventbridgeClient)(nil).ListTagsForResource), varargs...)
}

// ListTargetsByRule mocks base method.
func (m *MockEventbridgeClient) ListTargetsByRule(arg0 context.Context, arg1 *eventbridge.ListTargetsByRuleInput, arg2 ...func(*eventbridge.Options)) (*eventbridge.ListTargetsByRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &eventbridge.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTargetsByRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsByRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsByRule indicates an expected call of ListTargetsByRule.
func (mr *MockEventbridgeClientMockRecorder) ListTargetsByRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsByRule", reflect.TypeOf((*MockEventbridgeClient)(nil).ListTargetsByRule), varargs...)
}
