// Code generated by MockGen. DO NOT EDIT.
// Source: servicecatalog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	servicecatalog "github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	gomock "github.com/golang/mock/gomock"
)

// MockServicecatalogClient is a mock of ServicecatalogClient interface.
type MockServicecatalogClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicecatalogClientMockRecorder
}

// MockServicecatalogClientMockRecorder is the mock recorder for MockServicecatalogClient.
type MockServicecatalogClientMockRecorder struct {
	mock *MockServicecatalogClient
}

// NewMockServicecatalogClient creates a new mock instance.
func NewMockServicecatalogClient(ctrl *gomock.Controller) *MockServicecatalogClient {
	mock := &MockServicecatalogClient{ctrl: ctrl}
	mock.recorder = &MockServicecatalogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicecatalogClient) EXPECT() *MockServicecatalogClientMockRecorder {
	return m.recorder
}

// DescribeConstraint mocks base method.
func (m *MockServicecatalogClient) DescribeConstraint(arg0 context.Context, arg1 *servicecatalog.DescribeConstraintInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeConstraintOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConstraint")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConstraint", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeConstraintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConstraint indicates an expected call of DescribeConstraint.
func (mr *MockServicecatalogClientMockRecorder) DescribeConstraint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConstraint", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeConstraint), varargs...)
}

// DescribeCopyProductStatus mocks base method.
func (m *MockServicecatalogClient) DescribeCopyProductStatus(arg0 context.Context, arg1 *servicecatalog.DescribeCopyProductStatusInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeCopyProductStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCopyProductStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCopyProductStatus", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeCopyProductStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCopyProductStatus indicates an expected call of DescribeCopyProductStatus.
func (mr *MockServicecatalogClientMockRecorder) DescribeCopyProductStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCopyProductStatus", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeCopyProductStatus), varargs...)
}

// DescribePortfolio mocks base method.
func (m *MockServicecatalogClient) DescribePortfolio(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePortfolio")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolio", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolio indicates an expected call of DescribePortfolio.
func (mr *MockServicecatalogClientMockRecorder) DescribePortfolio(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolio", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribePortfolio), varargs...)
}

// DescribePortfolioShareStatus mocks base method.
func (m *MockServicecatalogClient) DescribePortfolioShareStatus(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioShareStatusInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePortfolioShareStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolioShareStatus", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioShareStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioShareStatus indicates an expected call of DescribePortfolioShareStatus.
func (mr *MockServicecatalogClientMockRecorder) DescribePortfolioShareStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioShareStatus", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribePortfolioShareStatus), varargs...)
}

// DescribePortfolioShares mocks base method.
func (m *MockServicecatalogClient) DescribePortfolioShares(arg0 context.Context, arg1 *servicecatalog.DescribePortfolioSharesInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioSharesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePortfolioShares")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortfolioShares", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribePortfolioSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortfolioShares indicates an expected call of DescribePortfolioShares.
func (mr *MockServicecatalogClientMockRecorder) DescribePortfolioShares(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortfolioShares", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribePortfolioShares), varargs...)
}

// DescribeProduct mocks base method.
func (m *MockServicecatalogClient) DescribeProduct(arg0 context.Context, arg1 *servicecatalog.DescribeProductInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProduct")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProduct", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProduct indicates an expected call of DescribeProduct.
func (mr *MockServicecatalogClientMockRecorder) DescribeProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProduct", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProduct), varargs...)
}

// DescribeProductAsAdmin mocks base method.
func (m *MockServicecatalogClient) DescribeProductAsAdmin(arg0 context.Context, arg1 *servicecatalog.DescribeProductAsAdminInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductAsAdminOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProductAsAdmin")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductAsAdmin", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductAsAdmin indicates an expected call of DescribeProductAsAdmin.
func (mr *MockServicecatalogClientMockRecorder) DescribeProductAsAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductAsAdmin", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProductAsAdmin), varargs...)
}

// DescribeProductView mocks base method.
func (m *MockServicecatalogClient) DescribeProductView(arg0 context.Context, arg1 *servicecatalog.DescribeProductViewInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductViewOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProductView")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProductView", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProductViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProductView indicates an expected call of DescribeProductView.
func (mr *MockServicecatalogClientMockRecorder) DescribeProductView(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProductView", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProductView), varargs...)
}

// DescribeProvisionedProduct mocks base method.
func (m *MockServicecatalogClient) DescribeProvisionedProduct(arg0 context.Context, arg1 *servicecatalog.DescribeProvisionedProductInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisionedProductOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProvisionedProduct")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisionedProduct", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisionedProduct indicates an expected call of DescribeProvisionedProduct.
func (mr *MockServicecatalogClientMockRecorder) DescribeProvisionedProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProduct", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProvisionedProduct), varargs...)
}

// DescribeProvisionedProductPlan mocks base method.
func (m *MockServicecatalogClient) DescribeProvisionedProductPlan(arg0 context.Context, arg1 *servicecatalog.DescribeProvisionedProductPlanInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProvisionedProductPlan")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisionedProductPlan", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisionedProductPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisionedProductPlan indicates an expected call of DescribeProvisionedProductPlan.
func (mr *MockServicecatalogClientMockRecorder) DescribeProvisionedProductPlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisionedProductPlan", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProvisionedProductPlan), varargs...)
}

// DescribeProvisioningArtifact mocks base method.
func (m *MockServicecatalogClient) DescribeProvisioningArtifact(arg0 context.Context, arg1 *servicecatalog.DescribeProvisioningArtifactInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProvisioningArtifact")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisioningArtifact", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningArtifact indicates an expected call of DescribeProvisioningArtifact.
func (mr *MockServicecatalogClientMockRecorder) DescribeProvisioningArtifact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningArtifact", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProvisioningArtifact), varargs...)
}

// DescribeProvisioningParameters mocks base method.
func (m *MockServicecatalogClient) DescribeProvisioningParameters(arg0 context.Context, arg1 *servicecatalog.DescribeProvisioningParametersInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisioningParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProvisioningParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisioningParameters", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeProvisioningParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningParameters indicates an expected call of DescribeProvisioningParameters.
func (mr *MockServicecatalogClientMockRecorder) DescribeProvisioningParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningParameters", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeProvisioningParameters), varargs...)
}

// DescribeRecord mocks base method.
func (m *MockServicecatalogClient) DescribeRecord(arg0 context.Context, arg1 *servicecatalog.DescribeRecordInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeRecordOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRecord")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecord", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecord indicates an expected call of DescribeRecord.
func (mr *MockServicecatalogClientMockRecorder) DescribeRecord(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecord", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeRecord), varargs...)
}

// DescribeServiceAction mocks base method.
func (m *MockServicecatalogClient) DescribeServiceAction(arg0 context.Context, arg1 *servicecatalog.DescribeServiceActionInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeServiceActionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeServiceAction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceAction", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceAction indicates an expected call of DescribeServiceAction.
func (mr *MockServicecatalogClientMockRecorder) DescribeServiceAction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceAction", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeServiceAction), varargs...)
}

// DescribeServiceActionExecutionParameters mocks base method.
func (m *MockServicecatalogClient) DescribeServiceActionExecutionParameters(arg0 context.Context, arg1 *servicecatalog.DescribeServiceActionExecutionParametersInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeServiceActionExecutionParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceActionExecutionParameters", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceActionExecutionParameters indicates an expected call of DescribeServiceActionExecutionParameters.
func (mr *MockServicecatalogClientMockRecorder) DescribeServiceActionExecutionParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceActionExecutionParameters", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeServiceActionExecutionParameters), varargs...)
}

// DescribeTagOption mocks base method.
func (m *MockServicecatalogClient) DescribeTagOption(arg0 context.Context, arg1 *servicecatalog.DescribeTagOptionInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.DescribeTagOptionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTagOption")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTagOption", varargs...)
	ret0, _ := ret[0].(*servicecatalog.DescribeTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTagOption indicates an expected call of DescribeTagOption.
func (mr *MockServicecatalogClientMockRecorder) DescribeTagOption(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagOption", reflect.TypeOf((*MockServicecatalogClient)(nil).DescribeTagOption), varargs...)
}

// GetAWSOrganizationsAccessStatus mocks base method.
func (m *MockServicecatalogClient) GetAWSOrganizationsAccessStatus(arg0 context.Context, arg1 *servicecatalog.GetAWSOrganizationsAccessStatusInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAWSOrganizationsAccessStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAWSOrganizationsAccessStatus", varargs...)
	ret0, _ := ret[0].(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAWSOrganizationsAccessStatus indicates an expected call of GetAWSOrganizationsAccessStatus.
func (mr *MockServicecatalogClientMockRecorder) GetAWSOrganizationsAccessStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSOrganizationsAccessStatus", reflect.TypeOf((*MockServicecatalogClient)(nil).GetAWSOrganizationsAccessStatus), varargs...)
}

// GetProvisionedProductOutputs mocks base method.
func (m *MockServicecatalogClient) GetProvisionedProductOutputs(arg0 context.Context, arg1 *servicecatalog.GetProvisionedProductOutputsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetProvisionedProductOutputs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProvisionedProductOutputs", varargs...)
	ret0, _ := ret[0].(*servicecatalog.GetProvisionedProductOutputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvisionedProductOutputs indicates an expected call of GetProvisionedProductOutputs.
func (mr *MockServicecatalogClientMockRecorder) GetProvisionedProductOutputs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedProductOutputs", reflect.TypeOf((*MockServicecatalogClient)(nil).GetProvisionedProductOutputs), varargs...)
}

// ListAcceptedPortfolioShares mocks base method.
func (m *MockServicecatalogClient) ListAcceptedPortfolioShares(arg0 context.Context, arg1 *servicecatalog.ListAcceptedPortfolioSharesInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAcceptedPortfolioShares")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcceptedPortfolioShares", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListAcceptedPortfolioSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceptedPortfolioShares indicates an expected call of ListAcceptedPortfolioShares.
func (mr *MockServicecatalogClientMockRecorder) ListAcceptedPortfolioShares(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptedPortfolioShares", reflect.TypeOf((*MockServicecatalogClient)(nil).ListAcceptedPortfolioShares), varargs...)
}

// ListBudgetsForResource mocks base method.
func (m *MockServicecatalogClient) ListBudgetsForResource(arg0 context.Context, arg1 *servicecatalog.ListBudgetsForResourceInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListBudgetsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListBudgetsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBudgetsForResource", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListBudgetsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBudgetsForResource indicates an expected call of ListBudgetsForResource.
func (mr *MockServicecatalogClientMockRecorder) ListBudgetsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBudgetsForResource", reflect.TypeOf((*MockServicecatalogClient)(nil).ListBudgetsForResource), varargs...)
}

// ListConstraintsForPortfolio mocks base method.
func (m *MockServicecatalogClient) ListConstraintsForPortfolio(arg0 context.Context, arg1 *servicecatalog.ListConstraintsForPortfolioInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListConstraintsForPortfolio")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConstraintsForPortfolio", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListConstraintsForPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConstraintsForPortfolio indicates an expected call of ListConstraintsForPortfolio.
func (mr *MockServicecatalogClientMockRecorder) ListConstraintsForPortfolio(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConstraintsForPortfolio", reflect.TypeOf((*MockServicecatalogClient)(nil).ListConstraintsForPortfolio), varargs...)
}

// ListLaunchPaths mocks base method.
func (m *MockServicecatalogClient) ListLaunchPaths(arg0 context.Context, arg1 *servicecatalog.ListLaunchPathsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListLaunchPathsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLaunchPaths")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchPaths", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListLaunchPathsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchPaths indicates an expected call of ListLaunchPaths.
func (mr *MockServicecatalogClientMockRecorder) ListLaunchPaths(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchPaths", reflect.TypeOf((*MockServicecatalogClient)(nil).ListLaunchPaths), varargs...)
}

// ListOrganizationPortfolioAccess mocks base method.
func (m *MockServicecatalogClient) ListOrganizationPortfolioAccess(arg0 context.Context, arg1 *servicecatalog.ListOrganizationPortfolioAccessInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOrganizationPortfolioAccess")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationPortfolioAccess", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListOrganizationPortfolioAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationPortfolioAccess indicates an expected call of ListOrganizationPortfolioAccess.
func (mr *MockServicecatalogClientMockRecorder) ListOrganizationPortfolioAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationPortfolioAccess", reflect.TypeOf((*MockServicecatalogClient)(nil).ListOrganizationPortfolioAccess), varargs...)
}

// ListPortfolioAccess mocks base method.
func (m *MockServicecatalogClient) ListPortfolioAccess(arg0 context.Context, arg1 *servicecatalog.ListPortfolioAccessInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfolioAccessOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPortfolioAccess")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfolioAccess", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfolioAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolioAccess indicates an expected call of ListPortfolioAccess.
func (mr *MockServicecatalogClientMockRecorder) ListPortfolioAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolioAccess", reflect.TypeOf((*MockServicecatalogClient)(nil).ListPortfolioAccess), varargs...)
}

// ListPortfolios mocks base method.
func (m *MockServicecatalogClient) ListPortfolios(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPortfolios")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfolios", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfolios indicates an expected call of ListPortfolios.
func (mr *MockServicecatalogClientMockRecorder) ListPortfolios(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfolios", reflect.TypeOf((*MockServicecatalogClient)(nil).ListPortfolios), varargs...)
}

// ListPortfoliosForProduct mocks base method.
func (m *MockServicecatalogClient) ListPortfoliosForProduct(arg0 context.Context, arg1 *servicecatalog.ListPortfoliosForProductInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosForProductOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPortfoliosForProduct")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortfoliosForProduct", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPortfoliosForProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortfoliosForProduct indicates an expected call of ListPortfoliosForProduct.
func (mr *MockServicecatalogClientMockRecorder) ListPortfoliosForProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortfoliosForProduct", reflect.TypeOf((*MockServicecatalogClient)(nil).ListPortfoliosForProduct), varargs...)
}

// ListPrincipalsForPortfolio mocks base method.
func (m *MockServicecatalogClient) ListPrincipalsForPortfolio(arg0 context.Context, arg1 *servicecatalog.ListPrincipalsForPortfolioInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPrincipalsForPortfolio")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalsForPortfolio", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListPrincipalsForPortfolioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalsForPortfolio indicates an expected call of ListPrincipalsForPortfolio.
func (mr *MockServicecatalogClientMockRecorder) ListPrincipalsForPortfolio(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalsForPortfolio", reflect.TypeOf((*MockServicecatalogClient)(nil).ListPrincipalsForPortfolio), varargs...)
}

// ListProvisionedProductPlans mocks base method.
func (m *MockServicecatalogClient) ListProvisionedProductPlans(arg0 context.Context, arg1 *servicecatalog.ListProvisionedProductPlansInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisionedProductPlansOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisionedProductPlans")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisionedProductPlans", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListProvisionedProductPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisionedProductPlans indicates an expected call of ListProvisionedProductPlans.
func (mr *MockServicecatalogClientMockRecorder) ListProvisionedProductPlans(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedProductPlans", reflect.TypeOf((*MockServicecatalogClient)(nil).ListProvisionedProductPlans), varargs...)
}

// ListProvisioningArtifacts mocks base method.
func (m *MockServicecatalogClient) ListProvisioningArtifacts(arg0 context.Context, arg1 *servicecatalog.ListProvisioningArtifactsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisioningArtifactsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisioningArtifacts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningArtifacts", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListProvisioningArtifactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningArtifacts indicates an expected call of ListProvisioningArtifacts.
func (mr *MockServicecatalogClientMockRecorder) ListProvisioningArtifacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifacts", reflect.TypeOf((*MockServicecatalogClient)(nil).ListProvisioningArtifacts), varargs...)
}

// ListProvisioningArtifactsForServiceAction mocks base method.
func (m *MockServicecatalogClient) ListProvisioningArtifactsForServiceAction(arg0 context.Context, arg1 *servicecatalog.ListProvisioningArtifactsForServiceActionInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisioningArtifactsForServiceAction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningArtifactsForServiceAction", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningArtifactsForServiceAction indicates an expected call of ListProvisioningArtifactsForServiceAction.
func (mr *MockServicecatalogClientMockRecorder) ListProvisioningArtifactsForServiceAction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningArtifactsForServiceAction", reflect.TypeOf((*MockServicecatalogClient)(nil).ListProvisioningArtifactsForServiceAction), varargs...)
}

// ListRecordHistory mocks base method.
func (m *MockServicecatalogClient) ListRecordHistory(arg0 context.Context, arg1 *servicecatalog.ListRecordHistoryInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListRecordHistoryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRecordHistory")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecordHistory", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListRecordHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordHistory indicates an expected call of ListRecordHistory.
func (mr *MockServicecatalogClientMockRecorder) ListRecordHistory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordHistory", reflect.TypeOf((*MockServicecatalogClient)(nil).ListRecordHistory), varargs...)
}

// ListResourcesForTagOption mocks base method.
func (m *MockServicecatalogClient) ListResourcesForTagOption(arg0 context.Context, arg1 *servicecatalog.ListResourcesForTagOptionInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListResourcesForTagOptionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourcesForTagOption")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesForTagOption", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListResourcesForTagOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForTagOption indicates an expected call of ListResourcesForTagOption.
func (mr *MockServicecatalogClientMockRecorder) ListResourcesForTagOption(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForTagOption", reflect.TypeOf((*MockServicecatalogClient)(nil).ListResourcesForTagOption), varargs...)
}

// ListServiceActions mocks base method.
func (m *MockServicecatalogClient) ListServiceActions(arg0 context.Context, arg1 *servicecatalog.ListServiceActionsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListServiceActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListServiceActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceActions", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListServiceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceActions indicates an expected call of ListServiceActions.
func (mr *MockServicecatalogClientMockRecorder) ListServiceActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActions", reflect.TypeOf((*MockServicecatalogClient)(nil).ListServiceActions), varargs...)
}

// ListServiceActionsForProvisioningArtifact mocks base method.
func (m *MockServicecatalogClient) ListServiceActionsForProvisioningArtifact(arg0 context.Context, arg1 *servicecatalog.ListServiceActionsForProvisioningArtifactInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListServiceActionsForProvisioningArtifact")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceActionsForProvisioningArtifact", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceActionsForProvisioningArtifact indicates an expected call of ListServiceActionsForProvisioningArtifact.
func (mr *MockServicecatalogClientMockRecorder) ListServiceActionsForProvisioningArtifact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceActionsForProvisioningArtifact", reflect.TypeOf((*MockServicecatalogClient)(nil).ListServiceActionsForProvisioningArtifact), varargs...)
}

// ListStackInstancesForProvisionedProduct mocks base method.
func (m *MockServicecatalogClient) ListStackInstancesForProvisionedProduct(arg0 context.Context, arg1 *servicecatalog.ListStackInstancesForProvisionedProductInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackInstancesForProvisionedProduct")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackInstancesForProvisionedProduct", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstancesForProvisionedProduct indicates an expected call of ListStackInstancesForProvisionedProduct.
func (mr *MockServicecatalogClientMockRecorder) ListStackInstancesForProvisionedProduct(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstancesForProvisionedProduct", reflect.TypeOf((*MockServicecatalogClient)(nil).ListStackInstancesForProvisionedProduct), varargs...)
}

// ListTagOptions mocks base method.
func (m *MockServicecatalogClient) ListTagOptions(arg0 context.Context, arg1 *servicecatalog.ListTagOptionsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.ListTagOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagOptions", varargs...)
	ret0, _ := ret[0].(*servicecatalog.ListTagOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagOptions indicates an expected call of ListTagOptions.
func (mr *MockServicecatalogClientMockRecorder) ListTagOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagOptions", reflect.TypeOf((*MockServicecatalogClient)(nil).ListTagOptions), varargs...)
}

// SearchProducts mocks base method.
func (m *MockServicecatalogClient) SearchProducts(arg0 context.Context, arg1 *servicecatalog.SearchProductsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchProducts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProducts", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockServicecatalogClientMockRecorder) SearchProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockServicecatalogClient)(nil).SearchProducts), varargs...)
}

// SearchProductsAsAdmin mocks base method.
func (m *MockServicecatalogClient) SearchProductsAsAdmin(arg0 context.Context, arg1 *servicecatalog.SearchProductsAsAdminInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsAsAdminOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchProductsAsAdmin")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProductsAsAdmin", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProductsAsAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsAsAdmin indicates an expected call of SearchProductsAsAdmin.
func (mr *MockServicecatalogClientMockRecorder) SearchProductsAsAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsAsAdmin", reflect.TypeOf((*MockServicecatalogClient)(nil).SearchProductsAsAdmin), varargs...)
}

// SearchProvisionedProducts mocks base method.
func (m *MockServicecatalogClient) SearchProvisionedProducts(arg0 context.Context, arg1 *servicecatalog.SearchProvisionedProductsInput, arg2 ...func(*servicecatalog.Options)) (*servicecatalog.SearchProvisionedProductsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &servicecatalog.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchProvisionedProducts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchProvisionedProducts", varargs...)
	ret0, _ := ret[0].(*servicecatalog.SearchProvisionedProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProvisionedProducts indicates an expected call of SearchProvisionedProducts.
func (mr *MockServicecatalogClientMockRecorder) SearchProvisionedProducts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProvisionedProducts", reflect.TypeOf((*MockServicecatalogClient)(nil).SearchProvisionedProducts), varargs...)
}
