// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/aws/client (interfaces: ServiceQuotasClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	servicequotas "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceQuotasClient is a mock of ServiceQuotasClient interface.
type MockServiceQuotasClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceQuotasClientMockRecorder
}

// MockServiceQuotasClientMockRecorder is the mock recorder for MockServiceQuotasClient.
type MockServiceQuotasClientMockRecorder struct {
	mock *MockServiceQuotasClient
}

// NewMockServiceQuotasClient creates a new mock instance.
func NewMockServiceQuotasClient(ctrl *gomock.Controller) *MockServiceQuotasClient {
	mock := &MockServiceQuotasClient{ctrl: ctrl}
	mock.recorder = &MockServiceQuotasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceQuotasClient) EXPECT() *MockServiceQuotasClientMockRecorder {
	return m.recorder
}

// ListServiceQuotas mocks base method.
func (m *MockServiceQuotasClient) ListServiceQuotas(arg0 context.Context, arg1 *servicequotas.ListServiceQuotasInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListServiceQuotasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceQuotas", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListServiceQuotasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceQuotas indicates an expected call of ListServiceQuotas.
func (mr *MockServiceQuotasClientMockRecorder) ListServiceQuotas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceQuotas", reflect.TypeOf((*MockServiceQuotasClient)(nil).ListServiceQuotas), varargs...)
}

// ListServices mocks base method.
func (m *MockServiceQuotasClient) ListServices(arg0 context.Context, arg1 *servicequotas.ListServicesInput, arg2 ...func(*servicequotas.Options)) (*servicequotas.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServices", varargs...)
	ret0, _ := ret[0].(*servicequotas.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockServiceQuotasClientMockRecorder) ListServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockServiceQuotasClient)(nil).ListServices), varargs...)
}
