// Code generated by MockGen. DO NOT EDIT.
// Source: lightsail.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	lightsail "github.com/aws/aws-sdk-go-v2/service/lightsail"
	gomock "github.com/golang/mock/gomock"
)

// MockLightsailClient is a mock of LightsailClient interface.
type MockLightsailClient struct {
	ctrl     *gomock.Controller
	recorder *MockLightsailClientMockRecorder
}

// MockLightsailClientMockRecorder is the mock recorder for MockLightsailClient.
type MockLightsailClientMockRecorder struct {
	mock *MockLightsailClient
}

// NewMockLightsailClient creates a new mock instance.
func NewMockLightsailClient(ctrl *gomock.Controller) *MockLightsailClient {
	mock := &MockLightsailClient{ctrl: ctrl}
	mock.recorder = &MockLightsailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLightsailClient) EXPECT() *MockLightsailClientMockRecorder {
	return m.recorder
}

// GetActiveNames mocks base method.
func (m *MockLightsailClient) GetActiveNames(arg0 context.Context, arg1 *lightsail.GetActiveNamesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetActiveNamesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetActiveNames")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActiveNames", varargs...)
	ret0, _ := ret[0].(*lightsail.GetActiveNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveNames indicates an expected call of GetActiveNames.
func (mr *MockLightsailClientMockRecorder) GetActiveNames(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveNames", reflect.TypeOf((*MockLightsailClient)(nil).GetActiveNames), varargs...)
}

// GetAlarms mocks base method.
func (m *MockLightsailClient) GetAlarms(arg0 context.Context, arg1 *lightsail.GetAlarmsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetAlarmsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAlarms")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlarms", varargs...)
	ret0, _ := ret[0].(*lightsail.GetAlarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarms indicates an expected call of GetAlarms.
func (mr *MockLightsailClientMockRecorder) GetAlarms(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarms", reflect.TypeOf((*MockLightsailClient)(nil).GetAlarms), varargs...)
}

// GetAutoSnapshots mocks base method.
func (m *MockLightsailClient) GetAutoSnapshots(arg0 context.Context, arg1 *lightsail.GetAutoSnapshotsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetAutoSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAutoSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutoSnapshots", varargs...)
	ret0, _ := ret[0].(*lightsail.GetAutoSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoSnapshots indicates an expected call of GetAutoSnapshots.
func (mr *MockLightsailClientMockRecorder) GetAutoSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoSnapshots", reflect.TypeOf((*MockLightsailClient)(nil).GetAutoSnapshots), varargs...)
}

// GetBlueprints mocks base method.
func (m *MockLightsailClient) GetBlueprints(arg0 context.Context, arg1 *lightsail.GetBlueprintsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetBlueprintsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBlueprints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlueprints", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprints indicates an expected call of GetBlueprints.
func (mr *MockLightsailClientMockRecorder) GetBlueprints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprints", reflect.TypeOf((*MockLightsailClient)(nil).GetBlueprints), varargs...)
}

// GetBucketAccessKeys mocks base method.
func (m *MockLightsailClient) GetBucketAccessKeys(arg0 context.Context, arg1 *lightsail.GetBucketAccessKeysInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetBucketAccessKeysOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBucketAccessKeys")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketAccessKeys", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBucketAccessKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketAccessKeys indicates an expected call of GetBucketAccessKeys.
func (mr *MockLightsailClientMockRecorder) GetBucketAccessKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketAccessKeys", reflect.TypeOf((*MockLightsailClient)(nil).GetBucketAccessKeys), varargs...)
}

// GetBucketBundles mocks base method.
func (m *MockLightsailClient) GetBucketBundles(arg0 context.Context, arg1 *lightsail.GetBucketBundlesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetBucketBundlesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBucketBundles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketBundles", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBucketBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketBundles indicates an expected call of GetBucketBundles.
func (mr *MockLightsailClientMockRecorder) GetBucketBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketBundles", reflect.TypeOf((*MockLightsailClient)(nil).GetBucketBundles), varargs...)
}

// GetBucketMetricData mocks base method.
func (m *MockLightsailClient) GetBucketMetricData(arg0 context.Context, arg1 *lightsail.GetBucketMetricDataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetBucketMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBucketMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketMetricData", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBucketMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketMetricData indicates an expected call of GetBucketMetricData.
func (mr *MockLightsailClientMockRecorder) GetBucketMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketMetricData", reflect.TypeOf((*MockLightsailClient)(nil).GetBucketMetricData), varargs...)
}

// GetBuckets mocks base method.
func (m *MockLightsailClient) GetBuckets(arg0 context.Context, arg1 *lightsail.GetBucketsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetBucketsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBuckets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuckets", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuckets indicates an expected call of GetBuckets.
func (mr *MockLightsailClientMockRecorder) GetBuckets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuckets", reflect.TypeOf((*MockLightsailClient)(nil).GetBuckets), varargs...)
}

// GetBundles mocks base method.
func (m *MockLightsailClient) GetBundles(arg0 context.Context, arg1 *lightsail.GetBundlesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetBundlesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBundles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBundles", varargs...)
	ret0, _ := ret[0].(*lightsail.GetBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundles indicates an expected call of GetBundles.
func (mr *MockLightsailClientMockRecorder) GetBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundles", reflect.TypeOf((*MockLightsailClient)(nil).GetBundles), varargs...)
}

// GetCertificates mocks base method.
func (m *MockLightsailClient) GetCertificates(arg0 context.Context, arg1 *lightsail.GetCertificatesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificates", varargs...)
	ret0, _ := ret[0].(*lightsail.GetCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockLightsailClientMockRecorder) GetCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockLightsailClient)(nil).GetCertificates), varargs...)
}

// GetCloudFormationStackRecords mocks base method.
func (m *MockLightsailClient) GetCloudFormationStackRecords(arg0 context.Context, arg1 *lightsail.GetCloudFormationStackRecordsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetCloudFormationStackRecordsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCloudFormationStackRecords")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFormationStackRecords", varargs...)
	ret0, _ := ret[0].(*lightsail.GetCloudFormationStackRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFormationStackRecords indicates an expected call of GetCloudFormationStackRecords.
func (mr *MockLightsailClientMockRecorder) GetCloudFormationStackRecords(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFormationStackRecords", reflect.TypeOf((*MockLightsailClient)(nil).GetCloudFormationStackRecords), varargs...)
}

// GetContactMethods mocks base method.
func (m *MockLightsailClient) GetContactMethods(arg0 context.Context, arg1 *lightsail.GetContactMethodsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContactMethodsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContactMethods")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactMethods", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContactMethodsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactMethods indicates an expected call of GetContactMethods.
func (mr *MockLightsailClientMockRecorder) GetContactMethods(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactMethods", reflect.TypeOf((*MockLightsailClient)(nil).GetContactMethods), varargs...)
}

// GetContainerAPIMetadata mocks base method.
func (m *MockLightsailClient) GetContainerAPIMetadata(arg0 context.Context, arg1 *lightsail.GetContainerAPIMetadataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerAPIMetadataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerAPIMetadata")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerAPIMetadata", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerAPIMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerAPIMetadata indicates an expected call of GetContainerAPIMetadata.
func (mr *MockLightsailClientMockRecorder) GetContainerAPIMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerAPIMetadata", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerAPIMetadata), varargs...)
}

// GetContainerImages mocks base method.
func (m *MockLightsailClient) GetContainerImages(arg0 context.Context, arg1 *lightsail.GetContainerImagesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerImagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerImages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerImages", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerImages indicates an expected call of GetContainerImages.
func (mr *MockLightsailClientMockRecorder) GetContainerImages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerImages", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerImages), varargs...)
}

// GetContainerLog mocks base method.
func (m *MockLightsailClient) GetContainerLog(arg0 context.Context, arg1 *lightsail.GetContainerLogInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerLogOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerLog")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerLog", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerLogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLog indicates an expected call of GetContainerLog.
func (mr *MockLightsailClientMockRecorder) GetContainerLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLog", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerLog), varargs...)
}

// GetContainerServiceDeployments mocks base method.
func (m *MockLightsailClient) GetContainerServiceDeployments(arg0 context.Context, arg1 *lightsail.GetContainerServiceDeploymentsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerServiceDeploymentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerServiceDeployments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerServiceDeployments", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerServiceDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerServiceDeployments indicates an expected call of GetContainerServiceDeployments.
func (mr *MockLightsailClientMockRecorder) GetContainerServiceDeployments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerServiceDeployments", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerServiceDeployments), varargs...)
}

// GetContainerServiceMetricData mocks base method.
func (m *MockLightsailClient) GetContainerServiceMetricData(arg0 context.Context, arg1 *lightsail.GetContainerServiceMetricDataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerServiceMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerServiceMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerServiceMetricData", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerServiceMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerServiceMetricData indicates an expected call of GetContainerServiceMetricData.
func (mr *MockLightsailClientMockRecorder) GetContainerServiceMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerServiceMetricData", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerServiceMetricData), varargs...)
}

// GetContainerServicePowers mocks base method.
func (m *MockLightsailClient) GetContainerServicePowers(arg0 context.Context, arg1 *lightsail.GetContainerServicePowersInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerServicePowersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerServicePowers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerServicePowers", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerServicePowersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerServicePowers indicates an expected call of GetContainerServicePowers.
func (mr *MockLightsailClientMockRecorder) GetContainerServicePowers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerServicePowers", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerServicePowers), varargs...)
}

// GetContainerServices mocks base method.
func (m *MockLightsailClient) GetContainerServices(arg0 context.Context, arg1 *lightsail.GetContainerServicesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetContainerServicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetContainerServices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerServices", varargs...)
	ret0, _ := ret[0].(*lightsail.GetContainerServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerServices indicates an expected call of GetContainerServices.
func (mr *MockLightsailClientMockRecorder) GetContainerServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerServices", reflect.TypeOf((*MockLightsailClient)(nil).GetContainerServices), varargs...)
}

// GetCostEstimate mocks base method.
func (m *MockLightsailClient) GetCostEstimate(arg0 context.Context, arg1 *lightsail.GetCostEstimateInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetCostEstimateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCostEstimate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCostEstimate", varargs...)
	ret0, _ := ret[0].(*lightsail.GetCostEstimateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostEstimate indicates an expected call of GetCostEstimate.
func (mr *MockLightsailClientMockRecorder) GetCostEstimate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostEstimate", reflect.TypeOf((*MockLightsailClient)(nil).GetCostEstimate), varargs...)
}

// GetDisk mocks base method.
func (m *MockLightsailClient) GetDisk(arg0 context.Context, arg1 *lightsail.GetDiskInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDiskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDisk")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDisk", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDiskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisk indicates an expected call of GetDisk.
func (mr *MockLightsailClientMockRecorder) GetDisk(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisk", reflect.TypeOf((*MockLightsailClient)(nil).GetDisk), varargs...)
}

// GetDiskSnapshot mocks base method.
func (m *MockLightsailClient) GetDiskSnapshot(arg0 context.Context, arg1 *lightsail.GetDiskSnapshotInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDiskSnapshotOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDiskSnapshot")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiskSnapshot", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDiskSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSnapshot indicates an expected call of GetDiskSnapshot.
func (mr *MockLightsailClientMockRecorder) GetDiskSnapshot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshot", reflect.TypeOf((*MockLightsailClient)(nil).GetDiskSnapshot), varargs...)
}

// GetDiskSnapshots mocks base method.
func (m *MockLightsailClient) GetDiskSnapshots(arg0 context.Context, arg1 *lightsail.GetDiskSnapshotsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDiskSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDiskSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiskSnapshots", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDiskSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskSnapshots indicates an expected call of GetDiskSnapshots.
func (mr *MockLightsailClientMockRecorder) GetDiskSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskSnapshots", reflect.TypeOf((*MockLightsailClient)(nil).GetDiskSnapshots), varargs...)
}

// GetDisks mocks base method.
func (m *MockLightsailClient) GetDisks(arg0 context.Context, arg1 *lightsail.GetDisksInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDisksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDisks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDisks", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDisksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisks indicates an expected call of GetDisks.
func (mr *MockLightsailClientMockRecorder) GetDisks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisks", reflect.TypeOf((*MockLightsailClient)(nil).GetDisks), varargs...)
}

// GetDistributionBundles mocks base method.
func (m *MockLightsailClient) GetDistributionBundles(arg0 context.Context, arg1 *lightsail.GetDistributionBundlesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDistributionBundlesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDistributionBundles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionBundles", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDistributionBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionBundles indicates an expected call of GetDistributionBundles.
func (mr *MockLightsailClientMockRecorder) GetDistributionBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionBundles", reflect.TypeOf((*MockLightsailClient)(nil).GetDistributionBundles), varargs...)
}

// GetDistributionLatestCacheReset mocks base method.
func (m *MockLightsailClient) GetDistributionLatestCacheReset(arg0 context.Context, arg1 *lightsail.GetDistributionLatestCacheResetInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDistributionLatestCacheResetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDistributionLatestCacheReset")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionLatestCacheReset", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDistributionLatestCacheResetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionLatestCacheReset indicates an expected call of GetDistributionLatestCacheReset.
func (mr *MockLightsailClientMockRecorder) GetDistributionLatestCacheReset(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionLatestCacheReset", reflect.TypeOf((*MockLightsailClient)(nil).GetDistributionLatestCacheReset), varargs...)
}

// GetDistributionMetricData mocks base method.
func (m *MockLightsailClient) GetDistributionMetricData(arg0 context.Context, arg1 *lightsail.GetDistributionMetricDataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDistributionMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDistributionMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionMetricData", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDistributionMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionMetricData indicates an expected call of GetDistributionMetricData.
func (mr *MockLightsailClientMockRecorder) GetDistributionMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionMetricData", reflect.TypeOf((*MockLightsailClient)(nil).GetDistributionMetricData), varargs...)
}

// GetDistributions mocks base method.
func (m *MockLightsailClient) GetDistributions(arg0 context.Context, arg1 *lightsail.GetDistributionsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDistributionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDistributions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributions", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributions indicates an expected call of GetDistributions.
func (mr *MockLightsailClientMockRecorder) GetDistributions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributions", reflect.TypeOf((*MockLightsailClient)(nil).GetDistributions), varargs...)
}

// GetDomain mocks base method.
func (m *MockLightsailClient) GetDomain(arg0 context.Context, arg1 *lightsail.GetDomainInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDomainOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDomain")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomain", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockLightsailClientMockRecorder) GetDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockLightsailClient)(nil).GetDomain), varargs...)
}

// GetDomains mocks base method.
func (m *MockLightsailClient) GetDomains(arg0 context.Context, arg1 *lightsail.GetDomainsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetDomainsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDomains")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomains", varargs...)
	ret0, _ := ret[0].(*lightsail.GetDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomains indicates an expected call of GetDomains.
func (mr *MockLightsailClientMockRecorder) GetDomains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomains", reflect.TypeOf((*MockLightsailClient)(nil).GetDomains), varargs...)
}

// GetExportSnapshotRecords mocks base method.
func (m *MockLightsailClient) GetExportSnapshotRecords(arg0 context.Context, arg1 *lightsail.GetExportSnapshotRecordsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetExportSnapshotRecordsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetExportSnapshotRecords")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExportSnapshotRecords", varargs...)
	ret0, _ := ret[0].(*lightsail.GetExportSnapshotRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportSnapshotRecords indicates an expected call of GetExportSnapshotRecords.
func (mr *MockLightsailClientMockRecorder) GetExportSnapshotRecords(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportSnapshotRecords", reflect.TypeOf((*MockLightsailClient)(nil).GetExportSnapshotRecords), varargs...)
}

// GetInstance mocks base method.
func (m *MockLightsailClient) GetInstance(arg0 context.Context, arg1 *lightsail.GetInstanceInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstanceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstance", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockLightsailClientMockRecorder) GetInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockLightsailClient)(nil).GetInstance), varargs...)
}

// GetInstanceAccessDetails mocks base method.
func (m *MockLightsailClient) GetInstanceAccessDetails(arg0 context.Context, arg1 *lightsail.GetInstanceAccessDetailsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstanceAccessDetailsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceAccessDetails")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceAccessDetails", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceAccessDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAccessDetails indicates an expected call of GetInstanceAccessDetails.
func (mr *MockLightsailClientMockRecorder) GetInstanceAccessDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAccessDetails", reflect.TypeOf((*MockLightsailClient)(nil).GetInstanceAccessDetails), varargs...)
}

// GetInstanceMetricData mocks base method.
func (m *MockLightsailClient) GetInstanceMetricData(arg0 context.Context, arg1 *lightsail.GetInstanceMetricDataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstanceMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceMetricData", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMetricData indicates an expected call of GetInstanceMetricData.
func (mr *MockLightsailClientMockRecorder) GetInstanceMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetricData", reflect.TypeOf((*MockLightsailClient)(nil).GetInstanceMetricData), varargs...)
}

// GetInstancePortStates mocks base method.
func (m *MockLightsailClient) GetInstancePortStates(arg0 context.Context, arg1 *lightsail.GetInstancePortStatesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstancePortStatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstancePortStates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstancePortStates", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstancePortStatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePortStates indicates an expected call of GetInstancePortStates.
func (mr *MockLightsailClientMockRecorder) GetInstancePortStates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePortStates", reflect.TypeOf((*MockLightsailClient)(nil).GetInstancePortStates), varargs...)
}

// GetInstanceSnapshot mocks base method.
func (m *MockLightsailClient) GetInstanceSnapshot(arg0 context.Context, arg1 *lightsail.GetInstanceSnapshotInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstanceSnapshotOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceSnapshot")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot.
func (mr *MockLightsailClientMockRecorder) GetInstanceSnapshot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockLightsailClient)(nil).GetInstanceSnapshot), varargs...)
}

// GetInstanceSnapshots mocks base method.
func (m *MockLightsailClient) GetInstanceSnapshots(arg0 context.Context, arg1 *lightsail.GetInstanceSnapshotsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstanceSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots.
func (mr *MockLightsailClientMockRecorder) GetInstanceSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockLightsailClient)(nil).GetInstanceSnapshots), varargs...)
}

// GetInstanceState mocks base method.
func (m *MockLightsailClient) GetInstanceState(arg0 context.Context, arg1 *lightsail.GetInstanceStateInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstanceStateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstanceState")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstanceState", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstanceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceState indicates an expected call of GetInstanceState.
func (mr *MockLightsailClientMockRecorder) GetInstanceState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockLightsailClient)(nil).GetInstanceState), varargs...)
}

// GetInstances mocks base method.
func (m *MockLightsailClient) GetInstances(arg0 context.Context, arg1 *lightsail.GetInstancesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstances", varargs...)
	ret0, _ := ret[0].(*lightsail.GetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockLightsailClientMockRecorder) GetInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockLightsailClient)(nil).GetInstances), varargs...)
}

// GetKeyPair mocks base method.
func (m *MockLightsailClient) GetKeyPair(arg0 context.Context, arg1 *lightsail.GetKeyPairInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetKeyPairOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetKeyPair")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyPair", varargs...)
	ret0, _ := ret[0].(*lightsail.GetKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPair indicates an expected call of GetKeyPair.
func (mr *MockLightsailClientMockRecorder) GetKeyPair(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPair", reflect.TypeOf((*MockLightsailClient)(nil).GetKeyPair), varargs...)
}

// GetKeyPairs mocks base method.
func (m *MockLightsailClient) GetKeyPairs(arg0 context.Context, arg1 *lightsail.GetKeyPairsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetKeyPairsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetKeyPairs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyPairs", varargs...)
	ret0, _ := ret[0].(*lightsail.GetKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPairs indicates an expected call of GetKeyPairs.
func (mr *MockLightsailClientMockRecorder) GetKeyPairs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairs", reflect.TypeOf((*MockLightsailClient)(nil).GetKeyPairs), varargs...)
}

// GetLoadBalancer mocks base method.
func (m *MockLightsailClient) GetLoadBalancer(arg0 context.Context, arg1 *lightsail.GetLoadBalancerInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLoadBalancer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancer", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockLightsailClientMockRecorder) GetLoadBalancer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLightsailClient)(nil).GetLoadBalancer), varargs...)
}

// GetLoadBalancerMetricData mocks base method.
func (m *MockLightsailClient) GetLoadBalancerMetricData(arg0 context.Context, arg1 *lightsail.GetLoadBalancerMetricDataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLoadBalancerMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerMetricData", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerMetricData indicates an expected call of GetLoadBalancerMetricData.
func (mr *MockLightsailClientMockRecorder) GetLoadBalancerMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerMetricData", reflect.TypeOf((*MockLightsailClient)(nil).GetLoadBalancerMetricData), varargs...)
}

// GetLoadBalancerTlsCertificates mocks base method.
func (m *MockLightsailClient) GetLoadBalancerTlsCertificates(arg0 context.Context, arg1 *lightsail.GetLoadBalancerTlsCertificatesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLoadBalancerTlsCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerTlsCertificates", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerTlsCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerTlsCertificates indicates an expected call of GetLoadBalancerTlsCertificates.
func (mr *MockLightsailClientMockRecorder) GetLoadBalancerTlsCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerTlsCertificates", reflect.TypeOf((*MockLightsailClient)(nil).GetLoadBalancerTlsCertificates), varargs...)
}

// GetLoadBalancerTlsPolicies mocks base method.
func (m *MockLightsailClient) GetLoadBalancerTlsPolicies(arg0 context.Context, arg1 *lightsail.GetLoadBalancerTlsPoliciesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerTlsPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLoadBalancerTlsPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerTlsPolicies", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancerTlsPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerTlsPolicies indicates an expected call of GetLoadBalancerTlsPolicies.
func (mr *MockLightsailClientMockRecorder) GetLoadBalancerTlsPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerTlsPolicies", reflect.TypeOf((*MockLightsailClient)(nil).GetLoadBalancerTlsPolicies), varargs...)
}

// GetLoadBalancers mocks base method.
func (m *MockLightsailClient) GetLoadBalancers(arg0 context.Context, arg1 *lightsail.GetLoadBalancersInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetLoadBalancersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLoadBalancers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancers", varargs...)
	ret0, _ := ret[0].(*lightsail.GetLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancers indicates an expected call of GetLoadBalancers.
func (mr *MockLightsailClientMockRecorder) GetLoadBalancers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancers", reflect.TypeOf((*MockLightsailClient)(nil).GetLoadBalancers), varargs...)
}

// GetOperation mocks base method.
func (m *MockLightsailClient) GetOperation(arg0 context.Context, arg1 *lightsail.GetOperationInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetOperationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOperation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(*lightsail.GetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockLightsailClientMockRecorder) GetOperation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockLightsailClient)(nil).GetOperation), varargs...)
}

// GetOperations mocks base method.
func (m *MockLightsailClient) GetOperations(arg0 context.Context, arg1 *lightsail.GetOperationsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetOperationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOperations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperations", varargs...)
	ret0, _ := ret[0].(*lightsail.GetOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockLightsailClientMockRecorder) GetOperations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockLightsailClient)(nil).GetOperations), varargs...)
}

// GetOperationsForResource mocks base method.
func (m *MockLightsailClient) GetOperationsForResource(arg0 context.Context, arg1 *lightsail.GetOperationsForResourceInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetOperationsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOperationsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperationsForResource", varargs...)
	ret0, _ := ret[0].(*lightsail.GetOperationsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsForResource indicates an expected call of GetOperationsForResource.
func (mr *MockLightsailClientMockRecorder) GetOperationsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsForResource", reflect.TypeOf((*MockLightsailClient)(nil).GetOperationsForResource), varargs...)
}

// GetRegions mocks base method.
func (m *MockLightsailClient) GetRegions(arg0 context.Context, arg1 *lightsail.GetRegionsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRegionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRegions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegions", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockLightsailClientMockRecorder) GetRegions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockLightsailClient)(nil).GetRegions), varargs...)
}

// GetRelationalDatabase mocks base method.
func (m *MockLightsailClient) GetRelationalDatabase(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabase")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabase", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabase indicates an expected call of GetRelationalDatabase.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabase(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabase", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabase), varargs...)
}

// GetRelationalDatabaseBlueprints mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseBlueprints(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseBlueprintsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseBlueprints")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseBlueprints", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseBlueprints indicates an expected call of GetRelationalDatabaseBlueprints.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseBlueprints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseBlueprints", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseBlueprints), varargs...)
}

// GetRelationalDatabaseBundles mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseBundles(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseBundlesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseBundles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseBundles", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseBundles indicates an expected call of GetRelationalDatabaseBundles.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseBundles", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseBundles), varargs...)
}

// GetRelationalDatabaseEvents mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseEvents(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseEventsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseEvents", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseEvents indicates an expected call of GetRelationalDatabaseEvents.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseEvents", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseEvents), varargs...)
}

// GetRelationalDatabaseLogEvents mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseLogEvents(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseLogEventsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseLogEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseLogEvents", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseLogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseLogEvents indicates an expected call of GetRelationalDatabaseLogEvents.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseLogEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseLogEvents", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseLogEvents), varargs...)
}

// GetRelationalDatabaseLogStreams mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseLogStreams(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseLogStreamsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseLogStreams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseLogStreams", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseLogStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseLogStreams indicates an expected call of GetRelationalDatabaseLogStreams.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseLogStreams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseLogStreams", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseLogStreams), varargs...)
}

// GetRelationalDatabaseMasterUserPassword mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseMasterUserPassword(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseMasterUserPasswordInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseMasterUserPassword")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseMasterUserPassword", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseMasterUserPassword indicates an expected call of GetRelationalDatabaseMasterUserPassword.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseMasterUserPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseMasterUserPassword", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseMasterUserPassword), varargs...)
}

// GetRelationalDatabaseMetricData mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseMetricData(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseMetricDataInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseMetricData")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseMetricData", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseMetricData indicates an expected call of GetRelationalDatabaseMetricData.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseMetricData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseMetricData", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseMetricData), varargs...)
}

// GetRelationalDatabaseParameters mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseParameters(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseParametersInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseParametersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseParameters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseParameters", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseParameters indicates an expected call of GetRelationalDatabaseParameters.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseParameters", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseParameters), varargs...)
}

// GetRelationalDatabaseSnapshot mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseSnapshot(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseSnapshotInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseSnapshot")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseSnapshot", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseSnapshot indicates an expected call of GetRelationalDatabaseSnapshot.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseSnapshot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseSnapshot", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseSnapshot), varargs...)
}

// GetRelationalDatabaseSnapshots mocks base method.
func (m *MockLightsailClient) GetRelationalDatabaseSnapshots(arg0 context.Context, arg1 *lightsail.GetRelationalDatabaseSnapshotsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabaseSnapshots")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabaseSnapshots", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabaseSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabaseSnapshots indicates an expected call of GetRelationalDatabaseSnapshots.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabaseSnapshots(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabaseSnapshots", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabaseSnapshots), varargs...)
}

// GetRelationalDatabases mocks base method.
func (m *MockLightsailClient) GetRelationalDatabases(arg0 context.Context, arg1 *lightsail.GetRelationalDatabasesInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRelationalDatabases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelationalDatabases", varargs...)
	ret0, _ := ret[0].(*lightsail.GetRelationalDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationalDatabases indicates an expected call of GetRelationalDatabases.
func (mr *MockLightsailClientMockRecorder) GetRelationalDatabases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationalDatabases", reflect.TypeOf((*MockLightsailClient)(nil).GetRelationalDatabases), varargs...)
}

// GetStaticIp mocks base method.
func (m *MockLightsailClient) GetStaticIp(arg0 context.Context, arg1 *lightsail.GetStaticIpInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetStaticIpOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStaticIp")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStaticIp", varargs...)
	ret0, _ := ret[0].(*lightsail.GetStaticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticIp indicates an expected call of GetStaticIp.
func (mr *MockLightsailClientMockRecorder) GetStaticIp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIp", reflect.TypeOf((*MockLightsailClient)(nil).GetStaticIp), varargs...)
}

// GetStaticIps mocks base method.
func (m *MockLightsailClient) GetStaticIps(arg0 context.Context, arg1 *lightsail.GetStaticIpsInput, arg2 ...func(*lightsail.Options)) (*lightsail.GetStaticIpsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lightsail.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStaticIps")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStaticIps", varargs...)
	ret0, _ := ret[0].(*lightsail.GetStaticIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticIps indicates an expected call of GetStaticIps.
func (mr *MockLightsailClientMockRecorder) GetStaticIps(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticIps", reflect.TypeOf((*MockLightsailClient)(nil).GetStaticIps), varargs...)
}
