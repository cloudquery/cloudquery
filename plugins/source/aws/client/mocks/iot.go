// Code generated by MockGen. DO NOT EDIT.
// Source: iot.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	iot "github.com/aws/aws-sdk-go-v2/service/iot"
	gomock "github.com/golang/mock/gomock"
)

// MockIotClient is a mock of IotClient interface.
type MockIotClient struct {
	ctrl     *gomock.Controller
	recorder *MockIotClientMockRecorder
}

// MockIotClientMockRecorder is the mock recorder for MockIotClient.
type MockIotClientMockRecorder struct {
	mock *MockIotClient
}

// NewMockIotClient creates a new mock instance.
func NewMockIotClient(ctrl *gomock.Controller) *MockIotClient {
	mock := &MockIotClient{ctrl: ctrl}
	mock.recorder = &MockIotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIotClient) EXPECT() *MockIotClientMockRecorder {
	return m.recorder
}

// DescribeAccountAuditConfiguration mocks base method.
func (m *MockIotClient) DescribeAccountAuditConfiguration(arg0 context.Context, arg1 *iot.DescribeAccountAuditConfigurationInput, arg2 ...func(*iot.Options)) (*iot.DescribeAccountAuditConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountAuditConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAuditConfiguration", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAccountAuditConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAuditConfiguration indicates an expected call of DescribeAccountAuditConfiguration.
func (mr *MockIotClientMockRecorder) DescribeAccountAuditConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAuditConfiguration", reflect.TypeOf((*MockIotClient)(nil).DescribeAccountAuditConfiguration), varargs...)
}

// DescribeAuditFinding mocks base method.
func (m *MockIotClient) DescribeAuditFinding(arg0 context.Context, arg1 *iot.DescribeAuditFindingInput, arg2 ...func(*iot.Options)) (*iot.DescribeAuditFindingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAuditFinding")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuditFinding", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAuditFindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuditFinding indicates an expected call of DescribeAuditFinding.
func (mr *MockIotClientMockRecorder) DescribeAuditFinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuditFinding", reflect.TypeOf((*MockIotClient)(nil).DescribeAuditFinding), varargs...)
}

// DescribeAuditMitigationActionsTask mocks base method.
func (m *MockIotClient) DescribeAuditMitigationActionsTask(arg0 context.Context, arg1 *iot.DescribeAuditMitigationActionsTaskInput, arg2 ...func(*iot.Options)) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAuditMitigationActionsTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuditMitigationActionsTask", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAuditMitigationActionsTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuditMitigationActionsTask indicates an expected call of DescribeAuditMitigationActionsTask.
func (mr *MockIotClientMockRecorder) DescribeAuditMitigationActionsTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuditMitigationActionsTask", reflect.TypeOf((*MockIotClient)(nil).DescribeAuditMitigationActionsTask), varargs...)
}

// DescribeAuditSuppression mocks base method.
func (m *MockIotClient) DescribeAuditSuppression(arg0 context.Context, arg1 *iot.DescribeAuditSuppressionInput, arg2 ...func(*iot.Options)) (*iot.DescribeAuditSuppressionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAuditSuppression")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuditSuppression", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAuditSuppressionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuditSuppression indicates an expected call of DescribeAuditSuppression.
func (mr *MockIotClientMockRecorder) DescribeAuditSuppression(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuditSuppression", reflect.TypeOf((*MockIotClient)(nil).DescribeAuditSuppression), varargs...)
}

// DescribeAuditTask mocks base method.
func (m *MockIotClient) DescribeAuditTask(arg0 context.Context, arg1 *iot.DescribeAuditTaskInput, arg2 ...func(*iot.Options)) (*iot.DescribeAuditTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAuditTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuditTask", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAuditTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuditTask indicates an expected call of DescribeAuditTask.
func (mr *MockIotClientMockRecorder) DescribeAuditTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuditTask", reflect.TypeOf((*MockIotClient)(nil).DescribeAuditTask), varargs...)
}

// DescribeAuthorizer mocks base method.
func (m *MockIotClient) DescribeAuthorizer(arg0 context.Context, arg1 *iot.DescribeAuthorizerInput, arg2 ...func(*iot.Options)) (*iot.DescribeAuthorizerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAuthorizer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAuthorizer", varargs...)
	ret0, _ := ret[0].(*iot.DescribeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAuthorizer indicates an expected call of DescribeAuthorizer.
func (mr *MockIotClientMockRecorder) DescribeAuthorizer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAuthorizer", reflect.TypeOf((*MockIotClient)(nil).DescribeAuthorizer), varargs...)
}

// DescribeBillingGroup mocks base method.
func (m *MockIotClient) DescribeBillingGroup(arg0 context.Context, arg1 *iot.DescribeBillingGroupInput, arg2 ...func(*iot.Options)) (*iot.DescribeBillingGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeBillingGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBillingGroup", varargs...)
	ret0, _ := ret[0].(*iot.DescribeBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBillingGroup indicates an expected call of DescribeBillingGroup.
func (mr *MockIotClientMockRecorder) DescribeBillingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBillingGroup", reflect.TypeOf((*MockIotClient)(nil).DescribeBillingGroup), varargs...)
}

// DescribeCACertificate mocks base method.
func (m *MockIotClient) DescribeCACertificate(arg0 context.Context, arg1 *iot.DescribeCACertificateInput, arg2 ...func(*iot.Options)) (*iot.DescribeCACertificateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCACertificate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCACertificate", varargs...)
	ret0, _ := ret[0].(*iot.DescribeCACertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCACertificate indicates an expected call of DescribeCACertificate.
func (mr *MockIotClientMockRecorder) DescribeCACertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCACertificate", reflect.TypeOf((*MockIotClient)(nil).DescribeCACertificate), varargs...)
}

// DescribeCertificate mocks base method.
func (m *MockIotClient) DescribeCertificate(arg0 context.Context, arg1 *iot.DescribeCertificateInput, arg2 ...func(*iot.Options)) (*iot.DescribeCertificateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCertificate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificate", varargs...)
	ret0, _ := ret[0].(*iot.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificate indicates an expected call of DescribeCertificate.
func (mr *MockIotClientMockRecorder) DescribeCertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificate", reflect.TypeOf((*MockIotClient)(nil).DescribeCertificate), varargs...)
}

// DescribeCustomMetric mocks base method.
func (m *MockIotClient) DescribeCustomMetric(arg0 context.Context, arg1 *iot.DescribeCustomMetricInput, arg2 ...func(*iot.Options)) (*iot.DescribeCustomMetricOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCustomMetric")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomMetric", varargs...)
	ret0, _ := ret[0].(*iot.DescribeCustomMetricOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomMetric indicates an expected call of DescribeCustomMetric.
func (mr *MockIotClientMockRecorder) DescribeCustomMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomMetric", reflect.TypeOf((*MockIotClient)(nil).DescribeCustomMetric), varargs...)
}

// DescribeDefaultAuthorizer mocks base method.
func (m *MockIotClient) DescribeDefaultAuthorizer(arg0 context.Context, arg1 *iot.DescribeDefaultAuthorizerInput, arg2 ...func(*iot.Options)) (*iot.DescribeDefaultAuthorizerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDefaultAuthorizer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDefaultAuthorizer", varargs...)
	ret0, _ := ret[0].(*iot.DescribeDefaultAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultAuthorizer indicates an expected call of DescribeDefaultAuthorizer.
func (mr *MockIotClientMockRecorder) DescribeDefaultAuthorizer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultAuthorizer", reflect.TypeOf((*MockIotClient)(nil).DescribeDefaultAuthorizer), varargs...)
}

// DescribeDetectMitigationActionsTask mocks base method.
func (m *MockIotClient) DescribeDetectMitigationActionsTask(arg0 context.Context, arg1 *iot.DescribeDetectMitigationActionsTaskInput, arg2 ...func(*iot.Options)) (*iot.DescribeDetectMitigationActionsTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDetectMitigationActionsTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDetectMitigationActionsTask", varargs...)
	ret0, _ := ret[0].(*iot.DescribeDetectMitigationActionsTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDetectMitigationActionsTask indicates an expected call of DescribeDetectMitigationActionsTask.
func (mr *MockIotClientMockRecorder) DescribeDetectMitigationActionsTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetectMitigationActionsTask", reflect.TypeOf((*MockIotClient)(nil).DescribeDetectMitigationActionsTask), varargs...)
}

// DescribeDimension mocks base method.
func (m *MockIotClient) DescribeDimension(arg0 context.Context, arg1 *iot.DescribeDimensionInput, arg2 ...func(*iot.Options)) (*iot.DescribeDimensionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDimension")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDimension", varargs...)
	ret0, _ := ret[0].(*iot.DescribeDimensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDimension indicates an expected call of DescribeDimension.
func (mr *MockIotClientMockRecorder) DescribeDimension(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDimension", reflect.TypeOf((*MockIotClient)(nil).DescribeDimension), varargs...)
}

// DescribeDomainConfiguration mocks base method.
func (m *MockIotClient) DescribeDomainConfiguration(arg0 context.Context, arg1 *iot.DescribeDomainConfigurationInput, arg2 ...func(*iot.Options)) (*iot.DescribeDomainConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDomainConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainConfiguration", varargs...)
	ret0, _ := ret[0].(*iot.DescribeDomainConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainConfiguration indicates an expected call of DescribeDomainConfiguration.
func (mr *MockIotClientMockRecorder) DescribeDomainConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainConfiguration", reflect.TypeOf((*MockIotClient)(nil).DescribeDomainConfiguration), varargs...)
}

// DescribeEndpoint mocks base method.
func (m *MockIotClient) DescribeEndpoint(arg0 context.Context, arg1 *iot.DescribeEndpointInput, arg2 ...func(*iot.Options)) (*iot.DescribeEndpointOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEndpoint")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpoint", varargs...)
	ret0, _ := ret[0].(*iot.DescribeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoint indicates an expected call of DescribeEndpoint.
func (mr *MockIotClientMockRecorder) DescribeEndpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoint", reflect.TypeOf((*MockIotClient)(nil).DescribeEndpoint), varargs...)
}

// DescribeEventConfigurations mocks base method.
func (m *MockIotClient) DescribeEventConfigurations(arg0 context.Context, arg1 *iot.DescribeEventConfigurationsInput, arg2 ...func(*iot.Options)) (*iot.DescribeEventConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEventConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventConfigurations", varargs...)
	ret0, _ := ret[0].(*iot.DescribeEventConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventConfigurations indicates an expected call of DescribeEventConfigurations.
func (mr *MockIotClientMockRecorder) DescribeEventConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventConfigurations", reflect.TypeOf((*MockIotClient)(nil).DescribeEventConfigurations), varargs...)
}

// DescribeFleetMetric mocks base method.
func (m *MockIotClient) DescribeFleetMetric(arg0 context.Context, arg1 *iot.DescribeFleetMetricInput, arg2 ...func(*iot.Options)) (*iot.DescribeFleetMetricOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeFleetMetric")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetMetric", varargs...)
	ret0, _ := ret[0].(*iot.DescribeFleetMetricOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetMetric indicates an expected call of DescribeFleetMetric.
func (mr *MockIotClientMockRecorder) DescribeFleetMetric(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetMetric", reflect.TypeOf((*MockIotClient)(nil).DescribeFleetMetric), varargs...)
}

// DescribeIndex mocks base method.
func (m *MockIotClient) DescribeIndex(arg0 context.Context, arg1 *iot.DescribeIndexInput, arg2 ...func(*iot.Options)) (*iot.DescribeIndexOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeIndex")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIndex", varargs...)
	ret0, _ := ret[0].(*iot.DescribeIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIndex indicates an expected call of DescribeIndex.
func (mr *MockIotClientMockRecorder) DescribeIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIndex", reflect.TypeOf((*MockIotClient)(nil).DescribeIndex), varargs...)
}

// DescribeJob mocks base method.
func (m *MockIotClient) DescribeJob(arg0 context.Context, arg1 *iot.DescribeJobInput, arg2 ...func(*iot.Options)) (*iot.DescribeJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJob", varargs...)
	ret0, _ := ret[0].(*iot.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob.
func (mr *MockIotClientMockRecorder) DescribeJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockIotClient)(nil).DescribeJob), varargs...)
}

// DescribeJobExecution mocks base method.
func (m *MockIotClient) DescribeJobExecution(arg0 context.Context, arg1 *iot.DescribeJobExecutionInput, arg2 ...func(*iot.Options)) (*iot.DescribeJobExecutionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeJobExecution")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobExecution", varargs...)
	ret0, _ := ret[0].(*iot.DescribeJobExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobExecution indicates an expected call of DescribeJobExecution.
func (mr *MockIotClientMockRecorder) DescribeJobExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobExecution", reflect.TypeOf((*MockIotClient)(nil).DescribeJobExecution), varargs...)
}

// DescribeJobTemplate mocks base method.
func (m *MockIotClient) DescribeJobTemplate(arg0 context.Context, arg1 *iot.DescribeJobTemplateInput, arg2 ...func(*iot.Options)) (*iot.DescribeJobTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeJobTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobTemplate", varargs...)
	ret0, _ := ret[0].(*iot.DescribeJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobTemplate indicates an expected call of DescribeJobTemplate.
func (mr *MockIotClientMockRecorder) DescribeJobTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobTemplate", reflect.TypeOf((*MockIotClient)(nil).DescribeJobTemplate), varargs...)
}

// DescribeManagedJobTemplate mocks base method.
func (m *MockIotClient) DescribeManagedJobTemplate(arg0 context.Context, arg1 *iot.DescribeManagedJobTemplateInput, arg2 ...func(*iot.Options)) (*iot.DescribeManagedJobTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeManagedJobTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeManagedJobTemplate", varargs...)
	ret0, _ := ret[0].(*iot.DescribeManagedJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeManagedJobTemplate indicates an expected call of DescribeManagedJobTemplate.
func (mr *MockIotClientMockRecorder) DescribeManagedJobTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeManagedJobTemplate", reflect.TypeOf((*MockIotClient)(nil).DescribeManagedJobTemplate), varargs...)
}

// DescribeMitigationAction mocks base method.
func (m *MockIotClient) DescribeMitigationAction(arg0 context.Context, arg1 *iot.DescribeMitigationActionInput, arg2 ...func(*iot.Options)) (*iot.DescribeMitigationActionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeMitigationAction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMitigationAction", varargs...)
	ret0, _ := ret[0].(*iot.DescribeMitigationActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMitigationAction indicates an expected call of DescribeMitigationAction.
func (mr *MockIotClientMockRecorder) DescribeMitigationAction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMitigationAction", reflect.TypeOf((*MockIotClient)(nil).DescribeMitigationAction), varargs...)
}

// DescribeProvisioningTemplate mocks base method.
func (m *MockIotClient) DescribeProvisioningTemplate(arg0 context.Context, arg1 *iot.DescribeProvisioningTemplateInput, arg2 ...func(*iot.Options)) (*iot.DescribeProvisioningTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProvisioningTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisioningTemplate", varargs...)
	ret0, _ := ret[0].(*iot.DescribeProvisioningTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningTemplate indicates an expected call of DescribeProvisioningTemplate.
func (mr *MockIotClientMockRecorder) DescribeProvisioningTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningTemplate", reflect.TypeOf((*MockIotClient)(nil).DescribeProvisioningTemplate), varargs...)
}

// DescribeProvisioningTemplateVersion mocks base method.
func (m *MockIotClient) DescribeProvisioningTemplateVersion(arg0 context.Context, arg1 *iot.DescribeProvisioningTemplateVersionInput, arg2 ...func(*iot.Options)) (*iot.DescribeProvisioningTemplateVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProvisioningTemplateVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProvisioningTemplateVersion", varargs...)
	ret0, _ := ret[0].(*iot.DescribeProvisioningTemplateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProvisioningTemplateVersion indicates an expected call of DescribeProvisioningTemplateVersion.
func (mr *MockIotClientMockRecorder) DescribeProvisioningTemplateVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProvisioningTemplateVersion", reflect.TypeOf((*MockIotClient)(nil).DescribeProvisioningTemplateVersion), varargs...)
}

// DescribeRoleAlias mocks base method.
func (m *MockIotClient) DescribeRoleAlias(arg0 context.Context, arg1 *iot.DescribeRoleAliasInput, arg2 ...func(*iot.Options)) (*iot.DescribeRoleAliasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeRoleAlias")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRoleAlias", varargs...)
	ret0, _ := ret[0].(*iot.DescribeRoleAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoleAlias indicates an expected call of DescribeRoleAlias.
func (mr *MockIotClientMockRecorder) DescribeRoleAlias(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoleAlias", reflect.TypeOf((*MockIotClient)(nil).DescribeRoleAlias), varargs...)
}

// DescribeScheduledAudit mocks base method.
func (m *MockIotClient) DescribeScheduledAudit(arg0 context.Context, arg1 *iot.DescribeScheduledAuditInput, arg2 ...func(*iot.Options)) (*iot.DescribeScheduledAuditOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeScheduledAudit")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeScheduledAudit", varargs...)
	ret0, _ := ret[0].(*iot.DescribeScheduledAuditOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeScheduledAudit indicates an expected call of DescribeScheduledAudit.
func (mr *MockIotClientMockRecorder) DescribeScheduledAudit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduledAudit", reflect.TypeOf((*MockIotClient)(nil).DescribeScheduledAudit), varargs...)
}

// DescribeSecurityProfile mocks base method.
func (m *MockIotClient) DescribeSecurityProfile(arg0 context.Context, arg1 *iot.DescribeSecurityProfileInput, arg2 ...func(*iot.Options)) (*iot.DescribeSecurityProfileOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSecurityProfile")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSecurityProfile", varargs...)
	ret0, _ := ret[0].(*iot.DescribeSecurityProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityProfile indicates an expected call of DescribeSecurityProfile.
func (mr *MockIotClientMockRecorder) DescribeSecurityProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityProfile", reflect.TypeOf((*MockIotClient)(nil).DescribeSecurityProfile), varargs...)
}

// DescribeStream mocks base method.
func (m *MockIotClient) DescribeStream(arg0 context.Context, arg1 *iot.DescribeStreamInput, arg2 ...func(*iot.Options)) (*iot.DescribeStreamOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStream")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStream", varargs...)
	ret0, _ := ret[0].(*iot.DescribeStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStream indicates an expected call of DescribeStream.
func (mr *MockIotClientMockRecorder) DescribeStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStream", reflect.TypeOf((*MockIotClient)(nil).DescribeStream), varargs...)
}

// DescribeThing mocks base method.
func (m *MockIotClient) DescribeThing(arg0 context.Context, arg1 *iot.DescribeThingInput, arg2 ...func(*iot.Options)) (*iot.DescribeThingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeThing")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThing", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThing indicates an expected call of DescribeThing.
func (mr *MockIotClientMockRecorder) DescribeThing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThing", reflect.TypeOf((*MockIotClient)(nil).DescribeThing), varargs...)
}

// DescribeThingGroup mocks base method.
func (m *MockIotClient) DescribeThingGroup(arg0 context.Context, arg1 *iot.DescribeThingGroupInput, arg2 ...func(*iot.Options)) (*iot.DescribeThingGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeThingGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingGroup", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingGroup indicates an expected call of DescribeThingGroup.
func (mr *MockIotClientMockRecorder) DescribeThingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingGroup", reflect.TypeOf((*MockIotClient)(nil).DescribeThingGroup), varargs...)
}

// DescribeThingRegistrationTask mocks base method.
func (m *MockIotClient) DescribeThingRegistrationTask(arg0 context.Context, arg1 *iot.DescribeThingRegistrationTaskInput, arg2 ...func(*iot.Options)) (*iot.DescribeThingRegistrationTaskOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeThingRegistrationTask")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingRegistrationTask", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingRegistrationTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingRegistrationTask indicates an expected call of DescribeThingRegistrationTask.
func (mr *MockIotClientMockRecorder) DescribeThingRegistrationTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingRegistrationTask", reflect.TypeOf((*MockIotClient)(nil).DescribeThingRegistrationTask), varargs...)
}

// DescribeThingType mocks base method.
func (m *MockIotClient) DescribeThingType(arg0 context.Context, arg1 *iot.DescribeThingTypeInput, arg2 ...func(*iot.Options)) (*iot.DescribeThingTypeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeThingType")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeThingType", varargs...)
	ret0, _ := ret[0].(*iot.DescribeThingTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeThingType indicates an expected call of DescribeThingType.
func (mr *MockIotClientMockRecorder) DescribeThingType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeThingType", reflect.TypeOf((*MockIotClient)(nil).DescribeThingType), varargs...)
}

// GetBehaviorModelTrainingSummaries mocks base method.
func (m *MockIotClient) GetBehaviorModelTrainingSummaries(arg0 context.Context, arg1 *iot.GetBehaviorModelTrainingSummariesInput, arg2 ...func(*iot.Options)) (*iot.GetBehaviorModelTrainingSummariesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBehaviorModelTrainingSummaries")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBehaviorModelTrainingSummaries", varargs...)
	ret0, _ := ret[0].(*iot.GetBehaviorModelTrainingSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBehaviorModelTrainingSummaries indicates an expected call of GetBehaviorModelTrainingSummaries.
func (mr *MockIotClientMockRecorder) GetBehaviorModelTrainingSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBehaviorModelTrainingSummaries", reflect.TypeOf((*MockIotClient)(nil).GetBehaviorModelTrainingSummaries), varargs...)
}

// GetBucketsAggregation mocks base method.
func (m *MockIotClient) GetBucketsAggregation(arg0 context.Context, arg1 *iot.GetBucketsAggregationInput, arg2 ...func(*iot.Options)) (*iot.GetBucketsAggregationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetBucketsAggregation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBucketsAggregation", varargs...)
	ret0, _ := ret[0].(*iot.GetBucketsAggregationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketsAggregation indicates an expected call of GetBucketsAggregation.
func (mr *MockIotClientMockRecorder) GetBucketsAggregation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketsAggregation", reflect.TypeOf((*MockIotClient)(nil).GetBucketsAggregation), varargs...)
}

// GetCardinality mocks base method.
func (m *MockIotClient) GetCardinality(arg0 context.Context, arg1 *iot.GetCardinalityInput, arg2 ...func(*iot.Options)) (*iot.GetCardinalityOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCardinality")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCardinality", varargs...)
	ret0, _ := ret[0].(*iot.GetCardinalityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardinality indicates an expected call of GetCardinality.
func (mr *MockIotClientMockRecorder) GetCardinality(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardinality", reflect.TypeOf((*MockIotClient)(nil).GetCardinality), varargs...)
}

// GetEffectivePolicies mocks base method.
func (m *MockIotClient) GetEffectivePolicies(arg0 context.Context, arg1 *iot.GetEffectivePoliciesInput, arg2 ...func(*iot.Options)) (*iot.GetEffectivePoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEffectivePolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEffectivePolicies", varargs...)
	ret0, _ := ret[0].(*iot.GetEffectivePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectivePolicies indicates an expected call of GetEffectivePolicies.
func (mr *MockIotClientMockRecorder) GetEffectivePolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePolicies", reflect.TypeOf((*MockIotClient)(nil).GetEffectivePolicies), varargs...)
}

// GetIndexingConfiguration mocks base method.
func (m *MockIotClient) GetIndexingConfiguration(arg0 context.Context, arg1 *iot.GetIndexingConfigurationInput, arg2 ...func(*iot.Options)) (*iot.GetIndexingConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIndexingConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndexingConfiguration", varargs...)
	ret0, _ := ret[0].(*iot.GetIndexingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexingConfiguration indicates an expected call of GetIndexingConfiguration.
func (mr *MockIotClientMockRecorder) GetIndexingConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexingConfiguration", reflect.TypeOf((*MockIotClient)(nil).GetIndexingConfiguration), varargs...)
}

// GetJobDocument mocks base method.
func (m *MockIotClient) GetJobDocument(arg0 context.Context, arg1 *iot.GetJobDocumentInput, arg2 ...func(*iot.Options)) (*iot.GetJobDocumentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetJobDocument")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobDocument", varargs...)
	ret0, _ := ret[0].(*iot.GetJobDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDocument indicates an expected call of GetJobDocument.
func (mr *MockIotClientMockRecorder) GetJobDocument(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDocument", reflect.TypeOf((*MockIotClient)(nil).GetJobDocument), varargs...)
}

// GetLoggingOptions mocks base method.
func (m *MockIotClient) GetLoggingOptions(arg0 context.Context, arg1 *iot.GetLoggingOptionsInput, arg2 ...func(*iot.Options)) (*iot.GetLoggingOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLoggingOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggingOptions", varargs...)
	ret0, _ := ret[0].(*iot.GetLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingOptions indicates an expected call of GetLoggingOptions.
func (mr *MockIotClientMockRecorder) GetLoggingOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingOptions", reflect.TypeOf((*MockIotClient)(nil).GetLoggingOptions), varargs...)
}

// GetOTAUpdate mocks base method.
func (m *MockIotClient) GetOTAUpdate(arg0 context.Context, arg1 *iot.GetOTAUpdateInput, arg2 ...func(*iot.Options)) (*iot.GetOTAUpdateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetOTAUpdate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOTAUpdate", varargs...)
	ret0, _ := ret[0].(*iot.GetOTAUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTAUpdate indicates an expected call of GetOTAUpdate.
func (mr *MockIotClientMockRecorder) GetOTAUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTAUpdate", reflect.TypeOf((*MockIotClient)(nil).GetOTAUpdate), varargs...)
}

// GetPackage mocks base method.
func (m *MockIotClient) GetPackage(arg0 context.Context, arg1 *iot.GetPackageInput, arg2 ...func(*iot.Options)) (*iot.GetPackageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPackage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackage", varargs...)
	ret0, _ := ret[0].(*iot.GetPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockIotClientMockRecorder) GetPackage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockIotClient)(nil).GetPackage), varargs...)
}

// GetPackageConfiguration mocks base method.
func (m *MockIotClient) GetPackageConfiguration(arg0 context.Context, arg1 *iot.GetPackageConfigurationInput, arg2 ...func(*iot.Options)) (*iot.GetPackageConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPackageConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackageConfiguration", varargs...)
	ret0, _ := ret[0].(*iot.GetPackageConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageConfiguration indicates an expected call of GetPackageConfiguration.
func (mr *MockIotClientMockRecorder) GetPackageConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageConfiguration", reflect.TypeOf((*MockIotClient)(nil).GetPackageConfiguration), varargs...)
}

// GetPackageVersion mocks base method.
func (m *MockIotClient) GetPackageVersion(arg0 context.Context, arg1 *iot.GetPackageVersionInput, arg2 ...func(*iot.Options)) (*iot.GetPackageVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPackageVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackageVersion", varargs...)
	ret0, _ := ret[0].(*iot.GetPackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersion indicates an expected call of GetPackageVersion.
func (mr *MockIotClientMockRecorder) GetPackageVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersion", reflect.TypeOf((*MockIotClient)(nil).GetPackageVersion), varargs...)
}

// GetPercentiles mocks base method.
func (m *MockIotClient) GetPercentiles(arg0 context.Context, arg1 *iot.GetPercentilesInput, arg2 ...func(*iot.Options)) (*iot.GetPercentilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPercentiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPercentiles", varargs...)
	ret0, _ := ret[0].(*iot.GetPercentilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPercentiles indicates an expected call of GetPercentiles.
func (mr *MockIotClientMockRecorder) GetPercentiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPercentiles", reflect.TypeOf((*MockIotClient)(nil).GetPercentiles), varargs...)
}

// GetPolicy mocks base method.
func (m *MockIotClient) GetPolicy(arg0 context.Context, arg1 *iot.GetPolicyInput, arg2 ...func(*iot.Options)) (*iot.GetPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicy", varargs...)
	ret0, _ := ret[0].(*iot.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockIotClientMockRecorder) GetPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockIotClient)(nil).GetPolicy), varargs...)
}

// GetPolicyVersion mocks base method.
func (m *MockIotClient) GetPolicyVersion(arg0 context.Context, arg1 *iot.GetPolicyVersionInput, arg2 ...func(*iot.Options)) (*iot.GetPolicyVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPolicyVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyVersion", varargs...)
	ret0, _ := ret[0].(*iot.GetPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyVersion indicates an expected call of GetPolicyVersion.
func (mr *MockIotClientMockRecorder) GetPolicyVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyVersion", reflect.TypeOf((*MockIotClient)(nil).GetPolicyVersion), varargs...)
}

// GetRegistrationCode mocks base method.
func (m *MockIotClient) GetRegistrationCode(arg0 context.Context, arg1 *iot.GetRegistrationCodeInput, arg2 ...func(*iot.Options)) (*iot.GetRegistrationCodeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRegistrationCode")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegistrationCode", varargs...)
	ret0, _ := ret[0].(*iot.GetRegistrationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationCode indicates an expected call of GetRegistrationCode.
func (mr *MockIotClientMockRecorder) GetRegistrationCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationCode", reflect.TypeOf((*MockIotClient)(nil).GetRegistrationCode), varargs...)
}

// GetStatistics mocks base method.
func (m *MockIotClient) GetStatistics(arg0 context.Context, arg1 *iot.GetStatisticsInput, arg2 ...func(*iot.Options)) (*iot.GetStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatistics", varargs...)
	ret0, _ := ret[0].(*iot.GetStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockIotClientMockRecorder) GetStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockIotClient)(nil).GetStatistics), varargs...)
}

// GetTopicRule mocks base method.
func (m *MockIotClient) GetTopicRule(arg0 context.Context, arg1 *iot.GetTopicRuleInput, arg2 ...func(*iot.Options)) (*iot.GetTopicRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTopicRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopicRule", varargs...)
	ret0, _ := ret[0].(*iot.GetTopicRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicRule indicates an expected call of GetTopicRule.
func (mr *MockIotClientMockRecorder) GetTopicRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicRule", reflect.TypeOf((*MockIotClient)(nil).GetTopicRule), varargs...)
}

// GetTopicRuleDestination mocks base method.
func (m *MockIotClient) GetTopicRuleDestination(arg0 context.Context, arg1 *iot.GetTopicRuleDestinationInput, arg2 ...func(*iot.Options)) (*iot.GetTopicRuleDestinationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTopicRuleDestination")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTopicRuleDestination", varargs...)
	ret0, _ := ret[0].(*iot.GetTopicRuleDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicRuleDestination indicates an expected call of GetTopicRuleDestination.
func (mr *MockIotClientMockRecorder) GetTopicRuleDestination(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicRuleDestination", reflect.TypeOf((*MockIotClient)(nil).GetTopicRuleDestination), varargs...)
}

// GetV2LoggingOptions mocks base method.
func (m *MockIotClient) GetV2LoggingOptions(arg0 context.Context, arg1 *iot.GetV2LoggingOptionsInput, arg2 ...func(*iot.Options)) (*iot.GetV2LoggingOptionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetV2LoggingOptions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetV2LoggingOptions", varargs...)
	ret0, _ := ret[0].(*iot.GetV2LoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2LoggingOptions indicates an expected call of GetV2LoggingOptions.
func (mr *MockIotClientMockRecorder) GetV2LoggingOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2LoggingOptions", reflect.TypeOf((*MockIotClient)(nil).GetV2LoggingOptions), varargs...)
}

// ListActiveViolations mocks base method.
func (m *MockIotClient) ListActiveViolations(arg0 context.Context, arg1 *iot.ListActiveViolationsInput, arg2 ...func(*iot.Options)) (*iot.ListActiveViolationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListActiveViolations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActiveViolations", varargs...)
	ret0, _ := ret[0].(*iot.ListActiveViolationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveViolations indicates an expected call of ListActiveViolations.
func (mr *MockIotClientMockRecorder) ListActiveViolations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveViolations", reflect.TypeOf((*MockIotClient)(nil).ListActiveViolations), varargs...)
}

// ListAttachedPolicies mocks base method.
func (m *MockIotClient) ListAttachedPolicies(arg0 context.Context, arg1 *iot.ListAttachedPoliciesInput, arg2 ...func(*iot.Options)) (*iot.ListAttachedPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAttachedPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedPolicies", varargs...)
	ret0, _ := ret[0].(*iot.ListAttachedPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedPolicies indicates an expected call of ListAttachedPolicies.
func (mr *MockIotClientMockRecorder) ListAttachedPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedPolicies", reflect.TypeOf((*MockIotClient)(nil).ListAttachedPolicies), varargs...)
}

// ListAuditFindings mocks base method.
func (m *MockIotClient) ListAuditFindings(arg0 context.Context, arg1 *iot.ListAuditFindingsInput, arg2 ...func(*iot.Options)) (*iot.ListAuditFindingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAuditFindings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditFindings", varargs...)
	ret0, _ := ret[0].(*iot.ListAuditFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditFindings indicates an expected call of ListAuditFindings.
func (mr *MockIotClientMockRecorder) ListAuditFindings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditFindings", reflect.TypeOf((*MockIotClient)(nil).ListAuditFindings), varargs...)
}

// ListAuditMitigationActionsExecutions mocks base method.
func (m *MockIotClient) ListAuditMitigationActionsExecutions(arg0 context.Context, arg1 *iot.ListAuditMitigationActionsExecutionsInput, arg2 ...func(*iot.Options)) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAuditMitigationActionsExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditMitigationActionsExecutions", varargs...)
	ret0, _ := ret[0].(*iot.ListAuditMitigationActionsExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditMitigationActionsExecutions indicates an expected call of ListAuditMitigationActionsExecutions.
func (mr *MockIotClientMockRecorder) ListAuditMitigationActionsExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditMitigationActionsExecutions", reflect.TypeOf((*MockIotClient)(nil).ListAuditMitigationActionsExecutions), varargs...)
}

// ListAuditMitigationActionsTasks mocks base method.
func (m *MockIotClient) ListAuditMitigationActionsTasks(arg0 context.Context, arg1 *iot.ListAuditMitigationActionsTasksInput, arg2 ...func(*iot.Options)) (*iot.ListAuditMitigationActionsTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAuditMitigationActionsTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditMitigationActionsTasks", varargs...)
	ret0, _ := ret[0].(*iot.ListAuditMitigationActionsTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditMitigationActionsTasks indicates an expected call of ListAuditMitigationActionsTasks.
func (mr *MockIotClientMockRecorder) ListAuditMitigationActionsTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditMitigationActionsTasks", reflect.TypeOf((*MockIotClient)(nil).ListAuditMitigationActionsTasks), varargs...)
}

// ListAuditSuppressions mocks base method.
func (m *MockIotClient) ListAuditSuppressions(arg0 context.Context, arg1 *iot.ListAuditSuppressionsInput, arg2 ...func(*iot.Options)) (*iot.ListAuditSuppressionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAuditSuppressions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditSuppressions", varargs...)
	ret0, _ := ret[0].(*iot.ListAuditSuppressionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditSuppressions indicates an expected call of ListAuditSuppressions.
func (mr *MockIotClientMockRecorder) ListAuditSuppressions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditSuppressions", reflect.TypeOf((*MockIotClient)(nil).ListAuditSuppressions), varargs...)
}

// ListAuditTasks mocks base method.
func (m *MockIotClient) ListAuditTasks(arg0 context.Context, arg1 *iot.ListAuditTasksInput, arg2 ...func(*iot.Options)) (*iot.ListAuditTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAuditTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuditTasks", varargs...)
	ret0, _ := ret[0].(*iot.ListAuditTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuditTasks indicates an expected call of ListAuditTasks.
func (mr *MockIotClientMockRecorder) ListAuditTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditTasks", reflect.TypeOf((*MockIotClient)(nil).ListAuditTasks), varargs...)
}

// ListAuthorizers mocks base method.
func (m *MockIotClient) ListAuthorizers(arg0 context.Context, arg1 *iot.ListAuthorizersInput, arg2 ...func(*iot.Options)) (*iot.ListAuthorizersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAuthorizers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAuthorizers", varargs...)
	ret0, _ := ret[0].(*iot.ListAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorizers indicates an expected call of ListAuthorizers.
func (mr *MockIotClientMockRecorder) ListAuthorizers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorizers", reflect.TypeOf((*MockIotClient)(nil).ListAuthorizers), varargs...)
}

// ListBillingGroups mocks base method.
func (m *MockIotClient) ListBillingGroups(arg0 context.Context, arg1 *iot.ListBillingGroupsInput, arg2 ...func(*iot.Options)) (*iot.ListBillingGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListBillingGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBillingGroups", varargs...)
	ret0, _ := ret[0].(*iot.ListBillingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBillingGroups indicates an expected call of ListBillingGroups.
func (mr *MockIotClientMockRecorder) ListBillingGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroups", reflect.TypeOf((*MockIotClient)(nil).ListBillingGroups), varargs...)
}

// ListCACertificates mocks base method.
func (m *MockIotClient) ListCACertificates(arg0 context.Context, arg1 *iot.ListCACertificatesInput, arg2 ...func(*iot.Options)) (*iot.ListCACertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCACertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCACertificates", varargs...)
	ret0, _ := ret[0].(*iot.ListCACertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCACertificates indicates an expected call of ListCACertificates.
func (mr *MockIotClientMockRecorder) ListCACertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCACertificates", reflect.TypeOf((*MockIotClient)(nil).ListCACertificates), varargs...)
}

// ListCertificates mocks base method.
func (m *MockIotClient) ListCertificates(arg0 context.Context, arg1 *iot.ListCertificatesInput, arg2 ...func(*iot.Options)) (*iot.ListCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificates", varargs...)
	ret0, _ := ret[0].(*iot.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockIotClientMockRecorder) ListCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockIotClient)(nil).ListCertificates), varargs...)
}

// ListCertificatesByCA mocks base method.
func (m *MockIotClient) ListCertificatesByCA(arg0 context.Context, arg1 *iot.ListCertificatesByCAInput, arg2 ...func(*iot.Options)) (*iot.ListCertificatesByCAOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCertificatesByCA")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificatesByCA", varargs...)
	ret0, _ := ret[0].(*iot.ListCertificatesByCAOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesByCA indicates an expected call of ListCertificatesByCA.
func (mr *MockIotClientMockRecorder) ListCertificatesByCA(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesByCA", reflect.TypeOf((*MockIotClient)(nil).ListCertificatesByCA), varargs...)
}

// ListCustomMetrics mocks base method.
func (m *MockIotClient) ListCustomMetrics(arg0 context.Context, arg1 *iot.ListCustomMetricsInput, arg2 ...func(*iot.Options)) (*iot.ListCustomMetricsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCustomMetrics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomMetrics", varargs...)
	ret0, _ := ret[0].(*iot.ListCustomMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomMetrics indicates an expected call of ListCustomMetrics.
func (mr *MockIotClientMockRecorder) ListCustomMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomMetrics", reflect.TypeOf((*MockIotClient)(nil).ListCustomMetrics), varargs...)
}

// ListDetectMitigationActionsExecutions mocks base method.
func (m *MockIotClient) ListDetectMitigationActionsExecutions(arg0 context.Context, arg1 *iot.ListDetectMitigationActionsExecutionsInput, arg2 ...func(*iot.Options)) (*iot.ListDetectMitigationActionsExecutionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDetectMitigationActionsExecutions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDetectMitigationActionsExecutions", varargs...)
	ret0, _ := ret[0].(*iot.ListDetectMitigationActionsExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetectMitigationActionsExecutions indicates an expected call of ListDetectMitigationActionsExecutions.
func (mr *MockIotClientMockRecorder) ListDetectMitigationActionsExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectMitigationActionsExecutions", reflect.TypeOf((*MockIotClient)(nil).ListDetectMitigationActionsExecutions), varargs...)
}

// ListDetectMitigationActionsTasks mocks base method.
func (m *MockIotClient) ListDetectMitigationActionsTasks(arg0 context.Context, arg1 *iot.ListDetectMitigationActionsTasksInput, arg2 ...func(*iot.Options)) (*iot.ListDetectMitigationActionsTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDetectMitigationActionsTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDetectMitigationActionsTasks", varargs...)
	ret0, _ := ret[0].(*iot.ListDetectMitigationActionsTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetectMitigationActionsTasks indicates an expected call of ListDetectMitigationActionsTasks.
func (mr *MockIotClientMockRecorder) ListDetectMitigationActionsTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectMitigationActionsTasks", reflect.TypeOf((*MockIotClient)(nil).ListDetectMitigationActionsTasks), varargs...)
}

// ListDimensions mocks base method.
func (m *MockIotClient) ListDimensions(arg0 context.Context, arg1 *iot.ListDimensionsInput, arg2 ...func(*iot.Options)) (*iot.ListDimensionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDimensions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDimensions", varargs...)
	ret0, _ := ret[0].(*iot.ListDimensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDimensions indicates an expected call of ListDimensions.
func (mr *MockIotClientMockRecorder) ListDimensions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDimensions", reflect.TypeOf((*MockIotClient)(nil).ListDimensions), varargs...)
}

// ListDomainConfigurations mocks base method.
func (m *MockIotClient) ListDomainConfigurations(arg0 context.Context, arg1 *iot.ListDomainConfigurationsInput, arg2 ...func(*iot.Options)) (*iot.ListDomainConfigurationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListDomainConfigurations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainConfigurations", varargs...)
	ret0, _ := ret[0].(*iot.ListDomainConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainConfigurations indicates an expected call of ListDomainConfigurations.
func (mr *MockIotClientMockRecorder) ListDomainConfigurations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainConfigurations", reflect.TypeOf((*MockIotClient)(nil).ListDomainConfigurations), varargs...)
}

// ListFleetMetrics mocks base method.
func (m *MockIotClient) ListFleetMetrics(arg0 context.Context, arg1 *iot.ListFleetMetricsInput, arg2 ...func(*iot.Options)) (*iot.ListFleetMetricsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFleetMetrics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetMetrics", varargs...)
	ret0, _ := ret[0].(*iot.ListFleetMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetMetrics indicates an expected call of ListFleetMetrics.
func (mr *MockIotClientMockRecorder) ListFleetMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetMetrics", reflect.TypeOf((*MockIotClient)(nil).ListFleetMetrics), varargs...)
}

// ListIndices mocks base method.
func (m *MockIotClient) ListIndices(arg0 context.Context, arg1 *iot.ListIndicesInput, arg2 ...func(*iot.Options)) (*iot.ListIndicesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListIndices")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndices", varargs...)
	ret0, _ := ret[0].(*iot.ListIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndices indicates an expected call of ListIndices.
func (mr *MockIotClientMockRecorder) ListIndices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndices", reflect.TypeOf((*MockIotClient)(nil).ListIndices), varargs...)
}

// ListJobExecutionsForJob mocks base method.
func (m *MockIotClient) ListJobExecutionsForJob(arg0 context.Context, arg1 *iot.ListJobExecutionsForJobInput, arg2 ...func(*iot.Options)) (*iot.ListJobExecutionsForJobOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJobExecutionsForJob")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobExecutionsForJob", varargs...)
	ret0, _ := ret[0].(*iot.ListJobExecutionsForJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobExecutionsForJob indicates an expected call of ListJobExecutionsForJob.
func (mr *MockIotClientMockRecorder) ListJobExecutionsForJob(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForJob", reflect.TypeOf((*MockIotClient)(nil).ListJobExecutionsForJob), varargs...)
}

// ListJobExecutionsForThing mocks base method.
func (m *MockIotClient) ListJobExecutionsForThing(arg0 context.Context, arg1 *iot.ListJobExecutionsForThingInput, arg2 ...func(*iot.Options)) (*iot.ListJobExecutionsForThingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJobExecutionsForThing")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobExecutionsForThing", varargs...)
	ret0, _ := ret[0].(*iot.ListJobExecutionsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobExecutionsForThing indicates an expected call of ListJobExecutionsForThing.
func (mr *MockIotClientMockRecorder) ListJobExecutionsForThing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobExecutionsForThing", reflect.TypeOf((*MockIotClient)(nil).ListJobExecutionsForThing), varargs...)
}

// ListJobTemplates mocks base method.
func (m *MockIotClient) ListJobTemplates(arg0 context.Context, arg1 *iot.ListJobTemplatesInput, arg2 ...func(*iot.Options)) (*iot.ListJobTemplatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJobTemplates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobTemplates", varargs...)
	ret0, _ := ret[0].(*iot.ListJobTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobTemplates indicates an expected call of ListJobTemplates.
func (mr *MockIotClientMockRecorder) ListJobTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobTemplates", reflect.TypeOf((*MockIotClient)(nil).ListJobTemplates), varargs...)
}

// ListJobs mocks base method.
func (m *MockIotClient) ListJobs(arg0 context.Context, arg1 *iot.ListJobsInput, arg2 ...func(*iot.Options)) (*iot.ListJobsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListJobs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobs", varargs...)
	ret0, _ := ret[0].(*iot.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockIotClientMockRecorder) ListJobs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockIotClient)(nil).ListJobs), varargs...)
}

// ListManagedJobTemplates mocks base method.
func (m *MockIotClient) ListManagedJobTemplates(arg0 context.Context, arg1 *iot.ListManagedJobTemplatesInput, arg2 ...func(*iot.Options)) (*iot.ListManagedJobTemplatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListManagedJobTemplates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedJobTemplates", varargs...)
	ret0, _ := ret[0].(*iot.ListManagedJobTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedJobTemplates indicates an expected call of ListManagedJobTemplates.
func (mr *MockIotClientMockRecorder) ListManagedJobTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedJobTemplates", reflect.TypeOf((*MockIotClient)(nil).ListManagedJobTemplates), varargs...)
}

// ListMetricValues mocks base method.
func (m *MockIotClient) ListMetricValues(arg0 context.Context, arg1 *iot.ListMetricValuesInput, arg2 ...func(*iot.Options)) (*iot.ListMetricValuesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMetricValues")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricValues", varargs...)
	ret0, _ := ret[0].(*iot.ListMetricValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricValues indicates an expected call of ListMetricValues.
func (mr *MockIotClientMockRecorder) ListMetricValues(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricValues", reflect.TypeOf((*MockIotClient)(nil).ListMetricValues), varargs...)
}

// ListMitigationActions mocks base method.
func (m *MockIotClient) ListMitigationActions(arg0 context.Context, arg1 *iot.ListMitigationActionsInput, arg2 ...func(*iot.Options)) (*iot.ListMitigationActionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListMitigationActions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMitigationActions", varargs...)
	ret0, _ := ret[0].(*iot.ListMitigationActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMitigationActions indicates an expected call of ListMitigationActions.
func (mr *MockIotClientMockRecorder) ListMitigationActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMitigationActions", reflect.TypeOf((*MockIotClient)(nil).ListMitigationActions), varargs...)
}

// ListOTAUpdates mocks base method.
func (m *MockIotClient) ListOTAUpdates(arg0 context.Context, arg1 *iot.ListOTAUpdatesInput, arg2 ...func(*iot.Options)) (*iot.ListOTAUpdatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOTAUpdates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOTAUpdates", varargs...)
	ret0, _ := ret[0].(*iot.ListOTAUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOTAUpdates indicates an expected call of ListOTAUpdates.
func (mr *MockIotClientMockRecorder) ListOTAUpdates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOTAUpdates", reflect.TypeOf((*MockIotClient)(nil).ListOTAUpdates), varargs...)
}

// ListOutgoingCertificates mocks base method.
func (m *MockIotClient) ListOutgoingCertificates(arg0 context.Context, arg1 *iot.ListOutgoingCertificatesInput, arg2 ...func(*iot.Options)) (*iot.ListOutgoingCertificatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListOutgoingCertificates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutgoingCertificates", varargs...)
	ret0, _ := ret[0].(*iot.ListOutgoingCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingCertificates indicates an expected call of ListOutgoingCertificates.
func (mr *MockIotClientMockRecorder) ListOutgoingCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingCertificates", reflect.TypeOf((*MockIotClient)(nil).ListOutgoingCertificates), varargs...)
}

// ListPackageVersions mocks base method.
func (m *MockIotClient) ListPackageVersions(arg0 context.Context, arg1 *iot.ListPackageVersionsInput, arg2 ...func(*iot.Options)) (*iot.ListPackageVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPackageVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackageVersions", varargs...)
	ret0, _ := ret[0].(*iot.ListPackageVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageVersions indicates an expected call of ListPackageVersions.
func (mr *MockIotClientMockRecorder) ListPackageVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageVersions", reflect.TypeOf((*MockIotClient)(nil).ListPackageVersions), varargs...)
}

// ListPackages mocks base method.
func (m *MockIotClient) ListPackages(arg0 context.Context, arg1 *iot.ListPackagesInput, arg2 ...func(*iot.Options)) (*iot.ListPackagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPackages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackages", varargs...)
	ret0, _ := ret[0].(*iot.ListPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockIotClientMockRecorder) ListPackages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockIotClient)(nil).ListPackages), varargs...)
}

// ListPolicies mocks base method.
func (m *MockIotClient) ListPolicies(arg0 context.Context, arg1 *iot.ListPoliciesInput, arg2 ...func(*iot.Options)) (*iot.ListPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicies", varargs...)
	ret0, _ := ret[0].(*iot.ListPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockIotClientMockRecorder) ListPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockIotClient)(nil).ListPolicies), varargs...)
}

// ListPolicyPrincipals mocks base method.
func (m *MockIotClient) ListPolicyPrincipals(arg0 context.Context, arg1 *iot.ListPolicyPrincipalsInput, arg2 ...func(*iot.Options)) (*iot.ListPolicyPrincipalsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPolicyPrincipals")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyPrincipals", varargs...)
	ret0, _ := ret[0].(*iot.ListPolicyPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyPrincipals indicates an expected call of ListPolicyPrincipals.
func (mr *MockIotClientMockRecorder) ListPolicyPrincipals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyPrincipals", reflect.TypeOf((*MockIotClient)(nil).ListPolicyPrincipals), varargs...)
}

// ListPolicyVersions mocks base method.
func (m *MockIotClient) ListPolicyVersions(arg0 context.Context, arg1 *iot.ListPolicyVersionsInput, arg2 ...func(*iot.Options)) (*iot.ListPolicyVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPolicyVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyVersions", varargs...)
	ret0, _ := ret[0].(*iot.ListPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyVersions indicates an expected call of ListPolicyVersions.
func (mr *MockIotClientMockRecorder) ListPolicyVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyVersions", reflect.TypeOf((*MockIotClient)(nil).ListPolicyVersions), varargs...)
}

// ListPrincipalPolicies mocks base method.
func (m *MockIotClient) ListPrincipalPolicies(arg0 context.Context, arg1 *iot.ListPrincipalPoliciesInput, arg2 ...func(*iot.Options)) (*iot.ListPrincipalPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPrincipalPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalPolicies", varargs...)
	ret0, _ := ret[0].(*iot.ListPrincipalPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalPolicies indicates an expected call of ListPrincipalPolicies.
func (mr *MockIotClientMockRecorder) ListPrincipalPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalPolicies", reflect.TypeOf((*MockIotClient)(nil).ListPrincipalPolicies), varargs...)
}

// ListPrincipalThings mocks base method.
func (m *MockIotClient) ListPrincipalThings(arg0 context.Context, arg1 *iot.ListPrincipalThingsInput, arg2 ...func(*iot.Options)) (*iot.ListPrincipalThingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPrincipalThings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrincipalThings", varargs...)
	ret0, _ := ret[0].(*iot.ListPrincipalThingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrincipalThings indicates an expected call of ListPrincipalThings.
func (mr *MockIotClientMockRecorder) ListPrincipalThings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrincipalThings", reflect.TypeOf((*MockIotClient)(nil).ListPrincipalThings), varargs...)
}

// ListProvisioningTemplateVersions mocks base method.
func (m *MockIotClient) ListProvisioningTemplateVersions(arg0 context.Context, arg1 *iot.ListProvisioningTemplateVersionsInput, arg2 ...func(*iot.Options)) (*iot.ListProvisioningTemplateVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisioningTemplateVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningTemplateVersions", varargs...)
	ret0, _ := ret[0].(*iot.ListProvisioningTemplateVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningTemplateVersions indicates an expected call of ListProvisioningTemplateVersions.
func (mr *MockIotClientMockRecorder) ListProvisioningTemplateVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningTemplateVersions", reflect.TypeOf((*MockIotClient)(nil).ListProvisioningTemplateVersions), varargs...)
}

// ListProvisioningTemplates mocks base method.
func (m *MockIotClient) ListProvisioningTemplates(arg0 context.Context, arg1 *iot.ListProvisioningTemplatesInput, arg2 ...func(*iot.Options)) (*iot.ListProvisioningTemplatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisioningTemplates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisioningTemplates", varargs...)
	ret0, _ := ret[0].(*iot.ListProvisioningTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisioningTemplates indicates an expected call of ListProvisioningTemplates.
func (mr *MockIotClientMockRecorder) ListProvisioningTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisioningTemplates", reflect.TypeOf((*MockIotClient)(nil).ListProvisioningTemplates), varargs...)
}

// ListRelatedResourcesForAuditFinding mocks base method.
func (m *MockIotClient) ListRelatedResourcesForAuditFinding(arg0 context.Context, arg1 *iot.ListRelatedResourcesForAuditFindingInput, arg2 ...func(*iot.Options)) (*iot.ListRelatedResourcesForAuditFindingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRelatedResourcesForAuditFinding")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRelatedResourcesForAuditFinding", varargs...)
	ret0, _ := ret[0].(*iot.ListRelatedResourcesForAuditFindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelatedResourcesForAuditFinding indicates an expected call of ListRelatedResourcesForAuditFinding.
func (mr *MockIotClientMockRecorder) ListRelatedResourcesForAuditFinding(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedResourcesForAuditFinding", reflect.TypeOf((*MockIotClient)(nil).ListRelatedResourcesForAuditFinding), varargs...)
}

// ListRoleAliases mocks base method.
func (m *MockIotClient) ListRoleAliases(arg0 context.Context, arg1 *iot.ListRoleAliasesInput, arg2 ...func(*iot.Options)) (*iot.ListRoleAliasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListRoleAliases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleAliases", varargs...)
	ret0, _ := ret[0].(*iot.ListRoleAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleAliases indicates an expected call of ListRoleAliases.
func (mr *MockIotClientMockRecorder) ListRoleAliases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAliases", reflect.TypeOf((*MockIotClient)(nil).ListRoleAliases), varargs...)
}

// ListScheduledAudits mocks base method.
func (m *MockIotClient) ListScheduledAudits(arg0 context.Context, arg1 *iot.ListScheduledAuditsInput, arg2 ...func(*iot.Options)) (*iot.ListScheduledAuditsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListScheduledAudits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScheduledAudits", varargs...)
	ret0, _ := ret[0].(*iot.ListScheduledAuditsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledAudits indicates an expected call of ListScheduledAudits.
func (mr *MockIotClientMockRecorder) ListScheduledAudits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledAudits", reflect.TypeOf((*MockIotClient)(nil).ListScheduledAudits), varargs...)
}

// ListSecurityProfiles mocks base method.
func (m *MockIotClient) ListSecurityProfiles(arg0 context.Context, arg1 *iot.ListSecurityProfilesInput, arg2 ...func(*iot.Options)) (*iot.ListSecurityProfilesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSecurityProfiles")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProfiles", varargs...)
	ret0, _ := ret[0].(*iot.ListSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProfiles indicates an expected call of ListSecurityProfiles.
func (mr *MockIotClientMockRecorder) ListSecurityProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfiles", reflect.TypeOf((*MockIotClient)(nil).ListSecurityProfiles), varargs...)
}

// ListSecurityProfilesForTarget mocks base method.
func (m *MockIotClient) ListSecurityProfilesForTarget(arg0 context.Context, arg1 *iot.ListSecurityProfilesForTargetInput, arg2 ...func(*iot.Options)) (*iot.ListSecurityProfilesForTargetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListSecurityProfilesForTarget")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProfilesForTarget", varargs...)
	ret0, _ := ret[0].(*iot.ListSecurityProfilesForTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProfilesForTarget indicates an expected call of ListSecurityProfilesForTarget.
func (mr *MockIotClientMockRecorder) ListSecurityProfilesForTarget(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesForTarget", reflect.TypeOf((*MockIotClient)(nil).ListSecurityProfilesForTarget), varargs...)
}

// ListStreams mocks base method.
func (m *MockIotClient) ListStreams(arg0 context.Context, arg1 *iot.ListStreamsInput, arg2 ...func(*iot.Options)) (*iot.ListStreamsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStreams")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreams", varargs...)
	ret0, _ := ret[0].(*iot.ListStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreams indicates an expected call of ListStreams.
func (mr *MockIotClientMockRecorder) ListStreams(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockIotClient)(nil).ListStreams), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockIotClient) ListTagsForResource(arg0 context.Context, arg1 *iot.ListTagsForResourceInput, arg2 ...func(*iot.Options)) (*iot.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*iot.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockIotClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIotClient)(nil).ListTagsForResource), varargs...)
}

// ListTargetsForPolicy mocks base method.
func (m *MockIotClient) ListTargetsForPolicy(arg0 context.Context, arg1 *iot.ListTargetsForPolicyInput, arg2 ...func(*iot.Options)) (*iot.ListTargetsForPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTargetsForPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsForPolicy", varargs...)
	ret0, _ := ret[0].(*iot.ListTargetsForPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsForPolicy indicates an expected call of ListTargetsForPolicy.
func (mr *MockIotClientMockRecorder) ListTargetsForPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsForPolicy", reflect.TypeOf((*MockIotClient)(nil).ListTargetsForPolicy), varargs...)
}

// ListTargetsForSecurityProfile mocks base method.
func (m *MockIotClient) ListTargetsForSecurityProfile(arg0 context.Context, arg1 *iot.ListTargetsForSecurityProfileInput, arg2 ...func(*iot.Options)) (*iot.ListTargetsForSecurityProfileOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTargetsForSecurityProfile")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsForSecurityProfile", varargs...)
	ret0, _ := ret[0].(*iot.ListTargetsForSecurityProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsForSecurityProfile indicates an expected call of ListTargetsForSecurityProfile.
func (mr *MockIotClientMockRecorder) ListTargetsForSecurityProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsForSecurityProfile", reflect.TypeOf((*MockIotClient)(nil).ListTargetsForSecurityProfile), varargs...)
}

// ListThingGroups mocks base method.
func (m *MockIotClient) ListThingGroups(arg0 context.Context, arg1 *iot.ListThingGroupsInput, arg2 ...func(*iot.Options)) (*iot.ListThingGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingGroups", varargs...)
	ret0, _ := ret[0].(*iot.ListThingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingGroups indicates an expected call of ListThingGroups.
func (mr *MockIotClientMockRecorder) ListThingGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroups", reflect.TypeOf((*MockIotClient)(nil).ListThingGroups), varargs...)
}

// ListThingGroupsForThing mocks base method.
func (m *MockIotClient) ListThingGroupsForThing(arg0 context.Context, arg1 *iot.ListThingGroupsForThingInput, arg2 ...func(*iot.Options)) (*iot.ListThingGroupsForThingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingGroupsForThing")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingGroupsForThing", varargs...)
	ret0, _ := ret[0].(*iot.ListThingGroupsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingGroupsForThing indicates an expected call of ListThingGroupsForThing.
func (mr *MockIotClientMockRecorder) ListThingGroupsForThing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingGroupsForThing", reflect.TypeOf((*MockIotClient)(nil).ListThingGroupsForThing), varargs...)
}

// ListThingPrincipals mocks base method.
func (m *MockIotClient) ListThingPrincipals(arg0 context.Context, arg1 *iot.ListThingPrincipalsInput, arg2 ...func(*iot.Options)) (*iot.ListThingPrincipalsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingPrincipals")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingPrincipals", varargs...)
	ret0, _ := ret[0].(*iot.ListThingPrincipalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingPrincipals indicates an expected call of ListThingPrincipals.
func (mr *MockIotClientMockRecorder) ListThingPrincipals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingPrincipals", reflect.TypeOf((*MockIotClient)(nil).ListThingPrincipals), varargs...)
}

// ListThingRegistrationTaskReports mocks base method.
func (m *MockIotClient) ListThingRegistrationTaskReports(arg0 context.Context, arg1 *iot.ListThingRegistrationTaskReportsInput, arg2 ...func(*iot.Options)) (*iot.ListThingRegistrationTaskReportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingRegistrationTaskReports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingRegistrationTaskReports", varargs...)
	ret0, _ := ret[0].(*iot.ListThingRegistrationTaskReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingRegistrationTaskReports indicates an expected call of ListThingRegistrationTaskReports.
func (mr *MockIotClientMockRecorder) ListThingRegistrationTaskReports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTaskReports", reflect.TypeOf((*MockIotClient)(nil).ListThingRegistrationTaskReports), varargs...)
}

// ListThingRegistrationTasks mocks base method.
func (m *MockIotClient) ListThingRegistrationTasks(arg0 context.Context, arg1 *iot.ListThingRegistrationTasksInput, arg2 ...func(*iot.Options)) (*iot.ListThingRegistrationTasksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingRegistrationTasks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingRegistrationTasks", varargs...)
	ret0, _ := ret[0].(*iot.ListThingRegistrationTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingRegistrationTasks indicates an expected call of ListThingRegistrationTasks.
func (mr *MockIotClientMockRecorder) ListThingRegistrationTasks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingRegistrationTasks", reflect.TypeOf((*MockIotClient)(nil).ListThingRegistrationTasks), varargs...)
}

// ListThingTypes mocks base method.
func (m *MockIotClient) ListThingTypes(arg0 context.Context, arg1 *iot.ListThingTypesInput, arg2 ...func(*iot.Options)) (*iot.ListThingTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingTypes", varargs...)
	ret0, _ := ret[0].(*iot.ListThingTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingTypes indicates an expected call of ListThingTypes.
func (mr *MockIotClientMockRecorder) ListThingTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingTypes", reflect.TypeOf((*MockIotClient)(nil).ListThingTypes), varargs...)
}

// ListThings mocks base method.
func (m *MockIotClient) ListThings(arg0 context.Context, arg1 *iot.ListThingsInput, arg2 ...func(*iot.Options)) (*iot.ListThingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThings", varargs...)
	ret0, _ := ret[0].(*iot.ListThingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThings indicates an expected call of ListThings.
func (mr *MockIotClientMockRecorder) ListThings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThings", reflect.TypeOf((*MockIotClient)(nil).ListThings), varargs...)
}

// ListThingsInBillingGroup mocks base method.
func (m *MockIotClient) ListThingsInBillingGroup(arg0 context.Context, arg1 *iot.ListThingsInBillingGroupInput, arg2 ...func(*iot.Options)) (*iot.ListThingsInBillingGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingsInBillingGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingsInBillingGroup", varargs...)
	ret0, _ := ret[0].(*iot.ListThingsInBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingsInBillingGroup indicates an expected call of ListThingsInBillingGroup.
func (mr *MockIotClientMockRecorder) ListThingsInBillingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsInBillingGroup", reflect.TypeOf((*MockIotClient)(nil).ListThingsInBillingGroup), varargs...)
}

// ListThingsInThingGroup mocks base method.
func (m *MockIotClient) ListThingsInThingGroup(arg0 context.Context, arg1 *iot.ListThingsInThingGroupInput, arg2 ...func(*iot.Options)) (*iot.ListThingsInThingGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListThingsInThingGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThingsInThingGroup", varargs...)
	ret0, _ := ret[0].(*iot.ListThingsInThingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThingsInThingGroup indicates an expected call of ListThingsInThingGroup.
func (mr *MockIotClientMockRecorder) ListThingsInThingGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThingsInThingGroup", reflect.TypeOf((*MockIotClient)(nil).ListThingsInThingGroup), varargs...)
}

// ListTopicRuleDestinations mocks base method.
func (m *MockIotClient) ListTopicRuleDestinations(arg0 context.Context, arg1 *iot.ListTopicRuleDestinationsInput, arg2 ...func(*iot.Options)) (*iot.ListTopicRuleDestinationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTopicRuleDestinations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicRuleDestinations", varargs...)
	ret0, _ := ret[0].(*iot.ListTopicRuleDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicRuleDestinations indicates an expected call of ListTopicRuleDestinations.
func (mr *MockIotClientMockRecorder) ListTopicRuleDestinations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicRuleDestinations", reflect.TypeOf((*MockIotClient)(nil).ListTopicRuleDestinations), varargs...)
}

// ListTopicRules mocks base method.
func (m *MockIotClient) ListTopicRules(arg0 context.Context, arg1 *iot.ListTopicRulesInput, arg2 ...func(*iot.Options)) (*iot.ListTopicRulesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTopicRules")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopicRules", varargs...)
	ret0, _ := ret[0].(*iot.ListTopicRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicRules indicates an expected call of ListTopicRules.
func (mr *MockIotClientMockRecorder) ListTopicRules(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicRules", reflect.TypeOf((*MockIotClient)(nil).ListTopicRules), varargs...)
}

// ListV2LoggingLevels mocks base method.
func (m *MockIotClient) ListV2LoggingLevels(arg0 context.Context, arg1 *iot.ListV2LoggingLevelsInput, arg2 ...func(*iot.Options)) (*iot.ListV2LoggingLevelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListV2LoggingLevels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListV2LoggingLevels", varargs...)
	ret0, _ := ret[0].(*iot.ListV2LoggingLevelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListV2LoggingLevels indicates an expected call of ListV2LoggingLevels.
func (mr *MockIotClientMockRecorder) ListV2LoggingLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListV2LoggingLevels", reflect.TypeOf((*MockIotClient)(nil).ListV2LoggingLevels), varargs...)
}

// ListViolationEvents mocks base method.
func (m *MockIotClient) ListViolationEvents(arg0 context.Context, arg1 *iot.ListViolationEventsInput, arg2 ...func(*iot.Options)) (*iot.ListViolationEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListViolationEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListViolationEvents", varargs...)
	ret0, _ := ret[0].(*iot.ListViolationEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViolationEvents indicates an expected call of ListViolationEvents.
func (mr *MockIotClientMockRecorder) ListViolationEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViolationEvents", reflect.TypeOf((*MockIotClient)(nil).ListViolationEvents), varargs...)
}

// SearchIndex mocks base method.
func (m *MockIotClient) SearchIndex(arg0 context.Context, arg1 *iot.SearchIndexInput, arg2 ...func(*iot.Options)) (*iot.SearchIndexOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &iot.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to SearchIndex")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchIndex", varargs...)
	ret0, _ := ret[0].(*iot.SearchIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndex indicates an expected call of SearchIndex.
func (mr *MockIotClientMockRecorder) SearchIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndex", reflect.TypeOf((*MockIotClient)(nil).SearchIndex), varargs...)
}
