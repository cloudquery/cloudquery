// Code generated by MockGen. DO NOT EDIT.
// Source: cloudformation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cloudformation "github.com/aws/aws-sdk-go-v2/service/cloudformation"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudformationClient is a mock of CloudformationClient interface.
type MockCloudformationClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudformationClientMockRecorder
}

// MockCloudformationClientMockRecorder is the mock recorder for MockCloudformationClient.
type MockCloudformationClientMockRecorder struct {
	mock *MockCloudformationClient
}

// NewMockCloudformationClient creates a new mock instance.
func NewMockCloudformationClient(ctrl *gomock.Controller) *MockCloudformationClient {
	mock := &MockCloudformationClient{ctrl: ctrl}
	mock.recorder = &MockCloudformationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudformationClient) EXPECT() *MockCloudformationClientMockRecorder {
	return m.recorder
}

// DescribeAccountLimits mocks base method.
func (m *MockCloudformationClient) DescribeAccountLimits(arg0 context.Context, arg1 *cloudformation.DescribeAccountLimitsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeAccountLimitsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAccountLimits")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountLimits", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeAccountLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountLimits indicates an expected call of DescribeAccountLimits.
func (mr *MockCloudformationClientMockRecorder) DescribeAccountLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimits", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeAccountLimits), varargs...)
}

// DescribeChangeSet mocks base method.
func (m *MockCloudformationClient) DescribeChangeSet(arg0 context.Context, arg1 *cloudformation.DescribeChangeSetInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeChangeSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeChangeSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChangeSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChangeSet indicates an expected call of DescribeChangeSet.
func (mr *MockCloudformationClientMockRecorder) DescribeChangeSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChangeSet", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeChangeSet), varargs...)
}

// DescribeChangeSetHooks mocks base method.
func (m *MockCloudformationClient) DescribeChangeSetHooks(arg0 context.Context, arg1 *cloudformation.DescribeChangeSetHooksInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeChangeSetHooksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeChangeSetHooks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChangeSetHooks", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeChangeSetHooksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChangeSetHooks indicates an expected call of DescribeChangeSetHooks.
func (mr *MockCloudformationClientMockRecorder) DescribeChangeSetHooks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChangeSetHooks", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeChangeSetHooks), varargs...)
}

// DescribeOrganizationsAccess mocks base method.
func (m *MockCloudformationClient) DescribeOrganizationsAccess(arg0 context.Context, arg1 *cloudformation.DescribeOrganizationsAccessInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeOrganizationsAccessOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeOrganizationsAccess")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationsAccess", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeOrganizationsAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationsAccess indicates an expected call of DescribeOrganizationsAccess.
func (mr *MockCloudformationClientMockRecorder) DescribeOrganizationsAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationsAccess", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeOrganizationsAccess), varargs...)
}

// DescribePublisher mocks base method.
func (m *MockCloudformationClient) DescribePublisher(arg0 context.Context, arg1 *cloudformation.DescribePublisherInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribePublisherOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribePublisher")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePublisher", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribePublisherOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePublisher indicates an expected call of DescribePublisher.
func (mr *MockCloudformationClientMockRecorder) DescribePublisher(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePublisher", reflect.TypeOf((*MockCloudformationClient)(nil).DescribePublisher), varargs...)
}

// DescribeStackDriftDetectionStatus mocks base method.
func (m *MockCloudformationClient) DescribeStackDriftDetectionStatus(arg0 context.Context, arg1 *cloudformation.DescribeStackDriftDetectionStatusInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackDriftDetectionStatusOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackDriftDetectionStatus")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackDriftDetectionStatus", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackDriftDetectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackDriftDetectionStatus indicates an expected call of DescribeStackDriftDetectionStatus.
func (mr *MockCloudformationClientMockRecorder) DescribeStackDriftDetectionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackDriftDetectionStatus", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackDriftDetectionStatus), varargs...)
}

// DescribeStackEvents mocks base method.
func (m *MockCloudformationClient) DescribeStackEvents(arg0 context.Context, arg1 *cloudformation.DescribeStackEventsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackEvents")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackEvents", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackEvents indicates an expected call of DescribeStackEvents.
func (mr *MockCloudformationClientMockRecorder) DescribeStackEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackEvents", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackEvents), varargs...)
}

// DescribeStackInstance mocks base method.
func (m *MockCloudformationClient) DescribeStackInstance(arg0 context.Context, arg1 *cloudformation.DescribeStackInstanceInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackInstanceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackInstance")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackInstance", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackInstance indicates an expected call of DescribeStackInstance.
func (mr *MockCloudformationClientMockRecorder) DescribeStackInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackInstance", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackInstance), varargs...)
}

// DescribeStackResource mocks base method.
func (m *MockCloudformationClient) DescribeStackResource(arg0 context.Context, arg1 *cloudformation.DescribeStackResourceInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackResource", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackResource indicates an expected call of DescribeStackResource.
func (mr *MockCloudformationClientMockRecorder) DescribeStackResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackResource", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackResource), varargs...)
}

// DescribeStackResourceDrifts mocks base method.
func (m *MockCloudformationClient) DescribeStackResourceDrifts(arg0 context.Context, arg1 *cloudformation.DescribeStackResourceDriftsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackResourceDriftsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackResourceDrifts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackResourceDrifts", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackResourceDriftsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackResourceDrifts indicates an expected call of DescribeStackResourceDrifts.
func (mr *MockCloudformationClientMockRecorder) DescribeStackResourceDrifts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackResourceDrifts", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackResourceDrifts), varargs...)
}

// DescribeStackResources mocks base method.
func (m *MockCloudformationClient) DescribeStackResources(arg0 context.Context, arg1 *cloudformation.DescribeStackResourcesInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackResources", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackResources indicates an expected call of DescribeStackResources.
func (mr *MockCloudformationClientMockRecorder) DescribeStackResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackResources", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackResources), varargs...)
}

// DescribeStackSet mocks base method.
func (m *MockCloudformationClient) DescribeStackSet(arg0 context.Context, arg1 *cloudformation.DescribeStackSetInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackSet", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackSet indicates an expected call of DescribeStackSet.
func (mr *MockCloudformationClientMockRecorder) DescribeStackSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSet", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackSet), varargs...)
}

// DescribeStackSetOperation mocks base method.
func (m *MockCloudformationClient) DescribeStackSetOperation(arg0 context.Context, arg1 *cloudformation.DescribeStackSetOperationInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStackSetOperationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStackSetOperation")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackSetOperation", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStackSetOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackSetOperation indicates an expected call of DescribeStackSetOperation.
func (mr *MockCloudformationClientMockRecorder) DescribeStackSetOperation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSetOperation", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStackSetOperation), varargs...)
}

// DescribeStacks mocks base method.
func (m *MockCloudformationClient) DescribeStacks(arg0 context.Context, arg1 *cloudformation.DescribeStacksInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeStacksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeStacks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStacks", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacks indicates an expected call of DescribeStacks.
func (mr *MockCloudformationClientMockRecorder) DescribeStacks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacks", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeStacks), varargs...)
}

// DescribeType mocks base method.
func (m *MockCloudformationClient) DescribeType(arg0 context.Context, arg1 *cloudformation.DescribeTypeInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeTypeOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeType")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeType", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeType indicates an expected call of DescribeType.
func (mr *MockCloudformationClientMockRecorder) DescribeType(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeType", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeType), varargs...)
}

// DescribeTypeRegistration mocks base method.
func (m *MockCloudformationClient) DescribeTypeRegistration(arg0 context.Context, arg1 *cloudformation.DescribeTypeRegistrationInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.DescribeTypeRegistrationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeTypeRegistration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTypeRegistration", varargs...)
	ret0, _ := ret[0].(*cloudformation.DescribeTypeRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTypeRegistration indicates an expected call of DescribeTypeRegistration.
func (mr *MockCloudformationClientMockRecorder) DescribeTypeRegistration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTypeRegistration", reflect.TypeOf((*MockCloudformationClient)(nil).DescribeTypeRegistration), varargs...)
}

// GetStackPolicy mocks base method.
func (m *MockCloudformationClient) GetStackPolicy(arg0 context.Context, arg1 *cloudformation.GetStackPolicyInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.GetStackPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStackPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStackPolicy", varargs...)
	ret0, _ := ret[0].(*cloudformation.GetStackPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStackPolicy indicates an expected call of GetStackPolicy.
func (mr *MockCloudformationClientMockRecorder) GetStackPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackPolicy", reflect.TypeOf((*MockCloudformationClient)(nil).GetStackPolicy), varargs...)
}

// GetTemplate mocks base method.
func (m *MockCloudformationClient) GetTemplate(arg0 context.Context, arg1 *cloudformation.GetTemplateInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.GetTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*cloudformation.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockCloudformationClientMockRecorder) GetTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockCloudformationClient)(nil).GetTemplate), varargs...)
}

// GetTemplateSummary mocks base method.
func (m *MockCloudformationClient) GetTemplateSummary(arg0 context.Context, arg1 *cloudformation.GetTemplateSummaryInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.GetTemplateSummaryOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTemplateSummary")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplateSummary", varargs...)
	ret0, _ := ret[0].(*cloudformation.GetTemplateSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateSummary indicates an expected call of GetTemplateSummary.
func (mr *MockCloudformationClientMockRecorder) GetTemplateSummary(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateSummary", reflect.TypeOf((*MockCloudformationClient)(nil).GetTemplateSummary), varargs...)
}

// ListChangeSets mocks base method.
func (m *MockCloudformationClient) ListChangeSets(arg0 context.Context, arg1 *cloudformation.ListChangeSetsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListChangeSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListChangeSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChangeSets", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListChangeSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChangeSets indicates an expected call of ListChangeSets.
func (mr *MockCloudformationClientMockRecorder) ListChangeSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangeSets", reflect.TypeOf((*MockCloudformationClient)(nil).ListChangeSets), varargs...)
}

// ListExports mocks base method.
func (m *MockCloudformationClient) ListExports(arg0 context.Context, arg1 *cloudformation.ListExportsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListExportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListExports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExports", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports.
func (mr *MockCloudformationClientMockRecorder) ListExports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockCloudformationClient)(nil).ListExports), varargs...)
}

// ListImports mocks base method.
func (m *MockCloudformationClient) ListImports(arg0 context.Context, arg1 *cloudformation.ListImportsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListImportsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListImports")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImports", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListImportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockCloudformationClientMockRecorder) ListImports(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockCloudformationClient)(nil).ListImports), varargs...)
}

// ListStackInstanceResourceDrifts mocks base method.
func (m *MockCloudformationClient) ListStackInstanceResourceDrifts(arg0 context.Context, arg1 *cloudformation.ListStackInstanceResourceDriftsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStackInstanceResourceDriftsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackInstanceResourceDrifts")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackInstanceResourceDrifts", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackInstanceResourceDriftsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstanceResourceDrifts indicates an expected call of ListStackInstanceResourceDrifts.
func (mr *MockCloudformationClientMockRecorder) ListStackInstanceResourceDrifts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstanceResourceDrifts", reflect.TypeOf((*MockCloudformationClient)(nil).ListStackInstanceResourceDrifts), varargs...)
}

// ListStackInstances mocks base method.
func (m *MockCloudformationClient) ListStackInstances(arg0 context.Context, arg1 *cloudformation.ListStackInstancesInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStackInstancesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackInstances")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackInstances", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackInstances indicates an expected call of ListStackInstances.
func (mr *MockCloudformationClientMockRecorder) ListStackInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackInstances", reflect.TypeOf((*MockCloudformationClient)(nil).ListStackInstances), varargs...)
}

// ListStackResources mocks base method.
func (m *MockCloudformationClient) ListStackResources(arg0 context.Context, arg1 *cloudformation.ListStackResourcesInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStackResourcesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackResources")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackResources", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackResources indicates an expected call of ListStackResources.
func (mr *MockCloudformationClientMockRecorder) ListStackResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackResources", reflect.TypeOf((*MockCloudformationClient)(nil).ListStackResources), varargs...)
}

// ListStackSetOperationResults mocks base method.
func (m *MockCloudformationClient) ListStackSetOperationResults(arg0 context.Context, arg1 *cloudformation.ListStackSetOperationResultsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStackSetOperationResultsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackSetOperationResults")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackSetOperationResults", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackSetOperationResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackSetOperationResults indicates an expected call of ListStackSetOperationResults.
func (mr *MockCloudformationClientMockRecorder) ListStackSetOperationResults(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackSetOperationResults", reflect.TypeOf((*MockCloudformationClient)(nil).ListStackSetOperationResults), varargs...)
}

// ListStackSetOperations mocks base method.
func (m *MockCloudformationClient) ListStackSetOperations(arg0 context.Context, arg1 *cloudformation.ListStackSetOperationsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStackSetOperationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackSetOperations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackSetOperations", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackSetOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackSetOperations indicates an expected call of ListStackSetOperations.
func (mr *MockCloudformationClientMockRecorder) ListStackSetOperations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackSetOperations", reflect.TypeOf((*MockCloudformationClient)(nil).ListStackSetOperations), varargs...)
}

// ListStackSets mocks base method.
func (m *MockCloudformationClient) ListStackSets(arg0 context.Context, arg1 *cloudformation.ListStackSetsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStackSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStackSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStackSets", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStackSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStackSets indicates an expected call of ListStackSets.
func (mr *MockCloudformationClientMockRecorder) ListStackSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStackSets", reflect.TypeOf((*MockCloudformationClient)(nil).ListStackSets), varargs...)
}

// ListStacks mocks base method.
func (m *MockCloudformationClient) ListStacks(arg0 context.Context, arg1 *cloudformation.ListStacksInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListStacksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListStacks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStacks", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStacks indicates an expected call of ListStacks.
func (mr *MockCloudformationClientMockRecorder) ListStacks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStacks", reflect.TypeOf((*MockCloudformationClient)(nil).ListStacks), varargs...)
}

// ListTypeRegistrations mocks base method.
func (m *MockCloudformationClient) ListTypeRegistrations(arg0 context.Context, arg1 *cloudformation.ListTypeRegistrationsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListTypeRegistrationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTypeRegistrations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypeRegistrations", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListTypeRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypeRegistrations indicates an expected call of ListTypeRegistrations.
func (mr *MockCloudformationClientMockRecorder) ListTypeRegistrations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypeRegistrations", reflect.TypeOf((*MockCloudformationClient)(nil).ListTypeRegistrations), varargs...)
}

// ListTypeVersions mocks base method.
func (m *MockCloudformationClient) ListTypeVersions(arg0 context.Context, arg1 *cloudformation.ListTypeVersionsInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListTypeVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTypeVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypeVersions", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListTypeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypeVersions indicates an expected call of ListTypeVersions.
func (mr *MockCloudformationClientMockRecorder) ListTypeVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypeVersions", reflect.TypeOf((*MockCloudformationClient)(nil).ListTypeVersions), varargs...)
}

// ListTypes mocks base method.
func (m *MockCloudformationClient) ListTypes(arg0 context.Context, arg1 *cloudformation.ListTypesInput, arg2 ...func(*cloudformation.Options)) (*cloudformation.ListTypesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &cloudformation.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTypes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypes", varargs...)
	ret0, _ := ret[0].(*cloudformation.ListTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypes indicates an expected call of ListTypes.
func (mr *MockCloudformationClientMockRecorder) ListTypes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypes", reflect.TypeOf((*MockCloudformationClient)(nil).ListTypes), varargs...)
}
