// Code generated by MockGen. DO NOT EDIT.
// Source: acmpca.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	acmpca "github.com/aws/aws-sdk-go-v2/service/acmpca"
	gomock "github.com/golang/mock/gomock"
)

// MockAcmpcaClient is a mock of AcmpcaClient interface.
type MockAcmpcaClient struct {
	ctrl     *gomock.Controller
	recorder *MockAcmpcaClientMockRecorder
}

// MockAcmpcaClientMockRecorder is the mock recorder for MockAcmpcaClient.
type MockAcmpcaClientMockRecorder struct {
	mock *MockAcmpcaClient
}

// NewMockAcmpcaClient creates a new mock instance.
func NewMockAcmpcaClient(ctrl *gomock.Controller) *MockAcmpcaClient {
	mock := &MockAcmpcaClient{ctrl: ctrl}
	mock.recorder = &MockAcmpcaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcmpcaClient) EXPECT() *MockAcmpcaClientMockRecorder {
	return m.recorder
}

// DescribeCertificateAuthority mocks base method.
func (m *MockAcmpcaClient) DescribeCertificateAuthority(arg0 context.Context, arg1 *acmpca.DescribeCertificateAuthorityInput, arg2 ...func(*acmpca.Options)) (*acmpca.DescribeCertificateAuthorityOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCertificateAuthority")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateAuthority", varargs...)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthority indicates an expected call of DescribeCertificateAuthority.
func (mr *MockAcmpcaClientMockRecorder) DescribeCertificateAuthority(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthority", reflect.TypeOf((*MockAcmpcaClient)(nil).DescribeCertificateAuthority), varargs...)
}

// DescribeCertificateAuthorityAuditReport mocks base method.
func (m *MockAcmpcaClient) DescribeCertificateAuthorityAuditReport(arg0 context.Context, arg1 *acmpca.DescribeCertificateAuthorityAuditReportInput, arg2 ...func(*acmpca.Options)) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeCertificateAuthorityAuditReport")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityAuditReport", varargs...)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthorityAuditReport indicates an expected call of DescribeCertificateAuthorityAuditReport.
func (mr *MockAcmpcaClientMockRecorder) DescribeCertificateAuthorityAuditReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityAuditReport", reflect.TypeOf((*MockAcmpcaClient)(nil).DescribeCertificateAuthorityAuditReport), varargs...)
}

// GetCertificate mocks base method.
func (m *MockAcmpcaClient) GetCertificate(arg0 context.Context, arg1 *acmpca.GetCertificateInput, arg2 ...func(*acmpca.Options)) (*acmpca.GetCertificateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCertificate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificate", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockAcmpcaClientMockRecorder) GetCertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockAcmpcaClient)(nil).GetCertificate), varargs...)
}

// GetCertificateAuthorityCertificate mocks base method.
func (m *MockAcmpcaClient) GetCertificateAuthorityCertificate(arg0 context.Context, arg1 *acmpca.GetCertificateAuthorityCertificateInput, arg2 ...func(*acmpca.Options)) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCertificateAuthorityCertificate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCertificate", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateAuthorityCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateAuthorityCertificate indicates an expected call of GetCertificateAuthorityCertificate.
func (mr *MockAcmpcaClientMockRecorder) GetCertificateAuthorityCertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCertificate", reflect.TypeOf((*MockAcmpcaClient)(nil).GetCertificateAuthorityCertificate), varargs...)
}

// GetCertificateAuthorityCsr mocks base method.
func (m *MockAcmpcaClient) GetCertificateAuthorityCsr(arg0 context.Context, arg1 *acmpca.GetCertificateAuthorityCsrInput, arg2 ...func(*acmpca.Options)) (*acmpca.GetCertificateAuthorityCsrOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCertificateAuthorityCsr")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCsr", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateAuthorityCsrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateAuthorityCsr indicates an expected call of GetCertificateAuthorityCsr.
func (mr *MockAcmpcaClientMockRecorder) GetCertificateAuthorityCsr(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCsr", reflect.TypeOf((*MockAcmpcaClient)(nil).GetCertificateAuthorityCsr), varargs...)
}

// GetPolicy mocks base method.
func (m *MockAcmpcaClient) GetPolicy(arg0 context.Context, arg1 *acmpca.GetPolicyInput, arg2 ...func(*acmpca.Options)) (*acmpca.GetPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicy", varargs...)
	ret0, _ := ret[0].(*acmpca.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockAcmpcaClientMockRecorder) GetPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockAcmpcaClient)(nil).GetPolicy), varargs...)
}

// ListCertificateAuthorities mocks base method.
func (m *MockAcmpcaClient) ListCertificateAuthorities(arg0 context.Context, arg1 *acmpca.ListCertificateAuthoritiesInput, arg2 ...func(*acmpca.Options)) (*acmpca.ListCertificateAuthoritiesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCertificateAuthorities")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateAuthorities", varargs...)
	ret0, _ := ret[0].(*acmpca.ListCertificateAuthoritiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateAuthorities indicates an expected call of ListCertificateAuthorities.
func (mr *MockAcmpcaClientMockRecorder) ListCertificateAuthorities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateAuthorities", reflect.TypeOf((*MockAcmpcaClient)(nil).ListCertificateAuthorities), varargs...)
}

// ListPermissions mocks base method.
func (m *MockAcmpcaClient) ListPermissions(arg0 context.Context, arg1 *acmpca.ListPermissionsInput, arg2 ...func(*acmpca.Options)) (*acmpca.ListPermissionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListPermissions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissions", varargs...)
	ret0, _ := ret[0].(*acmpca.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockAcmpcaClientMockRecorder) ListPermissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockAcmpcaClient)(nil).ListPermissions), varargs...)
}

// ListTags mocks base method.
func (m *MockAcmpcaClient) ListTags(arg0 context.Context, arg1 *acmpca.ListTagsInput, arg2 ...func(*acmpca.Options)) (*acmpca.ListTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &acmpca.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTags", varargs...)
	ret0, _ := ret[0].(*acmpca.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockAcmpcaClientMockRecorder) ListTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockAcmpcaClient)(nil).ListTags), varargs...)
}
