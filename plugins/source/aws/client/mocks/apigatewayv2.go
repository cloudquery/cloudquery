// Code generated by MockGen. DO NOT EDIT.
// Source: apigatewayv2.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	apigatewayv2 "github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	gomock "github.com/golang/mock/gomock"
)

// MockApigatewayv2Client is a mock of Apigatewayv2Client interface.
type MockApigatewayv2Client struct {
	ctrl     *gomock.Controller
	recorder *MockApigatewayv2ClientMockRecorder
}

// MockApigatewayv2ClientMockRecorder is the mock recorder for MockApigatewayv2Client.
type MockApigatewayv2ClientMockRecorder struct {
	mock *MockApigatewayv2Client
}

// NewMockApigatewayv2Client creates a new mock instance.
func NewMockApigatewayv2Client(ctrl *gomock.Controller) *MockApigatewayv2Client {
	mock := &MockApigatewayv2Client{ctrl: ctrl}
	mock.recorder = &MockApigatewayv2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApigatewayv2Client) EXPECT() *MockApigatewayv2ClientMockRecorder {
	return m.recorder
}

// GetApi mocks base method.
func (m *MockApigatewayv2Client) GetApi(arg0 context.Context, arg1 *apigatewayv2.GetApiInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApi")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApi", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApi indicates an expected call of GetApi.
func (mr *MockApigatewayv2ClientMockRecorder) GetApi(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApi", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetApi), varargs...)
}

// GetApiMapping mocks base method.
func (m *MockApigatewayv2Client) GetApiMapping(arg0 context.Context, arg1 *apigatewayv2.GetApiMappingInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiMappingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApiMapping")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiMapping", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiMapping indicates an expected call of GetApiMapping.
func (mr *MockApigatewayv2ClientMockRecorder) GetApiMapping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMapping", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetApiMapping), varargs...)
}

// GetApiMappings mocks base method.
func (m *MockApigatewayv2Client) GetApiMappings(arg0 context.Context, arg1 *apigatewayv2.GetApiMappingsInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiMappingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApiMappings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiMappings", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApiMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiMappings indicates an expected call of GetApiMappings.
func (mr *MockApigatewayv2ClientMockRecorder) GetApiMappings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMappings", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetApiMappings), varargs...)
}

// GetApis mocks base method.
func (m *MockApigatewayv2Client) GetApis(arg0 context.Context, arg1 *apigatewayv2.GetApisInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApisOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetApis")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApis", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApis indicates an expected call of GetApis.
func (mr *MockApigatewayv2ClientMockRecorder) GetApis(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApis", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetApis), varargs...)
}

// GetAuthorizer mocks base method.
func (m *MockApigatewayv2Client) GetAuthorizer(arg0 context.Context, arg1 *apigatewayv2.GetAuthorizerInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetAuthorizerOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAuthorizer")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizer", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizer indicates an expected call of GetAuthorizer.
func (mr *MockApigatewayv2ClientMockRecorder) GetAuthorizer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizer", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetAuthorizer), varargs...)
}

// GetAuthorizers mocks base method.
func (m *MockApigatewayv2Client) GetAuthorizers(arg0 context.Context, arg1 *apigatewayv2.GetAuthorizersInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetAuthorizersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAuthorizers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizers", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizers indicates an expected call of GetAuthorizers.
func (mr *MockApigatewayv2ClientMockRecorder) GetAuthorizers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizers", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetAuthorizers), varargs...)
}

// GetDeployment mocks base method.
func (m *MockApigatewayv2Client) GetDeployment(arg0 context.Context, arg1 *apigatewayv2.GetDeploymentInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDeploymentOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeployment")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployment", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockApigatewayv2ClientMockRecorder) GetDeployment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetDeployment), varargs...)
}

// GetDeployments mocks base method.
func (m *MockApigatewayv2Client) GetDeployments(arg0 context.Context, arg1 *apigatewayv2.GetDeploymentsInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDeploymentsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDeployments")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployments", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments.
func (mr *MockApigatewayv2ClientMockRecorder) GetDeployments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetDeployments), varargs...)
}

// GetDomainName mocks base method.
func (m *MockApigatewayv2Client) GetDomainName(arg0 context.Context, arg1 *apigatewayv2.GetDomainNameInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDomainNameOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDomainName")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainName", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainName indicates an expected call of GetDomainName.
func (mr *MockApigatewayv2ClientMockRecorder) GetDomainName(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainName", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetDomainName), varargs...)
}

// GetDomainNames mocks base method.
func (m *MockApigatewayv2Client) GetDomainNames(arg0 context.Context, arg1 *apigatewayv2.GetDomainNamesInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDomainNamesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetDomainNames")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNames", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNames indicates an expected call of GetDomainNames.
func (mr *MockApigatewayv2ClientMockRecorder) GetDomainNames(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNames", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetDomainNames), varargs...)
}

// GetIntegration mocks base method.
func (m *MockApigatewayv2Client) GetIntegration(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIntegration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegration", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegration indicates an expected call of GetIntegration.
func (mr *MockApigatewayv2ClientMockRecorder) GetIntegration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegration", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetIntegration), varargs...)
}

// GetIntegrationResponse mocks base method.
func (m *MockApigatewayv2Client) GetIntegrationResponse(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationResponseInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationResponseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIntegrationResponse")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationResponse", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponse indicates an expected call of GetIntegrationResponse.
func (mr *MockApigatewayv2ClientMockRecorder) GetIntegrationResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponse", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetIntegrationResponse), varargs...)
}

// GetIntegrationResponses mocks base method.
func (m *MockApigatewayv2Client) GetIntegrationResponses(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationResponsesInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationResponsesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIntegrationResponses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationResponses", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponses indicates an expected call of GetIntegrationResponses.
func (mr *MockApigatewayv2ClientMockRecorder) GetIntegrationResponses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponses", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetIntegrationResponses), varargs...)
}

// GetIntegrations mocks base method.
func (m *MockApigatewayv2Client) GetIntegrations(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationsInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIntegrations")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrations", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrations indicates an expected call of GetIntegrations.
func (mr *MockApigatewayv2ClientMockRecorder) GetIntegrations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrations", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetIntegrations), varargs...)
}

// GetModel mocks base method.
func (m *MockApigatewayv2Client) GetModel(arg0 context.Context, arg1 *apigatewayv2.GetModelInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModel")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockApigatewayv2ClientMockRecorder) GetModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetModel), varargs...)
}

// GetModelTemplate mocks base method.
func (m *MockApigatewayv2Client) GetModelTemplate(arg0 context.Context, arg1 *apigatewayv2.GetModelTemplateInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModelTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelTemplate", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetModelTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTemplate indicates an expected call of GetModelTemplate.
func (mr *MockApigatewayv2ClientMockRecorder) GetModelTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplate", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetModelTemplate), varargs...)
}

// GetModels mocks base method.
func (m *MockApigatewayv2Client) GetModels(arg0 context.Context, arg1 *apigatewayv2.GetModelsInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetModels")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModels", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels.
func (mr *MockApigatewayv2ClientMockRecorder) GetModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetModels), varargs...)
}

// GetRoute mocks base method.
func (m *MockApigatewayv2Client) GetRoute(arg0 context.Context, arg1 *apigatewayv2.GetRouteInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRoute")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoute", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockApigatewayv2ClientMockRecorder) GetRoute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetRoute), varargs...)
}

// GetRouteResponse mocks base method.
func (m *MockApigatewayv2Client) GetRouteResponse(arg0 context.Context, arg1 *apigatewayv2.GetRouteResponseInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteResponseOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRouteResponse")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteResponse", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteResponse indicates an expected call of GetRouteResponse.
func (mr *MockApigatewayv2ClientMockRecorder) GetRouteResponse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponse", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetRouteResponse), varargs...)
}

// GetRouteResponses mocks base method.
func (m *MockApigatewayv2Client) GetRouteResponses(arg0 context.Context, arg1 *apigatewayv2.GetRouteResponsesInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteResponsesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRouteResponses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteResponses", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteResponses indicates an expected call of GetRouteResponses.
func (mr *MockApigatewayv2ClientMockRecorder) GetRouteResponses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponses", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetRouteResponses), varargs...)
}

// GetRoutes mocks base method.
func (m *MockApigatewayv2Client) GetRoutes(arg0 context.Context, arg1 *apigatewayv2.GetRoutesInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRoutesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRoutes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoutes", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutes indicates an expected call of GetRoutes.
func (mr *MockApigatewayv2ClientMockRecorder) GetRoutes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutes", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetRoutes), varargs...)
}

// GetStage mocks base method.
func (m *MockApigatewayv2Client) GetStage(arg0 context.Context, arg1 *apigatewayv2.GetStageInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetStageOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStage")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStage", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStage indicates an expected call of GetStage.
func (mr *MockApigatewayv2ClientMockRecorder) GetStage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStage", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetStage), varargs...)
}

// GetStages mocks base method.
func (m *MockApigatewayv2Client) GetStages(arg0 context.Context, arg1 *apigatewayv2.GetStagesInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetStagesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetStages")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStages", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStages indicates an expected call of GetStages.
func (mr *MockApigatewayv2ClientMockRecorder) GetStages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStages", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetStages), varargs...)
}

// GetTags mocks base method.
func (m *MockApigatewayv2Client) GetTags(arg0 context.Context, arg1 *apigatewayv2.GetTagsInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockApigatewayv2ClientMockRecorder) GetTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetTags), varargs...)
}

// GetVpcLink mocks base method.
func (m *MockApigatewayv2Client) GetVpcLink(arg0 context.Context, arg1 *apigatewayv2.GetVpcLinkInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetVpcLinkOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpcLink")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcLink", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLink indicates an expected call of GetVpcLink.
func (mr *MockApigatewayv2ClientMockRecorder) GetVpcLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLink", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetVpcLink), varargs...)
}

// GetVpcLinks mocks base method.
func (m *MockApigatewayv2Client) GetVpcLinks(arg0 context.Context, arg1 *apigatewayv2.GetVpcLinksInput, arg2 ...func(*apigatewayv2.Options)) (*apigatewayv2.GetVpcLinksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &apigatewayv2.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetVpcLinks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcLinks", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetVpcLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLinks indicates an expected call of GetVpcLinks.
func (mr *MockApigatewayv2ClientMockRecorder) GetVpcLinks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinks", reflect.TypeOf((*MockApigatewayv2Client)(nil).GetVpcLinks), varargs...)
}
