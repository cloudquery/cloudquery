// Code generated by MockGen. DO NOT EDIT.
// Source: shield.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	shield "github.com/aws/aws-sdk-go-v2/service/shield"
	gomock "github.com/golang/mock/gomock"
)

// MockShieldClient is a mock of ShieldClient interface.
type MockShieldClient struct {
	ctrl     *gomock.Controller
	recorder *MockShieldClientMockRecorder
}

// MockShieldClientMockRecorder is the mock recorder for MockShieldClient.
type MockShieldClientMockRecorder struct {
	mock *MockShieldClient
}

// NewMockShieldClient creates a new mock instance.
func NewMockShieldClient(ctrl *gomock.Controller) *MockShieldClient {
	mock := &MockShieldClient{ctrl: ctrl}
	mock.recorder = &MockShieldClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShieldClient) EXPECT() *MockShieldClientMockRecorder {
	return m.recorder
}

// DescribeAttack mocks base method.
func (m *MockShieldClient) DescribeAttack(arg0 context.Context, arg1 *shield.DescribeAttackInput, arg2 ...func(*shield.Options)) (*shield.DescribeAttackOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAttack")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAttack", varargs...)
	ret0, _ := ret[0].(*shield.DescribeAttackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAttack indicates an expected call of DescribeAttack.
func (mr *MockShieldClientMockRecorder) DescribeAttack(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAttack", reflect.TypeOf((*MockShieldClient)(nil).DescribeAttack), varargs...)
}

// DescribeAttackStatistics mocks base method.
func (m *MockShieldClient) DescribeAttackStatistics(arg0 context.Context, arg1 *shield.DescribeAttackStatisticsInput, arg2 ...func(*shield.Options)) (*shield.DescribeAttackStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeAttackStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAttackStatistics", varargs...)
	ret0, _ := ret[0].(*shield.DescribeAttackStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAttackStatistics indicates an expected call of DescribeAttackStatistics.
func (mr *MockShieldClientMockRecorder) DescribeAttackStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAttackStatistics", reflect.TypeOf((*MockShieldClient)(nil).DescribeAttackStatistics), varargs...)
}

// DescribeDRTAccess mocks base method.
func (m *MockShieldClient) DescribeDRTAccess(arg0 context.Context, arg1 *shield.DescribeDRTAccessInput, arg2 ...func(*shield.Options)) (*shield.DescribeDRTAccessOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeDRTAccess")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDRTAccess", varargs...)
	ret0, _ := ret[0].(*shield.DescribeDRTAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDRTAccess indicates an expected call of DescribeDRTAccess.
func (mr *MockShieldClientMockRecorder) DescribeDRTAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDRTAccess", reflect.TypeOf((*MockShieldClient)(nil).DescribeDRTAccess), varargs...)
}

// DescribeEmergencyContactSettings mocks base method.
func (m *MockShieldClient) DescribeEmergencyContactSettings(arg0 context.Context, arg1 *shield.DescribeEmergencyContactSettingsInput, arg2 ...func(*shield.Options)) (*shield.DescribeEmergencyContactSettingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeEmergencyContactSettings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEmergencyContactSettings", varargs...)
	ret0, _ := ret[0].(*shield.DescribeEmergencyContactSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEmergencyContactSettings indicates an expected call of DescribeEmergencyContactSettings.
func (mr *MockShieldClientMockRecorder) DescribeEmergencyContactSettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEmergencyContactSettings", reflect.TypeOf((*MockShieldClient)(nil).DescribeEmergencyContactSettings), varargs...)
}

// DescribeProtection mocks base method.
func (m *MockShieldClient) DescribeProtection(arg0 context.Context, arg1 *shield.DescribeProtectionInput, arg2 ...func(*shield.Options)) (*shield.DescribeProtectionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProtection")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProtection", varargs...)
	ret0, _ := ret[0].(*shield.DescribeProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtection indicates an expected call of DescribeProtection.
func (mr *MockShieldClientMockRecorder) DescribeProtection(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtection", reflect.TypeOf((*MockShieldClient)(nil).DescribeProtection), varargs...)
}

// DescribeProtectionGroup mocks base method.
func (m *MockShieldClient) DescribeProtectionGroup(arg0 context.Context, arg1 *shield.DescribeProtectionGroupInput, arg2 ...func(*shield.Options)) (*shield.DescribeProtectionGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeProtectionGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProtectionGroup", varargs...)
	ret0, _ := ret[0].(*shield.DescribeProtectionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtectionGroup indicates an expected call of DescribeProtectionGroup.
func (mr *MockShieldClientMockRecorder) DescribeProtectionGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectionGroup", reflect.TypeOf((*MockShieldClient)(nil).DescribeProtectionGroup), varargs...)
}

// DescribeSubscription mocks base method.
func (m *MockShieldClient) DescribeSubscription(arg0 context.Context, arg1 *shield.DescribeSubscriptionInput, arg2 ...func(*shield.Options)) (*shield.DescribeSubscriptionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeSubscription")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubscription", varargs...)
	ret0, _ := ret[0].(*shield.DescribeSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubscription indicates an expected call of DescribeSubscription.
func (mr *MockShieldClientMockRecorder) DescribeSubscription(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubscription", reflect.TypeOf((*MockShieldClient)(nil).DescribeSubscription), varargs...)
}

// GetSubscriptionState mocks base method.
func (m *MockShieldClient) GetSubscriptionState(arg0 context.Context, arg1 *shield.GetSubscriptionStateInput, arg2 ...func(*shield.Options)) (*shield.GetSubscriptionStateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSubscriptionState")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionState", varargs...)
	ret0, _ := ret[0].(*shield.GetSubscriptionStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionState indicates an expected call of GetSubscriptionState.
func (mr *MockShieldClientMockRecorder) GetSubscriptionState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionState", reflect.TypeOf((*MockShieldClient)(nil).GetSubscriptionState), varargs...)
}

// ListAttacks mocks base method.
func (m *MockShieldClient) ListAttacks(arg0 context.Context, arg1 *shield.ListAttacksInput, arg2 ...func(*shield.Options)) (*shield.ListAttacksOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAttacks")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttacks", varargs...)
	ret0, _ := ret[0].(*shield.ListAttacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttacks indicates an expected call of ListAttacks.
func (mr *MockShieldClientMockRecorder) ListAttacks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttacks", reflect.TypeOf((*MockShieldClient)(nil).ListAttacks), varargs...)
}

// ListProtectionGroups mocks base method.
func (m *MockShieldClient) ListProtectionGroups(arg0 context.Context, arg1 *shield.ListProtectionGroupsInput, arg2 ...func(*shield.Options)) (*shield.ListProtectionGroupsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProtectionGroups")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectionGroups", varargs...)
	ret0, _ := ret[0].(*shield.ListProtectionGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtectionGroups indicates an expected call of ListProtectionGroups.
func (mr *MockShieldClientMockRecorder) ListProtectionGroups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectionGroups", reflect.TypeOf((*MockShieldClient)(nil).ListProtectionGroups), varargs...)
}

// ListProtections mocks base method.
func (m *MockShieldClient) ListProtections(arg0 context.Context, arg1 *shield.ListProtectionsInput, arg2 ...func(*shield.Options)) (*shield.ListProtectionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProtections")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtections", varargs...)
	ret0, _ := ret[0].(*shield.ListProtectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtections indicates an expected call of ListProtections.
func (mr *MockShieldClientMockRecorder) ListProtections(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtections", reflect.TypeOf((*MockShieldClient)(nil).ListProtections), varargs...)
}

// ListResourcesInProtectionGroup mocks base method.
func (m *MockShieldClient) ListResourcesInProtectionGroup(arg0 context.Context, arg1 *shield.ListResourcesInProtectionGroupInput, arg2 ...func(*shield.Options)) (*shield.ListResourcesInProtectionGroupOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListResourcesInProtectionGroup")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesInProtectionGroup", varargs...)
	ret0, _ := ret[0].(*shield.ListResourcesInProtectionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesInProtectionGroup indicates an expected call of ListResourcesInProtectionGroup.
func (mr *MockShieldClientMockRecorder) ListResourcesInProtectionGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesInProtectionGroup", reflect.TypeOf((*MockShieldClient)(nil).ListResourcesInProtectionGroup), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockShieldClient) ListTagsForResource(arg0 context.Context, arg1 *shield.ListTagsForResourceInput, arg2 ...func(*shield.Options)) (*shield.ListTagsForResourceOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &shield.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTagsForResource")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*shield.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockShieldClientMockRecorder) ListTagsForResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockShieldClient)(nil).ListTagsForResource), varargs...)
}
