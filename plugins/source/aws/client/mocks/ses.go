// Code generated by MockGen. DO NOT EDIT.
// Source: ses.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ses "github.com/aws/aws-sdk-go-v2/service/ses"
	gomock "github.com/golang/mock/gomock"
)

// MockSesClient is a mock of SesClient interface.
type MockSesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSesClientMockRecorder
}

// MockSesClientMockRecorder is the mock recorder for MockSesClient.
type MockSesClientMockRecorder struct {
	mock *MockSesClient
}

// NewMockSesClient creates a new mock instance.
func NewMockSesClient(ctrl *gomock.Controller) *MockSesClient {
	mock := &MockSesClient{ctrl: ctrl}
	mock.recorder = &MockSesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSesClient) EXPECT() *MockSesClientMockRecorder {
	return m.recorder
}

// DescribeActiveReceiptRuleSet mocks base method.
func (m *MockSesClient) DescribeActiveReceiptRuleSet(arg0 context.Context, arg1 *ses.DescribeActiveReceiptRuleSetInput, arg2 ...func(*ses.Options)) (*ses.DescribeActiveReceiptRuleSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeActiveReceiptRuleSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActiveReceiptRuleSet", varargs...)
	ret0, _ := ret[0].(*ses.DescribeActiveReceiptRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActiveReceiptRuleSet indicates an expected call of DescribeActiveReceiptRuleSet.
func (mr *MockSesClientMockRecorder) DescribeActiveReceiptRuleSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActiveReceiptRuleSet", reflect.TypeOf((*MockSesClient)(nil).DescribeActiveReceiptRuleSet), varargs...)
}

// DescribeConfigurationSet mocks base method.
func (m *MockSesClient) DescribeConfigurationSet(arg0 context.Context, arg1 *ses.DescribeConfigurationSetInput, arg2 ...func(*ses.Options)) (*ses.DescribeConfigurationSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeConfigurationSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationSet", varargs...)
	ret0, _ := ret[0].(*ses.DescribeConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationSet indicates an expected call of DescribeConfigurationSet.
func (mr *MockSesClientMockRecorder) DescribeConfigurationSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationSet", reflect.TypeOf((*MockSesClient)(nil).DescribeConfigurationSet), varargs...)
}

// DescribeReceiptRule mocks base method.
func (m *MockSesClient) DescribeReceiptRule(arg0 context.Context, arg1 *ses.DescribeReceiptRuleInput, arg2 ...func(*ses.Options)) (*ses.DescribeReceiptRuleOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReceiptRule")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReceiptRule", varargs...)
	ret0, _ := ret[0].(*ses.DescribeReceiptRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReceiptRule indicates an expected call of DescribeReceiptRule.
func (mr *MockSesClientMockRecorder) DescribeReceiptRule(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReceiptRule", reflect.TypeOf((*MockSesClient)(nil).DescribeReceiptRule), varargs...)
}

// DescribeReceiptRuleSet mocks base method.
func (m *MockSesClient) DescribeReceiptRuleSet(arg0 context.Context, arg1 *ses.DescribeReceiptRuleSetInput, arg2 ...func(*ses.Options)) (*ses.DescribeReceiptRuleSetOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to DescribeReceiptRuleSet")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReceiptRuleSet", varargs...)
	ret0, _ := ret[0].(*ses.DescribeReceiptRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReceiptRuleSet indicates an expected call of DescribeReceiptRuleSet.
func (mr *MockSesClientMockRecorder) DescribeReceiptRuleSet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReceiptRuleSet", reflect.TypeOf((*MockSesClient)(nil).DescribeReceiptRuleSet), varargs...)
}

// GetAccountSendingEnabled mocks base method.
func (m *MockSesClient) GetAccountSendingEnabled(arg0 context.Context, arg1 *ses.GetAccountSendingEnabledInput, arg2 ...func(*ses.Options)) (*ses.GetAccountSendingEnabledOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAccountSendingEnabled")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSendingEnabled", varargs...)
	ret0, _ := ret[0].(*ses.GetAccountSendingEnabledOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSendingEnabled indicates an expected call of GetAccountSendingEnabled.
func (mr *MockSesClientMockRecorder) GetAccountSendingEnabled(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSendingEnabled", reflect.TypeOf((*MockSesClient)(nil).GetAccountSendingEnabled), varargs...)
}

// GetCustomVerificationEmailTemplate mocks base method.
func (m *MockSesClient) GetCustomVerificationEmailTemplate(arg0 context.Context, arg1 *ses.GetCustomVerificationEmailTemplateInput, arg2 ...func(*ses.Options)) (*ses.GetCustomVerificationEmailTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCustomVerificationEmailTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomVerificationEmailTemplate", varargs...)
	ret0, _ := ret[0].(*ses.GetCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomVerificationEmailTemplate indicates an expected call of GetCustomVerificationEmailTemplate.
func (mr *MockSesClientMockRecorder) GetCustomVerificationEmailTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomVerificationEmailTemplate", reflect.TypeOf((*MockSesClient)(nil).GetCustomVerificationEmailTemplate), varargs...)
}

// GetIdentityDkimAttributes mocks base method.
func (m *MockSesClient) GetIdentityDkimAttributes(arg0 context.Context, arg1 *ses.GetIdentityDkimAttributesInput, arg2 ...func(*ses.Options)) (*ses.GetIdentityDkimAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIdentityDkimAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityDkimAttributes", varargs...)
	ret0, _ := ret[0].(*ses.GetIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityDkimAttributes indicates an expected call of GetIdentityDkimAttributes.
func (mr *MockSesClientMockRecorder) GetIdentityDkimAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityDkimAttributes", reflect.TypeOf((*MockSesClient)(nil).GetIdentityDkimAttributes), varargs...)
}

// GetIdentityMailFromDomainAttributes mocks base method.
func (m *MockSesClient) GetIdentityMailFromDomainAttributes(arg0 context.Context, arg1 *ses.GetIdentityMailFromDomainAttributesInput, arg2 ...func(*ses.Options)) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIdentityMailFromDomainAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityMailFromDomainAttributes", varargs...)
	ret0, _ := ret[0].(*ses.GetIdentityMailFromDomainAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityMailFromDomainAttributes indicates an expected call of GetIdentityMailFromDomainAttributes.
func (mr *MockSesClientMockRecorder) GetIdentityMailFromDomainAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityMailFromDomainAttributes", reflect.TypeOf((*MockSesClient)(nil).GetIdentityMailFromDomainAttributes), varargs...)
}

// GetIdentityNotificationAttributes mocks base method.
func (m *MockSesClient) GetIdentityNotificationAttributes(arg0 context.Context, arg1 *ses.GetIdentityNotificationAttributesInput, arg2 ...func(*ses.Options)) (*ses.GetIdentityNotificationAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIdentityNotificationAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityNotificationAttributes", varargs...)
	ret0, _ := ret[0].(*ses.GetIdentityNotificationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityNotificationAttributes indicates an expected call of GetIdentityNotificationAttributes.
func (mr *MockSesClientMockRecorder) GetIdentityNotificationAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityNotificationAttributes", reflect.TypeOf((*MockSesClient)(nil).GetIdentityNotificationAttributes), varargs...)
}

// GetIdentityPolicies mocks base method.
func (m *MockSesClient) GetIdentityPolicies(arg0 context.Context, arg1 *ses.GetIdentityPoliciesInput, arg2 ...func(*ses.Options)) (*ses.GetIdentityPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIdentityPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityPolicies", varargs...)
	ret0, _ := ret[0].(*ses.GetIdentityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityPolicies indicates an expected call of GetIdentityPolicies.
func (mr *MockSesClientMockRecorder) GetIdentityPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityPolicies", reflect.TypeOf((*MockSesClient)(nil).GetIdentityPolicies), varargs...)
}

// GetIdentityVerificationAttributes mocks base method.
func (m *MockSesClient) GetIdentityVerificationAttributes(arg0 context.Context, arg1 *ses.GetIdentityVerificationAttributesInput, arg2 ...func(*ses.Options)) (*ses.GetIdentityVerificationAttributesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetIdentityVerificationAttributes")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIdentityVerificationAttributes", varargs...)
	ret0, _ := ret[0].(*ses.GetIdentityVerificationAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityVerificationAttributes indicates an expected call of GetIdentityVerificationAttributes.
func (mr *MockSesClientMockRecorder) GetIdentityVerificationAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityVerificationAttributes", reflect.TypeOf((*MockSesClient)(nil).GetIdentityVerificationAttributes), varargs...)
}

// GetSendQuota mocks base method.
func (m *MockSesClient) GetSendQuota(arg0 context.Context, arg1 *ses.GetSendQuotaInput, arg2 ...func(*ses.Options)) (*ses.GetSendQuotaOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSendQuota")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSendQuota", varargs...)
	ret0, _ := ret[0].(*ses.GetSendQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendQuota indicates an expected call of GetSendQuota.
func (mr *MockSesClientMockRecorder) GetSendQuota(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendQuota", reflect.TypeOf((*MockSesClient)(nil).GetSendQuota), varargs...)
}

// GetSendStatistics mocks base method.
func (m *MockSesClient) GetSendStatistics(arg0 context.Context, arg1 *ses.GetSendStatisticsInput, arg2 ...func(*ses.Options)) (*ses.GetSendStatisticsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetSendStatistics")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSendStatistics", varargs...)
	ret0, _ := ret[0].(*ses.GetSendStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendStatistics indicates an expected call of GetSendStatistics.
func (mr *MockSesClientMockRecorder) GetSendStatistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendStatistics", reflect.TypeOf((*MockSesClient)(nil).GetSendStatistics), varargs...)
}

// GetTemplate mocks base method.
func (m *MockSesClient) GetTemplate(arg0 context.Context, arg1 *ses.GetTemplateInput, arg2 ...func(*ses.Options)) (*ses.GetTemplateOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetTemplate")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*ses.GetTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockSesClientMockRecorder) GetTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockSesClient)(nil).GetTemplate), varargs...)
}

// ListConfigurationSets mocks base method.
func (m *MockSesClient) ListConfigurationSets(arg0 context.Context, arg1 *ses.ListConfigurationSetsInput, arg2 ...func(*ses.Options)) (*ses.ListConfigurationSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListConfigurationSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSets", varargs...)
	ret0, _ := ret[0].(*ses.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSets indicates an expected call of ListConfigurationSets.
func (mr *MockSesClientMockRecorder) ListConfigurationSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSets", reflect.TypeOf((*MockSesClient)(nil).ListConfigurationSets), varargs...)
}

// ListCustomVerificationEmailTemplates mocks base method.
func (m *MockSesClient) ListCustomVerificationEmailTemplates(arg0 context.Context, arg1 *ses.ListCustomVerificationEmailTemplatesInput, arg2 ...func(*ses.Options)) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCustomVerificationEmailTemplates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomVerificationEmailTemplates", varargs...)
	ret0, _ := ret[0].(*ses.ListCustomVerificationEmailTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomVerificationEmailTemplates indicates an expected call of ListCustomVerificationEmailTemplates.
func (mr *MockSesClientMockRecorder) ListCustomVerificationEmailTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomVerificationEmailTemplates", reflect.TypeOf((*MockSesClient)(nil).ListCustomVerificationEmailTemplates), varargs...)
}

// ListIdentities mocks base method.
func (m *MockSesClient) ListIdentities(arg0 context.Context, arg1 *ses.ListIdentitiesInput, arg2 ...func(*ses.Options)) (*ses.ListIdentitiesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListIdentities")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentities", varargs...)
	ret0, _ := ret[0].(*ses.ListIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentities indicates an expected call of ListIdentities.
func (mr *MockSesClientMockRecorder) ListIdentities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentities", reflect.TypeOf((*MockSesClient)(nil).ListIdentities), varargs...)
}

// ListIdentityPolicies mocks base method.
func (m *MockSesClient) ListIdentityPolicies(arg0 context.Context, arg1 *ses.ListIdentityPoliciesInput, arg2 ...func(*ses.Options)) (*ses.ListIdentityPoliciesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListIdentityPolicies")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIdentityPolicies", varargs...)
	ret0, _ := ret[0].(*ses.ListIdentityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentityPolicies indicates an expected call of ListIdentityPolicies.
func (mr *MockSesClientMockRecorder) ListIdentityPolicies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityPolicies", reflect.TypeOf((*MockSesClient)(nil).ListIdentityPolicies), varargs...)
}

// ListReceiptFilters mocks base method.
func (m *MockSesClient) ListReceiptFilters(arg0 context.Context, arg1 *ses.ListReceiptFiltersInput, arg2 ...func(*ses.Options)) (*ses.ListReceiptFiltersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListReceiptFilters")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReceiptFilters", varargs...)
	ret0, _ := ret[0].(*ses.ListReceiptFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReceiptFilters indicates an expected call of ListReceiptFilters.
func (mr *MockSesClientMockRecorder) ListReceiptFilters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReceiptFilters", reflect.TypeOf((*MockSesClient)(nil).ListReceiptFilters), varargs...)
}

// ListReceiptRuleSets mocks base method.
func (m *MockSesClient) ListReceiptRuleSets(arg0 context.Context, arg1 *ses.ListReceiptRuleSetsInput, arg2 ...func(*ses.Options)) (*ses.ListReceiptRuleSetsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListReceiptRuleSets")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReceiptRuleSets", varargs...)
	ret0, _ := ret[0].(*ses.ListReceiptRuleSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReceiptRuleSets indicates an expected call of ListReceiptRuleSets.
func (mr *MockSesClientMockRecorder) ListReceiptRuleSets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReceiptRuleSets", reflect.TypeOf((*MockSesClient)(nil).ListReceiptRuleSets), varargs...)
}

// ListTemplates mocks base method.
func (m *MockSesClient) ListTemplates(arg0 context.Context, arg1 *ses.ListTemplatesInput, arg2 ...func(*ses.Options)) (*ses.ListTemplatesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTemplates")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplates", varargs...)
	ret0, _ := ret[0].(*ses.ListTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockSesClientMockRecorder) ListTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockSesClient)(nil).ListTemplates), varargs...)
}

// ListVerifiedEmailAddresses mocks base method.
func (m *MockSesClient) ListVerifiedEmailAddresses(arg0 context.Context, arg1 *ses.ListVerifiedEmailAddressesInput, arg2 ...func(*ses.Options)) (*ses.ListVerifiedEmailAddressesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &ses.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVerifiedEmailAddresses")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVerifiedEmailAddresses", varargs...)
	ret0, _ := ret[0].(*ses.ListVerifiedEmailAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVerifiedEmailAddresses indicates an expected call of ListVerifiedEmailAddresses.
func (mr *MockSesClientMockRecorder) ListVerifiedEmailAddresses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVerifiedEmailAddresses", reflect.TypeOf((*MockSesClient)(nil).ListVerifiedEmailAddresses), varargs...)
}
