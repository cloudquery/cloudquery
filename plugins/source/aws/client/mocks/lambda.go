// Code generated by MockGen. DO NOT EDIT.
// Source: lambda.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	gomock "github.com/golang/mock/gomock"
)

// MockLambdaClient is a mock of LambdaClient interface.
type MockLambdaClient struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaClientMockRecorder
}

// MockLambdaClientMockRecorder is the mock recorder for MockLambdaClient.
type MockLambdaClientMockRecorder struct {
	mock *MockLambdaClient
}

// NewMockLambdaClient creates a new mock instance.
func NewMockLambdaClient(ctrl *gomock.Controller) *MockLambdaClient {
	mock := &MockLambdaClient{ctrl: ctrl}
	mock.recorder = &MockLambdaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaClient) EXPECT() *MockLambdaClientMockRecorder {
	return m.recorder
}

// GetAccountSettings mocks base method.
func (m *MockLambdaClient) GetAccountSettings(arg0 context.Context, arg1 *lambda.GetAccountSettingsInput, arg2 ...func(*lambda.Options)) (*lambda.GetAccountSettingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAccountSettings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountSettings", varargs...)
	ret0, _ := ret[0].(*lambda.GetAccountSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings.
func (mr *MockLambdaClientMockRecorder) GetAccountSettings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockLambdaClient)(nil).GetAccountSettings), varargs...)
}

// GetAlias mocks base method.
func (m *MockLambdaClient) GetAlias(arg0 context.Context, arg1 *lambda.GetAliasInput, arg2 ...func(*lambda.Options)) (*lambda.GetAliasOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetAlias")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlias", varargs...)
	ret0, _ := ret[0].(*lambda.GetAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockLambdaClientMockRecorder) GetAlias(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockLambdaClient)(nil).GetAlias), varargs...)
}

// GetCodeSigningConfig mocks base method.
func (m *MockLambdaClient) GetCodeSigningConfig(arg0 context.Context, arg1 *lambda.GetCodeSigningConfigInput, arg2 ...func(*lambda.Options)) (*lambda.GetCodeSigningConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetCodeSigningConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCodeSigningConfig", varargs...)
	ret0, _ := ret[0].(*lambda.GetCodeSigningConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeSigningConfig indicates an expected call of GetCodeSigningConfig.
func (mr *MockLambdaClientMockRecorder) GetCodeSigningConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSigningConfig", reflect.TypeOf((*MockLambdaClient)(nil).GetCodeSigningConfig), varargs...)
}

// GetEventSourceMapping mocks base method.
func (m *MockLambdaClient) GetEventSourceMapping(arg0 context.Context, arg1 *lambda.GetEventSourceMappingInput, arg2 ...func(*lambda.Options)) (*lambda.GetEventSourceMappingOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetEventSourceMapping")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventSourceMapping", varargs...)
	ret0, _ := ret[0].(*lambda.GetEventSourceMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventSourceMapping indicates an expected call of GetEventSourceMapping.
func (mr *MockLambdaClientMockRecorder) GetEventSourceMapping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSourceMapping", reflect.TypeOf((*MockLambdaClient)(nil).GetEventSourceMapping), varargs...)
}

// GetFunction mocks base method.
func (m *MockLambdaClient) GetFunction(arg0 context.Context, arg1 *lambda.GetFunctionInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunction", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockLambdaClientMockRecorder) GetFunction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockLambdaClient)(nil).GetFunction), varargs...)
}

// GetFunctionCodeSigningConfig mocks base method.
func (m *MockLambdaClient) GetFunctionCodeSigningConfig(arg0 context.Context, arg1 *lambda.GetFunctionCodeSigningConfigInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionCodeSigningConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunctionCodeSigningConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionCodeSigningConfig", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionCodeSigningConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionCodeSigningConfig indicates an expected call of GetFunctionCodeSigningConfig.
func (mr *MockLambdaClientMockRecorder) GetFunctionCodeSigningConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionCodeSigningConfig", reflect.TypeOf((*MockLambdaClient)(nil).GetFunctionCodeSigningConfig), varargs...)
}

// GetFunctionConcurrency mocks base method.
func (m *MockLambdaClient) GetFunctionConcurrency(arg0 context.Context, arg1 *lambda.GetFunctionConcurrencyInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionConcurrencyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunctionConcurrency")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionConcurrency", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionConcurrencyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionConcurrency indicates an expected call of GetFunctionConcurrency.
func (mr *MockLambdaClientMockRecorder) GetFunctionConcurrency(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionConcurrency", reflect.TypeOf((*MockLambdaClient)(nil).GetFunctionConcurrency), varargs...)
}

// GetFunctionConfiguration mocks base method.
func (m *MockLambdaClient) GetFunctionConfiguration(arg0 context.Context, arg1 *lambda.GetFunctionConfigurationInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionConfigurationOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunctionConfiguration")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionConfiguration", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionConfiguration indicates an expected call of GetFunctionConfiguration.
func (mr *MockLambdaClientMockRecorder) GetFunctionConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionConfiguration", reflect.TypeOf((*MockLambdaClient)(nil).GetFunctionConfiguration), varargs...)
}

// GetFunctionEventInvokeConfig mocks base method.
func (m *MockLambdaClient) GetFunctionEventInvokeConfig(arg0 context.Context, arg1 *lambda.GetFunctionEventInvokeConfigInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionEventInvokeConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunctionEventInvokeConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionEventInvokeConfig", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionEventInvokeConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionEventInvokeConfig indicates an expected call of GetFunctionEventInvokeConfig.
func (mr *MockLambdaClientMockRecorder) GetFunctionEventInvokeConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionEventInvokeConfig", reflect.TypeOf((*MockLambdaClient)(nil).GetFunctionEventInvokeConfig), varargs...)
}

// GetFunctionUrlConfig mocks base method.
func (m *MockLambdaClient) GetFunctionUrlConfig(arg0 context.Context, arg1 *lambda.GetFunctionUrlConfigInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionUrlConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetFunctionUrlConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunctionUrlConfig", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionUrlConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionUrlConfig indicates an expected call of GetFunctionUrlConfig.
func (mr *MockLambdaClientMockRecorder) GetFunctionUrlConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionUrlConfig", reflect.TypeOf((*MockLambdaClient)(nil).GetFunctionUrlConfig), varargs...)
}

// GetLayerVersion mocks base method.
func (m *MockLambdaClient) GetLayerVersion(arg0 context.Context, arg1 *lambda.GetLayerVersionInput, arg2 ...func(*lambda.Options)) (*lambda.GetLayerVersionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLayerVersion")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLayerVersion", varargs...)
	ret0, _ := ret[0].(*lambda.GetLayerVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerVersion indicates an expected call of GetLayerVersion.
func (mr *MockLambdaClientMockRecorder) GetLayerVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerVersion", reflect.TypeOf((*MockLambdaClient)(nil).GetLayerVersion), varargs...)
}

// GetLayerVersionByArn mocks base method.
func (m *MockLambdaClient) GetLayerVersionByArn(arg0 context.Context, arg1 *lambda.GetLayerVersionByArnInput, arg2 ...func(*lambda.Options)) (*lambda.GetLayerVersionByArnOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLayerVersionByArn")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLayerVersionByArn", varargs...)
	ret0, _ := ret[0].(*lambda.GetLayerVersionByArnOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerVersionByArn indicates an expected call of GetLayerVersionByArn.
func (mr *MockLambdaClientMockRecorder) GetLayerVersionByArn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerVersionByArn", reflect.TypeOf((*MockLambdaClient)(nil).GetLayerVersionByArn), varargs...)
}

// GetLayerVersionPolicy mocks base method.
func (m *MockLambdaClient) GetLayerVersionPolicy(arg0 context.Context, arg1 *lambda.GetLayerVersionPolicyInput, arg2 ...func(*lambda.Options)) (*lambda.GetLayerVersionPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetLayerVersionPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLayerVersionPolicy", varargs...)
	ret0, _ := ret[0].(*lambda.GetLayerVersionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerVersionPolicy indicates an expected call of GetLayerVersionPolicy.
func (mr *MockLambdaClientMockRecorder) GetLayerVersionPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerVersionPolicy", reflect.TypeOf((*MockLambdaClient)(nil).GetLayerVersionPolicy), varargs...)
}

// GetPolicy mocks base method.
func (m *MockLambdaClient) GetPolicy(arg0 context.Context, arg1 *lambda.GetPolicyInput, arg2 ...func(*lambda.Options)) (*lambda.GetPolicyOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetPolicy")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicy", varargs...)
	ret0, _ := ret[0].(*lambda.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockLambdaClientMockRecorder) GetPolicy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockLambdaClient)(nil).GetPolicy), varargs...)
}

// GetProvisionedConcurrencyConfig mocks base method.
func (m *MockLambdaClient) GetProvisionedConcurrencyConfig(arg0 context.Context, arg1 *lambda.GetProvisionedConcurrencyConfigInput, arg2 ...func(*lambda.Options)) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetProvisionedConcurrencyConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProvisionedConcurrencyConfig", varargs...)
	ret0, _ := ret[0].(*lambda.GetProvisionedConcurrencyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvisionedConcurrencyConfig indicates an expected call of GetProvisionedConcurrencyConfig.
func (mr *MockLambdaClientMockRecorder) GetProvisionedConcurrencyConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvisionedConcurrencyConfig", reflect.TypeOf((*MockLambdaClient)(nil).GetProvisionedConcurrencyConfig), varargs...)
}

// GetRuntimeManagementConfig mocks base method.
func (m *MockLambdaClient) GetRuntimeManagementConfig(arg0 context.Context, arg1 *lambda.GetRuntimeManagementConfigInput, arg2 ...func(*lambda.Options)) (*lambda.GetRuntimeManagementConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to GetRuntimeManagementConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuntimeManagementConfig", varargs...)
	ret0, _ := ret[0].(*lambda.GetRuntimeManagementConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeManagementConfig indicates an expected call of GetRuntimeManagementConfig.
func (mr *MockLambdaClientMockRecorder) GetRuntimeManagementConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeManagementConfig", reflect.TypeOf((*MockLambdaClient)(nil).GetRuntimeManagementConfig), varargs...)
}

// ListAliases mocks base method.
func (m *MockLambdaClient) ListAliases(arg0 context.Context, arg1 *lambda.ListAliasesInput, arg2 ...func(*lambda.Options)) (*lambda.ListAliasesOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListAliases")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliases", varargs...)
	ret0, _ := ret[0].(*lambda.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases.
func (mr *MockLambdaClientMockRecorder) ListAliases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockLambdaClient)(nil).ListAliases), varargs...)
}

// ListCodeSigningConfigs mocks base method.
func (m *MockLambdaClient) ListCodeSigningConfigs(arg0 context.Context, arg1 *lambda.ListCodeSigningConfigsInput, arg2 ...func(*lambda.Options)) (*lambda.ListCodeSigningConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListCodeSigningConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCodeSigningConfigs", varargs...)
	ret0, _ := ret[0].(*lambda.ListCodeSigningConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCodeSigningConfigs indicates an expected call of ListCodeSigningConfigs.
func (mr *MockLambdaClientMockRecorder) ListCodeSigningConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCodeSigningConfigs", reflect.TypeOf((*MockLambdaClient)(nil).ListCodeSigningConfigs), varargs...)
}

// ListEventSourceMappings mocks base method.
func (m *MockLambdaClient) ListEventSourceMappings(arg0 context.Context, arg1 *lambda.ListEventSourceMappingsInput, arg2 ...func(*lambda.Options)) (*lambda.ListEventSourceMappingsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListEventSourceMappings")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSourceMappings", varargs...)
	ret0, _ := ret[0].(*lambda.ListEventSourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSourceMappings indicates an expected call of ListEventSourceMappings.
func (mr *MockLambdaClientMockRecorder) ListEventSourceMappings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourceMappings", reflect.TypeOf((*MockLambdaClient)(nil).ListEventSourceMappings), varargs...)
}

// ListFunctionEventInvokeConfigs mocks base method.
func (m *MockLambdaClient) ListFunctionEventInvokeConfigs(arg0 context.Context, arg1 *lambda.ListFunctionEventInvokeConfigsInput, arg2 ...func(*lambda.Options)) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFunctionEventInvokeConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctionEventInvokeConfigs", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionEventInvokeConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionEventInvokeConfigs indicates an expected call of ListFunctionEventInvokeConfigs.
func (mr *MockLambdaClientMockRecorder) ListFunctionEventInvokeConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionEventInvokeConfigs", reflect.TypeOf((*MockLambdaClient)(nil).ListFunctionEventInvokeConfigs), varargs...)
}

// ListFunctionUrlConfigs mocks base method.
func (m *MockLambdaClient) ListFunctionUrlConfigs(arg0 context.Context, arg1 *lambda.ListFunctionUrlConfigsInput, arg2 ...func(*lambda.Options)) (*lambda.ListFunctionUrlConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFunctionUrlConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctionUrlConfigs", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionUrlConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionUrlConfigs indicates an expected call of ListFunctionUrlConfigs.
func (mr *MockLambdaClientMockRecorder) ListFunctionUrlConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionUrlConfigs", reflect.TypeOf((*MockLambdaClient)(nil).ListFunctionUrlConfigs), varargs...)
}

// ListFunctions mocks base method.
func (m *MockLambdaClient) ListFunctions(arg0 context.Context, arg1 *lambda.ListFunctionsInput, arg2 ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFunctions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctions", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctions indicates an expected call of ListFunctions.
func (mr *MockLambdaClientMockRecorder) ListFunctions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctions", reflect.TypeOf((*MockLambdaClient)(nil).ListFunctions), varargs...)
}

// ListFunctionsByCodeSigningConfig mocks base method.
func (m *MockLambdaClient) ListFunctionsByCodeSigningConfig(arg0 context.Context, arg1 *lambda.ListFunctionsByCodeSigningConfigInput, arg2 ...func(*lambda.Options)) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListFunctionsByCodeSigningConfig")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctionsByCodeSigningConfig", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionsByCodeSigningConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionsByCodeSigningConfig indicates an expected call of ListFunctionsByCodeSigningConfig.
func (mr *MockLambdaClientMockRecorder) ListFunctionsByCodeSigningConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionsByCodeSigningConfig", reflect.TypeOf((*MockLambdaClient)(nil).ListFunctionsByCodeSigningConfig), varargs...)
}

// ListLayerVersions mocks base method.
func (m *MockLambdaClient) ListLayerVersions(arg0 context.Context, arg1 *lambda.ListLayerVersionsInput, arg2 ...func(*lambda.Options)) (*lambda.ListLayerVersionsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLayerVersions")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLayerVersions", varargs...)
	ret0, _ := ret[0].(*lambda.ListLayerVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLayerVersions indicates an expected call of ListLayerVersions.
func (mr *MockLambdaClientMockRecorder) ListLayerVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayerVersions", reflect.TypeOf((*MockLambdaClient)(nil).ListLayerVersions), varargs...)
}

// ListLayers mocks base method.
func (m *MockLambdaClient) ListLayers(arg0 context.Context, arg1 *lambda.ListLayersInput, arg2 ...func(*lambda.Options)) (*lambda.ListLayersOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListLayers")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLayers", varargs...)
	ret0, _ := ret[0].(*lambda.ListLayersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLayers indicates an expected call of ListLayers.
func (mr *MockLambdaClientMockRecorder) ListLayers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLayers", reflect.TypeOf((*MockLambdaClient)(nil).ListLayers), varargs...)
}

// ListProvisionedConcurrencyConfigs mocks base method.
func (m *MockLambdaClient) ListProvisionedConcurrencyConfigs(arg0 context.Context, arg1 *lambda.ListProvisionedConcurrencyConfigsInput, arg2 ...func(*lambda.Options)) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListProvisionedConcurrencyConfigs")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProvisionedConcurrencyConfigs", varargs...)
	ret0, _ := ret[0].(*lambda.ListProvisionedConcurrencyConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProvisionedConcurrencyConfigs indicates an expected call of ListProvisionedConcurrencyConfigs.
func (mr *MockLambdaClientMockRecorder) ListProvisionedConcurrencyConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProvisionedConcurrencyConfigs", reflect.TypeOf((*MockLambdaClient)(nil).ListProvisionedConcurrencyConfigs), varargs...)
}

// ListTags mocks base method.
func (m *MockLambdaClient) ListTags(arg0 context.Context, arg1 *lambda.ListTagsInput, arg2 ...func(*lambda.Options)) (*lambda.ListTagsOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListTags")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTags", varargs...)
	ret0, _ := ret[0].(*lambda.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockLambdaClientMockRecorder) ListTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockLambdaClient)(nil).ListTags), varargs...)
}

// ListVersionsByFunction mocks base method.
func (m *MockLambdaClient) ListVersionsByFunction(arg0 context.Context, arg1 *lambda.ListVersionsByFunctionInput, arg2 ...func(*lambda.Options)) (*lambda.ListVersionsByFunctionOutput, error) {

	// Assertion inserted by client/mockgen/main.go
	o := &lambda.Options{}
	for _, f := range arg2 {
		f(o)
	}
	if o.Region == "" {
		m.ctrl.T.Errorf("Region not set in call to ListVersionsByFunction")
	}

	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersionsByFunction", varargs...)
	ret0, _ := ret[0].(*lambda.ListVersionsByFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsByFunction indicates an expected call of ListVersionsByFunction.
func (mr *MockLambdaClientMockRecorder) ListVersionsByFunction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsByFunction", reflect.TypeOf((*MockLambdaClient)(nil).ListVersionsByFunction), varargs...)
}
