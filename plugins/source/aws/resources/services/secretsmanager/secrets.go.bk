package secretsmanager

import (
	"context"
	"encoding/json"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager/types"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func SecretsmanagerSecrets() *schema.Table {
	return &schema.Table{
		Name:          "aws_secretsmanager_secrets",
		Description:   "A structure that contains the details about a secret",
		Resolver:      fetchSecretsmanagerSecrets,
		Multiplex:     client.ServiceAccountRegionMultiplexer("secretsmanager"),
		IgnoreInTests: true,
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Description: "The AWS Account ID of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
			},
			{
				Name:        "region",
				Description: "The AWS Region of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
			},
			{
				Name:        "policy",
				Description: "A JSON-formatted string that describes the permissions that are associated with the attached secret.",
				Type:        schema.TypeJSON,
				Resolver:    fetchSecretsmanagerSecretPolicy,
			},
			{
				Name:        "replication_status",
				Description: "A replication object consisting of a RegionReplicationStatus object and includes a Region, KMSKeyId, status, and status message.",
				Type:        schema.TypeJSON,
				Resolver:    resolveSecretsmanagerSecretReplicationStatus,
			},
			{
				Name:            "arn",
				Description:     "The Amazon Resource Name (ARN) of the secret",
				Type:            schema.TypeString,
				Resolver:        schema.PathResolver("ARN"),
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:        "created_date",
				Description: "The date and time when a secret was created.",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "deleted_date",
				Description: "The date and time the deletion of the secret occurred",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "description",
				Description: "The user-provided description of the secret.",
				Type:        schema.TypeString,
			},
			{
				Name:        "kms_key_id",
				Description: "The ARN or alias of the Amazon Web Services KMS customer master key (CMK) used to encrypt the SecretString and SecretBinary fields in each version of the secret",
				Type:        schema.TypeString,
			},
			{
				Name:        "last_accessed_date",
				Description: "The last date that this secret was accessed",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "last_changed_date",
				Description: "The last date and time that this secret was modified in any way.",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "last_rotated_date",
				Description: "The most recent date and time that the Secrets Manager rotation process was successfully completed",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "name",
				Description: "The friendly name of the secret",
				Type:        schema.TypeString,
			},
			{
				Name:        "owning_service",
				Description: "Returns the name of the service that created the secret.",
				Type:        schema.TypeString,
			},
			{
				Name:        "primary_region",
				Description: "The Region where Secrets Manager originated the secret.",
				Type:        schema.TypeString,
			},
			{
				Name:        "rotation_enabled",
				Description: "Indicates whether automatic, scheduled rotation is enabled for this secret.",
				Type:        schema.TypeBool,
			},
			{
				Name:        "rotation_lambda_arn",
				Description: "The ARN of an Amazon Web Services Lambda function invoked by Secrets Manager to rotate and expire the secret either automatically per the schedule or manually by a call to RotateSecret.",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("RotationLambdaARN"),
			},
			{
				Name:        "rotation_rules_automatically_after_days",
				Description: "Specifies the number of days between automatic scheduled rotations of the secret",
				Type:        schema.TypeInt,
				Resolver:    schema.PathResolver("RotationRules.AutomaticallyAfterDays"),
			},
			{
				Name:        "secret_versions_to_stages",
				Description: "A list of all of the currently assigned SecretVersionStage staging labels and the SecretVersionId attached to each one",
				Type:        schema.TypeJSON,
			},
			{
				Name:        "tags",
				Description: "The list of user-defined tags associated with the secret",
				Type:        schema.TypeJSON,
				Resolver:    client.ResolveTags,
			},
		},
	}
}

