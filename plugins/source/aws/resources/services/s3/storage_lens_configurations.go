// Code generated by codegen; DO NOT EDIT.

package s3

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func StorageLensConfigurations() *schema.Table {
	return &schema.Table{
		Name:                "aws_s3_storage_lens_configurations",
		Description:         `https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_StorageLensConfiguration.html`,
		Resolver:            fetchS3StorageLensConfigurations,
		PreResourceResolver: getStorageLensConfiguration,
		Multiplex:           client.ServiceAccountRegionMultiplexer("s3-control"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StorageLensArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveStorageLensTags,
			},
			{
				Name:     "account_level",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AccountLevel"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "is_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsEnabled"),
			},
			{
				Name:     "aws_org",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AwsOrg"),
			},
			{
				Name:     "data_export",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DataExport"),
			},
			{
				Name:     "exclude",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Exclude"),
			},
			{
				Name:     "include",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Include"),
			},
		},
	}
}
