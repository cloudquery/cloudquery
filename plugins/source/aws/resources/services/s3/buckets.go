// Code generated by codegen; DO NOT EDIT.

package s3

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Buckets() *schema.Table {
	return &schema.Table{
		Name:      "aws_s3_buckets",
		Resolver:  fetchS3Buckets,
		Multiplex: client.AccountMultiplex,
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolveBucketARN(),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "creation_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationDate"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "replication_role",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ReplicationRole"),
			},
			{
				Name:     "replication_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ReplicationRules"),
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Region"),
			},
			{
				Name:     "logging_target_bucket",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LoggingTargetBucket"),
			},
			{
				Name:     "logging_target_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LoggingTargetPrefix"),
			},
			{
				Name:     "policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Policy"),
			},
			{
				Name:     "versioning_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VersioningStatus"),
			},
			{
				Name:     "versioning_mfa_delete",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VersioningMfaDelete"),
			},
			{
				Name:     "block_public_acls",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("BlockPublicAcls"),
			},
			{
				Name:     "block_public_policy",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("BlockPublicPolicy"),
			},
			{
				Name:     "ignore_public_acls",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IgnorePublicAcls"),
			},
			{
				Name:     "restrict_public_buckets",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RestrictPublicBuckets"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "ownership_controls",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("OwnershipControls"),
			},
		},

		Relations: []*schema.Table{
			BucketEncryptionRules(),
			BucketLifecycles(),
			BucketGrants(),
			BucketCorsRules(),
		},
	}
}
