// Code generated by codegen; DO NOT EDIT.

package ecs

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Clusters() *schema.Table {
	return &schema.Table{
		Name:        "aws_ecs_clusters",
		Description: `https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Cluster.html`,
		Resolver:    fetchEcsClusters,
		Multiplex:   client.ServiceAccountRegionMultiplexer("ecs"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClusterArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "active_services_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ActiveServicesCount"),
			},
			{
				Name:     "attachments",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Attachments"),
			},
			{
				Name:     "attachments_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AttachmentsStatus"),
			},
			{
				Name:     "capacity_providers",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("CapacityProviders"),
			},
			{
				Name:     "cluster_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClusterName"),
			},
			{
				Name:     "configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Configuration"),
			},
			{
				Name:     "default_capacity_provider_strategy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultCapacityProviderStrategy"),
			},
			{
				Name:     "pending_tasks_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PendingTasksCount"),
			},
			{
				Name:     "registered_container_instances_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RegisteredContainerInstancesCount"),
			},
			{
				Name:     "running_tasks_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RunningTasksCount"),
			},
			{
				Name:     "service_connect_defaults",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ServiceConnectDefaults"),
			},
			{
				Name:     "settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Settings"),
			},
			{
				Name:     "statistics",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Statistics"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: client.ResolveTags,
			},
		},

		Relations: []*schema.Table{
			ClusterTasks(),
			ClusterServices(),
			ClusterContainerInstances(),
		},
	}
}
