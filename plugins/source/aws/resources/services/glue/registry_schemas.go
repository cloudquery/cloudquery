// Code generated by codegen; DO NOT EDIT.

package glue

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func RegistrySchemas() *schema.Table {
	return &schema.Table{
		Name:                "aws_glue_registry_schemas",
		Resolver:            fetchGlueRegistrySchemas,
		PreResourceResolver: getRegistrySchema,
		Multiplex:           client.ServiceAccountRegionMultiplexer("glue"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SchemaArn"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveGlueRegistrySchemaTags,
			},
			{
				Name:     "compatibility",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Compatibility"),
			},
			{
				Name:     "created_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreatedTime"),
			},
			{
				Name:     "data_format",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DataFormat"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "latest_schema_version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("LatestSchemaVersion"),
			},
			{
				Name:     "next_schema_version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NextSchemaVersion"),
			},
			{
				Name:     "registry_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RegistryArn"),
			},
			{
				Name:     "registry_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RegistryName"),
			},
			{
				Name:     "schema_checkpoint",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SchemaCheckpoint"),
			},
			{
				Name:     "schema_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SchemaName"),
			},
			{
				Name:     "schema_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SchemaStatus"),
			},
			{
				Name:     "updated_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UpdatedTime"),
			},
			{
				Name:     "result_metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResultMetadata"),
			},
		},

		Relations: []*schema.Table{
			RegistrySchemaVersions(),
		},
	}
}
