package glue

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func MlTransforms() *schema.Table {
	return &schema.Table{
		Name:        "aws_glue_ml_transforms",
		Description: "A structure for a machine learning transform",
		Resolver:    fetchGlueMlTransforms,
		Multiplex:   client.ServiceAccountRegionMultiplexer("glue"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Description: "The AWS Account ID of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
			},
			{
				Name:        "region",
				Description: "The AWS Region of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
			},
			{
				Name:            "arn",
				Description:     "The Amazon Resource Name (ARN) of the workflow.",
				Type:            schema.TypeString,
				Resolver:        resolveGlueMlTransformArn,
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:        "tags",
				Description: "Resource tags",
				Type:        schema.TypeJSON,
				Resolver:    resolveGlueMlTransformTags,
			},
			{
				Name:        "created_on",
				Description: "A timestamp",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "description",
				Description: "A user-defined, long-form description text for the machine learning transform Descriptions are not guaranteed to be unique and can be changed at any time",
				Type:        schema.TypeString,
			},
			{
				Name:     "evaluation_metrics",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EvaluationMetrics"),
			},
			{
				Name:        "glue_version",
				Description: "This value determines which version of Glue this machine learning transform is compatible with",
				Type:        schema.TypeString,
			},
			{
				Name:        "label_count",
				Description: "A count identifier for the labeling files generated by Glue for this transform As you create a better transform, you can iteratively download, label, and upload the labeling file",
				Type:        schema.TypeInt,
			},
			{
				Name:        "last_modified_on",
				Description: "A timestamp",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "max_capacity",
				Description: "The number of Glue data processing units (DPUs) that are allocated to task runs for this transform",
				Type:        schema.TypeFloat,
			},
			{
				Name:        "max_retries",
				Description: "The maximum number of times to retry after an MLTaskRun of the machine learning transform fails",
				Type:        schema.TypeInt,
			},
			{
				Name:        "name",
				Description: "A user-defined name for the machine learning transform",
				Type:        schema.TypeString,
			},
			{
				Name:        "number_of_workers",
				Description: "The number of workers of a defined workerType that are allocated when a task of the transform runs",
				Type:        schema.TypeInt,
			},
			{
				Name:     "parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Parameters"),
			},
			{
				Name:        "role",
				Description: "The name or Amazon Resource Name (ARN) of the IAM role with the required permissions",
				Type:        schema.TypeString,
			},
			{
				Name:        "schema",
				Description: "A map of key-value pairs representing the columns and data types that this transform can run against",
				Type:        schema.TypeJSON,
				Resolver:    resolveMlTransformsSchema,
			},
			{
				Name:        "status",
				Description: "The current status of the machine learning transform",
				Type:        schema.TypeString,
			},
			{
				Name:        "timeout",
				Description: "The timeout in minutes of the machine learning transform",
				Type:        schema.TypeInt,
			},
			{
				Name:     "transform_encryption",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TransformEncryption"),
			},
			{
				Name:        "id",
				Description: "The unique transform ID that is generated for the machine learning transform The ID is guaranteed to be unique and does not change",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("TransformId"),
			},
			{
				Name:        "worker_type",
				Description: "The type of predefined worker that is allocated when a task of this transform runs",
				Type:        schema.TypeString,
			},
			{
				Name:        "input_record_tables",
				Description: "The database and table in the Glue Data Catalog that is used for input or output data",
				Type:        schema.TypeJSON,
				Resolver:    schema.PathResolver("InputRecordTables"),
			},
		},
		Relations: []*schema.Table{
			{
				Name:        "aws_glue_ml_transform_task_runs",
				Description: "The sampling parameters that are associated with the machine learning transform",
				Resolver:    fetchGlueMlTransformTaskRuns,
				Columns: []schema.Column{
					{
						Name:        "ml_transform_cq_id",
						Description: "Unique CloudQuery ID of aws_glue_ml_transforms table (FK)",
						Type:        schema.TypeUUID,
						Resolver:    schema.ParentIdResolver,
					},
					{
						Name:        "completed_on",
						Description: "The last point in time that the requested task run was completed",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "error_string",
						Description: "The list of error strings associated with this task run",
						Type:        schema.TypeString,
					},
					{
						Name:        "execution_time",
						Description: "The amount of time (in seconds) that the task run consumed resources",
						Type:        schema.TypeInt,
					},
					{
						Name:        "last_modified_on",
						Description: "The last point in time that the requested task run was updated",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "log_group_name",
						Description: "The names of the log group for secure logging, associated with this task run",
						Type:        schema.TypeString,
					},
					{
						Name:     "properties",
						Type:     schema.TypeJSON,
						Resolver: schema.PathResolver("Properties"),
					},
					{
						Name:        "started_on",
						Description: "The date and time that this task run started",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "status",
						Description: "The current status of the requested task run",
						Type:        schema.TypeString,
					},
					{
						Name:        "id",
						Description: "The unique identifier for this task run",
						Type:        schema.TypeString,
						Resolver:    schema.PathResolver("TaskRunId"),
					},
					{
						Name:        "transform_id",
						Description: "The unique identifier for the transform",
						Type:        schema.TypeString,
					},
				},
			},
		},
	}
}

