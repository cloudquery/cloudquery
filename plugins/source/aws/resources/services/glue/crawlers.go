// Code generated by codegen; DO NOT EDIT.

package glue

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Crawlers() *schema.Table {
	return &schema.Table{
		Name:      "aws_glue_crawlers",
		Resolver:  fetchGlueCrawlers,
		Multiplex: client.ServiceAccountRegionMultiplexer("glue"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolveGlueCrawlerArn,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveGlueCrawlerTags,
			},
			{
				Name:     "classifiers",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Classifiers"),
			},
			{
				Name:     "configuration",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Configuration"),
			},
			{
				Name:     "crawl_elapsed_time",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CrawlElapsedTime"),
			},
			{
				Name:     "crawler_security_configuration",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CrawlerSecurityConfiguration"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "database_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DatabaseName"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "lake_formation_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LakeFormationConfiguration"),
			},
			{
				Name:     "last_crawl",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LastCrawl"),
			},
			{
				Name:     "last_updated",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastUpdated"),
			},
			{
				Name:     "lineage_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LineageConfiguration"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "recrawl_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RecrawlPolicy"),
			},
			{
				Name:     "role",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Role"),
			},
			{
				Name:     "schedule",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Schedule"),
			},
			{
				Name:     "schema_change_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SchemaChangePolicy"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "table_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TablePrefix"),
			},
			{
				Name:     "targets",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Targets"),
			},
			{
				Name:     "version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Version"),
			},
		},
	}
}
