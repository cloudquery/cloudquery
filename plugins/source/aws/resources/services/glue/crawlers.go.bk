package glue

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	"github.com/aws/aws-sdk-go-v2/service/glue/types"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Crawlers() *schema.Table {
	return &schema.Table{
		Name:        "aws_glue_crawlers",
		Description: "Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema",
		Resolver:    fetchGlueCrawlers,
		Multiplex:   client.ServiceAccountRegionMultiplexer("glue"),
		Columns: []schema.Column{
			{
				Name:            "arn",
				Description:     "ARN of the resource.",
				Type:            schema.TypeString,
				Resolver:        resolveGlueCrawlerArn,
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:        "account_id",
				Description: "The AWS Account ID of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
			},
			{
				Name:        "region",
				Description: "The AWS Region of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveGlueCrawlerTags,
			},
			{
				Name:        "classifiers",
				Description: "A list of UTF-8 strings that specify the custom classifiers that are associated with the crawler",
				Type:        schema.TypeStringArray,
			},
			{
				Name:        "configuration",
				Description: "Crawler configuration information",
				Type:        schema.TypeString,
			},
			{
				Name:        "crawl_elapsed_time",
				Description: "If the crawler is running, contains the total time elapsed since the last crawl began",
				Type:        schema.TypeInt,
			},
			{
				Name:        "crawler_security_configuration",
				Description: "The name of the SecurityConfiguration structure to be used by this crawler",
				Type:        schema.TypeString,
			},
			{
				Name:        "creation_time",
				Description: "The time that the crawler was created",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "database_name",
				Description: "The name of the database in which the crawler's output is stored",
				Type:        schema.TypeString,
			},
			{
				Name:        "description",
				Description: "A description of the crawler",
				Type:        schema.TypeString,
			},
			{
				Name:     "lake_formation_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LakeFormationConfiguration"),
			},
			{
				Name:     "last_crawl",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LastCrawl"),
			},
			{
				Name:        "last_updated",
				Description: "The time that the crawler was last updated",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:     "lineage_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LineageConfiguration"),
			},
			{
				Name:        "name",
				Description: "The name of the crawler",
				Type:        schema.TypeString,
			},
			{
				Name:     "recrawl_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RecrawlPolicy"),
			},
			{
				Name:        "role",
				Description: "The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data",
				Type:        schema.TypeString,
			},
			{
				Name:        "schedule_expression",
				Description: "A cron expression used to specify the schedule (see Time-Based Schedules for Jobs and Crawlers (https://docsawsamazoncom/glue/latest/dg/monitor-data-warehouse-schedulehtml) For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *)",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("Schedule.ScheduleExpression"),
			},
			{
				Name:     "schedule",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Schedule"),
			},
			{
				Name:     "schema_change_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SchemaChangePolicy"),
			},
			{
				Name:        "state",
				Description: "Indicates whether the crawler is running, or whether a run is pending",
				Type:        schema.TypeString,
			},
			{
				Name:        "table_prefix",
				Description: "The prefix added to the names of tables that are created",
				Type:        schema.TypeString,
			},
			{
				Name:        "version",
				Description: "The version of the crawler",
				Type:        schema.TypeInt,
			},
			{
				Name:        "targets",
				Description: "Specifies a target",
				Type:        schema.TypeJSON,
				Resolver:    schema.PathResolver("Targets"),
			},
		},
	}
}

