// Code generated by codegen; DO NOT EDIT.

package rds

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func DbSnapshots() *schema.Table {
	return &schema.Table{
		Name:      "aws_rds_db_snapshots",
		Resolver:  fetchRdsDbSnapshots,
		Multiplex: client.ServiceAccountRegionMultiplexer("rds"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBSnapshotArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveRDSDBSnapshotTags,
			},
			{
				Name:     "attributes",
				Type:     schema.TypeJSON,
				Resolver: resolveRDSDBSnapshotAttributes,
			},
			{
				Name:     "allocated_storage",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AllocatedStorage"),
			},
			{
				Name:     "availability_zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvailabilityZone"),
			},
			{
				Name:     "db_instance_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBInstanceIdentifier"),
			},
			{
				Name:     "db_snapshot_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBSnapshotIdentifier"),
			},
			{
				Name:     "dbi_resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DbiResourceId"),
			},
			{
				Name:     "encrypted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Encrypted"),
			},
			{
				Name:     "engine",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Engine"),
			},
			{
				Name:     "engine_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EngineVersion"),
			},
			{
				Name:     "iam_database_authentication_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IAMDatabaseAuthenticationEnabled"),
			},
			{
				Name:     "instance_create_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("InstanceCreateTime"),
			},
			{
				Name:     "iops",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Iops"),
			},
			{
				Name:     "kms_key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("KmsKeyId"),
			},
			{
				Name:     "license_model",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LicenseModel"),
			},
			{
				Name:     "master_username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MasterUsername"),
			},
			{
				Name:     "option_group_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OptionGroupName"),
			},
			{
				Name:     "original_snapshot_create_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("OriginalSnapshotCreateTime"),
			},
			{
				Name:     "percent_progress",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PercentProgress"),
			},
			{
				Name:     "port",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Port"),
			},
			{
				Name:     "processor_features",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ProcessorFeatures"),
			},
			{
				Name:     "snapshot_create_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("SnapshotCreateTime"),
			},
			{
				Name:     "snapshot_target",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SnapshotTarget"),
			},
			{
				Name:     "snapshot_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SnapshotType"),
			},
			{
				Name:     "source_db_snapshot_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SourceDBSnapshotIdentifier"),
			},
			{
				Name:     "source_region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SourceRegion"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "storage_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StorageType"),
			},
			{
				Name:     "tag_list",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TagList"),
			},
			{
				Name:     "tde_credential_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TdeCredentialArn"),
			},
			{
				Name:     "timezone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Timezone"),
			},
			{
				Name:     "vpc_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VpcId"),
			},
		},
	}
}
