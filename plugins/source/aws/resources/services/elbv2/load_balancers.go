// Code generated by codegen; DO NOT EDIT.

package elbv2

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func LoadBalancers() *schema.Table {
	return &schema.Table{
		Name:      "aws_elbv2_load_balancers",
		Resolver:  fetchElbv2LoadBalancers,
		Multiplex: client.ServiceAccountRegionMultiplexer("elasticloadbalancing"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:          "web_acl_arn",
				Type:          schema.TypeString,
				Resolver:      resolveElbv2loadBalancerWebACLArn,
				IgnoreInTests: true,
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveElbv2loadBalancerTags,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LoadBalancerArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "availability_zones",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AvailabilityZones"),
			},
			{
				Name:     "canonical_hosted_zone_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CanonicalHostedZoneId"),
			},
			{
				Name:     "created_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedTime"),
			},
			{
				Name:     "customer_owned_ipv_4_pool",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CustomerOwnedIpv4Pool"),
			},
			{
				Name:     "dns_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DNSName"),
			},
			{
				Name:     "ip_address_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IpAddressType"),
			},
			{
				Name:     "load_balancer_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LoadBalancerName"),
			},
			{
				Name:     "scheme",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Scheme"),
			},
			{
				Name:     "security_groups",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("SecurityGroups"),
			},
			{
				Name:     "state",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "vpc_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VpcId"),
			},
		},

		Relations: []*schema.Table{
			Listeners(),
			LoadBalancerAttributes(),
		},
	}
}
