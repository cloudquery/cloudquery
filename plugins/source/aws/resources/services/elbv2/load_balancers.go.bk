package elbv2

import (
	"context"
	"errors"

	"github.com/aws/aws-sdk-go-v2/aws"
	elbv2 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	"github.com/aws/aws-sdk-go-v2/service/wafv2"
	wafv2types "github.com/aws/aws-sdk-go-v2/service/wafv2/types"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/mitchellh/mapstructure"
)

type lbAttributes struct {
	AccessLogsS3Enabled                   bool   `mapstructure:"access_logs.s3.enabled"`
	AccessLogsS3Bucket                    string `mapstructure:"access_logs.s3.bucket"`
	AccessLogsS3Prefix                    string `mapstructure:"access_logs.s3.prefix"`
	DeletionProtection                    bool   `mapstructure:"deletion_protection.enabled"`
	IdleTimeout                           int32  `mapstructure:"idle_timeout.timeout_seconds"`
	RoutingHTTPDesyncMitigationMode       string `mapstructure:"routing.http.desync_mitigation_mode"`
	RoutingHTTPDropInvalidHeaderFields    bool   `mapstructure:"routing.http.drop_invalid_header_fields.enabled"`
	RoutingHTTPXAmznTLSVersionCipherSuite bool   `mapstructure:"routing.http.x_amzn_tls_version_and_cipher_suite.enabled"`
	RoutingHTTPXFFClientPort              bool   `mapstructure:"routing.http.xff_client_port.enabled"`
	RoutingHTTP2                          bool   `mapstructure:"routing.http2.enabled"`
	WAFFailOpen                           bool   `mapstructure:"waf.fail_open.enabled"`
	LoadBalancingCrossZone                bool   `mapstructure:"load_balancing.cross_zone.enabled"`
}

func Elbv2LoadBalancers() *schema.Table {
	return &schema.Table{
		Name:        "aws_elbv2_load_balancers",
		Description: "Information about a load balancer.",
		Resolver:    fetchElbv2LoadBalancers,
		Multiplex:   client.ServiceAccountRegionMultiplexer("elasticloadbalancing"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Description: "The AWS Account ID of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
			},
			{
				Name:        "region",
				Description: "The AWS Region of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
			},
			{
				Name:          "web_acl_arn",
				Description:   "arn of associated web acl",
				Type:          schema.TypeString,
				Resolver:      resolveElbv2loadBalancerWebACLArn,
				IgnoreInTests: true,
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveElbv2loadBalancerTags,
			},
			{
				Name:        "canonical_hosted_zone_id",
				Description: "The ID of the Amazon Route 53 hosted zone associated with the load balancer.",
				Type:        schema.TypeString,
			},
			{
				Name:        "created_time",
				Description: "The date and time the load balancer was created.",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:          "customer_owned_ipv4_pool",
				Description:   "[Application Load Balancers on Outposts] The ID of the customer-owned address pool.",
				Type:          schema.TypeString,
				IgnoreInTests: true,
			},
			{
				Name:        "dns_name",
				Description: "The public DNS name of the load balancer.",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("DNSName"),
			},
			{
				Name:        "ip_address_type",
				Description: "The type of IP addresses used by the subnets for your load balancer",
				Type:        schema.TypeString,
			},
			{
				Name:            "arn",
				Description:     "The Amazon Resource Name (ARN) of the load balancer.",
				Type:            schema.TypeString,
				Resolver:        schema.PathResolver("LoadBalancerArn"),
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:        "name",
				Description: "The name of the load balancer.",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("LoadBalancerName"),
			},
			{
				Name:        "scheme",
				Description: "The nodes of an Internet-facing load balancer have public IP addresses",
				Type:        schema.TypeString,
			},
			{
				Name:          "security_groups",
				Description:   "The IDs of the security groups for the load balancer.",
				Type:          schema.TypeStringArray,
				IgnoreInTests: true,
			},
			{
				Name:     "state",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:        "type",
				Description: "The type of load balancer.",
				Type:        schema.TypeString,
			},
			{
				Name:        "vpc_id",
				Description: "The ID of the VPC for the load balancer.",
				Type:        schema.TypeString,
			},
			{
				Name:        "availability_zones",
				Description: "Information about an Availability Zone.",
				Type:        schema.TypeJSON,
				Resolver:    schema.PathResolver("AvailabilityZones"),
			},
		},
		Relations: []*schema.Table{
			Elbv2Listeners(),
			{
				Name:        "aws_elbv2_load_balancer_attributes",
				Description: "Load balancer attributes",
				Resolver:    fetchElbv2LoadBalancerAttributes,
				Columns: []schema.Column{
					{
						Name:        "load_balancer_cq_id",
						Description: "Unique CloudQuery ID of aws_elbv2_load_balancers table (FK)",
						Type:        schema.TypeUUID,
						Resolver:    schema.ParentIdResolver,
					},
					{
						Name:        "access_logs_s3_enabled",
						Description: "Indicates whether access logs stored in Amazon S3 are enabled.",
						Type:        schema.TypeBool,
					},
					{
						Name:        "access_logs_s3_bucket",
						Description: "The name of the Amazon S3 bucket for the access logs.",
						Type:        schema.TypeString,
					},
					{
						Name:        "access_logs_s3_prefix",
						Description: "The prefix for the location in the Amazon S3 bucket.",
						Type:        schema.TypeString,
					},
					{
						Name:        "deletion_protection",
						Description: "Indicates whether deletion protection is enabled.",
						Type:        schema.TypeBool,
					},
					{
						Name:        "idle_timeout",
						Description: "The idle timeout value, in seconds.",
						Type:        schema.TypeInt,
					},
					{
						Name:        "routing_http_desync_mitigation_mode",
						Description: "Determines how the load balancer handles requests that might pose a security risk to your application.",
						Type:        schema.TypeString,
						Resolver:    schema.PathResolver("RoutingHTTPDesyncMitigationMode"),
					},
					{
						Name:        "routing_http_drop_invalid_header_fields",
						Description: "Indicates whether HTTP headers with header fields that are not valid are removed by the load balancer.",
						Type:        schema.TypeBool,
						Resolver:    schema.PathResolver("RoutingHTTPDropInvalidHeaderFields"),
					},
					{
						Name:        "routing_http_xamzntls_enabled",
						Description: "Indicates whether the two headers (x-amzn-tls-{version,cipher-suite}) are added to the client request before sending it to the target.",
						Type:        schema.TypeBool,
						Resolver:    schema.PathResolver("RoutingHTTPXAmznTLSVersionCipherSuite"),
					},
					{
						Name:        "routing_http_xff_client_port",
						Description: "Indicates whether the X-Forwarded-For header should preserve the source port that the client used to connect to the load balancer.",
						Type:        schema.TypeBool,
						Resolver:    schema.PathResolver("RoutingHTTPXFFClientPort"),
					},
					{
						Name:        "routing_http2",
						Description: "Indicates whether HTTP/2 is enabled.",
						Type:        schema.TypeBool,
						Resolver:    schema.PathResolver("RoutingHTTP2"),
					},
					{
						Name:        "waf_fail_open",
						Description: "Indicates whether to allow a AWS WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF.",
						Type:        schema.TypeBool,
						Resolver:    schema.PathResolver("WAFFailOpen"),
					},
					{
						Name:        "load_balancing_cross_zone",
						Description: "Indicates whether cross-zone load balancing is enabled.",
						Type:        schema.TypeBool,
					},
				},
			},
		},
	}
}

