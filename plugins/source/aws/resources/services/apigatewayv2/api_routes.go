// Code generated by codegen; DO NOT EDIT.

package apigatewayv2

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ApiRoutes() *schema.Table {
	return &schema.Table{
		Name:        "aws_apigatewayv2_api_routes",
		Description: "https://docs.aws.amazon.com/apigateway/latest/api/API_Route.html",
		Resolver:    fetchApigatewayv2ApiRoutes,
		Multiplex:   client.ServiceAccountRegionMultiplexer("apigateway"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "api_arn",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("arn"),
			},
			{
				Name:     "api_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolveApiRouteArn(),
			},
			{
				Name:     "route_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RouteKey"),
			},
			{
				Name:     "api_gateway_managed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ApiGatewayManaged"),
			},
			{
				Name:     "api_key_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ApiKeyRequired"),
			},
			{
				Name:     "authorization_scopes",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AuthorizationScopes"),
			},
			{
				Name:     "authorization_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AuthorizationType"),
			},
			{
				Name:     "authorizer_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AuthorizerId"),
			},
			{
				Name:     "model_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ModelSelectionExpression"),
			},
			{
				Name:     "operation_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OperationName"),
			},
			{
				Name:     "request_models",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestModels"),
			},
			{
				Name:     "request_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestParameters"),
			},
			{
				Name:     "route_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RouteId"),
			},
			{
				Name:     "route_response_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RouteResponseSelectionExpression"),
			},
			{
				Name:     "target",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Target"),
			},
		},

		Relations: []*schema.Table{
			ApiRouteResponses(),
		},
	}
}
