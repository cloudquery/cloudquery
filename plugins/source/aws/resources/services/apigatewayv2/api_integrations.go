// Code generated by codegen; DO NOT EDIT.

package apigatewayv2

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ApiIntegrations() *schema.Table {
	return &schema.Table{
		Name:        "aws_apigatewayv2_api_integrations",
		Description: "https://docs.aws.amazon.com/apigateway/latest/api/API_Integration.html",
		Resolver:    fetchApigatewayv2ApiIntegrations,
		Multiplex:   client.ServiceAccountRegionMultiplexer("apigateway"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "api_arn",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("arn"),
			},
			{
				Name:     "api_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolveApiIntegrationArn(),
			},
			{
				Name:     "api_gateway_managed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ApiGatewayManaged"),
			},
			{
				Name:     "connection_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConnectionId"),
			},
			{
				Name:     "connection_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ConnectionType"),
			},
			{
				Name:     "content_handling_strategy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ContentHandlingStrategy"),
			},
			{
				Name:     "credentials_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CredentialsArn"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "integration_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationId"),
			},
			{
				Name:     "integration_method",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationMethod"),
			},
			{
				Name:     "integration_response_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationResponseSelectionExpression"),
			},
			{
				Name:     "integration_subtype",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationSubtype"),
			},
			{
				Name:     "integration_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationType"),
			},
			{
				Name:     "integration_uri",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IntegrationUri"),
			},
			{
				Name:     "passthrough_behavior",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PassthroughBehavior"),
			},
			{
				Name:     "payload_format_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PayloadFormatVersion"),
			},
			{
				Name:     "request_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestParameters"),
			},
			{
				Name:     "request_templates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestTemplates"),
			},
			{
				Name:     "response_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResponseParameters"),
			},
			{
				Name:     "template_selection_expression",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TemplateSelectionExpression"),
			},
			{
				Name:     "timeout_in_millis",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TimeoutInMillis"),
			},
			{
				Name:     "tls_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TlsConfig"),
			},
		},

		Relations: []*schema.Table{
			ApiIntegrationResponses(),
		},
	}
}
