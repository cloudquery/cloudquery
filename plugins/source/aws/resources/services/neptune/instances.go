// Code generated by codegen; DO NOT EDIT.

package neptune

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Instances() *schema.Table {
	return &schema.Table{
		Name:        "aws_neptune_instances",
		Description: "https://docs.aws.amazon.com/neptune/latest/userguide/api-instances.html#DescribeDBInstances",
		Resolver:    fetchNeptuneInstances,
		Multiplex:   client.ServiceAccountRegionMultiplexer("neptune"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBInstanceArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveNeptuneInstanceTags,
			},
			{
				Name:     "allocated_storage",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AllocatedStorage"),
			},
			{
				Name:     "auto_minor_version_upgrade",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoMinorVersionUpgrade"),
			},
			{
				Name:     "availability_zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvailabilityZone"),
			},
			{
				Name:     "backup_retention_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("BackupRetentionPeriod"),
			},
			{
				Name:     "ca_certificate_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CACertificateIdentifier"),
			},
			{
				Name:     "character_set_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CharacterSetName"),
			},
			{
				Name:     "copy_tags_to_snapshot",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CopyTagsToSnapshot"),
			},
			{
				Name:     "db_cluster_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBClusterIdentifier"),
			},
			{
				Name:     "db_instance_class",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBInstanceClass"),
			},
			{
				Name:     "db_instance_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBInstanceIdentifier"),
			},
			{
				Name:     "db_instance_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBInstanceStatus"),
			},
			{
				Name:     "db_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DBName"),
			},
			{
				Name:     "db_parameter_groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DBParameterGroups"),
			},
			{
				Name:     "db_security_groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DBSecurityGroups"),
			},
			{
				Name:     "db_subnet_group",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DBSubnetGroup"),
			},
			{
				Name:     "db_instance_port",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DbInstancePort"),
			},
			{
				Name:     "dbi_resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DbiResourceId"),
			},
			{
				Name:     "deletion_protection",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DeletionProtection"),
			},
			{
				Name:     "domain_memberships",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DomainMemberships"),
			},
			{
				Name:     "enabled_cloudwatch_logs_exports",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("EnabledCloudwatchLogsExports"),
			},
			{
				Name:     "endpoint",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Endpoint"),
			},
			{
				Name:     "engine",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Engine"),
			},
			{
				Name:     "engine_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EngineVersion"),
			},
			{
				Name:     "enhanced_monitoring_resource_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EnhancedMonitoringResourceArn"),
			},
			{
				Name:     "iam_database_authentication_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IAMDatabaseAuthenticationEnabled"),
			},
			{
				Name:     "instance_create_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("InstanceCreateTime"),
			},
			{
				Name:     "iops",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Iops"),
			},
			{
				Name:     "kms_key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("KmsKeyId"),
			},
			{
				Name:     "latest_restorable_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LatestRestorableTime"),
			},
			{
				Name:     "license_model",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LicenseModel"),
			},
			{
				Name:     "master_username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MasterUsername"),
			},
			{
				Name:     "monitoring_interval",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MonitoringInterval"),
			},
			{
				Name:     "monitoring_role_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MonitoringRoleArn"),
			},
			{
				Name:     "multi_az",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MultiAZ"),
			},
			{
				Name:     "option_group_memberships",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OptionGroupMemberships"),
			},
			{
				Name:     "pending_modified_values",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PendingModifiedValues"),
			},
			{
				Name:     "performance_insights_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PerformanceInsightsEnabled"),
			},
			{
				Name:     "performance_insights_kms_key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PerformanceInsightsKMSKeyId"),
			},
			{
				Name:     "preferred_backup_window",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PreferredBackupWindow"),
			},
			{
				Name:     "preferred_maintenance_window",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PreferredMaintenanceWindow"),
			},
			{
				Name:     "promotion_tier",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PromotionTier"),
			},
			{
				Name:     "publicly_accessible",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PubliclyAccessible"),
			},
			{
				Name:     "read_replica_db_cluster_identifiers",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("ReadReplicaDBClusterIdentifiers"),
			},
			{
				Name:     "read_replica_db_instance_identifiers",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("ReadReplicaDBInstanceIdentifiers"),
			},
			{
				Name:     "read_replica_source_db_instance_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ReadReplicaSourceDBInstanceIdentifier"),
			},
			{
				Name:     "secondary_availability_zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SecondaryAvailabilityZone"),
			},
			{
				Name:     "status_infos",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("StatusInfos"),
			},
			{
				Name:     "storage_encrypted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("StorageEncrypted"),
			},
			{
				Name:     "storage_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StorageType"),
			},
			{
				Name:     "tde_credential_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TdeCredentialArn"),
			},
			{
				Name:     "timezone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Timezone"),
			},
			{
				Name:     "vpc_security_groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("VpcSecurityGroups"),
			},
		},
	}
}
