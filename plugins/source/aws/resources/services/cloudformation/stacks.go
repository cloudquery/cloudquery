// Code generated by codegen; DO NOT EDIT.

package cloudformation

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Stacks() *schema.Table {
	return &schema.Table{
		Name:        "aws_cloudformation_stacks",
		Description: "https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Stack.html",
		Resolver:    fetchCloudformationStacks,
		Multiplex:   client.ServiceAccountRegionMultiplexer("cloudformation"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StackId"),
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StackId"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: client.ResolveTags,
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "stack_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StackName"),
			},
			{
				Name:     "stack_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StackStatus"),
			},
			{
				Name:     "capabilities",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Capabilities"),
			},
			{
				Name:     "change_set_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ChangeSetId"),
			},
			{
				Name:     "deletion_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("DeletionTime"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "disable_rollback",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DisableRollback"),
			},
			{
				Name:     "drift_information",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DriftInformation"),
			},
			{
				Name:     "enable_termination_protection",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnableTerminationProtection"),
			},
			{
				Name:     "last_updated_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastUpdatedTime"),
			},
			{
				Name:     "notification_ar_ns",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("NotificationARNs"),
			},
			{
				Name:     "outputs",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Outputs"),
			},
			{
				Name:     "parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Parameters"),
			},
			{
				Name:     "parent_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ParentId"),
			},
			{
				Name:     "role_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RoleARN"),
			},
			{
				Name:     "rollback_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RollbackConfiguration"),
			},
			{
				Name:     "root_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RootId"),
			},
			{
				Name:     "stack_status_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StackStatusReason"),
			},
			{
				Name:     "timeout_in_minutes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TimeoutInMinutes"),
			},
		},

		Relations: []*schema.Table{
			StackResources(),
		},
	}
}
