// Code generated by codegen; DO NOT EDIT.

package iam

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Accounts() *schema.Table {
	return &schema.Table{
		Name:      "aws_iam_accounts",
		Resolver:  fetchIamAccounts,
		Multiplex: client.AccountMultiplex,
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "users",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Users"),
			},
			{
				Name:     "users_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UsersQuota"),
			},
			{
				Name:     "groups",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Groups"),
			},
			{
				Name:     "groups_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupsQuota"),
			},
			{
				Name:     "server_certificates",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ServerCertificates"),
			},
			{
				Name:     "server_certificates_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ServerCertificatesQuota"),
			},
			{
				Name:     "user_policy_size_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UserPolicySizeQuota"),
			},
			{
				Name:     "group_policy_size_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupPolicySizeQuota"),
			},
			{
				Name:     "groups_per_user_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupsPerUserQuota"),
			},
			{
				Name:     "signing_certificates_per_user_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SigningCertificatesPerUserQuota"),
			},
			{
				Name:     "access_keys_per_user_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AccessKeysPerUserQuota"),
			},
			{
				Name:     "mfa_devices",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MFADevices"),
			},
			{
				Name:     "mfa_devices_in_use",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MFADevicesInUse"),
			},
			{
				Name:     "account_mfa_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AccountMFAEnabled"),
			},
			{
				Name:     "account_access_keys_present",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AccountAccessKeysPresent"),
			},
			{
				Name:     "account_signing_certificates_present",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AccountSigningCertificatesPresent"),
			},
			{
				Name:     "attached_policies_per_group_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AttachedPoliciesPerGroupQuota"),
			},
			{
				Name:     "attached_policies_per_role_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AttachedPoliciesPerRoleQuota"),
			},
			{
				Name:     "attached_policies_per_user_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AttachedPoliciesPerUserQuota"),
			},
			{
				Name:     "policies",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Policies"),
			},
			{
				Name:     "policies_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PoliciesQuota"),
			},
			{
				Name:     "policy_size_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PolicySizeQuota"),
			},
			{
				Name:     "policy_versions_in_use",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PolicyVersionsInUse"),
			},
			{
				Name:     "policy_versions_in_use_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PolicyVersionsInUseQuota"),
			},
			{
				Name:     "versions_per_policy_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("VersionsPerPolicyQuota"),
			},
			{
				Name:     "global_endpoint_token_version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GlobalEndpointTokenVersion"),
			},
			{
				Name:     "aliases",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Aliases"),
			},
		},
	}
}
