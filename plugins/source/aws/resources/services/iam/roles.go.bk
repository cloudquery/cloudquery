package iam

import (
	"context"
	"encoding/json"
	"net/url"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/aws/aws-sdk-go-v2/service/iam/types"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Roles() *schema.Table {
	return &schema.Table{
		Name:        "aws_iam_roles",
		Description: "An IAM role is an IAM identity that you can create in your account that has specific permissions.",
		Resolver:    fetchIamRoles,
		Multiplex:   client.AccountMultiplex,
		Columns: []schema.Column{
			{
				Name:            "account_id",
				Description:     "The AWS Account ID of the resource.",
				Type:            schema.TypeString,
				Resolver:        client.ResolveAWSAccount,
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:        "policies",
				Description: "List of policies attached to group.",
				Type:        schema.TypeJSON,
				Resolver:    resolveIamRolePolicies,
			},
			{
				Name:        "arn",
				Description: "The Amazon Resource Name (ARN) specifying the role",
				Type:        schema.TypeString,
			},
			{
				Name:        "create_date",
				Description: "The date and time, in ISO 8601 date-time format (http://www.iso.org/iso/iso8601), when the role was created.",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "path",
				Description: "The path to the role",
				Type:        schema.TypeString,
			},
			{
				Name:            "id",
				Description:     "The stable and unique string identifying the role",
				Type:            schema.TypeString,
				Resolver:        schema.PathResolver("RoleId"),
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:        "role_name",
				Description: "The friendly name that identifies the role.",
				Type:        schema.TypeString,
			},
			{
				Name:        "assume_role_policy_document",
				Description: "The policy that grants an entity permission to assume the role.",
				Type:        schema.TypeJSON,
				Resolver:    resolveRolesAssumeRolePolicyDocument,
			},
			{
				Name:        "description",
				Description: "A description of the role that you provide.",
				Type:        schema.TypeString,
			},
			{
				Name:        "max_session_duration",
				Description: "The maximum session duration (in seconds) for the specified role",
				Type:        schema.TypeInt,
			},
			{
				Name:     "permissions_boundary",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PermissionsBoundary"),
			},
			{
				Name:     "role_last_used",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RoleLastUsed"),
			},
			{
				Name:        "tags",
				Description: "A list of tags that are attached to the role",
				Type:        schema.TypeJSON,
				Resolver:    client.ResolveTags,
			},
		},
		Relations: []*schema.Table{
			{
				Name:        "aws_iam_role_policies",
				Description: "Inline policies that are embedded in the specified IAM role",
				Resolver:    fetchIamRolePolicies,
				Columns: []schema.Column{
					{
						Name:        "role_cq_id",
						Description: "Unique CloudQuery ID of aws_iam_roles table (FK)",
						Type:        schema.TypeUUID,
						Resolver:    schema.ParentIdResolver,
					},
					{
						Name:        "policy_document",
						Description: "The policy document",
						Type:        schema.TypeJSON,
						Resolver:    resolveRolePoliciesPolicyDocument,
					},
					{
						Name:        "policy_name",
						Description: "The name of the policy.",
						Type:        schema.TypeString,
					},
					{
						Name:        "role_name",
						Description: "The role the policy is associated with.",
						Type:        schema.TypeString,
					},
				},
			},
		},
	}
}

