package iam

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func IamUsers() *schema.Table {
	return &schema.Table{
		Name:      "aws_iam_users",
		Resolver:  fetchIamUsers,
		Multiplex: client.AccountMultiplex,

		PostResourceResolver: postIamUserResolver,
		Columns: []schema.Column{
			{
				Name:            "account_id",
				Description:     "The AWS Account ID of the resource",
				Type:            schema.TypeString,
				Resolver:        client.ResolveAWSAccount,
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:            "id",
				Description:     "The stable and unique string identifying the user",
				Type:            schema.TypeString,
				Resolver:        schema.PathResolver("UserId"),
				CreationOptions: schema.ColumnCreationOptions{PrimaryKey: true},
			},
			{
				Name:          "password_last_used",
				Description:   "The date and time when the AWS account root user or IAM user's password was last used to sign in to an AWS website",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:        "arn",
				Description: "The Amazon Resource Name (ARN) that identifies the user",
				Type:        schema.TypeString,
			},
			{
				Name:        "password_enabled",
				Description: "When the user has a password, this value is TRUE. Otherwise it is FALSE",
				Type:        schema.TypeBool,
			},
			{
				Name:        "password_status",
				Description: "When the user has a password, this value is TRUE. Otherwise it is FALSE.The value for the AWS account root user is always not_supported",
				Type:        schema.TypeString,
			},
			{
				Name:          "password_last_changed",
				Description:   "The date and time when the user's password was last set, in ISO 8601 date-time format. If the user does not have a password, the value in this field is N/A (not applicable). The value for the AWS account (root) is always NULL",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:          "password_next_rotation",
				Description:   "When the account has a password policy that requires password rotation, this field contains the date and time, in ISO 8601 date-time format, when the user is required to set a new password. The value for the AWS account (root) is always NULL",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:        "mfa_active",
				Description: "When a multi-factor authentication (MFA) device has been enabled for the user, this value is TRUE. Otherwise it is FALSE",
				Type:        schema.TypeBool,
			},
			{
				Name:        "create_date",
				Description: "The date and time, in ISO 8601 date-time format (https://www.iso.org/iso/iso8601), when the user was created",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "path",
				Description: "The path to the user",
				Type:        schema.TypeString,
			},
			{
				Name:          "permissions_boundary",
				Type:          schema.TypeJSON,
				Resolver:      schema.PathResolver("PermissionsBoundary"),
				IgnoreInTests: true,
			},
			{
				Name:        "tags",
				Description: "A list of tags that are associated with the user",
				Type:        schema.TypeJSON,
				Resolver:    client.ResolveTags,
			},
			{
				Name:        "user_id",
				Description: "The stable and unique string identifying the user",
				Type:        schema.TypeString,
			},
			{
				Name:        "user_name",
				Description: "The friendly name of the user",
				Type:        schema.TypeString,
			},
			{
				Name:        "access_key_1_active",
				Description: "When the user has an access key and the access key's status is Active, this value is TRUE. Otherwise it is FALSE",
				Type:        schema.TypeBool,
			},
			{
				Name:        "access_key_1_last_rotated",
				Description: "The date and time, in ISO 8601 date-time format, when the user's access key was created or last changed",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "access_key_2_active",
				Description: "When the user has an access key and the access key's status is Active, this value is TRUE. Otherwise it is FALSE",
				Type:        schema.TypeBool,
			},
			{
				Name:          "access_key_2_last_rotated",
				Description:   "The date and time, in ISO 8601 date-time format, when the user's access key was created or last changed",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},

			{
				Name:        "cert_1_active",
				Description: "When the user has an X.509 signing certificate and that certificate's status is Active, this value is TRUE. Otherwise it is FALSE",
				Type:        schema.TypeBool,
			},
			{
				Name:          "cert_1_last_rotated",
				Description:   "The date and time, in ISO 8601 date-time format, when the user's signing certificate was created or last changed",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:        "cert_2_active",
				Description: "When the user has an X.509 signing certificate and that certificate's status is Active, this value is TRUE. Otherwise it is FALSE",
				Type:        schema.TypeBool,
			},
			{
				Name:          "cert_2_last_rotated",
				Description:   "The date and time, in ISO 8601 date-time format, when the user's signing certificate was created or last changed",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
		},
		Relations: []*schema.Table{
			{
				Name:                 "aws_iam_user_access_keys",
				Resolver:             fetchIamUserAccessKeys,
				PostResourceResolver: postIamUserAccessKeyResolver,
				Columns: []schema.Column{
					{
						Name:        "user_cq_id",
						Description: "Unique CloudQuery ID of aws_iam_users table (FK)",
						Type:        schema.TypeUUID,
						Resolver:    schema.ParentIdResolver,
					},
					{
						Name:        "user_id",
						Description: "The stable and unique string identifying the user",
						Type:        schema.TypeString,
						Resolver:    schema.ParentResourceFieldResolver("user_id"),
					},
					{
						Name:        "access_key_id",
						Description: "The ID for this access key",
						Type:        schema.TypeString,
					},
					{
						Name:        "create_date",
						Description: "The date when the access key was created",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "status",
						Description: "The status of the access key. Active means that the key is valid for API calls; Inactive means it is not",
						Type:        schema.TypeString,
					},
					{
						Name:        "last_used",
						Description: "The date and time, in ISO 8601 date-time format, when the user's second access key was most recently used to sign an AWS API request",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "last_rotated",
						Description: "The date and time, in ISO 8601 date-time format, when the user's access key was created or last changed",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "last_used_service_name",
						Description: "The AWS service that was most recently accessed with the user's second access key",
						Type:        schema.TypeString,
					},
				},
			},
			{
				Name:          "aws_iam_user_groups",
				Resolver:      fetchIamUserGroups,
				IgnoreInTests: true,
				Columns: []schema.Column{
					{
						Name:        "user_cq_id",
						Description: "Unique CloudQuery ID of aws_iam_users table (FK)",
						Type:        schema.TypeUUID,
						Resolver:    schema.ParentIdResolver,
					},
					{
						Name:        "user_id",
						Description: "The stable and unique string identifying the user",
						Type:        schema.TypeString,
						Resolver:    schema.ParentResourceFieldResolver("user_id"),
					},
					{
						Name:        "group_arn",
						Description: "The Amazon Resource Name (ARN) specifying the group",
						Type:        schema.TypeString,
						Resolver:    schema.PathResolver("Arn"),
					},
					{
						Name:        "create_date",
						Description: "The date and time, in ISO 8601 date-time format, when the group was created",
						Type:        schema.TypeTimestamp,
					},
					{
						Name:        "group_id",
						Description: "The stable and unique string identifying the group",
						Type:        schema.TypeString,
					},
					{
						Name:        "group_name",
						Description: "The friendly name that identifies the group",
						Type:        schema.TypeString,
					},
					{
						Name:        "path",
						Description: "The path to the group",
						Type:        schema.TypeString,
					},
				},
			},
			{
				Name:     "aws_iam_user_attached_policies",
				Resolver: fetchIamUserAttachedPolicies,
				Columns: []schema.Column{
					{
						Name:        "user_cq_id",
						Description: "Unique CloudQuery ID of aws_iam_users table (FK)",
						Type:        schema.TypeUUID,
						Resolver:    schema.ParentIdResolver,
					},
					{
						Name:        "user_id",
						Description: "The stable and unique string identifying the user",
						Type:        schema.TypeString,
						Resolver:    schema.ParentResourceFieldResolver("user_id"),
					},
					{
						Name:        "policy_arn",
						Description: "The Amazon Resource Name (ARN) of the policy",
						Type:        schema.TypeString,
					},
					{
						Name:        "policy_name",
						Description: "The friendly name of the attached policy",
						Type:        schema.TypeString,
					},
				},
			},
			IamUserPolicies(),
		},
	}
}
