// Code generated by codegen; DO NOT EDIT.

package eks

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Clusters() *schema.Table {
	return &schema.Table{
		Name:                "aws_eks_clusters",
		Description:         "https://docs.aws.amazon.com/eks/latest/APIReference/API_Cluster.html",
		Resolver:            fetchEksClusters,
		PreResourceResolver: getEksCluster,
		Multiplex:           client.ServiceAccountRegionMultiplexer("eks"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Arn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "certificate_authority",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CertificateAuthority"),
			},
			{
				Name:     "client_request_token",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClientRequestToken"),
			},
			{
				Name:     "connector_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ConnectorConfig"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "encryption_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EncryptionConfig"),
			},
			{
				Name:     "endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Endpoint"),
			},
			{
				Name:     "health",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Health"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "kubernetes_network_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("KubernetesNetworkConfig"),
			},
			{
				Name:     "logging",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Logging"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "outpost_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OutpostConfig"),
			},
			{
				Name:     "platform_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PlatformVersion"),
			},
			{
				Name:     "resources_vpc_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResourcesVpcConfig"),
			},
			{
				Name:     "role_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RoleArn"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Version"),
			},
		},
	}
}
