// Code generated by codegen; DO NOT EDIT.

package elastictranscoder

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Pipelines() *schema.Table {
	return &schema.Table{
		Name:        "aws_elastictranscoder_pipelines",
		Description: `https://docs.aws.amazon.com/elastictranscoder/latest/developerguide/list-pipelines.html`,
		Resolver:    fetchElastictranscoderPipelines,
		Multiplex:   client.ServiceAccountRegionMultiplexer("elastictranscoder"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Arn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "aws_kms_key_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AwsKmsKeyArn"),
			},
			{
				Name:     "content_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ContentConfig"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "input_bucket",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InputBucket"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "notifications",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Notifications"),
			},
			{
				Name:     "output_bucket",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OutputBucket"),
			},
			{
				Name:     "role",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Role"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "thumbnail_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ThumbnailConfig"),
			},
		},

		Relations: []*schema.Table{
			PipelineJobs(),
		},
	}
}
