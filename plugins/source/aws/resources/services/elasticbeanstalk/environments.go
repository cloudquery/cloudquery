// Code generated by codegen; DO NOT EDIT.

package elasticbeanstalk

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Environments() *schema.Table {
	return &schema.Table{
		Name:      "aws_elasticbeanstalk_environments",
		Resolver:  fetchElasticbeanstalkEnvironments,
		Multiplex: client.ServiceAccountRegionMultiplexer("elasticbeanstalk"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EnvironmentArn"),
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: resolveElasticbeanstalkEnvironmentTags,
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EnvironmentId"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "listeners",
				Type:     schema.TypeJSON,
				Resolver: resolveElasticbeanstalkEnvironmentListeners,
			},
			{
				Name:     "abortable_operation_in_progress",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AbortableOperationInProgress"),
			},
			{
				Name:     "application_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ApplicationName"),
			},
			{
				Name:     "cname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CNAME"),
			},
			{
				Name:     "date_created",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("DateCreated"),
			},
			{
				Name:     "date_updated",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("DateUpdated"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "endpoint_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EndpointURL"),
			},
			{
				Name:     "environment_links",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EnvironmentLinks"),
			},
			{
				Name:     "environment_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EnvironmentName"),
			},
			{
				Name:     "health",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Health"),
			},
			{
				Name:     "health_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HealthStatus"),
			},
			{
				Name:     "operations_role",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OperationsRole"),
			},
			{
				Name:     "platform_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PlatformArn"),
			},
			{
				Name:     "resources",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Resources"),
			},
			{
				Name:     "solution_stack_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SolutionStackName"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "template_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TemplateName"),
			},
			{
				Name:     "tier",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tier"),
			},
			{
				Name:     "version_label",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VersionLabel"),
			},
		},

		Relations: []*schema.Table{
			ConfigurationSettings(),
			ConfigurationOptions(),
		},
	}
}
