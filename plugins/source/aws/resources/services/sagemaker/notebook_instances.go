// Code generated by codegen; DO NOT EDIT.

package sagemaker

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func NotebookInstances() *schema.Table {
	return &schema.Table{
		Name:                "aws_sagemaker_notebook_instances",
		Resolver:            fetchSagemakerNotebookInstances,
		PreResourceResolver: getNotebookInstance,
		Multiplex:           client.ServiceAccountRegionMultiplexer("api.sagemaker"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NotebookInstanceArn"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:        "tags",
				Type:        schema.TypeJSON,
				Resolver:    resolveSagemakerNotebookInstanceTags,
				Description: `The tags associated with the notebook instance.`,
			},
			{
				Name:     "accelerator_types",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AcceleratorTypes"),
			},
			{
				Name:     "additional_code_repositories",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AdditionalCodeRepositories"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "default_code_repository",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultCodeRepository"),
			},
			{
				Name:     "direct_internet_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DirectInternetAccess"),
			},
			{
				Name:     "failure_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FailureReason"),
			},
			{
				Name:     "instance_metadata_service_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("InstanceMetadataServiceConfiguration"),
			},
			{
				Name:     "instance_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InstanceType"),
			},
			{
				Name:     "kms_key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("KmsKeyId"),
			},
			{
				Name:     "last_modified_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastModifiedTime"),
			},
			{
				Name:     "network_interface_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NetworkInterfaceId"),
			},
			{
				Name:     "notebook_instance_lifecycle_config_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NotebookInstanceLifecycleConfigName"),
			},
			{
				Name:     "notebook_instance_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NotebookInstanceName"),
			},
			{
				Name:     "notebook_instance_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NotebookInstanceStatus"),
			},
			{
				Name:     "platform_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PlatformIdentifier"),
			},
			{
				Name:     "role_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RoleArn"),
			},
			{
				Name:     "root_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RootAccess"),
			},
			{
				Name:     "security_groups",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("SecurityGroups"),
			},
			{
				Name:     "subnet_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SubnetId"),
			},
			{
				Name:     "url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Url"),
			},
			{
				Name:     "volume_size_in_gb",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("VolumeSizeInGB"),
			},
			{
				Name:     "result_metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResultMetadata"),
			},
		},
	}
}
