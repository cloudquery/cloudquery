// Code generated by codegen; DO NOT EDIT.

package lightsail

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Databases() *schema.Table {
	return &schema.Table{
		Name:        "aws_lightsail_databases",
		Description: "https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_RelationalDatabase.html",
		Resolver:    fetchLightsailDatabases,
		Multiplex:   client.ServiceAccountRegionMultiplexer("lightsail"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Arn"),
			},
			{
				Name:     "backup_retention_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("BackupRetentionEnabled"),
			},
			{
				Name:     "ca_certificate_identifier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CaCertificateIdentifier"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "engine",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Engine"),
			},
			{
				Name:     "engine_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EngineVersion"),
			},
			{
				Name:     "hardware",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Hardware"),
			},
			{
				Name:     "latest_restorable_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LatestRestorableTime"),
			},
			{
				Name:     "location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "master_database_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MasterDatabaseName"),
			},
			{
				Name:     "master_endpoint",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MasterEndpoint"),
			},
			{
				Name:     "master_username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MasterUsername"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "parameter_apply_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ParameterApplyStatus"),
			},
			{
				Name:     "pending_maintenance_actions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PendingMaintenanceActions"),
			},
			{
				Name:     "pending_modified_values",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PendingModifiedValues"),
			},
			{
				Name:     "preferred_backup_window",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PreferredBackupWindow"),
			},
			{
				Name:     "preferred_maintenance_window",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PreferredMaintenanceWindow"),
			},
			{
				Name:     "publicly_accessible",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PubliclyAccessible"),
			},
			{
				Name:     "relational_database_blueprint_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RelationalDatabaseBlueprintId"),
			},
			{
				Name:     "relational_database_bundle_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RelationalDatabaseBundleId"),
			},
			{
				Name:     "resource_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceType"),
			},
			{
				Name:     "secondary_availability_zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SecondaryAvailabilityZone"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "support_code",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SupportCode"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: client.ResolveTags,
			},
		},

		Relations: []*schema.Table{
			DatabaseParameters(),
			DatabaseEvents(),
			DatabaseLogEvents(),
		},
	}
}
