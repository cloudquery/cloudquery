package lightsail

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Certificates() *schema.Table {
	return &schema.Table{
		Name:        "aws_lightsail_certificates",
		Description: "Describes the full details of an Amazon Lightsail SSL/TLS certificate",
		Resolver:    fetchLightsailCertificates,
		Multiplex:   client.ServiceAccountRegionMultiplexer("lightsail"),
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Description: "The AWS Account ID of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSAccount,
			},
			{
				Name:        "region",
				Description: "The AWS Region of the resource.",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAWSRegion,
			},
			{
				Name:        "arn",
				Description: "The Amazon Resource Name (ARN) of the certificate",
				Type:        schema.TypeString,
			},
			{
				Name:        "created_at",
				Description: "The timestamp when the certificate was created",
				Type:        schema.TypeTimestamp,
			},
			{
				Name:        "domain_name",
				Description: "The domain name of the certificate",
				Type:        schema.TypeString,
			},
			{
				Name:        "eligible_to_renew",
				Description: "The renewal eligibility of the certificate",
				Type:        schema.TypeString,
			},
			{
				Name:        "in_use_resource_count",
				Description: "The number of Lightsail resources that the certificate is attached to",
				Type:        schema.TypeInt,
			},
			{
				Name:          "issued_at",
				Description:   "The timestamp when the certificate was issued",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:        "issuer_ca",
				Description: "The certificate authority that issued the certificate",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("IssuerCA"),
			},
			{
				Name:        "key_algorithm",
				Description: "The algorithm used to generate the key pair (the public and private key) of the certificate",
				Type:        schema.TypeString,
			},
			{
				Name:        "name",
				Description: "The name of the certificate (eg, my-certificate)",
				Type:        schema.TypeString,
			},
			{
				Name:          "not_after",
				Description:   "The timestamp when the certificate expires",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:          "not_before",
				Description:   "The timestamp when the certificate is first valid",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:     "renewal_summary",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RenewalSummary"),
			},
			{
				Name:        "request_failure_reason",
				Description: "The validation failure reason, if any, of the certificate",
				Type:        schema.TypeString,
			},
			{
				Name:          "revocation_reason",
				Description:   "The reason the certificate was revoked",
				Type:          schema.TypeString,
				IgnoreInTests: true,
			},
			{
				Name:          "revoked_at",
				Description:   "The timestamp when the certificate was revoked",
				Type:          schema.TypeTimestamp,
				IgnoreInTests: true,
			},
			{
				Name:          "serial_number",
				Description:   "The serial number of the certificate",
				Type:          schema.TypeString,
				IgnoreInTests: true,
			},
			{
				Name:        "status",
				Description: "The validation status of the certificate",
				Type:        schema.TypeString,
			},
			{
				Name:        "subject_alternative_names",
				Description: "An array of strings that specify the alternate domains (eg, example2com) and subdomains (eg, blogexamplecom) of the certificate",
				Type:        schema.TypeStringArray,
			},
			{
				Name:        "support_code",
				Description: "The support code",
				Type:        schema.TypeString,
			},
			{
				Name:        "tags",
				Description: "The tag keys and optional values for the resource",
				Type:        schema.TypeJSON,
				Resolver:    client.ResolveTags,
			},
			{
				Name: "domain_validation_records",
				Type: schema.TypeJSON,
			},
		},
	}
}

