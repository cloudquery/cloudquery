// Code generated by codegen; DO NOT EDIT.

package ec2

import (
	"github.com/cloudquery/cloudquery/plugins/source/aws/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func NetworkInterfaces() *schema.Table {
	return &schema.Table{
		Name:        "aws_ec2_network_interfaces",
		Description: "https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_NetworkInterface.html",
		Resolver:    fetchEc2NetworkInterfaces,
		Multiplex:   client.ServiceAccountRegionMultiplexer("ec2"),
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSAccount,
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: client.ResolveAWSRegion,
			},
			{
				Name:     "arn",
				Type:     schema.TypeString,
				Resolver: resolveNetworkInterfaceArn,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "association",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Association"),
			},
			{
				Name:     "attachment",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Attachment"),
			},
			{
				Name:     "availability_zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvailabilityZone"),
			},
			{
				Name:     "deny_all_igw_traffic",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DenyAllIgwTraffic"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Groups"),
			},
			{
				Name:     "interface_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InterfaceType"),
			},
			{
				Name:     "ipv4_prefixes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Ipv4Prefixes"),
			},
			{
				Name:     "ipv6_address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Ipv6Address"),
			},
			{
				Name:     "ipv6_addresses",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Ipv6Addresses"),
			},
			{
				Name:     "ipv6_native",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Ipv6Native"),
			},
			{
				Name:     "ipv6_prefixes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Ipv6Prefixes"),
			},
			{
				Name:     "mac_address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MacAddress"),
			},
			{
				Name:     "network_interface_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NetworkInterfaceId"),
			},
			{
				Name:     "outpost_arn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OutpostArn"),
			},
			{
				Name:     "owner_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OwnerId"),
			},
			{
				Name:     "private_dns_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PrivateDnsName"),
			},
			{
				Name:     "private_ip_address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PrivateIpAddress"),
			},
			{
				Name:     "private_ip_addresses",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PrivateIpAddresses"),
			},
			{
				Name:     "requester_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RequesterId"),
			},
			{
				Name:     "requester_managed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequesterManaged"),
			},
			{
				Name:     "source_dest_check",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SourceDestCheck"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "subnet_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SubnetId"),
			},
			{
				Name:     "tag_set",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TagSet"),
			},
			{
				Name:     "vpc_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VpcId"),
			},
		},
	}
}
