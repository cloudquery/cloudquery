// Code generated by codegen; DO NOT EDIT.

package apps

import (
	"github.com/cloudquery/cloudquery/plugins/source/k8s/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ReplicaSets() *schema.Table {
	return &schema.Table{
		Name:      "k8s_apps_replica_sets",
		Resolver:  fetchAppsReplicaSets,
		Multiplex: client.ContextMultiplex,
		Columns: []schema.Column{
			{
				Name:     "context",
				Type:     schema.TypeString,
				Resolver: client.ResolveContext,
			},
			{
				Name:     "uid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "api_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("APIVersion"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "namespace",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Namespace"),
			},
			{
				Name:     "resource_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceVersion"),
			},
			{
				Name:     "generation",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Generation"),
			},
			{
				Name:     "deletion_grace_period_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DeletionGracePeriodSeconds"),
			},
			{
				Name:     "labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Labels"),
			},
			{
				Name:     "annotations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Annotations"),
			},
			{
				Name:     "owner_references",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OwnerReferences"),
			},
			{
				Name:     "finalizers",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Finalizers"),
			},
			{
				Name:     "spec_replicas",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Spec.Replicas"),
			},
			{
				Name:     "spec_min_ready_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Spec.MinReadySeconds"),
			},
			{
				Name:     "spec_selector",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Spec.Selector"),
			},
			{
				Name:     "spec_template",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Spec.Template"),
			},
			{
				Name:     "status_replicas",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Status.Replicas"),
			},
			{
				Name:     "status_fully_labeled_replicas",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Status.FullyLabeledReplicas"),
			},
			{
				Name:     "status_ready_replicas",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Status.ReadyReplicas"),
			},
			{
				Name:     "status_available_replicas",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Status.AvailableReplicas"),
			},
			{
				Name:     "status_observed_generation",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Status.ObservedGeneration"),
			},
			{
				Name:     "status_conditions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Status.Conditions"),
			},
		},
	}
}
