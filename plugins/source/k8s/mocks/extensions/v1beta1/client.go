// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/extensions/v1beta1 (interfaces: ExtensionsV1beta1Interface)

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	rest "k8s.io/client-go/rest"
)

// MockExtensionsV1beta1Interface is a mock of ExtensionsV1beta1Interface interface.
type MockExtensionsV1beta1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionsV1beta1InterfaceMockRecorder
}

// MockExtensionsV1beta1InterfaceMockRecorder is the mock recorder for MockExtensionsV1beta1Interface.
type MockExtensionsV1beta1InterfaceMockRecorder struct {
	mock *MockExtensionsV1beta1Interface
}

// NewMockExtensionsV1beta1Interface creates a new mock instance.
func NewMockExtensionsV1beta1Interface(ctrl *gomock.Controller) *MockExtensionsV1beta1Interface {
	mock := &MockExtensionsV1beta1Interface{ctrl: ctrl}
	mock.recorder = &MockExtensionsV1beta1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionsV1beta1Interface) EXPECT() *MockExtensionsV1beta1InterfaceMockRecorder {
	return m.recorder
}

// DaemonSets mocks base method.
func (m *MockExtensionsV1beta1Interface) DaemonSets(arg0 string) v1beta1.DaemonSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSets", arg0)
	ret0, _ := ret[0].(v1beta1.DaemonSetInterface)
	return ret0
}

// DaemonSets indicates an expected call of DaemonSets.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) DaemonSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSets", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).DaemonSets), arg0)
}

// Deployments mocks base method.
func (m *MockExtensionsV1beta1Interface) Deployments(arg0 string) v1beta1.DeploymentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployments", arg0)
	ret0, _ := ret[0].(v1beta1.DeploymentInterface)
	return ret0
}

// Deployments indicates an expected call of Deployments.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) Deployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).Deployments), arg0)
}

// Ingresses mocks base method.
func (m *MockExtensionsV1beta1Interface) Ingresses(arg0 string) v1beta1.IngressInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingresses", arg0)
	ret0, _ := ret[0].(v1beta1.IngressInterface)
	return ret0
}

// Ingresses indicates an expected call of Ingresses.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) Ingresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingresses", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).Ingresses), arg0)
}

// NetworkPolicies mocks base method.
func (m *MockExtensionsV1beta1Interface) NetworkPolicies(arg0 string) v1beta1.NetworkPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkPolicies", arg0)
	ret0, _ := ret[0].(v1beta1.NetworkPolicyInterface)
	return ret0
}

// NetworkPolicies indicates an expected call of NetworkPolicies.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) NetworkPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkPolicies", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).NetworkPolicies), arg0)
}

// PodSecurityPolicies mocks base method.
func (m *MockExtensionsV1beta1Interface) PodSecurityPolicies() v1beta1.PodSecurityPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodSecurityPolicies")
	ret0, _ := ret[0].(v1beta1.PodSecurityPolicyInterface)
	return ret0
}

// PodSecurityPolicies indicates an expected call of PodSecurityPolicies.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) PodSecurityPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodSecurityPolicies", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).PodSecurityPolicies))
}

// RESTClient mocks base method.
func (m *MockExtensionsV1beta1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).RESTClient))
}

// ReplicaSets mocks base method.
func (m *MockExtensionsV1beta1Interface) ReplicaSets(arg0 string) v1beta1.ReplicaSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaSets", arg0)
	ret0, _ := ret[0].(v1beta1.ReplicaSetInterface)
	return ret0
}

// ReplicaSets indicates an expected call of ReplicaSets.
func (mr *MockExtensionsV1beta1InterfaceMockRecorder) ReplicaSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaSets", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).ReplicaSets), arg0)
}
