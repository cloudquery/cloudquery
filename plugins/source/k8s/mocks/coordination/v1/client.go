// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/coordination/v1 (interfaces: CoordinationV1Interface)

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/client-go/kubernetes/typed/coordination/v1"
	rest "k8s.io/client-go/rest"
)

// MockCoordinationV1Interface is a mock of CoordinationV1Interface interface.
type MockCoordinationV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinationV1InterfaceMockRecorder
}

// MockCoordinationV1InterfaceMockRecorder is the mock recorder for MockCoordinationV1Interface.
type MockCoordinationV1InterfaceMockRecorder struct {
	mock *MockCoordinationV1Interface
}

// NewMockCoordinationV1Interface creates a new mock instance.
func NewMockCoordinationV1Interface(ctrl *gomock.Controller) *MockCoordinationV1Interface {
	mock := &MockCoordinationV1Interface{ctrl: ctrl}
	mock.recorder = &MockCoordinationV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinationV1Interface) EXPECT() *MockCoordinationV1InterfaceMockRecorder {
	return m.recorder
}

// Leases mocks base method.
func (m *MockCoordinationV1Interface) Leases(arg0 string) v1.LeaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leases", arg0)
	ret0, _ := ret[0].(v1.LeaseInterface)
	return ret0
}

// Leases indicates an expected call of Leases.
func (mr *MockCoordinationV1InterfaceMockRecorder) Leases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leases", reflect.TypeOf((*MockCoordinationV1Interface)(nil).Leases), arg0)
}

// RESTClient mocks base method.
func (m *MockCoordinationV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockCoordinationV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockCoordinationV1Interface)(nil).RESTClient))
}
