// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/networking/v1 (interfaces: NetworkingV1Interface)

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	rest "k8s.io/client-go/rest"
)

// MockNetworkingV1Interface is a mock of NetworkingV1Interface interface.
type MockNetworkingV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingV1InterfaceMockRecorder
}

// MockNetworkingV1InterfaceMockRecorder is the mock recorder for MockNetworkingV1Interface.
type MockNetworkingV1InterfaceMockRecorder struct {
	mock *MockNetworkingV1Interface
}

// NewMockNetworkingV1Interface creates a new mock instance.
func NewMockNetworkingV1Interface(ctrl *gomock.Controller) *MockNetworkingV1Interface {
	mock := &MockNetworkingV1Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkingV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkingV1Interface) EXPECT() *MockNetworkingV1InterfaceMockRecorder {
	return m.recorder
}

// IngressClasses mocks base method.
func (m *MockNetworkingV1Interface) IngressClasses() v1.IngressClassInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngressClasses")
	ret0, _ := ret[0].(v1.IngressClassInterface)
	return ret0
}

// IngressClasses indicates an expected call of IngressClasses.
func (mr *MockNetworkingV1InterfaceMockRecorder) IngressClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngressClasses", reflect.TypeOf((*MockNetworkingV1Interface)(nil).IngressClasses))
}

// Ingresses mocks base method.
func (m *MockNetworkingV1Interface) Ingresses(arg0 string) v1.IngressInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingresses", arg0)
	ret0, _ := ret[0].(v1.IngressInterface)
	return ret0
}

// Ingresses indicates an expected call of Ingresses.
func (mr *MockNetworkingV1InterfaceMockRecorder) Ingresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingresses", reflect.TypeOf((*MockNetworkingV1Interface)(nil).Ingresses), arg0)
}

// NetworkPolicies mocks base method.
func (m *MockNetworkingV1Interface) NetworkPolicies(arg0 string) v1.NetworkPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkPolicies", arg0)
	ret0, _ := ret[0].(v1.NetworkPolicyInterface)
	return ret0
}

// NetworkPolicies indicates an expected call of NetworkPolicies.
func (mr *MockNetworkingV1InterfaceMockRecorder) NetworkPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkPolicies", reflect.TypeOf((*MockNetworkingV1Interface)(nil).NetworkPolicies), arg0)
}

// RESTClient mocks base method.
func (m *MockNetworkingV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockNetworkingV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockNetworkingV1Interface)(nil).RESTClient))
}
