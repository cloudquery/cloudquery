// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/certificates/v1 (interfaces: CertificateSigningRequestsGetter,CertificateSigningRequestInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/certificates/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/certificates/v1"
	v12 "k8s.io/client-go/kubernetes/typed/certificates/v1"
)

// MockCertificateSigningRequestsGetter is a mock of CertificateSigningRequestsGetter interface.
type MockCertificateSigningRequestsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateSigningRequestsGetterMockRecorder
}

// MockCertificateSigningRequestsGetterMockRecorder is the mock recorder for MockCertificateSigningRequestsGetter.
type MockCertificateSigningRequestsGetterMockRecorder struct {
	mock *MockCertificateSigningRequestsGetter
}

// NewMockCertificateSigningRequestsGetter creates a new mock instance.
func NewMockCertificateSigningRequestsGetter(ctrl *gomock.Controller) *MockCertificateSigningRequestsGetter {
	mock := &MockCertificateSigningRequestsGetter{ctrl: ctrl}
	mock.recorder = &MockCertificateSigningRequestsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateSigningRequestsGetter) EXPECT() *MockCertificateSigningRequestsGetterMockRecorder {
	return m.recorder
}

// CertificateSigningRequests mocks base method.
func (m *MockCertificateSigningRequestsGetter) CertificateSigningRequests() v12.CertificateSigningRequestInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateSigningRequests")
	ret0, _ := ret[0].(v12.CertificateSigningRequestInterface)
	return ret0
}

// CertificateSigningRequests indicates an expected call of CertificateSigningRequests.
func (mr *MockCertificateSigningRequestsGetterMockRecorder) CertificateSigningRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateSigningRequests", reflect.TypeOf((*MockCertificateSigningRequestsGetter)(nil).CertificateSigningRequests))
}

// MockCertificateSigningRequestInterface is a mock of CertificateSigningRequestInterface interface.
type MockCertificateSigningRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateSigningRequestInterfaceMockRecorder
}

// MockCertificateSigningRequestInterfaceMockRecorder is the mock recorder for MockCertificateSigningRequestInterface.
type MockCertificateSigningRequestInterfaceMockRecorder struct {
	mock *MockCertificateSigningRequestInterface
}

// NewMockCertificateSigningRequestInterface creates a new mock instance.
func NewMockCertificateSigningRequestInterface(ctrl *gomock.Controller) *MockCertificateSigningRequestInterface {
	mock := &MockCertificateSigningRequestInterface{ctrl: ctrl}
	mock.recorder = &MockCertificateSigningRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateSigningRequestInterface) EXPECT() *MockCertificateSigningRequestInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCertificateSigningRequestInterface) Apply(arg0 context.Context, arg1 *v11.CertificateSigningRequestApplyConfiguration, arg2 v10.ApplyOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Apply(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Apply), arg0, arg1, arg2)
}

// ApplyStatus mocks base method.
func (m *MockCertificateSigningRequestInterface) ApplyStatus(arg0 context.Context, arg1 *v11.CertificateSigningRequestApplyConfiguration, arg2 v10.ApplyOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).ApplyStatus), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockCertificateSigningRequestInterface) Create(arg0 context.Context, arg1 *v1.CertificateSigningRequest, arg2 v10.CreateOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockCertificateSigningRequestInterface) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockCertificateSigningRequestInterface) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockCertificateSigningRequestInterface) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockCertificateSigningRequestInterface) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.CertificateSigningRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.CertificateSigningRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockCertificateSigningRequestInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockCertificateSigningRequestInterface) Update(arg0 context.Context, arg1 *v1.CertificateSigningRequest, arg2 v10.UpdateOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Update), arg0, arg1, arg2)
}

// UpdateApproval mocks base method.
func (m *MockCertificateSigningRequestInterface) UpdateApproval(arg0 context.Context, arg1 string, arg2 *v1.CertificateSigningRequest, arg3 v10.UpdateOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApproval", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApproval indicates an expected call of UpdateApproval.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) UpdateApproval(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApproval", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).UpdateApproval), arg0, arg1, arg2, arg3)
}

// UpdateStatus mocks base method.
func (m *MockCertificateSigningRequestInterface) UpdateStatus(arg0 context.Context, arg1 *v1.CertificateSigningRequest, arg2 v10.UpdateOptions) (*v1.CertificateSigningRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.CertificateSigningRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).UpdateStatus), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockCertificateSigningRequestInterface) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockCertificateSigningRequestInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCertificateSigningRequestInterface)(nil).Watch), arg0, arg1)
}
