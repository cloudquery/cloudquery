// This is "almost-autogenerated" by a python script `generate_OracleClients.py`

package client

import (
	"github.com/oracle/oci-go-sdk/v65/adm"
	"github.com/oracle/oci-go-sdk/v65/aianomalydetection"
	"github.com/oracle/oci-go-sdk/v65/ailanguage"
	"github.com/oracle/oci-go-sdk/v65/aispeech"
	"github.com/oracle/oci-go-sdk/v65/aivision"
	"github.com/oracle/oci-go-sdk/v65/analytics"
	"github.com/oracle/oci-go-sdk/v65/announcementsservice"
	"github.com/oracle/oci-go-sdk/v65/apigateway"
	"github.com/oracle/oci-go-sdk/v65/apmconfig"
	"github.com/oracle/oci-go-sdk/v65/apmcontrolplane"
	"github.com/oracle/oci-go-sdk/v65/apmsynthetics"
	"github.com/oracle/oci-go-sdk/v65/apmtraces"
	"github.com/oracle/oci-go-sdk/v65/applicationmigration"
	"github.com/oracle/oci-go-sdk/v65/appmgmtcontrol"
	"github.com/oracle/oci-go-sdk/v65/artifacts"
	"github.com/oracle/oci-go-sdk/v65/audit"
	"github.com/oracle/oci-go-sdk/v65/autoscaling"
	"github.com/oracle/oci-go-sdk/v65/bastion"
	"github.com/oracle/oci-go-sdk/v65/bds"
	"github.com/oracle/oci-go-sdk/v65/blockchain"
	"github.com/oracle/oci-go-sdk/v65/budget"
	"github.com/oracle/oci-go-sdk/v65/certificates"
	"github.com/oracle/oci-go-sdk/v65/certificatesmanagement"
	"github.com/oracle/oci-go-sdk/v65/cims"
	"github.com/oracle/oci-go-sdk/v65/cloudbridge"
	"github.com/oracle/oci-go-sdk/v65/cloudguard"
	"github.com/oracle/oci-go-sdk/v65/cloudmigrations"
	"github.com/oracle/oci-go-sdk/v65/common"
	"github.com/oracle/oci-go-sdk/v65/computeinstanceagent"
	"github.com/oracle/oci-go-sdk/v65/containerengine"
	"github.com/oracle/oci-go-sdk/v65/containerinstances"
	"github.com/oracle/oci-go-sdk/v65/core"
	"github.com/oracle/oci-go-sdk/v65/dashboardservice"
	"github.com/oracle/oci-go-sdk/v65/database"
	"github.com/oracle/oci-go-sdk/v65/databasemanagement"
	"github.com/oracle/oci-go-sdk/v65/databasemigration"
	"github.com/oracle/oci-go-sdk/v65/databasetools"
	"github.com/oracle/oci-go-sdk/v65/datacatalog"
	"github.com/oracle/oci-go-sdk/v65/dataconnectivity"
	"github.com/oracle/oci-go-sdk/v65/dataflow"
	"github.com/oracle/oci-go-sdk/v65/dataintegration"
	"github.com/oracle/oci-go-sdk/v65/datalabelingservice"
	"github.com/oracle/oci-go-sdk/v65/datalabelingservicedataplane"
	"github.com/oracle/oci-go-sdk/v65/datasafe"
	"github.com/oracle/oci-go-sdk/v65/datascience"
	"github.com/oracle/oci-go-sdk/v65/devops"
	"github.com/oracle/oci-go-sdk/v65/disasterrecovery"
	"github.com/oracle/oci-go-sdk/v65/dns"
	"github.com/oracle/oci-go-sdk/v65/dts"
	"github.com/oracle/oci-go-sdk/v65/email"
	"github.com/oracle/oci-go-sdk/v65/emwarehouse"
	"github.com/oracle/oci-go-sdk/v65/events"
	"github.com/oracle/oci-go-sdk/v65/filestorage"
	"github.com/oracle/oci-go-sdk/v65/functions"
	"github.com/oracle/oci-go-sdk/v65/fusionapps"
	"github.com/oracle/oci-go-sdk/v65/goldengate"
	"github.com/oracle/oci-go-sdk/v65/governancerulescontrolplane"
	"github.com/oracle/oci-go-sdk/v65/healthchecks"
	"github.com/oracle/oci-go-sdk/v65/identity"
	"github.com/oracle/oci-go-sdk/v65/integration"
	"github.com/oracle/oci-go-sdk/v65/jms"
	"github.com/oracle/oci-go-sdk/v65/keymanagement"
	"github.com/oracle/oci-go-sdk/v65/licensemanager"
	"github.com/oracle/oci-go-sdk/v65/limits"
	"github.com/oracle/oci-go-sdk/v65/loadbalancer"
	"github.com/oracle/oci-go-sdk/v65/lockbox"
	"github.com/oracle/oci-go-sdk/v65/loganalytics"
	"github.com/oracle/oci-go-sdk/v65/logging"
	"github.com/oracle/oci-go-sdk/v65/managementagent"
	"github.com/oracle/oci-go-sdk/v65/managementdashboard"
	"github.com/oracle/oci-go-sdk/v65/marketplace"
	"github.com/oracle/oci-go-sdk/v65/mediaservices"
	"github.com/oracle/oci-go-sdk/v65/monitoring"
	"github.com/oracle/oci-go-sdk/v65/mysql"
	"github.com/oracle/oci-go-sdk/v65/networkfirewall"
	"github.com/oracle/oci-go-sdk/v65/networkloadbalancer"
	"github.com/oracle/oci-go-sdk/v65/nosql"
	"github.com/oracle/oci-go-sdk/v65/objectstorage"
	"github.com/oracle/oci-go-sdk/v65/oce"
	"github.com/oracle/oci-go-sdk/v65/ocvp"
	"github.com/oracle/oci-go-sdk/v65/oda"
	"github.com/oracle/oci-go-sdk/v65/onesubscription"
	"github.com/oracle/oci-go-sdk/v65/ons"
	"github.com/oracle/oci-go-sdk/v65/opa"
	"github.com/oracle/oci-go-sdk/v65/opensearch"
	"github.com/oracle/oci-go-sdk/v65/operatoraccesscontrol"
	"github.com/oracle/oci-go-sdk/v65/opsi"
	"github.com/oracle/oci-go-sdk/v65/optimizer"
	"github.com/oracle/oci-go-sdk/v65/osmanagement"
	"github.com/oracle/oci-go-sdk/v65/ospgateway"
	"github.com/oracle/oci-go-sdk/v65/osubbillingschedule"
	"github.com/oracle/oci-go-sdk/v65/osuborganizationsubscription"
	"github.com/oracle/oci-go-sdk/v65/osubsubscription"
	"github.com/oracle/oci-go-sdk/v65/osubusage"
	"github.com/oracle/oci-go-sdk/v65/queue"
	"github.com/oracle/oci-go-sdk/v65/resourcemanager"
	"github.com/oracle/oci-go-sdk/v65/resourcesearch"
	"github.com/oracle/oci-go-sdk/v65/rover"
	"github.com/oracle/oci-go-sdk/v65/sch"
	"github.com/oracle/oci-go-sdk/v65/secrets"
	"github.com/oracle/oci-go-sdk/v65/servicecatalog"
	"github.com/oracle/oci-go-sdk/v65/servicemanagerproxy"
	"github.com/oracle/oci-go-sdk/v65/servicemesh"
	"github.com/oracle/oci-go-sdk/v65/stackmonitoring"
	"github.com/oracle/oci-go-sdk/v65/streaming"
	"github.com/oracle/oci-go-sdk/v65/tenantmanagercontrolplane"
	"github.com/oracle/oci-go-sdk/v65/threatintelligence"
	"github.com/oracle/oci-go-sdk/v65/usage"
	"github.com/oracle/oci-go-sdk/v65/usageapi"
	"github.com/oracle/oci-go-sdk/v65/vault"
	"github.com/oracle/oci-go-sdk/v65/visualbuilder"
	"github.com/oracle/oci-go-sdk/v65/vnmonitoring"
	"github.com/oracle/oci-go-sdk/v65/vulnerabilityscanning"
	"github.com/oracle/oci-go-sdk/v65/waa"
	"github.com/oracle/oci-go-sdk/v65/waas"
	"github.com/oracle/oci-go-sdk/v65/waf"
	"github.com/oracle/oci-go-sdk/v65/workrequests"
)

type OracleClients struct {
	AdmApplicationdependencymanagementClient                   *adm.ApplicationDependencyManagementClient
	AianomalydetectionAnomalydetectionClient                   *aianomalydetection.AnomalyDetectionClient
	AilanguageAiservicelanguageClient                          *ailanguage.AIServiceLanguageClient
	AispeechAiservicespeechClient                              *aispeech.AIServiceSpeechClient
	AivisionAiservicevisionClient                              *aivision.AIServiceVisionClient
	AnalyticsAnalyticsClient                                   *analytics.AnalyticsClient
	AnnouncementsserviceAnnouncementClient                     *announcementsservice.AnnouncementClient
	AnnouncementsserviceAnnouncementspreferencesClient         *announcementsservice.AnnouncementsPreferencesClient
	AnnouncementsserviceAnnouncementsubscriptionClient         *announcementsservice.AnnouncementSubscriptionClient
	ApigatewayApigatewayClient                                 *apigateway.ApiGatewayClient
	ApigatewayDeploymentClient                                 *apigateway.DeploymentClient
	ApigatewayGatewayClient                                    *apigateway.GatewayClient
	ApigatewaySubscribersClient                                *apigateway.SubscribersClient
	ApigatewayUsageplansClient                                 *apigateway.UsagePlansClient
	ApigatewayWorkrequestsClient                               *apigateway.WorkRequestsClient
	ApmconfigConfigClient                                      *apmconfig.ConfigClient
	ApmcontrolplaneApmdomainClient                             *apmcontrolplane.ApmDomainClient
	ApmsyntheticsApmsyntheticClient                            *apmsynthetics.ApmSyntheticClient
	ApmtracesQueryClient                                       *apmtraces.QueryClient
	ApplicationmigrationApplicationmigrationClient             *applicationmigration.ApplicationMigrationClient
	AppmgmtcontrolAppmgmtcontrolClient                         *appmgmtcontrol.AppmgmtControlClient
	ArtifactsArtifactsClient                                   *artifacts.ArtifactsClient
	AuditAuditClient                                           *audit.AuditClient
	AutoscalingAutoscalingClient                               *autoscaling.AutoScalingClient
	BastionBastionClient                                       *bastion.BastionClient
	BdsBdsClient                                               *bds.BdsClient
	BlockchainBlockchainplatformClient                         *blockchain.BlockchainPlatformClient
	BudgetBudgetClient                                         *budget.BudgetClient
	CertificatesCertificatesClient                             *certificates.CertificatesClient
	CertificatesmanagementCertificatesmanagementClient         *certificatesmanagement.CertificatesManagementClient
	CimsIncidentClient                                         *cims.IncidentClient
	CloudbridgeCommonClient                                    *cloudbridge.CommonClient
	CloudbridgeDiscoveryClient                                 *cloudbridge.DiscoveryClient
	CloudbridgeInventoryClient                                 *cloudbridge.InventoryClient
	CloudbridgeOcbagentsvcClient                               *cloudbridge.OcbAgentSvcClient
	CloudguardCloudguardClient                                 *cloudguard.CloudGuardClient
	CloudmigrationsMigrationClient                             *cloudmigrations.MigrationClient
	ComputeinstanceagentComputeinstanceagentClient             *computeinstanceagent.ComputeInstanceAgentClient
	ComputeinstanceagentPluginClient                           *computeinstanceagent.PluginClient
	ComputeinstanceagentPluginconfigClient                     *computeinstanceagent.PluginconfigClient
	ContainerengineContainerengineClient                       *containerengine.ContainerEngineClient
	ContainerinstancesContainerinstanceClient                  *containerinstances.ContainerInstanceClient
	CoreBlockstorageClient                                     *core.BlockstorageClient
	CoreComputeClient                                          *core.ComputeClient
	CoreComputemanagementClient                                *core.ComputeManagementClient
	CoreVirtualnetworkClient                                   *core.VirtualNetworkClient
	DashboardserviceDashboardClient                            *dashboardservice.DashboardClient
	DashboardserviceDashboardgroupClient                       *dashboardservice.DashboardGroupClient
	DatabaseDatabaseClient                                     *database.DatabaseClient
	DatabasemanagementDbmanagementClient                       *databasemanagement.DbManagementClient
	DatabasemanagementDiagnosabilityClient                     *databasemanagement.DiagnosabilityClient
	DatabasemanagementSqltuningClient                          *databasemanagement.SqlTuningClient
	DatabasemigrationDatabasemigrationClient                   *databasemigration.DatabaseMigrationClient
	DatabasetoolsDatabasetoolsClient                           *databasetools.DatabaseToolsClient
	DatacatalogDatacatalogClient                               *datacatalog.DataCatalogClient
	DataconnectivityDataconnectivitymanagementClient           *dataconnectivity.DataConnectivityManagementClient
	DataflowDataflowClient                                     *dataflow.DataFlowClient
	DataintegrationDataintegrationClient                       *dataintegration.DataIntegrationClient
	DatalabelingserviceDatalabelingmanagementClient            *datalabelingservice.DataLabelingManagementClient
	DatalabelingservicedataplaneDatalabelingClient             *datalabelingservicedataplane.DataLabelingClient
	DatasafeDatasafeClient                                     *datasafe.DataSafeClient
	DatascienceDatascienceClient                               *datascience.DataScienceClient
	DevopsDevopsClient                                         *devops.DevopsClient
	DisasterrecoveryDisasterrecoveryClient                     *disasterrecovery.DisasterRecoveryClient
	DnsDnsClient                                               *dns.DnsClient
	DtsApplianceexportjobClient                                *dts.ApplianceExportJobClient
	DtsShippingvendorsClient                                   *dts.ShippingVendorsClient
	DtsTransferapplianceClient                                 *dts.TransferApplianceClient
	DtsTransferapplianceentitlementClient                      *dts.TransferApplianceEntitlementClient
	DtsTransferdeviceClient                                    *dts.TransferDeviceClient
	DtsTransferjobClient                                       *dts.TransferJobClient
	DtsTransferpackageClient                                   *dts.TransferPackageClient
	EmailEmailClient                                           *email.EmailClient
	EmwarehouseEmwarehouseClient                               *emwarehouse.EmWarehouseClient
	EventsEventsClient                                         *events.EventsClient
	FilestorageFilestorageClient                               *filestorage.FileStorageClient
	FunctionsFunctionsmanagementClient                         *functions.FunctionsManagementClient
	FusionappsFusionapplicationsClient                         *fusionapps.FusionApplicationsClient
	GoldengateGoldengateClient                                 *goldengate.GoldenGateClient
	GovernancerulescontrolplaneGovernanceruleClient            *governancerulescontrolplane.GovernanceRuleClient
	GovernancerulescontrolplaneWorkrequestClient               *governancerulescontrolplane.WorkRequestClient
	HealthchecksHealthchecksClient                             *healthchecks.HealthChecksClient
	IdentityIdentityClient                                     *identity.IdentityClient
	IntegrationIntegrationinstanceClient                       *integration.IntegrationInstanceClient
	JmsJavamanagementserviceClient                             *jms.JavaManagementServiceClient
	KeymanagementKmsvaultClient                                *keymanagement.KmsVaultClient
	LicensemanagerLicensemanagerClient                         *licensemanager.LicenseManagerClient
	LimitsLimitsClient                                         *limits.LimitsClient
	LimitsQuotasClient                                         *limits.QuotasClient
	LoadbalancerLoadbalancerClient                             *loadbalancer.LoadBalancerClient
	LockboxLockboxClient                                       *lockbox.LockboxClient
	LoganalyticsLoganalyticsClient                             *loganalytics.LogAnalyticsClient
	LoggingLoggingmanagementClient                             *logging.LoggingManagementClient
	ManagementagentManagementagentClient                       *managementagent.ManagementAgentClient
	ManagementdashboardDashxapisClient                         *managementdashboard.DashxApisClient
	MarketplaceMarketplaceClient                               *marketplace.MarketplaceClient
	MediaservicesMediaservicesClient                           *mediaservices.MediaServicesClient
	MonitoringMonitoringClient                                 *monitoring.MonitoringClient
	MysqlChannelsClient                                        *mysql.ChannelsClient
	MysqlDbbackupsClient                                       *mysql.DbBackupsClient
	MysqlDbsystemClient                                        *mysql.DbSystemClient
	MysqlMysqlaasClient                                        *mysql.MysqlaasClient
	MysqlReplicasClient                                        *mysql.ReplicasClient
	MysqlWorkrequestsClient                                    *mysql.WorkRequestsClient
	NetworkfirewallNetworkfirewallClient                       *networkfirewall.NetworkFirewallClient
	NetworkloadbalancerNetworkloadbalancerClient               *networkloadbalancer.NetworkLoadBalancerClient
	NosqlNosqlClient                                           *nosql.NosqlClient
	ObjectstorageObjectstorageClient                           *objectstorage.ObjectStorageClient
	OceOceinstanceClient                                       *oce.OceInstanceClient
	OcvpEsxihostClient                                         *ocvp.EsxiHostClient
	OcvpSddcClient                                             *ocvp.SddcClient
	OcvpWorkrequestClient                                      *ocvp.WorkRequestClient
	OdaManagementClient                                        *oda.ManagementClient
	OdaOdaClient                                               *oda.OdaClient
	OdaOdapackageClient                                        *oda.OdapackageClient
	OnesubscriptionBillingscheduleClient                       *onesubscription.BillingScheduleClient
	OnesubscriptionCommitmentClient                            *onesubscription.CommitmentClient
	OnesubscriptionComputedusageClient                         *onesubscription.ComputedUsageClient
	OnesubscriptionInvoicesummaryClient                        *onesubscription.InvoiceSummaryClient
	OnesubscriptionOrganizationsubscriptionClient              *onesubscription.OrganizationSubscriptionClient
	OnesubscriptionRatecardClient                              *onesubscription.RatecardClient
	OnesubscriptionSubscribedserviceClient                     *onesubscription.SubscribedServiceClient
	OnesubscriptionSubscriptionClient                          *onesubscription.SubscriptionClient
	OnsNotificationcontrolplaneClient                          *ons.NotificationControlPlaneClient
	OnsNotificationdataplaneClient                             *ons.NotificationDataPlaneClient
	OpaOpainstanceClient                                       *opa.OpaInstanceClient
	OpensearchOpensearchclusterClient                          *opensearch.OpensearchClusterClient
	OpensearchOpensearchclusterbackupClient                    *opensearch.OpensearchClusterBackupClient
	OperatoraccesscontrolAccessrequestsClient                  *operatoraccesscontrol.AccessRequestsClient
	OperatoraccesscontrolOperatoractionsClient                 *operatoraccesscontrol.OperatorActionsClient
	OperatoraccesscontrolOperatorcontrolClient                 *operatoraccesscontrol.OperatorControlClient
	OperatoraccesscontrolOperatorcontrolassignmentClient       *operatoraccesscontrol.OperatorControlAssignmentClient
	OpsiOperationsinsightsClient                               *opsi.OperationsInsightsClient
	OptimizerOptimizerClient                                   *optimizer.OptimizerClient
	OsmanagementEventClient                                    *osmanagement.EventClient
	OsmanagementOsmanagementClient                             *osmanagement.OsManagementClient
	OspgatewayInvoiceserviceClient                             *ospgateway.InvoiceServiceClient
	OspgatewaySubscriptionserviceClient                        *ospgateway.SubscriptionServiceClient
	OsubbillingscheduleBillingscheduleClient                   *osubbillingschedule.BillingScheduleClient
	OsuborganizationsubscriptionOrganizationsubscriptionClient *osuborganizationsubscription.OrganizationSubscriptionClient
	OsubsubscriptionCommitmentClient                           *osubsubscription.CommitmentClient
	OsubsubscriptionRatecardClient                             *osubsubscription.RatecardClient
	OsubsubscriptionSubscriptionClient                         *osubsubscription.SubscriptionClient
	OsubusageComputedusageClient                               *osubusage.ComputedUsageClient
	QueueQueueadminClient                                      *queue.QueueAdminClient
	ResourcemanagerResourcemanagerClient                       *resourcemanager.ResourceManagerClient
	ResourcesearchResourcesearchClient                         *resourcesearch.ResourceSearchClient
	RoverRoverclusterClient                                    *rover.RoverClusterClient
	RoverRoverentitlementClient                                *rover.RoverEntitlementClient
	RoverRovernodeClient                                       *rover.RoverNodeClient
	RoverShapeClient                                           *rover.ShapeClient
	SchServiceconnectorClient                                  *sch.ServiceConnectorClient
	SecretsSecretsClient                                       *secrets.SecretsClient
	ServicecatalogServicecatalogClient                         *servicecatalog.ServiceCatalogClient
	ServicemanagerproxyServicemanagerproxyClient               *servicemanagerproxy.ServiceManagerProxyClient
	ServicemeshServicemeshClient                               *servicemesh.ServiceMeshClient
	StackmonitoringStackmonitoringClient                       *stackmonitoring.StackMonitoringClient
	StreamingStreamadminClient                                 *streaming.StreamAdminClient
	TenantmanagercontrolplaneDomainClient                      *tenantmanagercontrolplane.DomainClient
	TenantmanagercontrolplaneDomaingovernanceClient            *tenantmanagercontrolplane.DomainGovernanceClient
	TenantmanagercontrolplaneLinkClient                        *tenantmanagercontrolplane.LinkClient
	TenantmanagercontrolplaneOrganizationClient                *tenantmanagercontrolplane.OrganizationClient
	TenantmanagercontrolplaneRecipientinvitationClient         *tenantmanagercontrolplane.RecipientInvitationClient
	TenantmanagercontrolplaneSenderinvitationClient            *tenantmanagercontrolplane.SenderInvitationClient
	TenantmanagercontrolplaneSubscriptionClient                *tenantmanagercontrolplane.SubscriptionClient
	TenantmanagercontrolplaneWorkrequestClient                 *tenantmanagercontrolplane.WorkRequestClient
	ThreatintelligenceThreatintelClient                        *threatintelligence.ThreatintelClient
	UsageRewardsClient                                         *usage.RewardsClient
	UsageapiUsageapiClient                                     *usageapi.UsageapiClient
	VaultVaultsClient                                          *vault.VaultsClient
	VisualbuilderVbinstanceClient                              *visualbuilder.VbInstanceClient
	VnmonitoringVnmonitoringClient                             *vnmonitoring.VnMonitoringClient
	VulnerabilityscanningVulnerabilityscanningClient           *vulnerabilityscanning.VulnerabilityScanningClient
	WaaWaaClient                                               *waa.WaaClient
	WaaWorkrequestClient                                       *waa.WorkRequestClient
	WaasRedirectClient                                         *waas.RedirectClient
	WaasWaasClient                                             *waas.WaasClient
	WafWafClient                                               *waf.WafClient
	WorkrequestsWorkrequestClient                              *workrequests.WorkRequestClient
}

func initOracleClientsInAllRegions(
	configProvider common.ConfigurationProvider,
	allRegionOcids []string) (map[string]*OracleClients, error) {
	oracleClients := make(map[string]*OracleClients)

	for _, regionOcid := range allRegionOcids {
		oracleClients[regionOcid] = &OracleClients{}

		admApplicationDependencyManagementClient, err := adm.NewApplicationDependencyManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		admApplicationDependencyManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AdmApplicationdependencymanagementClient = &admApplicationDependencyManagementClient

		aianomalydetectionAnomalyDetectionClient, err := aianomalydetection.NewAnomalyDetectionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		aianomalydetectionAnomalyDetectionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AianomalydetectionAnomalydetectionClient = &aianomalydetectionAnomalyDetectionClient

		ailanguageAIServiceLanguageClient, err := ailanguage.NewAIServiceLanguageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		ailanguageAIServiceLanguageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AilanguageAiservicelanguageClient = &ailanguageAIServiceLanguageClient

		aispeechAIServiceSpeechClient, err := aispeech.NewAIServiceSpeechClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		aispeechAIServiceSpeechClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AispeechAiservicespeechClient = &aispeechAIServiceSpeechClient

		aivisionAIServiceVisionClient, err := aivision.NewAIServiceVisionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		aivisionAIServiceVisionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AivisionAiservicevisionClient = &aivisionAIServiceVisionClient

		analyticsAnalyticsClient, err := analytics.NewAnalyticsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		analyticsAnalyticsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AnalyticsAnalyticsClient = &analyticsAnalyticsClient

		announcementsserviceAnnouncementClient, err := announcementsservice.NewAnnouncementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		announcementsserviceAnnouncementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AnnouncementsserviceAnnouncementClient = &announcementsserviceAnnouncementClient

		announcementsserviceAnnouncementSubscriptionClient, err := announcementsservice.NewAnnouncementSubscriptionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		announcementsserviceAnnouncementSubscriptionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AnnouncementsserviceAnnouncementsubscriptionClient = &announcementsserviceAnnouncementSubscriptionClient

		announcementsserviceAnnouncementsPreferencesClient, err := announcementsservice.NewAnnouncementsPreferencesClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		announcementsserviceAnnouncementsPreferencesClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AnnouncementsserviceAnnouncementspreferencesClient = &announcementsserviceAnnouncementsPreferencesClient

		apigatewayApiGatewayClient, err := apigateway.NewApiGatewayClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apigatewayApiGatewayClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApigatewayApigatewayClient = &apigatewayApiGatewayClient

		apigatewayDeploymentClient, err := apigateway.NewDeploymentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apigatewayDeploymentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApigatewayDeploymentClient = &apigatewayDeploymentClient

		apigatewayGatewayClient, err := apigateway.NewGatewayClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apigatewayGatewayClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApigatewayGatewayClient = &apigatewayGatewayClient

		apigatewaySubscribersClient, err := apigateway.NewSubscribersClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apigatewaySubscribersClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApigatewaySubscribersClient = &apigatewaySubscribersClient

		apigatewayUsagePlansClient, err := apigateway.NewUsagePlansClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apigatewayUsagePlansClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApigatewayUsageplansClient = &apigatewayUsagePlansClient

		apigatewayWorkRequestsClient, err := apigateway.NewWorkRequestsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apigatewayWorkRequestsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApigatewayWorkrequestsClient = &apigatewayWorkRequestsClient

		apmconfigConfigClient, err := apmconfig.NewConfigClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apmconfigConfigClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApmconfigConfigClient = &apmconfigConfigClient

		apmcontrolplaneApmDomainClient, err := apmcontrolplane.NewApmDomainClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apmcontrolplaneApmDomainClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApmcontrolplaneApmdomainClient = &apmcontrolplaneApmDomainClient

		apmsyntheticsApmSyntheticClient, err := apmsynthetics.NewApmSyntheticClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apmsyntheticsApmSyntheticClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApmsyntheticsApmsyntheticClient = &apmsyntheticsApmSyntheticClient

		apmtracesQueryClient, err := apmtraces.NewQueryClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		apmtracesQueryClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApmtracesQueryClient = &apmtracesQueryClient

		applicationmigrationApplicationMigrationClient, err := applicationmigration.NewApplicationMigrationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		applicationmigrationApplicationMigrationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ApplicationmigrationApplicationmigrationClient = &applicationmigrationApplicationMigrationClient

		appmgmtcontrolAppmgmtControlClient, err := appmgmtcontrol.NewAppmgmtControlClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		appmgmtcontrolAppmgmtControlClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AppmgmtcontrolAppmgmtcontrolClient = &appmgmtcontrolAppmgmtControlClient

		artifactsArtifactsClient, err := artifacts.NewArtifactsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		artifactsArtifactsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ArtifactsArtifactsClient = &artifactsArtifactsClient

		auditAuditClient, err := audit.NewAuditClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		auditAuditClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AuditAuditClient = &auditAuditClient

		autoscalingAutoScalingClient, err := autoscaling.NewAutoScalingClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		autoscalingAutoScalingClient.SetRegion(regionOcid)
		oracleClients[regionOcid].AutoscalingAutoscalingClient = &autoscalingAutoScalingClient

		bastionBastionClient, err := bastion.NewBastionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		bastionBastionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].BastionBastionClient = &bastionBastionClient

		bdsBdsClient, err := bds.NewBdsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		bdsBdsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].BdsBdsClient = &bdsBdsClient

		blockchainBlockchainPlatformClient, err := blockchain.NewBlockchainPlatformClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		blockchainBlockchainPlatformClient.SetRegion(regionOcid)
		oracleClients[regionOcid].BlockchainBlockchainplatformClient = &blockchainBlockchainPlatformClient

		budgetBudgetClient, err := budget.NewBudgetClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		budgetBudgetClient.SetRegion(regionOcid)
		oracleClients[regionOcid].BudgetBudgetClient = &budgetBudgetClient

		certificatesCertificatesClient, err := certificates.NewCertificatesClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		certificatesCertificatesClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CertificatesCertificatesClient = &certificatesCertificatesClient

		certificatesmanagementCertificatesManagementClient, err := certificatesmanagement.NewCertificatesManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		certificatesmanagementCertificatesManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CertificatesmanagementCertificatesmanagementClient = &certificatesmanagementCertificatesManagementClient

		cimsIncidentClient, err := cims.NewIncidentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cimsIncidentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CimsIncidentClient = &cimsIncidentClient

		cloudbridgeCommonClient, err := cloudbridge.NewCommonClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cloudbridgeCommonClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CloudbridgeCommonClient = &cloudbridgeCommonClient

		cloudbridgeDiscoveryClient, err := cloudbridge.NewDiscoveryClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cloudbridgeDiscoveryClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CloudbridgeDiscoveryClient = &cloudbridgeDiscoveryClient

		cloudbridgeInventoryClient, err := cloudbridge.NewInventoryClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cloudbridgeInventoryClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CloudbridgeInventoryClient = &cloudbridgeInventoryClient

		cloudbridgeOcbAgentSvcClient, err := cloudbridge.NewOcbAgentSvcClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cloudbridgeOcbAgentSvcClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CloudbridgeOcbagentsvcClient = &cloudbridgeOcbAgentSvcClient

		cloudguardCloudGuardClient, err := cloudguard.NewCloudGuardClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cloudguardCloudGuardClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CloudguardCloudguardClient = &cloudguardCloudGuardClient

		cloudmigrationsMigrationClient, err := cloudmigrations.NewMigrationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		cloudmigrationsMigrationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CloudmigrationsMigrationClient = &cloudmigrationsMigrationClient

		computeinstanceagentComputeInstanceAgentClient, err := computeinstanceagent.NewComputeInstanceAgentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		computeinstanceagentComputeInstanceAgentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ComputeinstanceagentComputeinstanceagentClient = &computeinstanceagentComputeInstanceAgentClient

		computeinstanceagentPluginClient, err := computeinstanceagent.NewPluginClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		computeinstanceagentPluginClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ComputeinstanceagentPluginClient = &computeinstanceagentPluginClient

		computeinstanceagentPluginconfigClient, err := computeinstanceagent.NewPluginconfigClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		computeinstanceagentPluginconfigClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ComputeinstanceagentPluginconfigClient = &computeinstanceagentPluginconfigClient

		containerengineContainerEngineClient, err := containerengine.NewContainerEngineClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		containerengineContainerEngineClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ContainerengineContainerengineClient = &containerengineContainerEngineClient

		containerinstancesContainerInstanceClient, err := containerinstances.NewContainerInstanceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		containerinstancesContainerInstanceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ContainerinstancesContainerinstanceClient = &containerinstancesContainerInstanceClient

		coreBlockstorageClient, err := core.NewBlockstorageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		coreBlockstorageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CoreBlockstorageClient = &coreBlockstorageClient

		coreComputeClient, err := core.NewComputeClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		coreComputeClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CoreComputeClient = &coreComputeClient

		coreComputeManagementClient, err := core.NewComputeManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		coreComputeManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CoreComputemanagementClient = &coreComputeManagementClient

		coreVirtualNetworkClient, err := core.NewVirtualNetworkClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		coreVirtualNetworkClient.SetRegion(regionOcid)
		oracleClients[regionOcid].CoreVirtualnetworkClient = &coreVirtualNetworkClient

		dashboardserviceDashboardClient, err := dashboardservice.NewDashboardClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dashboardserviceDashboardClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DashboardserviceDashboardClient = &dashboardserviceDashboardClient

		dashboardserviceDashboardGroupClient, err := dashboardservice.NewDashboardGroupClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dashboardserviceDashboardGroupClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DashboardserviceDashboardgroupClient = &dashboardserviceDashboardGroupClient

		databaseDatabaseClient, err := database.NewDatabaseClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		databaseDatabaseClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatabaseDatabaseClient = &databaseDatabaseClient

		databasemanagementDbManagementClient, err := databasemanagement.NewDbManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		databasemanagementDbManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatabasemanagementDbmanagementClient = &databasemanagementDbManagementClient

		databasemanagementDiagnosabilityClient, err := databasemanagement.NewDiagnosabilityClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		databasemanagementDiagnosabilityClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatabasemanagementDiagnosabilityClient = &databasemanagementDiagnosabilityClient

		databasemanagementSqlTuningClient, err := databasemanagement.NewSqlTuningClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		databasemanagementSqlTuningClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatabasemanagementSqltuningClient = &databasemanagementSqlTuningClient

		databasemigrationDatabaseMigrationClient, err := databasemigration.NewDatabaseMigrationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		databasemigrationDatabaseMigrationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatabasemigrationDatabasemigrationClient = &databasemigrationDatabaseMigrationClient

		databasetoolsDatabaseToolsClient, err := databasetools.NewDatabaseToolsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		databasetoolsDatabaseToolsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatabasetoolsDatabasetoolsClient = &databasetoolsDatabaseToolsClient

		datacatalogDataCatalogClient, err := datacatalog.NewDataCatalogClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		datacatalogDataCatalogClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatacatalogDatacatalogClient = &datacatalogDataCatalogClient

		dataconnectivityDataConnectivityManagementClient, err := dataconnectivity.NewDataConnectivityManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dataconnectivityDataConnectivityManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DataconnectivityDataconnectivitymanagementClient = &dataconnectivityDataConnectivityManagementClient

		dataflowDataFlowClient, err := dataflow.NewDataFlowClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dataflowDataFlowClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DataflowDataflowClient = &dataflowDataFlowClient

		dataintegrationDataIntegrationClient, err := dataintegration.NewDataIntegrationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dataintegrationDataIntegrationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DataintegrationDataintegrationClient = &dataintegrationDataIntegrationClient

		datalabelingserviceDataLabelingManagementClient, err := datalabelingservice.NewDataLabelingManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		datalabelingserviceDataLabelingManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatalabelingserviceDatalabelingmanagementClient = &datalabelingserviceDataLabelingManagementClient

		datalabelingservicedataplaneDataLabelingClient, err := datalabelingservicedataplane.NewDataLabelingClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		datalabelingservicedataplaneDataLabelingClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatalabelingservicedataplaneDatalabelingClient = &datalabelingservicedataplaneDataLabelingClient

		datasafeDataSafeClient, err := datasafe.NewDataSafeClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		datasafeDataSafeClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatasafeDatasafeClient = &datasafeDataSafeClient

		datascienceDataScienceClient, err := datascience.NewDataScienceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		datascienceDataScienceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DatascienceDatascienceClient = &datascienceDataScienceClient

		devopsDevopsClient, err := devops.NewDevopsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		devopsDevopsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DevopsDevopsClient = &devopsDevopsClient

		disasterrecoveryDisasterRecoveryClient, err := disasterrecovery.NewDisasterRecoveryClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		disasterrecoveryDisasterRecoveryClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DisasterrecoveryDisasterrecoveryClient = &disasterrecoveryDisasterRecoveryClient

		dnsDnsClient, err := dns.NewDnsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dnsDnsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DnsDnsClient = &dnsDnsClient

		dtsApplianceExportJobClient, err := dts.NewApplianceExportJobClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsApplianceExportJobClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsApplianceexportjobClient = &dtsApplianceExportJobClient

		dtsShippingVendorsClient, err := dts.NewShippingVendorsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsShippingVendorsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsShippingvendorsClient = &dtsShippingVendorsClient

		dtsTransferApplianceClient, err := dts.NewTransferApplianceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsTransferApplianceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsTransferapplianceClient = &dtsTransferApplianceClient

		dtsTransferApplianceEntitlementClient, err := dts.NewTransferApplianceEntitlementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsTransferApplianceEntitlementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsTransferapplianceentitlementClient = &dtsTransferApplianceEntitlementClient

		dtsTransferDeviceClient, err := dts.NewTransferDeviceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsTransferDeviceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsTransferdeviceClient = &dtsTransferDeviceClient

		dtsTransferJobClient, err := dts.NewTransferJobClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsTransferJobClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsTransferjobClient = &dtsTransferJobClient

		dtsTransferPackageClient, err := dts.NewTransferPackageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		dtsTransferPackageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].DtsTransferpackageClient = &dtsTransferPackageClient

		emailEmailClient, err := email.NewEmailClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		emailEmailClient.SetRegion(regionOcid)
		oracleClients[regionOcid].EmailEmailClient = &emailEmailClient

		emwarehouseEmWarehouseClient, err := emwarehouse.NewEmWarehouseClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		emwarehouseEmWarehouseClient.SetRegion(regionOcid)
		oracleClients[regionOcid].EmwarehouseEmwarehouseClient = &emwarehouseEmWarehouseClient

		eventsEventsClient, err := events.NewEventsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		eventsEventsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].EventsEventsClient = &eventsEventsClient

		filestorageFileStorageClient, err := filestorage.NewFileStorageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		filestorageFileStorageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].FilestorageFilestorageClient = &filestorageFileStorageClient

		functionsFunctionsManagementClient, err := functions.NewFunctionsManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		functionsFunctionsManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].FunctionsFunctionsmanagementClient = &functionsFunctionsManagementClient

		fusionappsFusionApplicationsClient, err := fusionapps.NewFusionApplicationsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		fusionappsFusionApplicationsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].FusionappsFusionapplicationsClient = &fusionappsFusionApplicationsClient

		goldengateGoldenGateClient, err := goldengate.NewGoldenGateClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		goldengateGoldenGateClient.SetRegion(regionOcid)
		oracleClients[regionOcid].GoldengateGoldengateClient = &goldengateGoldenGateClient

		governancerulescontrolplaneGovernanceRuleClient, err := governancerulescontrolplane.NewGovernanceRuleClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		governancerulescontrolplaneGovernanceRuleClient.SetRegion(regionOcid)
		oracleClients[regionOcid].GovernancerulescontrolplaneGovernanceruleClient = &governancerulescontrolplaneGovernanceRuleClient

		governancerulescontrolplaneWorkRequestClient, err := governancerulescontrolplane.NewWorkRequestClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		governancerulescontrolplaneWorkRequestClient.SetRegion(regionOcid)
		oracleClients[regionOcid].GovernancerulescontrolplaneWorkrequestClient = &governancerulescontrolplaneWorkRequestClient

		healthchecksHealthChecksClient, err := healthchecks.NewHealthChecksClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		healthchecksHealthChecksClient.SetRegion(regionOcid)
		oracleClients[regionOcid].HealthchecksHealthchecksClient = &healthchecksHealthChecksClient

		identityIdentityClient, err := identity.NewIdentityClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		identityIdentityClient.SetRegion(regionOcid)
		oracleClients[regionOcid].IdentityIdentityClient = &identityIdentityClient

		integrationIntegrationInstanceClient, err := integration.NewIntegrationInstanceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		integrationIntegrationInstanceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].IntegrationIntegrationinstanceClient = &integrationIntegrationInstanceClient

		jmsJavaManagementServiceClient, err := jms.NewJavaManagementServiceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		jmsJavaManagementServiceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].JmsJavamanagementserviceClient = &jmsJavaManagementServiceClient

		keymanagementKmsVaultClient, err := keymanagement.NewKmsVaultClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		keymanagementKmsVaultClient.SetRegion(regionOcid)
		oracleClients[regionOcid].KeymanagementKmsvaultClient = &keymanagementKmsVaultClient

		licensemanagerLicenseManagerClient, err := licensemanager.NewLicenseManagerClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		licensemanagerLicenseManagerClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LicensemanagerLicensemanagerClient = &licensemanagerLicenseManagerClient

		limitsLimitsClient, err := limits.NewLimitsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		limitsLimitsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LimitsLimitsClient = &limitsLimitsClient

		limitsQuotasClient, err := limits.NewQuotasClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		limitsQuotasClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LimitsQuotasClient = &limitsQuotasClient

		loadbalancerLoadBalancerClient, err := loadbalancer.NewLoadBalancerClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		loadbalancerLoadBalancerClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LoadbalancerLoadbalancerClient = &loadbalancerLoadBalancerClient

		lockboxLockboxClient, err := lockbox.NewLockboxClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		lockboxLockboxClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LockboxLockboxClient = &lockboxLockboxClient

		loganalyticsLogAnalyticsClient, err := loganalytics.NewLogAnalyticsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		loganalyticsLogAnalyticsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LoganalyticsLoganalyticsClient = &loganalyticsLogAnalyticsClient

		loggingLoggingManagementClient, err := logging.NewLoggingManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		loggingLoggingManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].LoggingLoggingmanagementClient = &loggingLoggingManagementClient

		managementagentManagementAgentClient, err := managementagent.NewManagementAgentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		managementagentManagementAgentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ManagementagentManagementagentClient = &managementagentManagementAgentClient

		managementdashboardDashxApisClient, err := managementdashboard.NewDashxApisClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		managementdashboardDashxApisClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ManagementdashboardDashxapisClient = &managementdashboardDashxApisClient

		marketplaceMarketplaceClient, err := marketplace.NewMarketplaceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		marketplaceMarketplaceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MarketplaceMarketplaceClient = &marketplaceMarketplaceClient

		mediaservicesMediaServicesClient, err := mediaservices.NewMediaServicesClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mediaservicesMediaServicesClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MediaservicesMediaservicesClient = &mediaservicesMediaServicesClient

		monitoringMonitoringClient, err := monitoring.NewMonitoringClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		monitoringMonitoringClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MonitoringMonitoringClient = &monitoringMonitoringClient

		mysqlChannelsClient, err := mysql.NewChannelsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mysqlChannelsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MysqlChannelsClient = &mysqlChannelsClient

		mysqlDbBackupsClient, err := mysql.NewDbBackupsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mysqlDbBackupsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MysqlDbbackupsClient = &mysqlDbBackupsClient

		mysqlDbSystemClient, err := mysql.NewDbSystemClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mysqlDbSystemClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MysqlDbsystemClient = &mysqlDbSystemClient

		mysqlMysqlaasClient, err := mysql.NewMysqlaasClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mysqlMysqlaasClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MysqlMysqlaasClient = &mysqlMysqlaasClient

		mysqlReplicasClient, err := mysql.NewReplicasClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mysqlReplicasClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MysqlReplicasClient = &mysqlReplicasClient

		mysqlWorkRequestsClient, err := mysql.NewWorkRequestsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		mysqlWorkRequestsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].MysqlWorkrequestsClient = &mysqlWorkRequestsClient

		networkfirewallNetworkFirewallClient, err := networkfirewall.NewNetworkFirewallClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		networkfirewallNetworkFirewallClient.SetRegion(regionOcid)
		oracleClients[regionOcid].NetworkfirewallNetworkfirewallClient = &networkfirewallNetworkFirewallClient

		networkloadbalancerNetworkLoadBalancerClient, err := networkloadbalancer.NewNetworkLoadBalancerClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		networkloadbalancerNetworkLoadBalancerClient.SetRegion(regionOcid)
		oracleClients[regionOcid].NetworkloadbalancerNetworkloadbalancerClient = &networkloadbalancerNetworkLoadBalancerClient

		nosqlNosqlClient, err := nosql.NewNosqlClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		nosqlNosqlClient.SetRegion(regionOcid)
		oracleClients[regionOcid].NosqlNosqlClient = &nosqlNosqlClient

		objectstorageObjectStorageClient, err := objectstorage.NewObjectStorageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		objectstorageObjectStorageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ObjectstorageObjectstorageClient = &objectstorageObjectStorageClient

		oceOceInstanceClient, err := oce.NewOceInstanceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		oceOceInstanceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OceOceinstanceClient = &oceOceInstanceClient

		ocvpEsxiHostClient, err := ocvp.NewEsxiHostClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		ocvpEsxiHostClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OcvpEsxihostClient = &ocvpEsxiHostClient

		ocvpSddcClient, err := ocvp.NewSddcClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		ocvpSddcClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OcvpSddcClient = &ocvpSddcClient

		ocvpWorkRequestClient, err := ocvp.NewWorkRequestClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		ocvpWorkRequestClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OcvpWorkrequestClient = &ocvpWorkRequestClient

		odaManagementClient, err := oda.NewManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		odaManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OdaManagementClient = &odaManagementClient

		odaOdaClient, err := oda.NewOdaClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		odaOdaClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OdaOdaClient = &odaOdaClient

		odaOdapackageClient, err := oda.NewOdapackageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		odaOdapackageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OdaOdapackageClient = &odaOdapackageClient

		onesubscriptionBillingScheduleClient, err := onesubscription.NewBillingScheduleClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionBillingScheduleClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionBillingscheduleClient = &onesubscriptionBillingScheduleClient

		onesubscriptionCommitmentClient, err := onesubscription.NewCommitmentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionCommitmentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionCommitmentClient = &onesubscriptionCommitmentClient

		onesubscriptionComputedUsageClient, err := onesubscription.NewComputedUsageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionComputedUsageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionComputedusageClient = &onesubscriptionComputedUsageClient

		onesubscriptionInvoiceSummaryClient, err := onesubscription.NewInvoiceSummaryClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionInvoiceSummaryClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionInvoicesummaryClient = &onesubscriptionInvoiceSummaryClient

		onesubscriptionOrganizationSubscriptionClient, err := onesubscription.NewOrganizationSubscriptionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionOrganizationSubscriptionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionOrganizationsubscriptionClient = &onesubscriptionOrganizationSubscriptionClient

		onesubscriptionRatecardClient, err := onesubscription.NewRatecardClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionRatecardClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionRatecardClient = &onesubscriptionRatecardClient

		onesubscriptionSubscribedServiceClient, err := onesubscription.NewSubscribedServiceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionSubscribedServiceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionSubscribedserviceClient = &onesubscriptionSubscribedServiceClient

		onesubscriptionSubscriptionClient, err := onesubscription.NewSubscriptionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onesubscriptionSubscriptionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnesubscriptionSubscriptionClient = &onesubscriptionSubscriptionClient

		onsNotificationControlPlaneClient, err := ons.NewNotificationControlPlaneClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onsNotificationControlPlaneClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnsNotificationcontrolplaneClient = &onsNotificationControlPlaneClient

		onsNotificationDataPlaneClient, err := ons.NewNotificationDataPlaneClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		onsNotificationDataPlaneClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OnsNotificationdataplaneClient = &onsNotificationDataPlaneClient

		opaOpaInstanceClient, err := opa.NewOpaInstanceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		opaOpaInstanceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OpaOpainstanceClient = &opaOpaInstanceClient

		opensearchOpensearchClusterBackupClient, err := opensearch.NewOpensearchClusterBackupClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		opensearchOpensearchClusterBackupClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OpensearchOpensearchclusterbackupClient = &opensearchOpensearchClusterBackupClient

		opensearchOpensearchClusterClient, err := opensearch.NewOpensearchClusterClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		opensearchOpensearchClusterClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OpensearchOpensearchclusterClient = &opensearchOpensearchClusterClient

		operatoraccesscontrolAccessRequestsClient, err := operatoraccesscontrol.NewAccessRequestsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		operatoraccesscontrolAccessRequestsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OperatoraccesscontrolAccessrequestsClient = &operatoraccesscontrolAccessRequestsClient

		operatoraccesscontrolOperatorActionsClient, err := operatoraccesscontrol.NewOperatorActionsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		operatoraccesscontrolOperatorActionsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OperatoraccesscontrolOperatoractionsClient = &operatoraccesscontrolOperatorActionsClient

		operatoraccesscontrolOperatorControlAssignmentClient, err := operatoraccesscontrol.NewOperatorControlAssignmentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		operatoraccesscontrolOperatorControlAssignmentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OperatoraccesscontrolOperatorcontrolassignmentClient = &operatoraccesscontrolOperatorControlAssignmentClient

		operatoraccesscontrolOperatorControlClient, err := operatoraccesscontrol.NewOperatorControlClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		operatoraccesscontrolOperatorControlClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OperatoraccesscontrolOperatorcontrolClient = &operatoraccesscontrolOperatorControlClient

		opsiOperationsInsightsClient, err := opsi.NewOperationsInsightsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		opsiOperationsInsightsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OpsiOperationsinsightsClient = &opsiOperationsInsightsClient

		optimizerOptimizerClient, err := optimizer.NewOptimizerClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		optimizerOptimizerClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OptimizerOptimizerClient = &optimizerOptimizerClient

		osmanagementEventClient, err := osmanagement.NewEventClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osmanagementEventClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsmanagementEventClient = &osmanagementEventClient

		osmanagementOsManagementClient, err := osmanagement.NewOsManagementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osmanagementOsManagementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsmanagementOsmanagementClient = &osmanagementOsManagementClient

		ospgatewayInvoiceServiceClient, err := ospgateway.NewInvoiceServiceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		ospgatewayInvoiceServiceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OspgatewayInvoiceserviceClient = &ospgatewayInvoiceServiceClient

		ospgatewaySubscriptionServiceClient, err := ospgateway.NewSubscriptionServiceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		ospgatewaySubscriptionServiceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OspgatewaySubscriptionserviceClient = &ospgatewaySubscriptionServiceClient

		osubbillingscheduleBillingScheduleClient, err := osubbillingschedule.NewBillingScheduleClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osubbillingscheduleBillingScheduleClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsubbillingscheduleBillingscheduleClient = &osubbillingscheduleBillingScheduleClient

		osuborganizationsubscriptionOrganizationSubscriptionClient, err := osuborganizationsubscription.NewOrganizationSubscriptionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osuborganizationsubscriptionOrganizationSubscriptionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsuborganizationsubscriptionOrganizationsubscriptionClient = &osuborganizationsubscriptionOrganizationSubscriptionClient

		osubsubscriptionCommitmentClient, err := osubsubscription.NewCommitmentClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osubsubscriptionCommitmentClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsubsubscriptionCommitmentClient = &osubsubscriptionCommitmentClient

		osubsubscriptionRatecardClient, err := osubsubscription.NewRatecardClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osubsubscriptionRatecardClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsubsubscriptionRatecardClient = &osubsubscriptionRatecardClient

		osubsubscriptionSubscriptionClient, err := osubsubscription.NewSubscriptionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osubsubscriptionSubscriptionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsubsubscriptionSubscriptionClient = &osubsubscriptionSubscriptionClient

		osubusageComputedUsageClient, err := osubusage.NewComputedUsageClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		osubusageComputedUsageClient.SetRegion(regionOcid)
		oracleClients[regionOcid].OsubusageComputedusageClient = &osubusageComputedUsageClient

		queueQueueAdminClient, err := queue.NewQueueAdminClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		queueQueueAdminClient.SetRegion(regionOcid)
		oracleClients[regionOcid].QueueQueueadminClient = &queueQueueAdminClient

		resourcemanagerResourceManagerClient, err := resourcemanager.NewResourceManagerClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		resourcemanagerResourceManagerClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ResourcemanagerResourcemanagerClient = &resourcemanagerResourceManagerClient

		resourcesearchResourceSearchClient, err := resourcesearch.NewResourceSearchClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		resourcesearchResourceSearchClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ResourcesearchResourcesearchClient = &resourcesearchResourceSearchClient

		roverRoverClusterClient, err := rover.NewRoverClusterClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		roverRoverClusterClient.SetRegion(regionOcid)
		oracleClients[regionOcid].RoverRoverclusterClient = &roverRoverClusterClient

		roverRoverEntitlementClient, err := rover.NewRoverEntitlementClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		roverRoverEntitlementClient.SetRegion(regionOcid)
		oracleClients[regionOcid].RoverRoverentitlementClient = &roverRoverEntitlementClient

		roverRoverNodeClient, err := rover.NewRoverNodeClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		roverRoverNodeClient.SetRegion(regionOcid)
		oracleClients[regionOcid].RoverRovernodeClient = &roverRoverNodeClient

		roverShapeClient, err := rover.NewShapeClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		roverShapeClient.SetRegion(regionOcid)
		oracleClients[regionOcid].RoverShapeClient = &roverShapeClient

		schServiceConnectorClient, err := sch.NewServiceConnectorClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		schServiceConnectorClient.SetRegion(regionOcid)
		oracleClients[regionOcid].SchServiceconnectorClient = &schServiceConnectorClient

		secretsSecretsClient, err := secrets.NewSecretsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		secretsSecretsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].SecretsSecretsClient = &secretsSecretsClient

		servicecatalogServiceCatalogClient, err := servicecatalog.NewServiceCatalogClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		servicecatalogServiceCatalogClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ServicecatalogServicecatalogClient = &servicecatalogServiceCatalogClient

		servicemanagerproxyServiceManagerProxyClient, err := servicemanagerproxy.NewServiceManagerProxyClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		servicemanagerproxyServiceManagerProxyClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ServicemanagerproxyServicemanagerproxyClient = &servicemanagerproxyServiceManagerProxyClient

		servicemeshServiceMeshClient, err := servicemesh.NewServiceMeshClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		servicemeshServiceMeshClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ServicemeshServicemeshClient = &servicemeshServiceMeshClient

		stackmonitoringStackMonitoringClient, err := stackmonitoring.NewStackMonitoringClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		stackmonitoringStackMonitoringClient.SetRegion(regionOcid)
		oracleClients[regionOcid].StackmonitoringStackmonitoringClient = &stackmonitoringStackMonitoringClient

		streamingStreamAdminClient, err := streaming.NewStreamAdminClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		streamingStreamAdminClient.SetRegion(regionOcid)
		oracleClients[regionOcid].StreamingStreamadminClient = &streamingStreamAdminClient

		tenantmanagercontrolplaneDomainClient, err := tenantmanagercontrolplane.NewDomainClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneDomainClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneDomainClient = &tenantmanagercontrolplaneDomainClient

		tenantmanagercontrolplaneDomainGovernanceClient, err := tenantmanagercontrolplane.NewDomainGovernanceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneDomainGovernanceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneDomaingovernanceClient = &tenantmanagercontrolplaneDomainGovernanceClient

		tenantmanagercontrolplaneLinkClient, err := tenantmanagercontrolplane.NewLinkClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneLinkClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneLinkClient = &tenantmanagercontrolplaneLinkClient

		tenantmanagercontrolplaneOrganizationClient, err := tenantmanagercontrolplane.NewOrganizationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneOrganizationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneOrganizationClient = &tenantmanagercontrolplaneOrganizationClient

		tenantmanagercontrolplaneRecipientInvitationClient, err := tenantmanagercontrolplane.NewRecipientInvitationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneRecipientInvitationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneRecipientinvitationClient = &tenantmanagercontrolplaneRecipientInvitationClient

		tenantmanagercontrolplaneSenderInvitationClient, err := tenantmanagercontrolplane.NewSenderInvitationClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneSenderInvitationClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneSenderinvitationClient = &tenantmanagercontrolplaneSenderInvitationClient

		tenantmanagercontrolplaneSubscriptionClient, err := tenantmanagercontrolplane.NewSubscriptionClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneSubscriptionClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneSubscriptionClient = &tenantmanagercontrolplaneSubscriptionClient

		tenantmanagercontrolplaneWorkRequestClient, err := tenantmanagercontrolplane.NewWorkRequestClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		tenantmanagercontrolplaneWorkRequestClient.SetRegion(regionOcid)
		oracleClients[regionOcid].TenantmanagercontrolplaneWorkrequestClient = &tenantmanagercontrolplaneWorkRequestClient

		threatintelligenceThreatintelClient, err := threatintelligence.NewThreatintelClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		threatintelligenceThreatintelClient.SetRegion(regionOcid)
		oracleClients[regionOcid].ThreatintelligenceThreatintelClient = &threatintelligenceThreatintelClient

		usageRewardsClient, err := usage.NewRewardsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		usageRewardsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].UsageRewardsClient = &usageRewardsClient

		usageapiUsageapiClient, err := usageapi.NewUsageapiClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		usageapiUsageapiClient.SetRegion(regionOcid)
		oracleClients[regionOcid].UsageapiUsageapiClient = &usageapiUsageapiClient

		vaultVaultsClient, err := vault.NewVaultsClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		vaultVaultsClient.SetRegion(regionOcid)
		oracleClients[regionOcid].VaultVaultsClient = &vaultVaultsClient

		visualbuilderVbInstanceClient, err := visualbuilder.NewVbInstanceClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		visualbuilderVbInstanceClient.SetRegion(regionOcid)
		oracleClients[regionOcid].VisualbuilderVbinstanceClient = &visualbuilderVbInstanceClient

		vnmonitoringVnMonitoringClient, err := vnmonitoring.NewVnMonitoringClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		vnmonitoringVnMonitoringClient.SetRegion(regionOcid)
		oracleClients[regionOcid].VnmonitoringVnmonitoringClient = &vnmonitoringVnMonitoringClient

		vulnerabilityscanningVulnerabilityScanningClient, err := vulnerabilityscanning.NewVulnerabilityScanningClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		vulnerabilityscanningVulnerabilityScanningClient.SetRegion(regionOcid)
		oracleClients[regionOcid].VulnerabilityscanningVulnerabilityscanningClient = &vulnerabilityscanningVulnerabilityScanningClient

		waaWaaClient, err := waa.NewWaaClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		waaWaaClient.SetRegion(regionOcid)
		oracleClients[regionOcid].WaaWaaClient = &waaWaaClient

		waaWorkRequestClient, err := waa.NewWorkRequestClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		waaWorkRequestClient.SetRegion(regionOcid)
		oracleClients[regionOcid].WaaWorkrequestClient = &waaWorkRequestClient

		waasRedirectClient, err := waas.NewRedirectClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		waasRedirectClient.SetRegion(regionOcid)
		oracleClients[regionOcid].WaasRedirectClient = &waasRedirectClient

		waasWaasClient, err := waas.NewWaasClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		waasWaasClient.SetRegion(regionOcid)
		oracleClients[regionOcid].WaasWaasClient = &waasWaasClient

		wafWafClient, err := waf.NewWafClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		wafWafClient.SetRegion(regionOcid)
		oracleClients[regionOcid].WafWafClient = &wafWafClient

		workrequestsWorkRequestClient, err := workrequests.NewWorkRequestClientWithConfigurationProvider(configProvider)
		if err != nil {
			return nil, err
		}
		workrequestsWorkRequestClient.SetRegion(regionOcid)
		oracleClients[regionOcid].WorkrequestsWorkrequestClient = &workrequestsWorkRequestClient
	}

	return oracleClients, nil
}
