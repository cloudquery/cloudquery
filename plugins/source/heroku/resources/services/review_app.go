// Code generated by codegen; DO NOT EDIT.

package services

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/heroku/client"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/pkg/errors"
)

func ReviewApps() *schema.Table {
	return &schema.Table{
		Name:      "heroku_review_apps",
		Resolver:  fetchReviewApps,
		Multiplex: client.NoMultiplex,
		Columns: []schema.Column{
			{
				Name:     "app",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("App"),
			},
			{
				Name:     "app_setup",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AppSetup"),
			},
			{
				Name:     "branch",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Branch"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "creator",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Creator"),
			},
			{
				Name:     "error_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ErrorStatus"),
			},
			{
				Name:     "fork_repo",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ForkRepo"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
			},
			{
				Name:     "message",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Message"),
			},
			{
				Name:     "pipeline",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Pipeline"),
			},
			{
				Name:     "pr_number",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PrNumber"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "wait_for_ci",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("WaitForCi"),
			},
		},
	}
}

func fetchReviewApps(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	items, err := c.Heroku.PipelineList(ctx, nil)
	if err != nil {
		return errors.WithStack(err)
	}

	for _, it := range items {
		v, err := c.Heroku.ReviewAppList(ctx, it.ID, nil)
		if err != nil {
			return errors.WithStack(err)
		}
		res <- v
	}
	return nil
}
