// Code generated by codegen; DO NOT EDIT.

package services

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/heroku/client"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/pkg/errors"
)

func Regions() *schema.Table {
	return &schema.Table{
		Name:      "heroku_regions",
		Resolver:  fetchRegions,
		Multiplex: client.NoMultiplex,
		Columns: []schema.Column{
			{
				Name:     "country",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Country"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
			},
			{
				Name:     "locale",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Locale"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "private_capable",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PrivateCapable"),
			},
			{
				Name:     "provider",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Provider"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
		},
	}
}

func fetchRegions(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	v, err := c.Heroku.RegionList(ctx, nil)
	if err != nil {
		return errors.WithStack(err)
	}
	res <- v
	return nil
}
