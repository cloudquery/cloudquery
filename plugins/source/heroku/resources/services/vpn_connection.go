// Code generated by codegen; DO NOT EDIT.

package services

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/heroku/client"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/pkg/errors"
)

func VPNConnections() *schema.Table {
	return &schema.Table{
		Name:      "heroku_vpn_connections",
		Resolver:  fetchVPNConnections,
		Multiplex: client.NoMultiplex,
		Columns: []schema.Column{
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
			},
			{
				Name:     "ike_version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("IKEVersion"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "public_ip",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PublicIP"),
			},
			{
				Name:     "routable_cidrs",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("RoutableCidrs"),
			},
			{
				Name:     "space_cidr_block",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SpaceCIDRBlock"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "status_message",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StatusMessage"),
			},
			{
				Name:     "tunnels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tunnels"),
			},
		},
	}
}

func fetchVPNConnections(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	items, err := c.Heroku.SpaceList(ctx, nil)
	if err != nil {
		return errors.WithStack(err)
	}

	for _, it := range items {
		v, err := c.Heroku.VPNConnectionList(ctx, it.ID, nil)
		if err != nil {
			return errors.WithStack(err)
		}
		res <- v
	}
	return nil
}
