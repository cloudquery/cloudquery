// Code generated by codegen; DO NOT EDIT.

package services

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/cloudquery/plugins/source/heroku/client"
	"github.com/pkg/errors"
	heroku "github.com/heroku/heroku-go/v5"
)

func {{.HerokuStructName | Pluralize }}() *schema.Table {
    return &schema.Table{{template "table.go.tpl" .Table}}
}


func fetch{{.HerokuStructName | Pluralize }}(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- any) error {
	c := meta.(*client.Client)
	nextRange := &heroku.ListRange{
	    Field: "id",
        Max:   1000,
    }
    items := make([]heroku.{{.HerokuPrimaryStructName}}, 0, 10)
	// Roundtripper middleware in client/pagination.go
	// sets the nextRange value after each request
	for nextRange.Max != 0 {
		ctxWithRange := context.WithValue(ctx, "nextRange", nextRange)
        v, err := c.Heroku.{{.HerokuPrimaryStructName}}List(ctxWithRange, nextRange)
        if err != nil {
            return errors.WithStack(err)
        }
        items = append(items, v...)
    }

	for _, it := range items {
	    nextRange = &heroku.ListRange{
       	    Field: "id",
            Max:   1000,
        }
        // Roundtripper middleware in client/pagination.go
        // sets the nextRange value after each request
        for nextRange.Max != 0 {
            ctxWithRange := context.WithValue(ctx, "nextRange", nextRange)
            v, err := c.Heroku.{{.HerokuStructName}}List(ctxWithRange, it.ID{{if not .SkipListParams}}, nextRange{{end}})
            if err != nil {
                return errors.WithStack(err)
            }
            res <- v
        }
	}
	return nil
}
