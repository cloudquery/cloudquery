-- WITH safe_dbs AS (
--     SELECT s.sql_database_id
--     FROM azure_sql_database_vulnerability_assessment_scans s
--              JOIN
--          (
--              SELECT _cq_id, MAX(end_time) AS max_dt -- TODO FIXME (end_time type is JSON)
--              FROM azure_sql_database_vulnerability_assessment_scans
--              GROUP BY _cq_id
--          ) t ON s._cq_id = t._cq_id AND s.end_time = t.max_dt
--     WHERE s.number_of_failed_security_checks = 0)
-- insert into azure_policy_results
-- SELECT
--   :'execution_time',
--   :'framework',
--   :'check_id',
--   'SQL databases should have vulnerability findings resolved',
--   subscription_id,
--   id,
--   case
--     when id IS NULL
--       then 'fail' else 'pass'
--   end
-- FROM azure_sql_databases d
--          LEFT JOIN safe_dbs sd ON d._cq_id = sd.sql_database_id;