WITH safe_dbs AS (
    SELECT s.database_cq_id
    FROM azure_sql_database_db_vulnerability_assessment_scans s
             JOIN
         (
             SELECT cq_id, MAX(end_time) AS max_dt
             FROM azure_sql_database_db_vulnerability_assessment_scans
             GROUP BY cq_id
         ) t ON s.cq_id = t.cq_id AND s.end_time = t.max_dt
    WHERE s.number_of_failed_security_checks = 0)
insert into azure_policy_results
SELECT
  :'execution_time',
  :'framework',
  :'check_id',
  'SQL databases should have vulnerability findings resolved',
  -- TODO maybe join with another table to get subscription_id
  id,
  id,
  case
    when id IS NULL
      then 'fail' else 'pass'
  end
FROM azure_sql_databases d
         LEFT JOIN safe_dbs sd ON d.cq_id = sd.database_cq_id;