WITH safe_dbs AS (
    SELECT s.id as sql_database_id
    FROM azure_sql_server_database_vulnerability_assessment_scans s
             JOIN
         (
             SELECT _cq_id, MAX((properties ->> 'endTime')::timestamp) AS max_dt
             FROM azure_sql_server_database_vulnerability_assessment_scans
             GROUP BY _cq_id
         ) t ON s._cq_id = t._cq_id AND (properties ->> 'endTime')::timestamp = t.max_dt
    WHERE (s.properties ->> 'numberOfFailedSecurityChecks')::int = 0)
insert into azure_policy_results
SELECT
  :'execution_time' as execution_time,
  :'framework' as framework,
  :'check_id' as check_id,
  'SQL databases should have vulnerability findings resolved' as title,
  s.subscription_id,
  d.id,
  case
    when d.id IS NULL
      then 'fail' else 'pass'
  end
FROM azure_sql_servers s left join azure_sql_server_databases d on s._cq_id = d._cq_parent_id
         LEFT JOIN safe_dbs sd ON d.id = sd.sql_database_id;