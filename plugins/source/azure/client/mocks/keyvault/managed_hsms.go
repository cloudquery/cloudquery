// Code generated by MockGen. DO NOT EDIT.
// Source: managed_hsms.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armkeyvault "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/keyvault/armkeyvault"
	keyvault "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/keyvault"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedHsmsClient is a mock of ManagedHsmsClient interface.
type MockManagedHsmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedHsmsClientMockRecorder
}

// MockManagedHsmsClientMockRecorder is the mock recorder for MockManagedHsmsClient.
type MockManagedHsmsClientMockRecorder struct {
	mock *MockManagedHsmsClient
}

// NewMockManagedHsmsClient creates a new mock instance.
func NewMockManagedHsmsClient(ctrl *gomock.Controller) *MockManagedHsmsClient {
	mock := &MockManagedHsmsClient{ctrl: ctrl}
	mock.recorder = &MockManagedHsmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedHsmsClient) EXPECT() *MockManagedHsmsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockManagedHsmsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armkeyvault.ManagedHsmsClientGetOptions) (armkeyvault.ManagedHsmsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armkeyvault.ManagedHsmsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagedHsmsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagedHsmsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetDeleted mocks base method.
func (m *MockManagedHsmsClient) GetDeleted(arg0 context.Context, arg1, arg2 string, arg3 *armkeyvault.ManagedHsmsClientGetDeletedOptions) (armkeyvault.ManagedHsmsClientGetDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armkeyvault.ManagedHsmsClientGetDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted.
func (mr *MockManagedHsmsClientMockRecorder) GetDeleted(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockManagedHsmsClient)(nil).GetDeleted), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockManagedHsmsClient) NewListByResourceGroupPager(arg0 string, arg1 *armkeyvault.ManagedHsmsClientListByResourceGroupOptions) *keyvault.RuntimePagerArmkeyvaultManagedHsmsClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultManagedHsmsClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockManagedHsmsClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockManagedHsmsClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListBySubscriptionPager mocks base method.
func (m *MockManagedHsmsClient) NewListBySubscriptionPager(arg0 *armkeyvault.ManagedHsmsClientListBySubscriptionOptions) *keyvault.RuntimePagerArmkeyvaultManagedHsmsClientListBySubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBySubscriptionPager", arg0)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultManagedHsmsClientListBySubscriptionResponse)
	return ret0
}

// NewListBySubscriptionPager indicates an expected call of NewListBySubscriptionPager.
func (mr *MockManagedHsmsClientMockRecorder) NewListBySubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBySubscriptionPager", reflect.TypeOf((*MockManagedHsmsClient)(nil).NewListBySubscriptionPager), arg0)
}

// NewListDeletedPager mocks base method.
func (m *MockManagedHsmsClient) NewListDeletedPager(arg0 *armkeyvault.ManagedHsmsClientListDeletedOptions) *keyvault.RuntimePagerArmkeyvaultManagedHsmsClientListDeletedResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDeletedPager", arg0)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultManagedHsmsClientListDeletedResponse)
	return ret0
}

// NewListDeletedPager indicates an expected call of NewListDeletedPager.
func (mr *MockManagedHsmsClientMockRecorder) NewListDeletedPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDeletedPager", reflect.TypeOf((*MockManagedHsmsClient)(nil).NewListDeletedPager), arg0)
}
