// Code generated by MockGen. DO NOT EDIT.
// Source: keys.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armkeyvault "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/keyvault/armkeyvault"
	keyvault "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/keyvault"
	gomock "github.com/golang/mock/gomock"
)

// MockKeysClient is a mock of KeysClient interface.
type MockKeysClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeysClientMockRecorder
}

// MockKeysClientMockRecorder is the mock recorder for MockKeysClient.
type MockKeysClientMockRecorder struct {
	mock *MockKeysClient
}

// NewMockKeysClient creates a new mock instance.
func NewMockKeysClient(ctrl *gomock.Controller) *MockKeysClient {
	mock := &MockKeysClient{ctrl: ctrl}
	mock.recorder = &MockKeysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysClient) EXPECT() *MockKeysClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeysClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armkeyvault.KeysClientGetOptions) (armkeyvault.KeysClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armkeyvault.KeysClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeysClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeysClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// GetVersion mocks base method.
func (m *MockKeysClient) GetVersion(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armkeyvault.KeysClientGetVersionOptions) (armkeyvault.KeysClientGetVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armkeyvault.KeysClientGetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockKeysClientMockRecorder) GetVersion(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockKeysClient)(nil).GetVersion), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListPager mocks base method.
func (m *MockKeysClient) NewListPager(arg0, arg1 string, arg2 *armkeyvault.KeysClientListOptions) *keyvault.RuntimePagerArmkeyvaultKeysClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultKeysClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockKeysClientMockRecorder) NewListPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockKeysClient)(nil).NewListPager), arg0, arg1, arg2)
}

// NewListVersionsPager mocks base method.
func (m *MockKeysClient) NewListVersionsPager(arg0, arg1, arg2 string, arg3 *armkeyvault.KeysClientListVersionsOptions) *keyvault.RuntimePagerArmkeyvaultKeysClientListVersionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVersionsPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultKeysClientListVersionsResponse)
	return ret0
}

// NewListVersionsPager indicates an expected call of NewListVersionsPager.
func (mr *MockKeysClientMockRecorder) NewListVersionsPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVersionsPager", reflect.TypeOf((*MockKeysClient)(nil).NewListVersionsPager), arg0, arg1, arg2, arg3)
}
