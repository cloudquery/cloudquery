// Code generated by MockGen. DO NOT EDIT.
// Source: vaults.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armkeyvault "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/keyvault/armkeyvault"
	keyvault "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/keyvault"
	gomock "github.com/golang/mock/gomock"
)

// MockVaultsClient is a mock of VaultsClient interface.
type MockVaultsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultsClientMockRecorder
}

// MockVaultsClientMockRecorder is the mock recorder for MockVaultsClient.
type MockVaultsClientMockRecorder struct {
	mock *MockVaultsClient
}

// NewMockVaultsClient creates a new mock instance.
func NewMockVaultsClient(ctrl *gomock.Controller) *MockVaultsClient {
	mock := &MockVaultsClient{ctrl: ctrl}
	mock.recorder = &MockVaultsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultsClient) EXPECT() *MockVaultsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVaultsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armkeyvault.VaultsClientGetOptions) (armkeyvault.VaultsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armkeyvault.VaultsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVaultsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVaultsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetDeleted mocks base method.
func (m *MockVaultsClient) GetDeleted(arg0 context.Context, arg1, arg2 string, arg3 *armkeyvault.VaultsClientGetDeletedOptions) (armkeyvault.VaultsClientGetDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armkeyvault.VaultsClientGetDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted.
func (mr *MockVaultsClientMockRecorder) GetDeleted(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockVaultsClient)(nil).GetDeleted), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockVaultsClient) NewListByResourceGroupPager(arg0 string, arg1 *armkeyvault.VaultsClientListByResourceGroupOptions) *keyvault.RuntimePagerArmkeyvaultVaultsClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultVaultsClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockVaultsClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockVaultsClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListBySubscriptionPager mocks base method.
func (m *MockVaultsClient) NewListBySubscriptionPager(arg0 *armkeyvault.VaultsClientListBySubscriptionOptions) *keyvault.RuntimePagerArmkeyvaultVaultsClientListBySubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBySubscriptionPager", arg0)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultVaultsClientListBySubscriptionResponse)
	return ret0
}

// NewListBySubscriptionPager indicates an expected call of NewListBySubscriptionPager.
func (mr *MockVaultsClientMockRecorder) NewListBySubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBySubscriptionPager", reflect.TypeOf((*MockVaultsClient)(nil).NewListBySubscriptionPager), arg0)
}

// NewListDeletedPager mocks base method.
func (m *MockVaultsClient) NewListDeletedPager(arg0 *armkeyvault.VaultsClientListDeletedOptions) *keyvault.RuntimePagerArmkeyvaultVaultsClientListDeletedResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDeletedPager", arg0)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultVaultsClientListDeletedResponse)
	return ret0
}

// NewListDeletedPager indicates an expected call of NewListDeletedPager.
func (mr *MockVaultsClientMockRecorder) NewListDeletedPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDeletedPager", reflect.TypeOf((*MockVaultsClient)(nil).NewListDeletedPager), arg0)
}

// NewListPager mocks base method.
func (m *MockVaultsClient) NewListPager(arg0 *armkeyvault.VaultsClientListOptions) *keyvault.RuntimePagerArmkeyvaultVaultsClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*keyvault.RuntimePagerArmkeyvaultVaultsClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockVaultsClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockVaultsClient)(nil).NewListPager), arg0)
}
