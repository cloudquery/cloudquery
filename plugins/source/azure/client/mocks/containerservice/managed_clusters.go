// Code generated by MockGen. DO NOT EDIT.
// Source: managed_clusters.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armcontainerservice "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v2"
	containerservice "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/containerservice"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedClustersClient is a mock of ManagedClustersClient interface.
type MockManagedClustersClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedClustersClientMockRecorder
}

// MockManagedClustersClientMockRecorder is the mock recorder for MockManagedClustersClient.
type MockManagedClustersClientMockRecorder struct {
	mock *MockManagedClustersClient
}

// NewMockManagedClustersClient creates a new mock instance.
func NewMockManagedClustersClient(ctrl *gomock.Controller) *MockManagedClustersClient {
	mock := &MockManagedClustersClient{ctrl: ctrl}
	mock.recorder = &MockManagedClustersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedClustersClient) EXPECT() *MockManagedClustersClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockManagedClustersClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armcontainerservice.ManagedClustersClientGetOptions) (armcontainerservice.ManagedClustersClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagedClustersClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagedClustersClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetAccessProfile mocks base method.
func (m *MockManagedClustersClient) GetAccessProfile(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcontainerservice.ManagedClustersClientGetAccessProfileOptions) (armcontainerservice.ManagedClustersClientGetAccessProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessProfile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientGetAccessProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessProfile indicates an expected call of GetAccessProfile.
func (mr *MockManagedClustersClientMockRecorder) GetAccessProfile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessProfile", reflect.TypeOf((*MockManagedClustersClient)(nil).GetAccessProfile), arg0, arg1, arg2, arg3, arg4)
}

// GetCommandResult mocks base method.
func (m *MockManagedClustersClient) GetCommandResult(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcontainerservice.ManagedClustersClientGetCommandResultOptions) (armcontainerservice.ManagedClustersClientGetCommandResultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandResult", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientGetCommandResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandResult indicates an expected call of GetCommandResult.
func (mr *MockManagedClustersClientMockRecorder) GetCommandResult(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandResult", reflect.TypeOf((*MockManagedClustersClient)(nil).GetCommandResult), arg0, arg1, arg2, arg3, arg4)
}

// GetOSOptions mocks base method.
func (m *MockManagedClustersClient) GetOSOptions(arg0 context.Context, arg1 string, arg2 *armcontainerservice.ManagedClustersClientGetOSOptionsOptions) (armcontainerservice.ManagedClustersClientGetOSOptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSOptions", arg0, arg1, arg2)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientGetOSOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSOptions indicates an expected call of GetOSOptions.
func (mr *MockManagedClustersClientMockRecorder) GetOSOptions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSOptions", reflect.TypeOf((*MockManagedClustersClient)(nil).GetOSOptions), arg0, arg1, arg2)
}

// GetUpgradeProfile mocks base method.
func (m *MockManagedClustersClient) GetUpgradeProfile(arg0 context.Context, arg1, arg2 string, arg3 *armcontainerservice.ManagedClustersClientGetUpgradeProfileOptions) (armcontainerservice.ManagedClustersClientGetUpgradeProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeProfile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientGetUpgradeProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeProfile indicates an expected call of GetUpgradeProfile.
func (mr *MockManagedClustersClientMockRecorder) GetUpgradeProfile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeProfile", reflect.TypeOf((*MockManagedClustersClient)(nil).GetUpgradeProfile), arg0, arg1, arg2, arg3)
}

// ListClusterAdminCredentials mocks base method.
func (m *MockManagedClustersClient) ListClusterAdminCredentials(arg0 context.Context, arg1, arg2 string, arg3 *armcontainerservice.ManagedClustersClientListClusterAdminCredentialsOptions) (armcontainerservice.ManagedClustersClientListClusterAdminCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterAdminCredentials", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientListClusterAdminCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterAdminCredentials indicates an expected call of ListClusterAdminCredentials.
func (mr *MockManagedClustersClientMockRecorder) ListClusterAdminCredentials(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterAdminCredentials", reflect.TypeOf((*MockManagedClustersClient)(nil).ListClusterAdminCredentials), arg0, arg1, arg2, arg3)
}

// ListClusterMonitoringUserCredentials mocks base method.
func (m *MockManagedClustersClient) ListClusterMonitoringUserCredentials(arg0 context.Context, arg1, arg2 string, arg3 *armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsOptions) (armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterMonitoringUserCredentials", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientListClusterMonitoringUserCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterMonitoringUserCredentials indicates an expected call of ListClusterMonitoringUserCredentials.
func (mr *MockManagedClustersClientMockRecorder) ListClusterMonitoringUserCredentials(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterMonitoringUserCredentials", reflect.TypeOf((*MockManagedClustersClient)(nil).ListClusterMonitoringUserCredentials), arg0, arg1, arg2, arg3)
}

// ListClusterUserCredentials mocks base method.
func (m *MockManagedClustersClient) ListClusterUserCredentials(arg0 context.Context, arg1, arg2 string, arg3 *armcontainerservice.ManagedClustersClientListClusterUserCredentialsOptions) (armcontainerservice.ManagedClustersClientListClusterUserCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterUserCredentials", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcontainerservice.ManagedClustersClientListClusterUserCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterUserCredentials indicates an expected call of ListClusterUserCredentials.
func (mr *MockManagedClustersClientMockRecorder) ListClusterUserCredentials(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterUserCredentials", reflect.TypeOf((*MockManagedClustersClient)(nil).ListClusterUserCredentials), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockManagedClustersClient) NewListByResourceGroupPager(arg0 string, arg1 *armcontainerservice.ManagedClustersClientListByResourceGroupOptions) *containerservice.RuntimePagerArmcontainerserviceManagedClustersClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*containerservice.RuntimePagerArmcontainerserviceManagedClustersClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockManagedClustersClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockManagedClustersClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListOutboundNetworkDependenciesEndpointsPager mocks base method.
func (m *MockManagedClustersClient) NewListOutboundNetworkDependenciesEndpointsPager(arg0, arg1 string, arg2 *armcontainerservice.ManagedClustersClientListOutboundNetworkDependenciesEndpointsOptions) *containerservice.RuntimePagerArmcontainerserviceManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListOutboundNetworkDependenciesEndpointsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*containerservice.RuntimePagerArmcontainerserviceManagedClustersClientListOutboundNetworkDependenciesEndpointsResponse)
	return ret0
}

// NewListOutboundNetworkDependenciesEndpointsPager indicates an expected call of NewListOutboundNetworkDependenciesEndpointsPager.
func (mr *MockManagedClustersClientMockRecorder) NewListOutboundNetworkDependenciesEndpointsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListOutboundNetworkDependenciesEndpointsPager", reflect.TypeOf((*MockManagedClustersClient)(nil).NewListOutboundNetworkDependenciesEndpointsPager), arg0, arg1, arg2)
}

// NewListPager mocks base method.
func (m *MockManagedClustersClient) NewListPager(arg0 *armcontainerservice.ManagedClustersClientListOptions) *containerservice.RuntimePagerArmcontainerserviceManagedClustersClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*containerservice.RuntimePagerArmcontainerserviceManagedClustersClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockManagedClustersClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockManagedClustersClient)(nil).NewListPager), arg0)
}
