// Code generated by MockGen. DO NOT EDIT.
// Source: topics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armservicebus "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicebus/armservicebus/v2"
	servicebus "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/servicebus"
	gomock "github.com/golang/mock/gomock"
)

// MockTopicsClient is a mock of TopicsClient interface.
type MockTopicsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTopicsClientMockRecorder
}

// MockTopicsClientMockRecorder is the mock recorder for MockTopicsClient.
type MockTopicsClientMockRecorder struct {
	mock *MockTopicsClient
}

// NewMockTopicsClient creates a new mock instance.
func NewMockTopicsClient(ctrl *gomock.Controller) *MockTopicsClient {
	mock := &MockTopicsClient{ctrl: ctrl}
	mock.recorder = &MockTopicsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicsClient) EXPECT() *MockTopicsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTopicsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armservicebus.TopicsClientGetOptions) (armservicebus.TopicsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armservicebus.TopicsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTopicsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTopicsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// GetAuthorizationRule mocks base method.
func (m *MockTopicsClient) GetAuthorizationRule(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armservicebus.TopicsClientGetAuthorizationRuleOptions) (armservicebus.TopicsClientGetAuthorizationRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationRule", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armservicebus.TopicsClientGetAuthorizationRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationRule indicates an expected call of GetAuthorizationRule.
func (mr *MockTopicsClientMockRecorder) GetAuthorizationRule(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationRule", reflect.TypeOf((*MockTopicsClient)(nil).GetAuthorizationRule), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListKeys mocks base method.
func (m *MockTopicsClient) ListKeys(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armservicebus.TopicsClientListKeysOptions) (armservicebus.TopicsClientListKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armservicebus.TopicsClientListKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockTopicsClientMockRecorder) ListKeys(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockTopicsClient)(nil).ListKeys), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListAuthorizationRulesPager mocks base method.
func (m *MockTopicsClient) NewListAuthorizationRulesPager(arg0, arg1, arg2 string, arg3 *armservicebus.TopicsClientListAuthorizationRulesOptions) *servicebus.RuntimePagerArmservicebusTopicsClientListAuthorizationRulesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAuthorizationRulesPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*servicebus.RuntimePagerArmservicebusTopicsClientListAuthorizationRulesResponse)
	return ret0
}

// NewListAuthorizationRulesPager indicates an expected call of NewListAuthorizationRulesPager.
func (mr *MockTopicsClientMockRecorder) NewListAuthorizationRulesPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAuthorizationRulesPager", reflect.TypeOf((*MockTopicsClient)(nil).NewListAuthorizationRulesPager), arg0, arg1, arg2, arg3)
}

// NewListByNamespacePager mocks base method.
func (m *MockTopicsClient) NewListByNamespacePager(arg0, arg1 string, arg2 *armservicebus.TopicsClientListByNamespaceOptions) *servicebus.RuntimePagerArmservicebusTopicsClientListByNamespaceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByNamespacePager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*servicebus.RuntimePagerArmservicebusTopicsClientListByNamespaceResponse)
	return ret0
}

// NewListByNamespacePager indicates an expected call of NewListByNamespacePager.
func (mr *MockTopicsClientMockRecorder) NewListByNamespacePager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByNamespacePager", reflect.TypeOf((*MockTopicsClient)(nil).NewListByNamespacePager), arg0, arg1, arg2)
}
