// Code generated by MockGen. DO NOT EDIT.
// Source: namespaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armservicebus "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicebus/armservicebus/v2"
	servicebus "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/servicebus"
	gomock "github.com/golang/mock/gomock"
)

// MockNamespacesClient is a mock of NamespacesClient interface.
type MockNamespacesClient struct {
	ctrl     *gomock.Controller
	recorder *MockNamespacesClientMockRecorder
}

// MockNamespacesClientMockRecorder is the mock recorder for MockNamespacesClient.
type MockNamespacesClientMockRecorder struct {
	mock *MockNamespacesClient
}

// NewMockNamespacesClient creates a new mock instance.
func NewMockNamespacesClient(ctrl *gomock.Controller) *MockNamespacesClient {
	mock := &MockNamespacesClient{ctrl: ctrl}
	mock.recorder = &MockNamespacesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespacesClient) EXPECT() *MockNamespacesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockNamespacesClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armservicebus.NamespacesClientGetOptions) (armservicebus.NamespacesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armservicebus.NamespacesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespacesClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespacesClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetAuthorizationRule mocks base method.
func (m *MockNamespacesClient) GetAuthorizationRule(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armservicebus.NamespacesClientGetAuthorizationRuleOptions) (armservicebus.NamespacesClientGetAuthorizationRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationRule", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armservicebus.NamespacesClientGetAuthorizationRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationRule indicates an expected call of GetAuthorizationRule.
func (mr *MockNamespacesClientMockRecorder) GetAuthorizationRule(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationRule", reflect.TypeOf((*MockNamespacesClient)(nil).GetAuthorizationRule), arg0, arg1, arg2, arg3, arg4)
}

// GetNetworkRuleSet mocks base method.
func (m *MockNamespacesClient) GetNetworkRuleSet(arg0 context.Context, arg1, arg2 string, arg3 *armservicebus.NamespacesClientGetNetworkRuleSetOptions) (armservicebus.NamespacesClientGetNetworkRuleSetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRuleSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armservicebus.NamespacesClientGetNetworkRuleSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRuleSet indicates an expected call of GetNetworkRuleSet.
func (mr *MockNamespacesClientMockRecorder) GetNetworkRuleSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRuleSet", reflect.TypeOf((*MockNamespacesClient)(nil).GetNetworkRuleSet), arg0, arg1, arg2, arg3)
}

// ListKeys mocks base method.
func (m *MockNamespacesClient) ListKeys(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armservicebus.NamespacesClientListKeysOptions) (armservicebus.NamespacesClientListKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armservicebus.NamespacesClientListKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockNamespacesClientMockRecorder) ListKeys(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockNamespacesClient)(nil).ListKeys), arg0, arg1, arg2, arg3, arg4)
}

// NewListAuthorizationRulesPager mocks base method.
func (m *MockNamespacesClient) NewListAuthorizationRulesPager(arg0, arg1 string, arg2 *armservicebus.NamespacesClientListAuthorizationRulesOptions) *servicebus.RuntimePagerArmservicebusNamespacesClientListAuthorizationRulesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAuthorizationRulesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*servicebus.RuntimePagerArmservicebusNamespacesClientListAuthorizationRulesResponse)
	return ret0
}

// NewListAuthorizationRulesPager indicates an expected call of NewListAuthorizationRulesPager.
func (mr *MockNamespacesClientMockRecorder) NewListAuthorizationRulesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAuthorizationRulesPager", reflect.TypeOf((*MockNamespacesClient)(nil).NewListAuthorizationRulesPager), arg0, arg1, arg2)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockNamespacesClient) NewListByResourceGroupPager(arg0 string, arg1 *armservicebus.NamespacesClientListByResourceGroupOptions) *servicebus.RuntimePagerArmservicebusNamespacesClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*servicebus.RuntimePagerArmservicebusNamespacesClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockNamespacesClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockNamespacesClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListNetworkRuleSetsPager mocks base method.
func (m *MockNamespacesClient) NewListNetworkRuleSetsPager(arg0, arg1 string, arg2 *armservicebus.NamespacesClientListNetworkRuleSetsOptions) *servicebus.RuntimePagerArmservicebusNamespacesClientListNetworkRuleSetsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListNetworkRuleSetsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*servicebus.RuntimePagerArmservicebusNamespacesClientListNetworkRuleSetsResponse)
	return ret0
}

// NewListNetworkRuleSetsPager indicates an expected call of NewListNetworkRuleSetsPager.
func (mr *MockNamespacesClientMockRecorder) NewListNetworkRuleSetsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListNetworkRuleSetsPager", reflect.TypeOf((*MockNamespacesClient)(nil).NewListNetworkRuleSetsPager), arg0, arg1, arg2)
}

// NewListPager mocks base method.
func (m *MockNamespacesClient) NewListPager(arg0 *armservicebus.NamespacesClientListOptions) *servicebus.RuntimePagerArmservicebusNamespacesClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*servicebus.RuntimePagerArmservicebusNamespacesClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockNamespacesClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockNamespacesClient)(nil).NewListPager), arg0)
}
