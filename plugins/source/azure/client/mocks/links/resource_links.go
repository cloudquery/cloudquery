// Code generated by MockGen. DO NOT EDIT.
// Source: resource_links.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armlinks "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armlinks"
	links "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/links"
	gomock "github.com/golang/mock/gomock"
)

// MockResourceLinksClient is a mock of ResourceLinksClient interface.
type MockResourceLinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceLinksClientMockRecorder
}

// MockResourceLinksClientMockRecorder is the mock recorder for MockResourceLinksClient.
type MockResourceLinksClientMockRecorder struct {
	mock *MockResourceLinksClient
}

// NewMockResourceLinksClient creates a new mock instance.
func NewMockResourceLinksClient(ctrl *gomock.Controller) *MockResourceLinksClient {
	mock := &MockResourceLinksClient{ctrl: ctrl}
	mock.recorder = &MockResourceLinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceLinksClient) EXPECT() *MockResourceLinksClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockResourceLinksClient) Get(arg0 context.Context, arg1 string, arg2 *armlinks.ResourceLinksClientGetOptions) (armlinks.ResourceLinksClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(armlinks.ResourceLinksClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceLinksClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceLinksClient)(nil).Get), arg0, arg1, arg2)
}

// NewListAtSourceScopePager mocks base method.
func (m *MockResourceLinksClient) NewListAtSourceScopePager(arg0 string, arg1 *armlinks.ResourceLinksClientListAtSourceScopeOptions) *links.RuntimePagerArmlinksResourceLinksClientListAtSourceScopeResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAtSourceScopePager", arg0, arg1)
	ret0, _ := ret[0].(*links.RuntimePagerArmlinksResourceLinksClientListAtSourceScopeResponse)
	return ret0
}

// NewListAtSourceScopePager indicates an expected call of NewListAtSourceScopePager.
func (mr *MockResourceLinksClientMockRecorder) NewListAtSourceScopePager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAtSourceScopePager", reflect.TypeOf((*MockResourceLinksClient)(nil).NewListAtSourceScopePager), arg0, arg1)
}

// NewListAtSubscriptionPager mocks base method.
func (m *MockResourceLinksClient) NewListAtSubscriptionPager(arg0 *armlinks.ResourceLinksClientListAtSubscriptionOptions) *links.RuntimePagerArmlinksResourceLinksClientListAtSubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAtSubscriptionPager", arg0)
	ret0, _ := ret[0].(*links.RuntimePagerArmlinksResourceLinksClientListAtSubscriptionResponse)
	return ret0
}

// NewListAtSubscriptionPager indicates an expected call of NewListAtSubscriptionPager.
func (mr *MockResourceLinksClientMockRecorder) NewListAtSubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAtSubscriptionPager", reflect.TypeOf((*MockResourceLinksClient)(nil).NewListAtSubscriptionPager), arg0)
}
