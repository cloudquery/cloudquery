// Code generated by MockGen. DO NOT EDIT.
// Source: virtual_machines.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	compute "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/compute"
	gomock "github.com/golang/mock/gomock"
)

// MockVirtualMachinesClient is a mock of VirtualMachinesClient interface.
type MockVirtualMachinesClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachinesClientMockRecorder
}

// MockVirtualMachinesClientMockRecorder is the mock recorder for MockVirtualMachinesClient.
type MockVirtualMachinesClientMockRecorder struct {
	mock *MockVirtualMachinesClient
}

// NewMockVirtualMachinesClient creates a new mock instance.
func NewMockVirtualMachinesClient(ctrl *gomock.Controller) *MockVirtualMachinesClient {
	mock := &MockVirtualMachinesClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachinesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachinesClient) EXPECT() *MockVirtualMachinesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualMachinesClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armcompute.VirtualMachinesClientGetOptions) (armcompute.VirtualMachinesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcompute.VirtualMachinesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachinesClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachinesClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// NewListAllPager mocks base method.
func (m *MockVirtualMachinesClient) NewListAllPager(arg0 *armcompute.VirtualMachinesClientListAllOptions) *compute.RuntimePagerArmcomputeVirtualMachinesClientListAllResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAllPager", arg0)
	ret0, _ := ret[0].(*compute.RuntimePagerArmcomputeVirtualMachinesClientListAllResponse)
	return ret0
}

// NewListAllPager indicates an expected call of NewListAllPager.
func (mr *MockVirtualMachinesClientMockRecorder) NewListAllPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAllPager", reflect.TypeOf((*MockVirtualMachinesClient)(nil).NewListAllPager), arg0)
}

// NewListAvailableSizesPager mocks base method.
func (m *MockVirtualMachinesClient) NewListAvailableSizesPager(arg0, arg1 string, arg2 *armcompute.VirtualMachinesClientListAvailableSizesOptions) *compute.RuntimePagerArmcomputeVirtualMachinesClientListAvailableSizesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAvailableSizesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*compute.RuntimePagerArmcomputeVirtualMachinesClientListAvailableSizesResponse)
	return ret0
}

// NewListAvailableSizesPager indicates an expected call of NewListAvailableSizesPager.
func (mr *MockVirtualMachinesClientMockRecorder) NewListAvailableSizesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAvailableSizesPager", reflect.TypeOf((*MockVirtualMachinesClient)(nil).NewListAvailableSizesPager), arg0, arg1, arg2)
}

// NewListByLocationPager mocks base method.
func (m *MockVirtualMachinesClient) NewListByLocationPager(arg0 string, arg1 *armcompute.VirtualMachinesClientListByLocationOptions) *compute.RuntimePagerArmcomputeVirtualMachinesClientListByLocationResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByLocationPager", arg0, arg1)
	ret0, _ := ret[0].(*compute.RuntimePagerArmcomputeVirtualMachinesClientListByLocationResponse)
	return ret0
}

// NewListByLocationPager indicates an expected call of NewListByLocationPager.
func (mr *MockVirtualMachinesClientMockRecorder) NewListByLocationPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByLocationPager", reflect.TypeOf((*MockVirtualMachinesClient)(nil).NewListByLocationPager), arg0, arg1)
}

// NewListPager mocks base method.
func (m *MockVirtualMachinesClient) NewListPager(arg0 string, arg1 *armcompute.VirtualMachinesClientListOptions) *compute.RuntimePagerArmcomputeVirtualMachinesClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0, arg1)
	ret0, _ := ret[0].(*compute.RuntimePagerArmcomputeVirtualMachinesClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockVirtualMachinesClientMockRecorder) NewListPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockVirtualMachinesClient)(nil).NewListPager), arg0, arg1)
}
