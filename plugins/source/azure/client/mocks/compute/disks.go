// Code generated by MockGen. DO NOT EDIT.
// Source: disks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	compute "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/compute"
	gomock "github.com/golang/mock/gomock"
)

// MockDisksClient is a mock of DisksClient interface.
type MockDisksClient struct {
	ctrl     *gomock.Controller
	recorder *MockDisksClientMockRecorder
}

// MockDisksClientMockRecorder is the mock recorder for MockDisksClient.
type MockDisksClientMockRecorder struct {
	mock *MockDisksClient
}

// NewMockDisksClient creates a new mock instance.
func NewMockDisksClient(ctrl *gomock.Controller) *MockDisksClient {
	mock := &MockDisksClient{ctrl: ctrl}
	mock.recorder = &MockDisksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksClient) EXPECT() *MockDisksClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDisksClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armcompute.DisksClientGetOptions) (armcompute.DisksClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armcompute.DisksClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDisksClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDisksClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockDisksClient) NewListByResourceGroupPager(arg0 string, arg1 *armcompute.DisksClientListByResourceGroupOptions) *compute.RuntimePagerArmcomputeDisksClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*compute.RuntimePagerArmcomputeDisksClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockDisksClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockDisksClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListPager mocks base method.
func (m *MockDisksClient) NewListPager(arg0 *armcompute.DisksClientListOptions) *compute.RuntimePagerArmcomputeDisksClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*compute.RuntimePagerArmcomputeDisksClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockDisksClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockDisksClient)(nil).NewListPager), arg0)
}
