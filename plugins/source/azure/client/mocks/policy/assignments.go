// Code generated by MockGen. DO NOT EDIT.
// Source: assignments.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armpolicy "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armpolicy"
	policy "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/policy"
	gomock "github.com/golang/mock/gomock"
)

// MockAssignmentsClient is a mock of AssignmentsClient interface.
type MockAssignmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssignmentsClientMockRecorder
}

// MockAssignmentsClientMockRecorder is the mock recorder for MockAssignmentsClient.
type MockAssignmentsClientMockRecorder struct {
	mock *MockAssignmentsClient
}

// NewMockAssignmentsClient creates a new mock instance.
func NewMockAssignmentsClient(ctrl *gomock.Controller) *MockAssignmentsClient {
	mock := &MockAssignmentsClient{ctrl: ctrl}
	mock.recorder = &MockAssignmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssignmentsClient) EXPECT() *MockAssignmentsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAssignmentsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armpolicy.AssignmentsClientGetOptions) (armpolicy.AssignmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armpolicy.AssignmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAssignmentsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAssignmentsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method.
func (m *MockAssignmentsClient) GetByID(arg0 context.Context, arg1 string, arg2 *armpolicy.AssignmentsClientGetByIDOptions) (armpolicy.AssignmentsClientGetByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(armpolicy.AssignmentsClientGetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAssignmentsClientMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAssignmentsClient)(nil).GetByID), arg0, arg1, arg2)
}

// NewListForManagementGroupPager mocks base method.
func (m *MockAssignmentsClient) NewListForManagementGroupPager(arg0 string, arg1 *armpolicy.AssignmentsClientListForManagementGroupOptions) *policy.RuntimePagerArmpolicyAssignmentsClientListForManagementGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForManagementGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*policy.RuntimePagerArmpolicyAssignmentsClientListForManagementGroupResponse)
	return ret0
}

// NewListForManagementGroupPager indicates an expected call of NewListForManagementGroupPager.
func (mr *MockAssignmentsClientMockRecorder) NewListForManagementGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForManagementGroupPager", reflect.TypeOf((*MockAssignmentsClient)(nil).NewListForManagementGroupPager), arg0, arg1)
}

// NewListForResourceGroupPager mocks base method.
func (m *MockAssignmentsClient) NewListForResourceGroupPager(arg0 string, arg1 *armpolicy.AssignmentsClientListForResourceGroupOptions) *policy.RuntimePagerArmpolicyAssignmentsClientListForResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*policy.RuntimePagerArmpolicyAssignmentsClientListForResourceGroupResponse)
	return ret0
}

// NewListForResourceGroupPager indicates an expected call of NewListForResourceGroupPager.
func (mr *MockAssignmentsClientMockRecorder) NewListForResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForResourceGroupPager", reflect.TypeOf((*MockAssignmentsClient)(nil).NewListForResourceGroupPager), arg0, arg1)
}

// NewListForResourcePager mocks base method.
func (m *MockAssignmentsClient) NewListForResourcePager(arg0, arg1, arg2, arg3, arg4 string, arg5 *armpolicy.AssignmentsClientListForResourceOptions) *policy.RuntimePagerArmpolicyAssignmentsClientListForResourceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForResourcePager", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*policy.RuntimePagerArmpolicyAssignmentsClientListForResourceResponse)
	return ret0
}

// NewListForResourcePager indicates an expected call of NewListForResourcePager.
func (mr *MockAssignmentsClientMockRecorder) NewListForResourcePager(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForResourcePager", reflect.TypeOf((*MockAssignmentsClient)(nil).NewListForResourcePager), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListPager mocks base method.
func (m *MockAssignmentsClient) NewListPager(arg0 *armpolicy.AssignmentsClientListOptions) *policy.RuntimePagerArmpolicyAssignmentsClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*policy.RuntimePagerArmpolicyAssignmentsClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockAssignmentsClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockAssignmentsClient)(nil).NewListPager), arg0)
}
