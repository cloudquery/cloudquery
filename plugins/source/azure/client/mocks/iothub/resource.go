// Code generated by MockGen. DO NOT EDIT.
// Source: resource.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armiothub "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iothub/armiothub"
	iothub "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/iothub"
	gomock "github.com/golang/mock/gomock"
)

// MockResourceClient is a mock of ResourceClient interface.
type MockResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceClientMockRecorder
}

// MockResourceClientMockRecorder is the mock recorder for MockResourceClient.
type MockResourceClientMockRecorder struct {
	mock *MockResourceClient
}

// NewMockResourceClient creates a new mock instance.
func NewMockResourceClient(ctrl *gomock.Controller) *MockResourceClient {
	mock := &MockResourceClient{ctrl: ctrl}
	mock.recorder = &MockResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceClient) EXPECT() *MockResourceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockResourceClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armiothub.ResourceClientGetOptions) (armiothub.ResourceClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armiothub.ResourceClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResourceClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetEventHubConsumerGroup mocks base method.
func (m *MockResourceClient) GetEventHubConsumerGroup(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armiothub.ResourceClientGetEventHubConsumerGroupOptions) (armiothub.ResourceClientGetEventHubConsumerGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventHubConsumerGroup", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armiothub.ResourceClientGetEventHubConsumerGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventHubConsumerGroup indicates an expected call of GetEventHubConsumerGroup.
func (mr *MockResourceClientMockRecorder) GetEventHubConsumerGroup(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventHubConsumerGroup", reflect.TypeOf((*MockResourceClient)(nil).GetEventHubConsumerGroup), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetJob mocks base method.
func (m *MockResourceClient) GetJob(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armiothub.ResourceClientGetJobOptions) (armiothub.ResourceClientGetJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armiothub.ResourceClientGetJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockResourceClientMockRecorder) GetJob(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockResourceClient)(nil).GetJob), arg0, arg1, arg2, arg3, arg4)
}

// GetKeysForKeyName mocks base method.
func (m *MockResourceClient) GetKeysForKeyName(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armiothub.ResourceClientGetKeysForKeyNameOptions) (armiothub.ResourceClientGetKeysForKeyNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeysForKeyName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armiothub.ResourceClientGetKeysForKeyNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeysForKeyName indicates an expected call of GetKeysForKeyName.
func (mr *MockResourceClientMockRecorder) GetKeysForKeyName(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeysForKeyName", reflect.TypeOf((*MockResourceClient)(nil).GetKeysForKeyName), arg0, arg1, arg2, arg3, arg4)
}

// GetStats mocks base method.
func (m *MockResourceClient) GetStats(arg0 context.Context, arg1, arg2 string, arg3 *armiothub.ResourceClientGetStatsOptions) (armiothub.ResourceClientGetStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armiothub.ResourceClientGetStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockResourceClientMockRecorder) GetStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockResourceClient)(nil).GetStats), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockResourceClient) NewListByResourceGroupPager(arg0 string, arg1 *armiothub.ResourceClientListByResourceGroupOptions) *iothub.RuntimePagerArmiothubResourceClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*iothub.RuntimePagerArmiothubResourceClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockResourceClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockResourceClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListBySubscriptionPager mocks base method.
func (m *MockResourceClient) NewListBySubscriptionPager(arg0 *armiothub.ResourceClientListBySubscriptionOptions) *iothub.RuntimePagerArmiothubResourceClientListBySubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBySubscriptionPager", arg0)
	ret0, _ := ret[0].(*iothub.RuntimePagerArmiothubResourceClientListBySubscriptionResponse)
	return ret0
}

// NewListBySubscriptionPager indicates an expected call of NewListBySubscriptionPager.
func (mr *MockResourceClientMockRecorder) NewListBySubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBySubscriptionPager", reflect.TypeOf((*MockResourceClient)(nil).NewListBySubscriptionPager), arg0)
}

// NewListEventHubConsumerGroupsPager mocks base method.
func (m *MockResourceClient) NewListEventHubConsumerGroupsPager(arg0, arg1, arg2 string, arg3 *armiothub.ResourceClientListEventHubConsumerGroupsOptions) *iothub.RuntimePagerArmiothubResourceClientListEventHubConsumerGroupsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListEventHubConsumerGroupsPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*iothub.RuntimePagerArmiothubResourceClientListEventHubConsumerGroupsResponse)
	return ret0
}

// NewListEventHubConsumerGroupsPager indicates an expected call of NewListEventHubConsumerGroupsPager.
func (mr *MockResourceClientMockRecorder) NewListEventHubConsumerGroupsPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListEventHubConsumerGroupsPager", reflect.TypeOf((*MockResourceClient)(nil).NewListEventHubConsumerGroupsPager), arg0, arg1, arg2, arg3)
}

// NewListJobsPager mocks base method.
func (m *MockResourceClient) NewListJobsPager(arg0, arg1 string, arg2 *armiothub.ResourceClientListJobsOptions) *iothub.RuntimePagerArmiothubResourceClientListJobsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListJobsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*iothub.RuntimePagerArmiothubResourceClientListJobsResponse)
	return ret0
}

// NewListJobsPager indicates an expected call of NewListJobsPager.
func (mr *MockResourceClientMockRecorder) NewListJobsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListJobsPager", reflect.TypeOf((*MockResourceClient)(nil).NewListJobsPager), arg0, arg1, arg2)
}

// NewListKeysPager mocks base method.
func (m *MockResourceClient) NewListKeysPager(arg0, arg1 string, arg2 *armiothub.ResourceClientListKeysOptions) *iothub.RuntimePagerArmiothubResourceClientListKeysResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListKeysPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*iothub.RuntimePagerArmiothubResourceClientListKeysResponse)
	return ret0
}

// NewListKeysPager indicates an expected call of NewListKeysPager.
func (mr *MockResourceClientMockRecorder) NewListKeysPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListKeysPager", reflect.TypeOf((*MockResourceClient)(nil).NewListKeysPager), arg0, arg1, arg2)
}
