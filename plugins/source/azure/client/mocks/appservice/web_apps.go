// Code generated by MockGen. DO NOT EDIT.
// Source: web_apps.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armappservice "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appservice/armappservice/v2"
	appservice "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/appservice"
	gomock "github.com/golang/mock/gomock"
)

// MockWebAppsClient is a mock of WebAppsClient interface.
type MockWebAppsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebAppsClientMockRecorder
}

// MockWebAppsClientMockRecorder is the mock recorder for MockWebAppsClient.
type MockWebAppsClientMockRecorder struct {
	mock *MockWebAppsClient
}

// NewMockWebAppsClient creates a new mock instance.
func NewMockWebAppsClient(ctrl *gomock.Controller) *MockWebAppsClient {
	mock := &MockWebAppsClient{ctrl: ctrl}
	mock.recorder = &MockWebAppsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebAppsClient) EXPECT() *MockWebAppsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWebAppsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetOptions) (armappservice.WebAppsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWebAppsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebAppsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetAppSettingKeyVaultReference mocks base method.
func (m *MockWebAppsClient) GetAppSettingKeyVaultReference(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetAppSettingKeyVaultReferenceOptions) (armappservice.WebAppsClientGetAppSettingKeyVaultReferenceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSettingKeyVaultReference", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAppSettingKeyVaultReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSettingKeyVaultReference indicates an expected call of GetAppSettingKeyVaultReference.
func (mr *MockWebAppsClientMockRecorder) GetAppSettingKeyVaultReference(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSettingKeyVaultReference", reflect.TypeOf((*MockWebAppsClient)(nil).GetAppSettingKeyVaultReference), arg0, arg1, arg2, arg3, arg4)
}

// GetAppSettingKeyVaultReferenceSlot mocks base method.
func (m *MockWebAppsClient) GetAppSettingKeyVaultReferenceSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetAppSettingKeyVaultReferenceSlotOptions) (armappservice.WebAppsClientGetAppSettingKeyVaultReferenceSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSettingKeyVaultReferenceSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAppSettingKeyVaultReferenceSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSettingKeyVaultReferenceSlot indicates an expected call of GetAppSettingKeyVaultReferenceSlot.
func (mr *MockWebAppsClientMockRecorder) GetAppSettingKeyVaultReferenceSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSettingKeyVaultReferenceSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetAppSettingKeyVaultReferenceSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetAuthSettings mocks base method.
func (m *MockWebAppsClient) GetAuthSettings(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetAuthSettingsOptions) (armappservice.WebAppsClientGetAuthSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAuthSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSettings indicates an expected call of GetAuthSettings.
func (mr *MockWebAppsClientMockRecorder) GetAuthSettings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSettings", reflect.TypeOf((*MockWebAppsClient)(nil).GetAuthSettings), arg0, arg1, arg2, arg3)
}

// GetAuthSettingsSlot mocks base method.
func (m *MockWebAppsClient) GetAuthSettingsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetAuthSettingsSlotOptions) (armappservice.WebAppsClientGetAuthSettingsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSettingsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAuthSettingsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSettingsSlot indicates an expected call of GetAuthSettingsSlot.
func (mr *MockWebAppsClientMockRecorder) GetAuthSettingsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSettingsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetAuthSettingsSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetAuthSettingsV2 mocks base method.
func (m *MockWebAppsClient) GetAuthSettingsV2(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetAuthSettingsV2Options) (armappservice.WebAppsClientGetAuthSettingsV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSettingsV2", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAuthSettingsV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSettingsV2 indicates an expected call of GetAuthSettingsV2.
func (mr *MockWebAppsClientMockRecorder) GetAuthSettingsV2(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSettingsV2", reflect.TypeOf((*MockWebAppsClient)(nil).GetAuthSettingsV2), arg0, arg1, arg2, arg3)
}

// GetAuthSettingsV2Slot mocks base method.
func (m *MockWebAppsClient) GetAuthSettingsV2Slot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetAuthSettingsV2SlotOptions) (armappservice.WebAppsClientGetAuthSettingsV2SlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSettingsV2Slot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAuthSettingsV2SlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSettingsV2Slot indicates an expected call of GetAuthSettingsV2Slot.
func (mr *MockWebAppsClientMockRecorder) GetAuthSettingsV2Slot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSettingsV2Slot", reflect.TypeOf((*MockWebAppsClient)(nil).GetAuthSettingsV2Slot), arg0, arg1, arg2, arg3, arg4)
}

// GetAuthSettingsV2WithoutSecrets mocks base method.
func (m *MockWebAppsClient) GetAuthSettingsV2WithoutSecrets(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetAuthSettingsV2WithoutSecretsOptions) (armappservice.WebAppsClientGetAuthSettingsV2WithoutSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSettingsV2WithoutSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAuthSettingsV2WithoutSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSettingsV2WithoutSecrets indicates an expected call of GetAuthSettingsV2WithoutSecrets.
func (mr *MockWebAppsClientMockRecorder) GetAuthSettingsV2WithoutSecrets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSettingsV2WithoutSecrets", reflect.TypeOf((*MockWebAppsClient)(nil).GetAuthSettingsV2WithoutSecrets), arg0, arg1, arg2, arg3)
}

// GetAuthSettingsV2WithoutSecretsSlot mocks base method.
func (m *MockWebAppsClient) GetAuthSettingsV2WithoutSecretsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetAuthSettingsV2WithoutSecretsSlotOptions) (armappservice.WebAppsClientGetAuthSettingsV2WithoutSecretsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSettingsV2WithoutSecretsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetAuthSettingsV2WithoutSecretsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSettingsV2WithoutSecretsSlot indicates an expected call of GetAuthSettingsV2WithoutSecretsSlot.
func (mr *MockWebAppsClientMockRecorder) GetAuthSettingsV2WithoutSecretsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSettingsV2WithoutSecretsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetAuthSettingsV2WithoutSecretsSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetBackupConfiguration mocks base method.
func (m *MockWebAppsClient) GetBackupConfiguration(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetBackupConfigurationOptions) (armappservice.WebAppsClientGetBackupConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupConfiguration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetBackupConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupConfiguration indicates an expected call of GetBackupConfiguration.
func (mr *MockWebAppsClientMockRecorder) GetBackupConfiguration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupConfiguration", reflect.TypeOf((*MockWebAppsClient)(nil).GetBackupConfiguration), arg0, arg1, arg2, arg3)
}

// GetBackupConfigurationSlot mocks base method.
func (m *MockWebAppsClient) GetBackupConfigurationSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetBackupConfigurationSlotOptions) (armappservice.WebAppsClientGetBackupConfigurationSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupConfigurationSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetBackupConfigurationSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupConfigurationSlot indicates an expected call of GetBackupConfigurationSlot.
func (mr *MockWebAppsClientMockRecorder) GetBackupConfigurationSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupConfigurationSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetBackupConfigurationSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetBackupStatus mocks base method.
func (m *MockWebAppsClient) GetBackupStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetBackupStatusOptions) (armappservice.WebAppsClientGetBackupStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetBackupStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupStatus indicates an expected call of GetBackupStatus.
func (mr *MockWebAppsClientMockRecorder) GetBackupStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupStatus", reflect.TypeOf((*MockWebAppsClient)(nil).GetBackupStatus), arg0, arg1, arg2, arg3, arg4)
}

// GetBackupStatusSlot mocks base method.
func (m *MockWebAppsClient) GetBackupStatusSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetBackupStatusSlotOptions) (armappservice.WebAppsClientGetBackupStatusSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupStatusSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetBackupStatusSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupStatusSlot indicates an expected call of GetBackupStatusSlot.
func (mr *MockWebAppsClientMockRecorder) GetBackupStatusSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupStatusSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetBackupStatusSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetConfiguration mocks base method.
func (m *MockWebAppsClient) GetConfiguration(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetConfigurationOptions) (armappservice.WebAppsClientGetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockWebAppsClientMockRecorder) GetConfiguration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockWebAppsClient)(nil).GetConfiguration), arg0, arg1, arg2, arg3)
}

// GetConfigurationSlot mocks base method.
func (m *MockWebAppsClient) GetConfigurationSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetConfigurationSlotOptions) (armappservice.WebAppsClientGetConfigurationSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetConfigurationSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSlot indicates an expected call of GetConfigurationSlot.
func (mr *MockWebAppsClientMockRecorder) GetConfigurationSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetConfigurationSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetConfigurationSnapshot mocks base method.
func (m *MockWebAppsClient) GetConfigurationSnapshot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetConfigurationSnapshotOptions) (armappservice.WebAppsClientGetConfigurationSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetConfigurationSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSnapshot indicates an expected call of GetConfigurationSnapshot.
func (mr *MockWebAppsClientMockRecorder) GetConfigurationSnapshot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSnapshot", reflect.TypeOf((*MockWebAppsClient)(nil).GetConfigurationSnapshot), arg0, arg1, arg2, arg3, arg4)
}

// GetConfigurationSnapshotSlot mocks base method.
func (m *MockWebAppsClient) GetConfigurationSnapshotSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetConfigurationSnapshotSlotOptions) (armappservice.WebAppsClientGetConfigurationSnapshotSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSnapshotSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetConfigurationSnapshotSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSnapshotSlot indicates an expected call of GetConfigurationSnapshotSlot.
func (mr *MockWebAppsClientMockRecorder) GetConfigurationSnapshotSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSnapshotSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetConfigurationSnapshotSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetContainerLogsZip mocks base method.
func (m *MockWebAppsClient) GetContainerLogsZip(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetContainerLogsZipOptions) (armappservice.WebAppsClientGetContainerLogsZipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogsZip", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetContainerLogsZipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogsZip indicates an expected call of GetContainerLogsZip.
func (mr *MockWebAppsClientMockRecorder) GetContainerLogsZip(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogsZip", reflect.TypeOf((*MockWebAppsClient)(nil).GetContainerLogsZip), arg0, arg1, arg2, arg3)
}

// GetContainerLogsZipSlot mocks base method.
func (m *MockWebAppsClient) GetContainerLogsZipSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetContainerLogsZipSlotOptions) (armappservice.WebAppsClientGetContainerLogsZipSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogsZipSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetContainerLogsZipSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogsZipSlot indicates an expected call of GetContainerLogsZipSlot.
func (mr *MockWebAppsClientMockRecorder) GetContainerLogsZipSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogsZipSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetContainerLogsZipSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetContinuousWebJob mocks base method.
func (m *MockWebAppsClient) GetContinuousWebJob(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetContinuousWebJobOptions) (armappservice.WebAppsClientGetContinuousWebJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContinuousWebJob", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetContinuousWebJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContinuousWebJob indicates an expected call of GetContinuousWebJob.
func (mr *MockWebAppsClientMockRecorder) GetContinuousWebJob(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinuousWebJob", reflect.TypeOf((*MockWebAppsClient)(nil).GetContinuousWebJob), arg0, arg1, arg2, arg3, arg4)
}

// GetContinuousWebJobSlot mocks base method.
func (m *MockWebAppsClient) GetContinuousWebJobSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetContinuousWebJobSlotOptions) (armappservice.WebAppsClientGetContinuousWebJobSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContinuousWebJobSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetContinuousWebJobSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContinuousWebJobSlot indicates an expected call of GetContinuousWebJobSlot.
func (mr *MockWebAppsClientMockRecorder) GetContinuousWebJobSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContinuousWebJobSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetContinuousWebJobSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetDeployment mocks base method.
func (m *MockWebAppsClient) GetDeployment(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetDeploymentOptions) (armappservice.WebAppsClientGetDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockWebAppsClientMockRecorder) GetDeployment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockWebAppsClient)(nil).GetDeployment), arg0, arg1, arg2, arg3, arg4)
}

// GetDeploymentSlot mocks base method.
func (m *MockWebAppsClient) GetDeploymentSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetDeploymentSlotOptions) (armappservice.WebAppsClientGetDeploymentSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetDeploymentSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentSlot indicates an expected call of GetDeploymentSlot.
func (mr *MockWebAppsClientMockRecorder) GetDeploymentSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetDeploymentSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetDiagnosticLogsConfiguration mocks base method.
func (m *MockWebAppsClient) GetDiagnosticLogsConfiguration(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetDiagnosticLogsConfigurationOptions) (armappservice.WebAppsClientGetDiagnosticLogsConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiagnosticLogsConfiguration", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetDiagnosticLogsConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiagnosticLogsConfiguration indicates an expected call of GetDiagnosticLogsConfiguration.
func (mr *MockWebAppsClientMockRecorder) GetDiagnosticLogsConfiguration(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiagnosticLogsConfiguration", reflect.TypeOf((*MockWebAppsClient)(nil).GetDiagnosticLogsConfiguration), arg0, arg1, arg2, arg3)
}

// GetDiagnosticLogsConfigurationSlot mocks base method.
func (m *MockWebAppsClient) GetDiagnosticLogsConfigurationSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetDiagnosticLogsConfigurationSlotOptions) (armappservice.WebAppsClientGetDiagnosticLogsConfigurationSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiagnosticLogsConfigurationSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetDiagnosticLogsConfigurationSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiagnosticLogsConfigurationSlot indicates an expected call of GetDiagnosticLogsConfigurationSlot.
func (mr *MockWebAppsClientMockRecorder) GetDiagnosticLogsConfigurationSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiagnosticLogsConfigurationSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetDiagnosticLogsConfigurationSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetDomainOwnershipIdentifier mocks base method.
func (m *MockWebAppsClient) GetDomainOwnershipIdentifier(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetDomainOwnershipIdentifierOptions) (armappservice.WebAppsClientGetDomainOwnershipIdentifierResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainOwnershipIdentifier", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetDomainOwnershipIdentifierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainOwnershipIdentifier indicates an expected call of GetDomainOwnershipIdentifier.
func (mr *MockWebAppsClientMockRecorder) GetDomainOwnershipIdentifier(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainOwnershipIdentifier", reflect.TypeOf((*MockWebAppsClient)(nil).GetDomainOwnershipIdentifier), arg0, arg1, arg2, arg3, arg4)
}

// GetDomainOwnershipIdentifierSlot mocks base method.
func (m *MockWebAppsClient) GetDomainOwnershipIdentifierSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetDomainOwnershipIdentifierSlotOptions) (armappservice.WebAppsClientGetDomainOwnershipIdentifierSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainOwnershipIdentifierSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetDomainOwnershipIdentifierSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainOwnershipIdentifierSlot indicates an expected call of GetDomainOwnershipIdentifierSlot.
func (mr *MockWebAppsClientMockRecorder) GetDomainOwnershipIdentifierSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainOwnershipIdentifierSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetDomainOwnershipIdentifierSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetFtpAllowed mocks base method.
func (m *MockWebAppsClient) GetFtpAllowed(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetFtpAllowedOptions) (armappservice.WebAppsClientGetFtpAllowedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFtpAllowed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetFtpAllowedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFtpAllowed indicates an expected call of GetFtpAllowed.
func (mr *MockWebAppsClientMockRecorder) GetFtpAllowed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFtpAllowed", reflect.TypeOf((*MockWebAppsClient)(nil).GetFtpAllowed), arg0, arg1, arg2, arg3)
}

// GetFtpAllowedSlot mocks base method.
func (m *MockWebAppsClient) GetFtpAllowedSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetFtpAllowedSlotOptions) (armappservice.WebAppsClientGetFtpAllowedSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFtpAllowedSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetFtpAllowedSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFtpAllowedSlot indicates an expected call of GetFtpAllowedSlot.
func (mr *MockWebAppsClientMockRecorder) GetFtpAllowedSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFtpAllowedSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetFtpAllowedSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetFunction mocks base method.
func (m *MockWebAppsClient) GetFunction(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetFunctionOptions) (armappservice.WebAppsClientGetFunctionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetFunctionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockWebAppsClientMockRecorder) GetFunction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockWebAppsClient)(nil).GetFunction), arg0, arg1, arg2, arg3, arg4)
}

// GetFunctionsAdminToken mocks base method.
func (m *MockWebAppsClient) GetFunctionsAdminToken(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetFunctionsAdminTokenOptions) (armappservice.WebAppsClientGetFunctionsAdminTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunctionsAdminToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetFunctionsAdminTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionsAdminToken indicates an expected call of GetFunctionsAdminToken.
func (mr *MockWebAppsClientMockRecorder) GetFunctionsAdminToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionsAdminToken", reflect.TypeOf((*MockWebAppsClient)(nil).GetFunctionsAdminToken), arg0, arg1, arg2, arg3)
}

// GetFunctionsAdminTokenSlot mocks base method.
func (m *MockWebAppsClient) GetFunctionsAdminTokenSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetFunctionsAdminTokenSlotOptions) (armappservice.WebAppsClientGetFunctionsAdminTokenSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunctionsAdminTokenSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetFunctionsAdminTokenSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunctionsAdminTokenSlot indicates an expected call of GetFunctionsAdminTokenSlot.
func (mr *MockWebAppsClientMockRecorder) GetFunctionsAdminTokenSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionsAdminTokenSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetFunctionsAdminTokenSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetHostNameBinding mocks base method.
func (m *MockWebAppsClient) GetHostNameBinding(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetHostNameBindingOptions) (armappservice.WebAppsClientGetHostNameBindingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostNameBinding", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetHostNameBindingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostNameBinding indicates an expected call of GetHostNameBinding.
func (mr *MockWebAppsClientMockRecorder) GetHostNameBinding(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostNameBinding", reflect.TypeOf((*MockWebAppsClient)(nil).GetHostNameBinding), arg0, arg1, arg2, arg3, arg4)
}

// GetHostNameBindingSlot mocks base method.
func (m *MockWebAppsClient) GetHostNameBindingSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetHostNameBindingSlotOptions) (armappservice.WebAppsClientGetHostNameBindingSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostNameBindingSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetHostNameBindingSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostNameBindingSlot indicates an expected call of GetHostNameBindingSlot.
func (mr *MockWebAppsClientMockRecorder) GetHostNameBindingSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostNameBindingSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetHostNameBindingSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetHybridConnection mocks base method.
func (m *MockWebAppsClient) GetHybridConnection(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetHybridConnectionOptions) (armappservice.WebAppsClientGetHybridConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHybridConnection", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetHybridConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHybridConnection indicates an expected call of GetHybridConnection.
func (mr *MockWebAppsClientMockRecorder) GetHybridConnection(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHybridConnection", reflect.TypeOf((*MockWebAppsClient)(nil).GetHybridConnection), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetHybridConnectionSlot mocks base method.
func (m *MockWebAppsClient) GetHybridConnectionSlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetHybridConnectionSlotOptions) (armappservice.WebAppsClientGetHybridConnectionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHybridConnectionSlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetHybridConnectionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHybridConnectionSlot indicates an expected call of GetHybridConnectionSlot.
func (mr *MockWebAppsClientMockRecorder) GetHybridConnectionSlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHybridConnectionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetHybridConnectionSlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetInstanceFunctionSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceFunctionSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetInstanceFunctionSlotOptions) (armappservice.WebAppsClientGetInstanceFunctionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFunctionSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceFunctionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFunctionSlot indicates an expected call of GetInstanceFunctionSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceFunctionSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFunctionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceFunctionSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetInstanceInfo mocks base method.
func (m *MockWebAppsClient) GetInstanceInfo(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetInstanceInfoOptions) (armappservice.WebAppsClientGetInstanceInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceInfo", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceInfo indicates an expected call of GetInstanceInfo.
func (mr *MockWebAppsClientMockRecorder) GetInstanceInfo(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceInfo", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceInfo), arg0, arg1, arg2, arg3, arg4)
}

// GetInstanceInfoSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceInfoSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetInstanceInfoSlotOptions) (armappservice.WebAppsClientGetInstanceInfoSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceInfoSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceInfoSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceInfoSlot indicates an expected call of GetInstanceInfoSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceInfoSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceInfoSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceInfoSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetInstanceMSDeployLog mocks base method.
func (m *MockWebAppsClient) GetInstanceMSDeployLog(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetInstanceMSDeployLogOptions) (armappservice.WebAppsClientGetInstanceMSDeployLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMSDeployLog", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceMSDeployLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMSDeployLog indicates an expected call of GetInstanceMSDeployLog.
func (mr *MockWebAppsClientMockRecorder) GetInstanceMSDeployLog(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMSDeployLog", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceMSDeployLog), arg0, arg1, arg2, arg3, arg4)
}

// GetInstanceMSDeployLogSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceMSDeployLogSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetInstanceMSDeployLogSlotOptions) (armappservice.WebAppsClientGetInstanceMSDeployLogSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMSDeployLogSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceMSDeployLogSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMSDeployLogSlot indicates an expected call of GetInstanceMSDeployLogSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceMSDeployLogSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMSDeployLogSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceMSDeployLogSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetInstanceMsDeployStatus mocks base method.
func (m *MockWebAppsClient) GetInstanceMsDeployStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetInstanceMsDeployStatusOptions) (armappservice.WebAppsClientGetInstanceMsDeployStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMsDeployStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceMsDeployStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMsDeployStatus indicates an expected call of GetInstanceMsDeployStatus.
func (mr *MockWebAppsClientMockRecorder) GetInstanceMsDeployStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMsDeployStatus", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceMsDeployStatus), arg0, arg1, arg2, arg3, arg4)
}

// GetInstanceMsDeployStatusSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceMsDeployStatusSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetInstanceMsDeployStatusSlotOptions) (armappservice.WebAppsClientGetInstanceMsDeployStatusSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMsDeployStatusSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceMsDeployStatusSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceMsDeployStatusSlot indicates an expected call of GetInstanceMsDeployStatusSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceMsDeployStatusSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMsDeployStatusSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceMsDeployStatusSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetInstanceProcess mocks base method.
func (m *MockWebAppsClient) GetInstanceProcess(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetInstanceProcessOptions) (armappservice.WebAppsClientGetInstanceProcessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProcess", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProcess indicates an expected call of GetInstanceProcess.
func (mr *MockWebAppsClientMockRecorder) GetInstanceProcess(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProcess", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceProcess), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetInstanceProcessDump mocks base method.
func (m *MockWebAppsClient) GetInstanceProcessDump(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetInstanceProcessDumpOptions) (armappservice.WebAppsClientGetInstanceProcessDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProcessDump", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceProcessDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProcessDump indicates an expected call of GetInstanceProcessDump.
func (mr *MockWebAppsClientMockRecorder) GetInstanceProcessDump(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProcessDump", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceProcessDump), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetInstanceProcessDumpSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceProcessDumpSlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetInstanceProcessDumpSlotOptions) (armappservice.WebAppsClientGetInstanceProcessDumpSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProcessDumpSlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceProcessDumpSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProcessDumpSlot indicates an expected call of GetInstanceProcessDumpSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceProcessDumpSlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProcessDumpSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceProcessDumpSlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetInstanceProcessModule mocks base method.
func (m *MockWebAppsClient) GetInstanceProcessModule(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetInstanceProcessModuleOptions) (armappservice.WebAppsClientGetInstanceProcessModuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProcessModule", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceProcessModuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProcessModule indicates an expected call of GetInstanceProcessModule.
func (mr *MockWebAppsClientMockRecorder) GetInstanceProcessModule(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProcessModule", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceProcessModule), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetInstanceProcessModuleSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceProcessModuleSlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string, arg7 *armappservice.WebAppsClientGetInstanceProcessModuleSlotOptions) (armappservice.WebAppsClientGetInstanceProcessModuleSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProcessModuleSlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceProcessModuleSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProcessModuleSlot indicates an expected call of GetInstanceProcessModuleSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceProcessModuleSlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProcessModuleSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceProcessModuleSlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// GetInstanceProcessSlot mocks base method.
func (m *MockWebAppsClient) GetInstanceProcessSlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetInstanceProcessSlotOptions) (armappservice.WebAppsClientGetInstanceProcessSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceProcessSlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetInstanceProcessSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceProcessSlot indicates an expected call of GetInstanceProcessSlot.
func (mr *MockWebAppsClientMockRecorder) GetInstanceProcessSlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceProcessSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetInstanceProcessSlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetMSDeployLog mocks base method.
func (m *MockWebAppsClient) GetMSDeployLog(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetMSDeployLogOptions) (armappservice.WebAppsClientGetMSDeployLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMSDeployLog", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetMSDeployLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMSDeployLog indicates an expected call of GetMSDeployLog.
func (mr *MockWebAppsClientMockRecorder) GetMSDeployLog(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMSDeployLog", reflect.TypeOf((*MockWebAppsClient)(nil).GetMSDeployLog), arg0, arg1, arg2, arg3)
}

// GetMSDeployLogSlot mocks base method.
func (m *MockWebAppsClient) GetMSDeployLogSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetMSDeployLogSlotOptions) (armappservice.WebAppsClientGetMSDeployLogSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMSDeployLogSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetMSDeployLogSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMSDeployLogSlot indicates an expected call of GetMSDeployLogSlot.
func (mr *MockWebAppsClientMockRecorder) GetMSDeployLogSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMSDeployLogSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetMSDeployLogSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetMSDeployStatus mocks base method.
func (m *MockWebAppsClient) GetMSDeployStatus(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetMSDeployStatusOptions) (armappservice.WebAppsClientGetMSDeployStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMSDeployStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetMSDeployStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMSDeployStatus indicates an expected call of GetMSDeployStatus.
func (mr *MockWebAppsClientMockRecorder) GetMSDeployStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMSDeployStatus", reflect.TypeOf((*MockWebAppsClient)(nil).GetMSDeployStatus), arg0, arg1, arg2, arg3)
}

// GetMSDeployStatusSlot mocks base method.
func (m *MockWebAppsClient) GetMSDeployStatusSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetMSDeployStatusSlotOptions) (armappservice.WebAppsClientGetMSDeployStatusSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMSDeployStatusSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetMSDeployStatusSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMSDeployStatusSlot indicates an expected call of GetMSDeployStatusSlot.
func (mr *MockWebAppsClientMockRecorder) GetMSDeployStatusSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMSDeployStatusSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetMSDeployStatusSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetMigrateMySQLStatus mocks base method.
func (m *MockWebAppsClient) GetMigrateMySQLStatus(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetMigrateMySQLStatusOptions) (armappservice.WebAppsClientGetMigrateMySQLStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrateMySQLStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetMigrateMySQLStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrateMySQLStatus indicates an expected call of GetMigrateMySQLStatus.
func (mr *MockWebAppsClientMockRecorder) GetMigrateMySQLStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrateMySQLStatus", reflect.TypeOf((*MockWebAppsClient)(nil).GetMigrateMySQLStatus), arg0, arg1, arg2, arg3)
}

// GetMigrateMySQLStatusSlot mocks base method.
func (m *MockWebAppsClient) GetMigrateMySQLStatusSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetMigrateMySQLStatusSlotOptions) (armappservice.WebAppsClientGetMigrateMySQLStatusSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrateMySQLStatusSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetMigrateMySQLStatusSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrateMySQLStatusSlot indicates an expected call of GetMigrateMySQLStatusSlot.
func (mr *MockWebAppsClientMockRecorder) GetMigrateMySQLStatusSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrateMySQLStatusSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetMigrateMySQLStatusSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetNetworkTraceOperation mocks base method.
func (m *MockWebAppsClient) GetNetworkTraceOperation(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetNetworkTraceOperationOptions) (armappservice.WebAppsClientGetNetworkTraceOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTraceOperation", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTraceOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTraceOperation indicates an expected call of GetNetworkTraceOperation.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTraceOperation(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTraceOperation", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTraceOperation), arg0, arg1, arg2, arg3, arg4)
}

// GetNetworkTraceOperationSlot mocks base method.
func (m *MockWebAppsClient) GetNetworkTraceOperationSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetNetworkTraceOperationSlotOptions) (armappservice.WebAppsClientGetNetworkTraceOperationSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTraceOperationSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTraceOperationSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTraceOperationSlot indicates an expected call of GetNetworkTraceOperationSlot.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTraceOperationSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTraceOperationSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTraceOperationSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetNetworkTraceOperationSlotV2 mocks base method.
func (m *MockWebAppsClient) GetNetworkTraceOperationSlotV2(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetNetworkTraceOperationSlotV2Options) (armappservice.WebAppsClientGetNetworkTraceOperationSlotV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTraceOperationSlotV2", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTraceOperationSlotV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTraceOperationSlotV2 indicates an expected call of GetNetworkTraceOperationSlotV2.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTraceOperationSlotV2(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTraceOperationSlotV2", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTraceOperationSlotV2), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetNetworkTraceOperationV2 mocks base method.
func (m *MockWebAppsClient) GetNetworkTraceOperationV2(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetNetworkTraceOperationV2Options) (armappservice.WebAppsClientGetNetworkTraceOperationV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTraceOperationV2", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTraceOperationV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTraceOperationV2 indicates an expected call of GetNetworkTraceOperationV2.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTraceOperationV2(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTraceOperationV2", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTraceOperationV2), arg0, arg1, arg2, arg3, arg4)
}

// GetNetworkTraces mocks base method.
func (m *MockWebAppsClient) GetNetworkTraces(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetNetworkTracesOptions) (armappservice.WebAppsClientGetNetworkTracesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTraces", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTracesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTraces indicates an expected call of GetNetworkTraces.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTraces(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTraces", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTraces), arg0, arg1, arg2, arg3, arg4)
}

// GetNetworkTracesSlot mocks base method.
func (m *MockWebAppsClient) GetNetworkTracesSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetNetworkTracesSlotOptions) (armappservice.WebAppsClientGetNetworkTracesSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTracesSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTracesSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTracesSlot indicates an expected call of GetNetworkTracesSlot.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTracesSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTracesSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTracesSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetNetworkTracesSlotV2 mocks base method.
func (m *MockWebAppsClient) GetNetworkTracesSlotV2(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetNetworkTracesSlotV2Options) (armappservice.WebAppsClientGetNetworkTracesSlotV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTracesSlotV2", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTracesSlotV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTracesSlotV2 indicates an expected call of GetNetworkTracesSlotV2.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTracesSlotV2(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTracesSlotV2", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTracesSlotV2), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetNetworkTracesV2 mocks base method.
func (m *MockWebAppsClient) GetNetworkTracesV2(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetNetworkTracesV2Options) (armappservice.WebAppsClientGetNetworkTracesV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTracesV2", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetNetworkTracesV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTracesV2 indicates an expected call of GetNetworkTracesV2.
func (mr *MockWebAppsClientMockRecorder) GetNetworkTracesV2(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTracesV2", reflect.TypeOf((*MockWebAppsClient)(nil).GetNetworkTracesV2), arg0, arg1, arg2, arg3, arg4)
}

// GetOneDeployStatus mocks base method.
func (m *MockWebAppsClient) GetOneDeployStatus(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetOneDeployStatusOptions) (armappservice.WebAppsClientGetOneDeployStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneDeployStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetOneDeployStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneDeployStatus indicates an expected call of GetOneDeployStatus.
func (mr *MockWebAppsClientMockRecorder) GetOneDeployStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneDeployStatus", reflect.TypeOf((*MockWebAppsClient)(nil).GetOneDeployStatus), arg0, arg1, arg2, arg3)
}

// GetPremierAddOn mocks base method.
func (m *MockWebAppsClient) GetPremierAddOn(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetPremierAddOnOptions) (armappservice.WebAppsClientGetPremierAddOnResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremierAddOn", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPremierAddOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremierAddOn indicates an expected call of GetPremierAddOn.
func (mr *MockWebAppsClientMockRecorder) GetPremierAddOn(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremierAddOn", reflect.TypeOf((*MockWebAppsClient)(nil).GetPremierAddOn), arg0, arg1, arg2, arg3, arg4)
}

// GetPremierAddOnSlot mocks base method.
func (m *MockWebAppsClient) GetPremierAddOnSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetPremierAddOnSlotOptions) (armappservice.WebAppsClientGetPremierAddOnSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPremierAddOnSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPremierAddOnSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPremierAddOnSlot indicates an expected call of GetPremierAddOnSlot.
func (mr *MockWebAppsClientMockRecorder) GetPremierAddOnSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPremierAddOnSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetPremierAddOnSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPrivateAccess mocks base method.
func (m *MockWebAppsClient) GetPrivateAccess(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetPrivateAccessOptions) (armappservice.WebAppsClientGetPrivateAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateAccess", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPrivateAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateAccess indicates an expected call of GetPrivateAccess.
func (mr *MockWebAppsClientMockRecorder) GetPrivateAccess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateAccess", reflect.TypeOf((*MockWebAppsClient)(nil).GetPrivateAccess), arg0, arg1, arg2, arg3)
}

// GetPrivateAccessSlot mocks base method.
func (m *MockWebAppsClient) GetPrivateAccessSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetPrivateAccessSlotOptions) (armappservice.WebAppsClientGetPrivateAccessSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateAccessSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPrivateAccessSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateAccessSlot indicates an expected call of GetPrivateAccessSlot.
func (mr *MockWebAppsClientMockRecorder) GetPrivateAccessSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateAccessSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetPrivateAccessSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetPrivateEndpointConnection mocks base method.
func (m *MockWebAppsClient) GetPrivateEndpointConnection(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetPrivateEndpointConnectionOptions) (armappservice.WebAppsClientGetPrivateEndpointConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpointConnection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPrivateEndpointConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateEndpointConnection indicates an expected call of GetPrivateEndpointConnection.
func (mr *MockWebAppsClientMockRecorder) GetPrivateEndpointConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpointConnection", reflect.TypeOf((*MockWebAppsClient)(nil).GetPrivateEndpointConnection), arg0, arg1, arg2, arg3, arg4)
}

// GetPrivateEndpointConnectionSlot mocks base method.
func (m *MockWebAppsClient) GetPrivateEndpointConnectionSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetPrivateEndpointConnectionSlotOptions) (armappservice.WebAppsClientGetPrivateEndpointConnectionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpointConnectionSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPrivateEndpointConnectionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateEndpointConnectionSlot indicates an expected call of GetPrivateEndpointConnectionSlot.
func (mr *MockWebAppsClientMockRecorder) GetPrivateEndpointConnectionSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpointConnectionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetPrivateEndpointConnectionSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPrivateLinkResources mocks base method.
func (m *MockWebAppsClient) GetPrivateLinkResources(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetPrivateLinkResourcesOptions) (armappservice.WebAppsClientGetPrivateLinkResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateLinkResources", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPrivateLinkResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateLinkResources indicates an expected call of GetPrivateLinkResources.
func (mr *MockWebAppsClientMockRecorder) GetPrivateLinkResources(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateLinkResources", reflect.TypeOf((*MockWebAppsClient)(nil).GetPrivateLinkResources), arg0, arg1, arg2, arg3)
}

// GetPrivateLinkResourcesSlot mocks base method.
func (m *MockWebAppsClient) GetPrivateLinkResourcesSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetPrivateLinkResourcesSlotOptions) (armappservice.WebAppsClientGetPrivateLinkResourcesSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateLinkResourcesSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPrivateLinkResourcesSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateLinkResourcesSlot indicates an expected call of GetPrivateLinkResourcesSlot.
func (mr *MockWebAppsClientMockRecorder) GetPrivateLinkResourcesSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateLinkResourcesSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetPrivateLinkResourcesSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetProcess mocks base method.
func (m *MockWebAppsClient) GetProcess(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetProcessOptions) (armappservice.WebAppsClientGetProcessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcess", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcess indicates an expected call of GetProcess.
func (mr *MockWebAppsClientMockRecorder) GetProcess(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcess", reflect.TypeOf((*MockWebAppsClient)(nil).GetProcess), arg0, arg1, arg2, arg3, arg4)
}

// GetProcessDump mocks base method.
func (m *MockWebAppsClient) GetProcessDump(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetProcessDumpOptions) (armappservice.WebAppsClientGetProcessDumpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessDump", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetProcessDumpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessDump indicates an expected call of GetProcessDump.
func (mr *MockWebAppsClientMockRecorder) GetProcessDump(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessDump", reflect.TypeOf((*MockWebAppsClient)(nil).GetProcessDump), arg0, arg1, arg2, arg3, arg4)
}

// GetProcessDumpSlot mocks base method.
func (m *MockWebAppsClient) GetProcessDumpSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetProcessDumpSlotOptions) (armappservice.WebAppsClientGetProcessDumpSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessDumpSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetProcessDumpSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessDumpSlot indicates an expected call of GetProcessDumpSlot.
func (mr *MockWebAppsClientMockRecorder) GetProcessDumpSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessDumpSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetProcessDumpSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetProcessModule mocks base method.
func (m *MockWebAppsClient) GetProcessModule(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetProcessModuleOptions) (armappservice.WebAppsClientGetProcessModuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessModule", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetProcessModuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessModule indicates an expected call of GetProcessModule.
func (mr *MockWebAppsClientMockRecorder) GetProcessModule(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessModule", reflect.TypeOf((*MockWebAppsClient)(nil).GetProcessModule), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetProcessModuleSlot mocks base method.
func (m *MockWebAppsClient) GetProcessModuleSlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetProcessModuleSlotOptions) (armappservice.WebAppsClientGetProcessModuleSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessModuleSlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetProcessModuleSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessModuleSlot indicates an expected call of GetProcessModuleSlot.
func (mr *MockWebAppsClientMockRecorder) GetProcessModuleSlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessModuleSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetProcessModuleSlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetProcessSlot mocks base method.
func (m *MockWebAppsClient) GetProcessSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetProcessSlotOptions) (armappservice.WebAppsClientGetProcessSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetProcessSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessSlot indicates an expected call of GetProcessSlot.
func (mr *MockWebAppsClientMockRecorder) GetProcessSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetProcessSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetPublicCertificate mocks base method.
func (m *MockWebAppsClient) GetPublicCertificate(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetPublicCertificateOptions) (armappservice.WebAppsClientGetPublicCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicCertificate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPublicCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicCertificate indicates an expected call of GetPublicCertificate.
func (mr *MockWebAppsClientMockRecorder) GetPublicCertificate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicCertificate", reflect.TypeOf((*MockWebAppsClient)(nil).GetPublicCertificate), arg0, arg1, arg2, arg3, arg4)
}

// GetPublicCertificateSlot mocks base method.
func (m *MockWebAppsClient) GetPublicCertificateSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetPublicCertificateSlotOptions) (armappservice.WebAppsClientGetPublicCertificateSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicCertificateSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetPublicCertificateSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicCertificateSlot indicates an expected call of GetPublicCertificateSlot.
func (mr *MockWebAppsClientMockRecorder) GetPublicCertificateSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicCertificateSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetPublicCertificateSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetRelayServiceConnection mocks base method.
func (m *MockWebAppsClient) GetRelayServiceConnection(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetRelayServiceConnectionOptions) (armappservice.WebAppsClientGetRelayServiceConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayServiceConnection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetRelayServiceConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayServiceConnection indicates an expected call of GetRelayServiceConnection.
func (mr *MockWebAppsClientMockRecorder) GetRelayServiceConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayServiceConnection", reflect.TypeOf((*MockWebAppsClient)(nil).GetRelayServiceConnection), arg0, arg1, arg2, arg3, arg4)
}

// GetRelayServiceConnectionSlot mocks base method.
func (m *MockWebAppsClient) GetRelayServiceConnectionSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetRelayServiceConnectionSlotOptions) (armappservice.WebAppsClientGetRelayServiceConnectionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayServiceConnectionSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetRelayServiceConnectionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayServiceConnectionSlot indicates an expected call of GetRelayServiceConnectionSlot.
func (mr *MockWebAppsClientMockRecorder) GetRelayServiceConnectionSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayServiceConnectionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetRelayServiceConnectionSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetScmAllowed mocks base method.
func (m *MockWebAppsClient) GetScmAllowed(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetScmAllowedOptions) (armappservice.WebAppsClientGetScmAllowedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScmAllowed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetScmAllowedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScmAllowed indicates an expected call of GetScmAllowed.
func (mr *MockWebAppsClientMockRecorder) GetScmAllowed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScmAllowed", reflect.TypeOf((*MockWebAppsClient)(nil).GetScmAllowed), arg0, arg1, arg2, arg3)
}

// GetScmAllowedSlot mocks base method.
func (m *MockWebAppsClient) GetScmAllowedSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetScmAllowedSlotOptions) (armappservice.WebAppsClientGetScmAllowedSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScmAllowedSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetScmAllowedSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScmAllowedSlot indicates an expected call of GetScmAllowedSlot.
func (mr *MockWebAppsClientMockRecorder) GetScmAllowedSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScmAllowedSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetScmAllowedSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetSiteConnectionStringKeyVaultReference mocks base method.
func (m *MockWebAppsClient) GetSiteConnectionStringKeyVaultReference(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetSiteConnectionStringKeyVaultReferenceOptions) (armappservice.WebAppsClientGetSiteConnectionStringKeyVaultReferenceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteConnectionStringKeyVaultReference", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSiteConnectionStringKeyVaultReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteConnectionStringKeyVaultReference indicates an expected call of GetSiteConnectionStringKeyVaultReference.
func (mr *MockWebAppsClientMockRecorder) GetSiteConnectionStringKeyVaultReference(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteConnectionStringKeyVaultReference", reflect.TypeOf((*MockWebAppsClient)(nil).GetSiteConnectionStringKeyVaultReference), arg0, arg1, arg2, arg3, arg4)
}

// GetSiteConnectionStringKeyVaultReferenceSlot mocks base method.
func (m *MockWebAppsClient) GetSiteConnectionStringKeyVaultReferenceSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetSiteConnectionStringKeyVaultReferenceSlotOptions) (armappservice.WebAppsClientGetSiteConnectionStringKeyVaultReferenceSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteConnectionStringKeyVaultReferenceSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSiteConnectionStringKeyVaultReferenceSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteConnectionStringKeyVaultReferenceSlot indicates an expected call of GetSiteConnectionStringKeyVaultReferenceSlot.
func (mr *MockWebAppsClientMockRecorder) GetSiteConnectionStringKeyVaultReferenceSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteConnectionStringKeyVaultReferenceSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetSiteConnectionStringKeyVaultReferenceSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSiteExtension mocks base method.
func (m *MockWebAppsClient) GetSiteExtension(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetSiteExtensionOptions) (armappservice.WebAppsClientGetSiteExtensionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteExtension", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSiteExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteExtension indicates an expected call of GetSiteExtension.
func (mr *MockWebAppsClientMockRecorder) GetSiteExtension(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteExtension", reflect.TypeOf((*MockWebAppsClient)(nil).GetSiteExtension), arg0, arg1, arg2, arg3, arg4)
}

// GetSiteExtensionSlot mocks base method.
func (m *MockWebAppsClient) GetSiteExtensionSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetSiteExtensionSlotOptions) (armappservice.WebAppsClientGetSiteExtensionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteExtensionSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSiteExtensionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteExtensionSlot indicates an expected call of GetSiteExtensionSlot.
func (mr *MockWebAppsClientMockRecorder) GetSiteExtensionSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteExtensionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetSiteExtensionSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSitePhpErrorLogFlag mocks base method.
func (m *MockWebAppsClient) GetSitePhpErrorLogFlag(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetSitePhpErrorLogFlagOptions) (armappservice.WebAppsClientGetSitePhpErrorLogFlagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitePhpErrorLogFlag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSitePhpErrorLogFlagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitePhpErrorLogFlag indicates an expected call of GetSitePhpErrorLogFlag.
func (mr *MockWebAppsClientMockRecorder) GetSitePhpErrorLogFlag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitePhpErrorLogFlag", reflect.TypeOf((*MockWebAppsClient)(nil).GetSitePhpErrorLogFlag), arg0, arg1, arg2, arg3)
}

// GetSitePhpErrorLogFlagSlot mocks base method.
func (m *MockWebAppsClient) GetSitePhpErrorLogFlagSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetSitePhpErrorLogFlagSlotOptions) (armappservice.WebAppsClientGetSitePhpErrorLogFlagSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitePhpErrorLogFlagSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSitePhpErrorLogFlagSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitePhpErrorLogFlagSlot indicates an expected call of GetSitePhpErrorLogFlagSlot.
func (mr *MockWebAppsClientMockRecorder) GetSitePhpErrorLogFlagSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitePhpErrorLogFlagSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetSitePhpErrorLogFlagSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetSlot mocks base method.
func (m *MockWebAppsClient) GetSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetSlotOptions) (armappservice.WebAppsClientGetSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockWebAppsClientMockRecorder) GetSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetSourceControl mocks base method.
func (m *MockWebAppsClient) GetSourceControl(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetSourceControlOptions) (armappservice.WebAppsClientGetSourceControlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceControl", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSourceControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceControl indicates an expected call of GetSourceControl.
func (mr *MockWebAppsClientMockRecorder) GetSourceControl(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceControl", reflect.TypeOf((*MockWebAppsClient)(nil).GetSourceControl), arg0, arg1, arg2, arg3)
}

// GetSourceControlSlot mocks base method.
func (m *MockWebAppsClient) GetSourceControlSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetSourceControlSlotOptions) (armappservice.WebAppsClientGetSourceControlSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceControlSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSourceControlSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceControlSlot indicates an expected call of GetSourceControlSlot.
func (mr *MockWebAppsClientMockRecorder) GetSourceControlSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceControlSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetSourceControlSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetSwiftVirtualNetworkConnection mocks base method.
func (m *MockWebAppsClient) GetSwiftVirtualNetworkConnection(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetSwiftVirtualNetworkConnectionOptions) (armappservice.WebAppsClientGetSwiftVirtualNetworkConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwiftVirtualNetworkConnection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSwiftVirtualNetworkConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwiftVirtualNetworkConnection indicates an expected call of GetSwiftVirtualNetworkConnection.
func (mr *MockWebAppsClientMockRecorder) GetSwiftVirtualNetworkConnection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwiftVirtualNetworkConnection", reflect.TypeOf((*MockWebAppsClient)(nil).GetSwiftVirtualNetworkConnection), arg0, arg1, arg2, arg3)
}

// GetSwiftVirtualNetworkConnectionSlot mocks base method.
func (m *MockWebAppsClient) GetSwiftVirtualNetworkConnectionSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetSwiftVirtualNetworkConnectionSlotOptions) (armappservice.WebAppsClientGetSwiftVirtualNetworkConnectionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwiftVirtualNetworkConnectionSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetSwiftVirtualNetworkConnectionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwiftVirtualNetworkConnectionSlot indicates an expected call of GetSwiftVirtualNetworkConnectionSlot.
func (mr *MockWebAppsClientMockRecorder) GetSwiftVirtualNetworkConnectionSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwiftVirtualNetworkConnectionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetSwiftVirtualNetworkConnectionSlot), arg0, arg1, arg2, arg3, arg4)
}

// GetTriggeredWebJob mocks base method.
func (m *MockWebAppsClient) GetTriggeredWebJob(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetTriggeredWebJobOptions) (armappservice.WebAppsClientGetTriggeredWebJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggeredWebJob", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetTriggeredWebJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggeredWebJob indicates an expected call of GetTriggeredWebJob.
func (mr *MockWebAppsClientMockRecorder) GetTriggeredWebJob(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggeredWebJob", reflect.TypeOf((*MockWebAppsClient)(nil).GetTriggeredWebJob), arg0, arg1, arg2, arg3, arg4)
}

// GetTriggeredWebJobHistory mocks base method.
func (m *MockWebAppsClient) GetTriggeredWebJobHistory(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetTriggeredWebJobHistoryOptions) (armappservice.WebAppsClientGetTriggeredWebJobHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggeredWebJobHistory", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetTriggeredWebJobHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggeredWebJobHistory indicates an expected call of GetTriggeredWebJobHistory.
func (mr *MockWebAppsClientMockRecorder) GetTriggeredWebJobHistory(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggeredWebJobHistory", reflect.TypeOf((*MockWebAppsClient)(nil).GetTriggeredWebJobHistory), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetTriggeredWebJobHistorySlot mocks base method.
func (m *MockWebAppsClient) GetTriggeredWebJobHistorySlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetTriggeredWebJobHistorySlotOptions) (armappservice.WebAppsClientGetTriggeredWebJobHistorySlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggeredWebJobHistorySlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetTriggeredWebJobHistorySlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggeredWebJobHistorySlot indicates an expected call of GetTriggeredWebJobHistorySlot.
func (mr *MockWebAppsClientMockRecorder) GetTriggeredWebJobHistorySlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggeredWebJobHistorySlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetTriggeredWebJobHistorySlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetTriggeredWebJobSlot mocks base method.
func (m *MockWebAppsClient) GetTriggeredWebJobSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetTriggeredWebJobSlotOptions) (armappservice.WebAppsClientGetTriggeredWebJobSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggeredWebJobSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetTriggeredWebJobSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggeredWebJobSlot indicates an expected call of GetTriggeredWebJobSlot.
func (mr *MockWebAppsClientMockRecorder) GetTriggeredWebJobSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggeredWebJobSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetTriggeredWebJobSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetVnetConnection mocks base method.
func (m *MockWebAppsClient) GetVnetConnection(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetVnetConnectionOptions) (armappservice.WebAppsClientGetVnetConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetConnection", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetVnetConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetConnection indicates an expected call of GetVnetConnection.
func (mr *MockWebAppsClientMockRecorder) GetVnetConnection(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetConnection", reflect.TypeOf((*MockWebAppsClient)(nil).GetVnetConnection), arg0, arg1, arg2, arg3, arg4)
}

// GetVnetConnectionGateway mocks base method.
func (m *MockWebAppsClient) GetVnetConnectionGateway(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetVnetConnectionGatewayOptions) (armappservice.WebAppsClientGetVnetConnectionGatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetConnectionGateway", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetVnetConnectionGatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetConnectionGateway indicates an expected call of GetVnetConnectionGateway.
func (mr *MockWebAppsClientMockRecorder) GetVnetConnectionGateway(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetConnectionGateway", reflect.TypeOf((*MockWebAppsClient)(nil).GetVnetConnectionGateway), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetVnetConnectionGatewaySlot mocks base method.
func (m *MockWebAppsClient) GetVnetConnectionGatewaySlot(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armappservice.WebAppsClientGetVnetConnectionGatewaySlotOptions) (armappservice.WebAppsClientGetVnetConnectionGatewaySlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetConnectionGatewaySlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetVnetConnectionGatewaySlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetConnectionGatewaySlot indicates an expected call of GetVnetConnectionGatewaySlot.
func (mr *MockWebAppsClientMockRecorder) GetVnetConnectionGatewaySlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetConnectionGatewaySlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetVnetConnectionGatewaySlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetVnetConnectionSlot mocks base method.
func (m *MockWebAppsClient) GetVnetConnectionSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetVnetConnectionSlotOptions) (armappservice.WebAppsClientGetVnetConnectionSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetConnectionSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetVnetConnectionSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetConnectionSlot indicates an expected call of GetVnetConnectionSlot.
func (mr *MockWebAppsClientMockRecorder) GetVnetConnectionSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetConnectionSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetVnetConnectionSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetWebJob mocks base method.
func (m *MockWebAppsClient) GetWebJob(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetWebJobOptions) (armappservice.WebAppsClientGetWebJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebJob", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetWebJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebJob indicates an expected call of GetWebJob.
func (mr *MockWebAppsClientMockRecorder) GetWebJob(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebJob", reflect.TypeOf((*MockWebAppsClient)(nil).GetWebJob), arg0, arg1, arg2, arg3, arg4)
}

// GetWebJobSlot mocks base method.
func (m *MockWebAppsClient) GetWebJobSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientGetWebJobSlotOptions) (armappservice.WebAppsClientGetWebJobSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebJobSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetWebJobSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebJobSlot indicates an expected call of GetWebJobSlot.
func (mr *MockWebAppsClientMockRecorder) GetWebJobSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebJobSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetWebJobSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetWebSiteContainerLogs mocks base method.
func (m *MockWebAppsClient) GetWebSiteContainerLogs(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientGetWebSiteContainerLogsOptions) (armappservice.WebAppsClientGetWebSiteContainerLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebSiteContainerLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetWebSiteContainerLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebSiteContainerLogs indicates an expected call of GetWebSiteContainerLogs.
func (mr *MockWebAppsClientMockRecorder) GetWebSiteContainerLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebSiteContainerLogs", reflect.TypeOf((*MockWebAppsClient)(nil).GetWebSiteContainerLogs), arg0, arg1, arg2, arg3)
}

// GetWebSiteContainerLogsSlot mocks base method.
func (m *MockWebAppsClient) GetWebSiteContainerLogsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientGetWebSiteContainerLogsSlotOptions) (armappservice.WebAppsClientGetWebSiteContainerLogsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebSiteContainerLogsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientGetWebSiteContainerLogsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebSiteContainerLogsSlot indicates an expected call of GetWebSiteContainerLogsSlot.
func (mr *MockWebAppsClientMockRecorder) GetWebSiteContainerLogsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebSiteContainerLogsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).GetWebSiteContainerLogsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListApplicationSettings mocks base method.
func (m *MockWebAppsClient) ListApplicationSettings(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListApplicationSettingsOptions) (armappservice.WebAppsClientListApplicationSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListApplicationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSettings indicates an expected call of ListApplicationSettings.
func (mr *MockWebAppsClientMockRecorder) ListApplicationSettings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSettings", reflect.TypeOf((*MockWebAppsClient)(nil).ListApplicationSettings), arg0, arg1, arg2, arg3)
}

// ListApplicationSettingsSlot mocks base method.
func (m *MockWebAppsClient) ListApplicationSettingsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListApplicationSettingsSlotOptions) (armappservice.WebAppsClientListApplicationSettingsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationSettingsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListApplicationSettingsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationSettingsSlot indicates an expected call of ListApplicationSettingsSlot.
func (mr *MockWebAppsClientMockRecorder) ListApplicationSettingsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationSettingsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListApplicationSettingsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListAzureStorageAccounts mocks base method.
func (m *MockWebAppsClient) ListAzureStorageAccounts(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListAzureStorageAccountsOptions) (armappservice.WebAppsClientListAzureStorageAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureStorageAccounts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListAzureStorageAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAzureStorageAccounts indicates an expected call of ListAzureStorageAccounts.
func (mr *MockWebAppsClientMockRecorder) ListAzureStorageAccounts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureStorageAccounts", reflect.TypeOf((*MockWebAppsClient)(nil).ListAzureStorageAccounts), arg0, arg1, arg2, arg3)
}

// ListAzureStorageAccountsSlot mocks base method.
func (m *MockWebAppsClient) ListAzureStorageAccountsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListAzureStorageAccountsSlotOptions) (armappservice.WebAppsClientListAzureStorageAccountsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureStorageAccountsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListAzureStorageAccountsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAzureStorageAccountsSlot indicates an expected call of ListAzureStorageAccountsSlot.
func (mr *MockWebAppsClientMockRecorder) ListAzureStorageAccountsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureStorageAccountsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListAzureStorageAccountsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListBackupStatusSecrets mocks base method.
func (m *MockWebAppsClient) ListBackupStatusSecrets(arg0 context.Context, arg1, arg2, arg3 string, arg4 armappservice.BackupRequest, arg5 *armappservice.WebAppsClientListBackupStatusSecretsOptions) (armappservice.WebAppsClientListBackupStatusSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupStatusSecrets", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientListBackupStatusSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupStatusSecrets indicates an expected call of ListBackupStatusSecrets.
func (mr *MockWebAppsClientMockRecorder) ListBackupStatusSecrets(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupStatusSecrets", reflect.TypeOf((*MockWebAppsClient)(nil).ListBackupStatusSecrets), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListBackupStatusSecretsSlot mocks base method.
func (m *MockWebAppsClient) ListBackupStatusSecretsSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 armappservice.BackupRequest, arg6 *armappservice.WebAppsClientListBackupStatusSecretsSlotOptions) (armappservice.WebAppsClientListBackupStatusSecretsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupStatusSecretsSlot", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armappservice.WebAppsClientListBackupStatusSecretsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupStatusSecretsSlot indicates an expected call of ListBackupStatusSecretsSlot.
func (mr *MockWebAppsClientMockRecorder) ListBackupStatusSecretsSlot(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupStatusSecretsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListBackupStatusSecretsSlot), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListConnectionStrings mocks base method.
func (m *MockWebAppsClient) ListConnectionStrings(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListConnectionStringsOptions) (armappservice.WebAppsClientListConnectionStringsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionStrings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListConnectionStringsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionStrings indicates an expected call of ListConnectionStrings.
func (mr *MockWebAppsClientMockRecorder) ListConnectionStrings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionStrings", reflect.TypeOf((*MockWebAppsClient)(nil).ListConnectionStrings), arg0, arg1, arg2, arg3)
}

// ListConnectionStringsSlot mocks base method.
func (m *MockWebAppsClient) ListConnectionStringsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListConnectionStringsSlotOptions) (armappservice.WebAppsClientListConnectionStringsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionStringsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListConnectionStringsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionStringsSlot indicates an expected call of ListConnectionStringsSlot.
func (mr *MockWebAppsClientMockRecorder) ListConnectionStringsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionStringsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListConnectionStringsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListDeploymentLog mocks base method.
func (m *MockWebAppsClient) ListDeploymentLog(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListDeploymentLogOptions) (armappservice.WebAppsClientListDeploymentLogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentLog", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListDeploymentLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentLog indicates an expected call of ListDeploymentLog.
func (mr *MockWebAppsClientMockRecorder) ListDeploymentLog(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentLog", reflect.TypeOf((*MockWebAppsClient)(nil).ListDeploymentLog), arg0, arg1, arg2, arg3, arg4)
}

// ListDeploymentLogSlot mocks base method.
func (m *MockWebAppsClient) ListDeploymentLogSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientListDeploymentLogSlotOptions) (armappservice.WebAppsClientListDeploymentLogSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentLogSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientListDeploymentLogSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentLogSlot indicates an expected call of ListDeploymentLogSlot.
func (mr *MockWebAppsClientMockRecorder) ListDeploymentLogSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentLogSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListDeploymentLogSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListFunctionKeys mocks base method.
func (m *MockWebAppsClient) ListFunctionKeys(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListFunctionKeysOptions) (armappservice.WebAppsClientListFunctionKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFunctionKeys", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListFunctionKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionKeys indicates an expected call of ListFunctionKeys.
func (mr *MockWebAppsClientMockRecorder) ListFunctionKeys(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionKeys", reflect.TypeOf((*MockWebAppsClient)(nil).ListFunctionKeys), arg0, arg1, arg2, arg3, arg4)
}

// ListFunctionKeysSlot mocks base method.
func (m *MockWebAppsClient) ListFunctionKeysSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientListFunctionKeysSlotOptions) (armappservice.WebAppsClientListFunctionKeysSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFunctionKeysSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientListFunctionKeysSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionKeysSlot indicates an expected call of ListFunctionKeysSlot.
func (mr *MockWebAppsClientMockRecorder) ListFunctionKeysSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionKeysSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListFunctionKeysSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListFunctionSecrets mocks base method.
func (m *MockWebAppsClient) ListFunctionSecrets(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListFunctionSecretsOptions) (armappservice.WebAppsClientListFunctionSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFunctionSecrets", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListFunctionSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionSecrets indicates an expected call of ListFunctionSecrets.
func (mr *MockWebAppsClientMockRecorder) ListFunctionSecrets(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionSecrets", reflect.TypeOf((*MockWebAppsClient)(nil).ListFunctionSecrets), arg0, arg1, arg2, arg3, arg4)
}

// ListFunctionSecretsSlot mocks base method.
func (m *MockWebAppsClient) ListFunctionSecretsSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientListFunctionSecretsSlotOptions) (armappservice.WebAppsClientListFunctionSecretsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFunctionSecretsSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientListFunctionSecretsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctionSecretsSlot indicates an expected call of ListFunctionSecretsSlot.
func (mr *MockWebAppsClientMockRecorder) ListFunctionSecretsSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctionSecretsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListFunctionSecretsSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListHostKeys mocks base method.
func (m *MockWebAppsClient) ListHostKeys(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListHostKeysOptions) (armappservice.WebAppsClientListHostKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostKeys", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListHostKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostKeys indicates an expected call of ListHostKeys.
func (mr *MockWebAppsClientMockRecorder) ListHostKeys(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostKeys", reflect.TypeOf((*MockWebAppsClient)(nil).ListHostKeys), arg0, arg1, arg2, arg3)
}

// ListHostKeysSlot mocks base method.
func (m *MockWebAppsClient) ListHostKeysSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListHostKeysSlotOptions) (armappservice.WebAppsClientListHostKeysSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHostKeysSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListHostKeysSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostKeysSlot indicates an expected call of ListHostKeysSlot.
func (mr *MockWebAppsClientMockRecorder) ListHostKeysSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostKeysSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListHostKeysSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListHybridConnections mocks base method.
func (m *MockWebAppsClient) ListHybridConnections(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListHybridConnectionsOptions) (armappservice.WebAppsClientListHybridConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHybridConnections", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListHybridConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHybridConnections indicates an expected call of ListHybridConnections.
func (mr *MockWebAppsClientMockRecorder) ListHybridConnections(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHybridConnections", reflect.TypeOf((*MockWebAppsClient)(nil).ListHybridConnections), arg0, arg1, arg2, arg3)
}

// ListHybridConnectionsSlot mocks base method.
func (m *MockWebAppsClient) ListHybridConnectionsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListHybridConnectionsSlotOptions) (armappservice.WebAppsClientListHybridConnectionsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHybridConnectionsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListHybridConnectionsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHybridConnectionsSlot indicates an expected call of ListHybridConnectionsSlot.
func (mr *MockWebAppsClientMockRecorder) ListHybridConnectionsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHybridConnectionsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListHybridConnectionsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListMetadata mocks base method.
func (m *MockWebAppsClient) ListMetadata(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListMetadataOptions) (armappservice.WebAppsClientListMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadata", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadata indicates an expected call of ListMetadata.
func (mr *MockWebAppsClientMockRecorder) ListMetadata(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadata", reflect.TypeOf((*MockWebAppsClient)(nil).ListMetadata), arg0, arg1, arg2, arg3)
}

// ListMetadataSlot mocks base method.
func (m *MockWebAppsClient) ListMetadataSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListMetadataSlotOptions) (armappservice.WebAppsClientListMetadataSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadataSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListMetadataSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetadataSlot indicates an expected call of ListMetadataSlot.
func (mr *MockWebAppsClientMockRecorder) ListMetadataSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadataSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListMetadataSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListNetworkFeatures mocks base method.
func (m *MockWebAppsClient) ListNetworkFeatures(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListNetworkFeaturesOptions) (armappservice.WebAppsClientListNetworkFeaturesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkFeatures", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListNetworkFeaturesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkFeatures indicates an expected call of ListNetworkFeatures.
func (mr *MockWebAppsClientMockRecorder) ListNetworkFeatures(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkFeatures", reflect.TypeOf((*MockWebAppsClient)(nil).ListNetworkFeatures), arg0, arg1, arg2, arg3, arg4)
}

// ListNetworkFeaturesSlot mocks base method.
func (m *MockWebAppsClient) ListNetworkFeaturesSlot(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientListNetworkFeaturesSlotOptions) (armappservice.WebAppsClientListNetworkFeaturesSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkFeaturesSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientListNetworkFeaturesSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkFeaturesSlot indicates an expected call of ListNetworkFeaturesSlot.
func (mr *MockWebAppsClientMockRecorder) ListNetworkFeaturesSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkFeaturesSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListNetworkFeaturesSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListPremierAddOns mocks base method.
func (m *MockWebAppsClient) ListPremierAddOns(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListPremierAddOnsOptions) (armappservice.WebAppsClientListPremierAddOnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPremierAddOns", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListPremierAddOnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPremierAddOns indicates an expected call of ListPremierAddOns.
func (mr *MockWebAppsClientMockRecorder) ListPremierAddOns(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPremierAddOns", reflect.TypeOf((*MockWebAppsClient)(nil).ListPremierAddOns), arg0, arg1, arg2, arg3)
}

// ListPremierAddOnsSlot mocks base method.
func (m *MockWebAppsClient) ListPremierAddOnsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListPremierAddOnsSlotOptions) (armappservice.WebAppsClientListPremierAddOnsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPremierAddOnsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListPremierAddOnsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPremierAddOnsSlot indicates an expected call of ListPremierAddOnsSlot.
func (mr *MockWebAppsClientMockRecorder) ListPremierAddOnsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPremierAddOnsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListPremierAddOnsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListPublishingProfileXMLWithSecrets mocks base method.
func (m *MockWebAppsClient) ListPublishingProfileXMLWithSecrets(arg0 context.Context, arg1, arg2 string, arg3 armappservice.CsmPublishingProfileOptions, arg4 *armappservice.WebAppsClientListPublishingProfileXMLWithSecretsOptions) (armappservice.WebAppsClientListPublishingProfileXMLWithSecretsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishingProfileXMLWithSecrets", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListPublishingProfileXMLWithSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublishingProfileXMLWithSecrets indicates an expected call of ListPublishingProfileXMLWithSecrets.
func (mr *MockWebAppsClientMockRecorder) ListPublishingProfileXMLWithSecrets(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishingProfileXMLWithSecrets", reflect.TypeOf((*MockWebAppsClient)(nil).ListPublishingProfileXMLWithSecrets), arg0, arg1, arg2, arg3, arg4)
}

// ListPublishingProfileXMLWithSecretsSlot mocks base method.
func (m *MockWebAppsClient) ListPublishingProfileXMLWithSecretsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 armappservice.CsmPublishingProfileOptions, arg5 *armappservice.WebAppsClientListPublishingProfileXMLWithSecretsSlotOptions) (armappservice.WebAppsClientListPublishingProfileXMLWithSecretsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishingProfileXMLWithSecretsSlot", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armappservice.WebAppsClientListPublishingProfileXMLWithSecretsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublishingProfileXMLWithSecretsSlot indicates an expected call of ListPublishingProfileXMLWithSecretsSlot.
func (mr *MockWebAppsClientMockRecorder) ListPublishingProfileXMLWithSecretsSlot(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishingProfileXMLWithSecretsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListPublishingProfileXMLWithSecretsSlot), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListRelayServiceConnections mocks base method.
func (m *MockWebAppsClient) ListRelayServiceConnections(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListRelayServiceConnectionsOptions) (armappservice.WebAppsClientListRelayServiceConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelayServiceConnections", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListRelayServiceConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelayServiceConnections indicates an expected call of ListRelayServiceConnections.
func (mr *MockWebAppsClientMockRecorder) ListRelayServiceConnections(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelayServiceConnections", reflect.TypeOf((*MockWebAppsClient)(nil).ListRelayServiceConnections), arg0, arg1, arg2, arg3)
}

// ListRelayServiceConnectionsSlot mocks base method.
func (m *MockWebAppsClient) ListRelayServiceConnectionsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListRelayServiceConnectionsSlotOptions) (armappservice.WebAppsClientListRelayServiceConnectionsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelayServiceConnectionsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListRelayServiceConnectionsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelayServiceConnectionsSlot indicates an expected call of ListRelayServiceConnectionsSlot.
func (mr *MockWebAppsClientMockRecorder) ListRelayServiceConnectionsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelayServiceConnectionsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListRelayServiceConnectionsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListSitePushSettings mocks base method.
func (m *MockWebAppsClient) ListSitePushSettings(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSitePushSettingsOptions) (armappservice.WebAppsClientListSitePushSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitePushSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSitePushSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSitePushSettings indicates an expected call of ListSitePushSettings.
func (mr *MockWebAppsClientMockRecorder) ListSitePushSettings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitePushSettings", reflect.TypeOf((*MockWebAppsClient)(nil).ListSitePushSettings), arg0, arg1, arg2, arg3)
}

// ListSitePushSettingsSlot mocks base method.
func (m *MockWebAppsClient) ListSitePushSettingsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListSitePushSettingsSlotOptions) (armappservice.WebAppsClientListSitePushSettingsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitePushSettingsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSitePushSettingsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSitePushSettingsSlot indicates an expected call of ListSitePushSettingsSlot.
func (mr *MockWebAppsClientMockRecorder) ListSitePushSettingsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitePushSettingsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListSitePushSettingsSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListSlotConfigurationNames mocks base method.
func (m *MockWebAppsClient) ListSlotConfigurationNames(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSlotConfigurationNamesOptions) (armappservice.WebAppsClientListSlotConfigurationNamesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlotConfigurationNames", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSlotConfigurationNamesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlotConfigurationNames indicates an expected call of ListSlotConfigurationNames.
func (mr *MockWebAppsClientMockRecorder) ListSlotConfigurationNames(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotConfigurationNames", reflect.TypeOf((*MockWebAppsClient)(nil).ListSlotConfigurationNames), arg0, arg1, arg2, arg3)
}

// ListSyncFunctionTriggers mocks base method.
func (m *MockWebAppsClient) ListSyncFunctionTriggers(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSyncFunctionTriggersOptions) (armappservice.WebAppsClientListSyncFunctionTriggersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncFunctionTriggers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSyncFunctionTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncFunctionTriggers indicates an expected call of ListSyncFunctionTriggers.
func (mr *MockWebAppsClientMockRecorder) ListSyncFunctionTriggers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncFunctionTriggers", reflect.TypeOf((*MockWebAppsClient)(nil).ListSyncFunctionTriggers), arg0, arg1, arg2, arg3)
}

// ListSyncFunctionTriggersSlot mocks base method.
func (m *MockWebAppsClient) ListSyncFunctionTriggersSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListSyncFunctionTriggersSlotOptions) (armappservice.WebAppsClientListSyncFunctionTriggersSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncFunctionTriggersSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSyncFunctionTriggersSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncFunctionTriggersSlot indicates an expected call of ListSyncFunctionTriggersSlot.
func (mr *MockWebAppsClientMockRecorder) ListSyncFunctionTriggersSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncFunctionTriggersSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListSyncFunctionTriggersSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListSyncStatus mocks base method.
func (m *MockWebAppsClient) ListSyncStatus(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSyncStatusOptions) (armappservice.WebAppsClientListSyncStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSyncStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncStatus indicates an expected call of ListSyncStatus.
func (mr *MockWebAppsClientMockRecorder) ListSyncStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncStatus", reflect.TypeOf((*MockWebAppsClient)(nil).ListSyncStatus), arg0, arg1, arg2, arg3)
}

// ListSyncStatusSlot mocks base method.
func (m *MockWebAppsClient) ListSyncStatusSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListSyncStatusSlotOptions) (armappservice.WebAppsClientListSyncStatusSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSyncStatusSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListSyncStatusSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSyncStatusSlot indicates an expected call of ListSyncStatusSlot.
func (mr *MockWebAppsClientMockRecorder) ListSyncStatusSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSyncStatusSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListSyncStatusSlot), arg0, arg1, arg2, arg3, arg4)
}

// ListVnetConnections mocks base method.
func (m *MockWebAppsClient) ListVnetConnections(arg0 context.Context, arg1, arg2 string, arg3 *armappservice.WebAppsClientListVnetConnectionsOptions) (armappservice.WebAppsClientListVnetConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVnetConnections", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armappservice.WebAppsClientListVnetConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVnetConnections indicates an expected call of ListVnetConnections.
func (mr *MockWebAppsClientMockRecorder) ListVnetConnections(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVnetConnections", reflect.TypeOf((*MockWebAppsClient)(nil).ListVnetConnections), arg0, arg1, arg2, arg3)
}

// ListVnetConnectionsSlot mocks base method.
func (m *MockWebAppsClient) ListVnetConnectionsSlot(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListVnetConnectionsSlotOptions) (armappservice.WebAppsClientListVnetConnectionsSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVnetConnectionsSlot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armappservice.WebAppsClientListVnetConnectionsSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVnetConnectionsSlot indicates an expected call of ListVnetConnectionsSlot.
func (mr *MockWebAppsClientMockRecorder) ListVnetConnectionsSlot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVnetConnectionsSlot", reflect.TypeOf((*MockWebAppsClient)(nil).ListVnetConnectionsSlot), arg0, arg1, arg2, arg3, arg4)
}

// NewListBackupsPager mocks base method.
func (m *MockWebAppsClient) NewListBackupsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListBackupsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListBackupsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBackupsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListBackupsResponse)
	return ret0
}

// NewListBackupsPager indicates an expected call of NewListBackupsPager.
func (mr *MockWebAppsClientMockRecorder) NewListBackupsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBackupsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListBackupsPager), arg0, arg1, arg2)
}

// NewListBackupsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListBackupsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListBackupsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListBackupsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBackupsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListBackupsSlotResponse)
	return ret0
}

// NewListBackupsSlotPager indicates an expected call of NewListBackupsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListBackupsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBackupsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListBackupsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListBasicPublishingCredentialsPoliciesPager mocks base method.
func (m *MockWebAppsClient) NewListBasicPublishingCredentialsPoliciesPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListBasicPublishingCredentialsPoliciesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListBasicPublishingCredentialsPoliciesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBasicPublishingCredentialsPoliciesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListBasicPublishingCredentialsPoliciesResponse)
	return ret0
}

// NewListBasicPublishingCredentialsPoliciesPager indicates an expected call of NewListBasicPublishingCredentialsPoliciesPager.
func (mr *MockWebAppsClientMockRecorder) NewListBasicPublishingCredentialsPoliciesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBasicPublishingCredentialsPoliciesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListBasicPublishingCredentialsPoliciesPager), arg0, arg1, arg2)
}

// NewListBasicPublishingCredentialsPoliciesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListBasicPublishingCredentialsPoliciesSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListBasicPublishingCredentialsPoliciesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListBasicPublishingCredentialsPoliciesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBasicPublishingCredentialsPoliciesSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListBasicPublishingCredentialsPoliciesSlotResponse)
	return ret0
}

// NewListBasicPublishingCredentialsPoliciesSlotPager indicates an expected call of NewListBasicPublishingCredentialsPoliciesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListBasicPublishingCredentialsPoliciesSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBasicPublishingCredentialsPoliciesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListBasicPublishingCredentialsPoliciesSlotPager), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockWebAppsClient) NewListByResourceGroupPager(arg0 string, arg1 *armappservice.WebAppsClientListByResourceGroupOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockWebAppsClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListConfigurationSnapshotInfoPager mocks base method.
func (m *MockWebAppsClient) NewListConfigurationSnapshotInfoPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListConfigurationSnapshotInfoOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationSnapshotInfoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListConfigurationSnapshotInfoPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationSnapshotInfoResponse)
	return ret0
}

// NewListConfigurationSnapshotInfoPager indicates an expected call of NewListConfigurationSnapshotInfoPager.
func (mr *MockWebAppsClientMockRecorder) NewListConfigurationSnapshotInfoPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListConfigurationSnapshotInfoPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListConfigurationSnapshotInfoPager), arg0, arg1, arg2)
}

// NewListConfigurationSnapshotInfoSlotPager mocks base method.
func (m *MockWebAppsClient) NewListConfigurationSnapshotInfoSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListConfigurationSnapshotInfoSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationSnapshotInfoSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListConfigurationSnapshotInfoSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationSnapshotInfoSlotResponse)
	return ret0
}

// NewListConfigurationSnapshotInfoSlotPager indicates an expected call of NewListConfigurationSnapshotInfoSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListConfigurationSnapshotInfoSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListConfigurationSnapshotInfoSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListConfigurationSnapshotInfoSlotPager), arg0, arg1, arg2, arg3)
}

// NewListConfigurationsPager mocks base method.
func (m *MockWebAppsClient) NewListConfigurationsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListConfigurationsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListConfigurationsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationsResponse)
	return ret0
}

// NewListConfigurationsPager indicates an expected call of NewListConfigurationsPager.
func (mr *MockWebAppsClientMockRecorder) NewListConfigurationsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListConfigurationsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListConfigurationsPager), arg0, arg1, arg2)
}

// NewListConfigurationsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListConfigurationsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListConfigurationsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListConfigurationsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListConfigurationsSlotResponse)
	return ret0
}

// NewListConfigurationsSlotPager indicates an expected call of NewListConfigurationsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListConfigurationsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListConfigurationsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListConfigurationsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListContinuousWebJobsPager mocks base method.
func (m *MockWebAppsClient) NewListContinuousWebJobsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListContinuousWebJobsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListContinuousWebJobsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListContinuousWebJobsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListContinuousWebJobsResponse)
	return ret0
}

// NewListContinuousWebJobsPager indicates an expected call of NewListContinuousWebJobsPager.
func (mr *MockWebAppsClientMockRecorder) NewListContinuousWebJobsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListContinuousWebJobsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListContinuousWebJobsPager), arg0, arg1, arg2)
}

// NewListContinuousWebJobsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListContinuousWebJobsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListContinuousWebJobsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListContinuousWebJobsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListContinuousWebJobsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListContinuousWebJobsSlotResponse)
	return ret0
}

// NewListContinuousWebJobsSlotPager indicates an expected call of NewListContinuousWebJobsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListContinuousWebJobsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListContinuousWebJobsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListContinuousWebJobsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListDeploymentsPager mocks base method.
func (m *MockWebAppsClient) NewListDeploymentsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListDeploymentsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListDeploymentsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDeploymentsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListDeploymentsResponse)
	return ret0
}

// NewListDeploymentsPager indicates an expected call of NewListDeploymentsPager.
func (mr *MockWebAppsClientMockRecorder) NewListDeploymentsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDeploymentsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListDeploymentsPager), arg0, arg1, arg2)
}

// NewListDeploymentsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListDeploymentsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListDeploymentsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListDeploymentsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDeploymentsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListDeploymentsSlotResponse)
	return ret0
}

// NewListDeploymentsSlotPager indicates an expected call of NewListDeploymentsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListDeploymentsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDeploymentsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListDeploymentsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListDomainOwnershipIdentifiersPager mocks base method.
func (m *MockWebAppsClient) NewListDomainOwnershipIdentifiersPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListDomainOwnershipIdentifiersOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListDomainOwnershipIdentifiersResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDomainOwnershipIdentifiersPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListDomainOwnershipIdentifiersResponse)
	return ret0
}

// NewListDomainOwnershipIdentifiersPager indicates an expected call of NewListDomainOwnershipIdentifiersPager.
func (mr *MockWebAppsClientMockRecorder) NewListDomainOwnershipIdentifiersPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDomainOwnershipIdentifiersPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListDomainOwnershipIdentifiersPager), arg0, arg1, arg2)
}

// NewListDomainOwnershipIdentifiersSlotPager mocks base method.
func (m *MockWebAppsClient) NewListDomainOwnershipIdentifiersSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListDomainOwnershipIdentifiersSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListDomainOwnershipIdentifiersSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDomainOwnershipIdentifiersSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListDomainOwnershipIdentifiersSlotResponse)
	return ret0
}

// NewListDomainOwnershipIdentifiersSlotPager indicates an expected call of NewListDomainOwnershipIdentifiersSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListDomainOwnershipIdentifiersSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDomainOwnershipIdentifiersSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListDomainOwnershipIdentifiersSlotPager), arg0, arg1, arg2, arg3)
}

// NewListFunctionsPager mocks base method.
func (m *MockWebAppsClient) NewListFunctionsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListFunctionsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListFunctionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListFunctionsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListFunctionsResponse)
	return ret0
}

// NewListFunctionsPager indicates an expected call of NewListFunctionsPager.
func (mr *MockWebAppsClientMockRecorder) NewListFunctionsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListFunctionsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListFunctionsPager), arg0, arg1, arg2)
}

// NewListHostNameBindingsPager mocks base method.
func (m *MockWebAppsClient) NewListHostNameBindingsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListHostNameBindingsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListHostNameBindingsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListHostNameBindingsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListHostNameBindingsResponse)
	return ret0
}

// NewListHostNameBindingsPager indicates an expected call of NewListHostNameBindingsPager.
func (mr *MockWebAppsClientMockRecorder) NewListHostNameBindingsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListHostNameBindingsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListHostNameBindingsPager), arg0, arg1, arg2)
}

// NewListHostNameBindingsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListHostNameBindingsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListHostNameBindingsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListHostNameBindingsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListHostNameBindingsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListHostNameBindingsSlotResponse)
	return ret0
}

// NewListHostNameBindingsSlotPager indicates an expected call of NewListHostNameBindingsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListHostNameBindingsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListHostNameBindingsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListHostNameBindingsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListInstanceFunctionsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceFunctionsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListInstanceFunctionsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceFunctionsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceFunctionsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceFunctionsSlotResponse)
	return ret0
}

// NewListInstanceFunctionsSlotPager indicates an expected call of NewListInstanceFunctionsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceFunctionsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceFunctionsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceFunctionsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListInstanceIdentifiersPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceIdentifiersPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListInstanceIdentifiersOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceIdentifiersResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceIdentifiersPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceIdentifiersResponse)
	return ret0
}

// NewListInstanceIdentifiersPager indicates an expected call of NewListInstanceIdentifiersPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceIdentifiersPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceIdentifiersPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceIdentifiersPager), arg0, arg1, arg2)
}

// NewListInstanceIdentifiersSlotPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceIdentifiersSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListInstanceIdentifiersSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceIdentifiersSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceIdentifiersSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceIdentifiersSlotResponse)
	return ret0
}

// NewListInstanceIdentifiersSlotPager indicates an expected call of NewListInstanceIdentifiersSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceIdentifiersSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceIdentifiersSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceIdentifiersSlotPager), arg0, arg1, arg2, arg3)
}

// NewListInstanceProcessModulesPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceProcessModulesPager(arg0, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListInstanceProcessModulesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessModulesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceProcessModulesPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessModulesResponse)
	return ret0
}

// NewListInstanceProcessModulesPager indicates an expected call of NewListInstanceProcessModulesPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceProcessModulesPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceProcessModulesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceProcessModulesPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListInstanceProcessModulesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceProcessModulesSlotPager(arg0, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientListInstanceProcessModulesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessModulesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceProcessModulesSlotPager", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessModulesSlotResponse)
	return ret0
}

// NewListInstanceProcessModulesSlotPager indicates an expected call of NewListInstanceProcessModulesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceProcessModulesSlotPager(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceProcessModulesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceProcessModulesSlotPager), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListInstanceProcessThreadsPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceProcessThreadsPager(arg0, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListInstanceProcessThreadsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessThreadsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceProcessThreadsPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessThreadsResponse)
	return ret0
}

// NewListInstanceProcessThreadsPager indicates an expected call of NewListInstanceProcessThreadsPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceProcessThreadsPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceProcessThreadsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceProcessThreadsPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListInstanceProcessThreadsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceProcessThreadsSlotPager(arg0, arg1, arg2, arg3, arg4 string, arg5 *armappservice.WebAppsClientListInstanceProcessThreadsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessThreadsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceProcessThreadsSlotPager", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessThreadsSlotResponse)
	return ret0
}

// NewListInstanceProcessThreadsSlotPager indicates an expected call of NewListInstanceProcessThreadsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceProcessThreadsSlotPager(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceProcessThreadsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceProcessThreadsSlotPager), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListInstanceProcessesPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceProcessesPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListInstanceProcessesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceProcessesPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessesResponse)
	return ret0
}

// NewListInstanceProcessesPager indicates an expected call of NewListInstanceProcessesPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceProcessesPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceProcessesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceProcessesPager), arg0, arg1, arg2, arg3)
}

// NewListInstanceProcessesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListInstanceProcessesSlotPager(arg0, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListInstanceProcessesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInstanceProcessesSlotPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListInstanceProcessesSlotResponse)
	return ret0
}

// NewListInstanceProcessesSlotPager indicates an expected call of NewListInstanceProcessesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListInstanceProcessesSlotPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInstanceProcessesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListInstanceProcessesSlotPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListPager mocks base method.
func (m *MockWebAppsClient) NewListPager(arg0 *armappservice.WebAppsClientListOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockWebAppsClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListPager), arg0)
}

// NewListPerfMonCountersPager mocks base method.
func (m *MockWebAppsClient) NewListPerfMonCountersPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListPerfMonCountersOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListPerfMonCountersResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPerfMonCountersPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListPerfMonCountersResponse)
	return ret0
}

// NewListPerfMonCountersPager indicates an expected call of NewListPerfMonCountersPager.
func (mr *MockWebAppsClientMockRecorder) NewListPerfMonCountersPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPerfMonCountersPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListPerfMonCountersPager), arg0, arg1, arg2)
}

// NewListPerfMonCountersSlotPager mocks base method.
func (m *MockWebAppsClient) NewListPerfMonCountersSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListPerfMonCountersSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListPerfMonCountersSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPerfMonCountersSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListPerfMonCountersSlotResponse)
	return ret0
}

// NewListPerfMonCountersSlotPager indicates an expected call of NewListPerfMonCountersSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListPerfMonCountersSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPerfMonCountersSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListPerfMonCountersSlotPager), arg0, arg1, arg2, arg3)
}

// NewListProcessModulesPager mocks base method.
func (m *MockWebAppsClient) NewListProcessModulesPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListProcessModulesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProcessModulesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProcessModulesPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProcessModulesResponse)
	return ret0
}

// NewListProcessModulesPager indicates an expected call of NewListProcessModulesPager.
func (mr *MockWebAppsClientMockRecorder) NewListProcessModulesPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProcessModulesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProcessModulesPager), arg0, arg1, arg2, arg3)
}

// NewListProcessModulesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListProcessModulesSlotPager(arg0, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListProcessModulesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProcessModulesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProcessModulesSlotPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProcessModulesSlotResponse)
	return ret0
}

// NewListProcessModulesSlotPager indicates an expected call of NewListProcessModulesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListProcessModulesSlotPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProcessModulesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProcessModulesSlotPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListProcessThreadsPager mocks base method.
func (m *MockWebAppsClient) NewListProcessThreadsPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListProcessThreadsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProcessThreadsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProcessThreadsPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProcessThreadsResponse)
	return ret0
}

// NewListProcessThreadsPager indicates an expected call of NewListProcessThreadsPager.
func (mr *MockWebAppsClientMockRecorder) NewListProcessThreadsPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProcessThreadsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProcessThreadsPager), arg0, arg1, arg2, arg3)
}

// NewListProcessThreadsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListProcessThreadsSlotPager(arg0, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListProcessThreadsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProcessThreadsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProcessThreadsSlotPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProcessThreadsSlotResponse)
	return ret0
}

// NewListProcessThreadsSlotPager indicates an expected call of NewListProcessThreadsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListProcessThreadsSlotPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProcessThreadsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProcessThreadsSlotPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListProcessesPager mocks base method.
func (m *MockWebAppsClient) NewListProcessesPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListProcessesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProcessesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProcessesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProcessesResponse)
	return ret0
}

// NewListProcessesPager indicates an expected call of NewListProcessesPager.
func (mr *MockWebAppsClientMockRecorder) NewListProcessesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProcessesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProcessesPager), arg0, arg1, arg2)
}

// NewListProcessesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListProcessesSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListProcessesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProcessesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProcessesSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProcessesSlotResponse)
	return ret0
}

// NewListProcessesSlotPager indicates an expected call of NewListProcessesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListProcessesSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProcessesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProcessesSlotPager), arg0, arg1, arg2, arg3)
}

// NewListProductionSiteDeploymentStatusesPager mocks base method.
func (m *MockWebAppsClient) NewListProductionSiteDeploymentStatusesPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListProductionSiteDeploymentStatusesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListProductionSiteDeploymentStatusesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListProductionSiteDeploymentStatusesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListProductionSiteDeploymentStatusesResponse)
	return ret0
}

// NewListProductionSiteDeploymentStatusesPager indicates an expected call of NewListProductionSiteDeploymentStatusesPager.
func (mr *MockWebAppsClientMockRecorder) NewListProductionSiteDeploymentStatusesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListProductionSiteDeploymentStatusesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListProductionSiteDeploymentStatusesPager), arg0, arg1, arg2)
}

// NewListPublicCertificatesPager mocks base method.
func (m *MockWebAppsClient) NewListPublicCertificatesPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListPublicCertificatesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListPublicCertificatesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPublicCertificatesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListPublicCertificatesResponse)
	return ret0
}

// NewListPublicCertificatesPager indicates an expected call of NewListPublicCertificatesPager.
func (mr *MockWebAppsClientMockRecorder) NewListPublicCertificatesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPublicCertificatesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListPublicCertificatesPager), arg0, arg1, arg2)
}

// NewListPublicCertificatesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListPublicCertificatesSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListPublicCertificatesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListPublicCertificatesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPublicCertificatesSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListPublicCertificatesSlotResponse)
	return ret0
}

// NewListPublicCertificatesSlotPager indicates an expected call of NewListPublicCertificatesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListPublicCertificatesSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPublicCertificatesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListPublicCertificatesSlotPager), arg0, arg1, arg2, arg3)
}

// NewListSiteBackupsPager mocks base method.
func (m *MockWebAppsClient) NewListSiteBackupsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListSiteBackupsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSiteBackupsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSiteBackupsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSiteBackupsResponse)
	return ret0
}

// NewListSiteBackupsPager indicates an expected call of NewListSiteBackupsPager.
func (mr *MockWebAppsClientMockRecorder) NewListSiteBackupsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSiteBackupsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSiteBackupsPager), arg0, arg1, arg2)
}

// NewListSiteBackupsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListSiteBackupsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSiteBackupsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSiteBackupsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSiteBackupsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSiteBackupsSlotResponse)
	return ret0
}

// NewListSiteBackupsSlotPager indicates an expected call of NewListSiteBackupsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListSiteBackupsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSiteBackupsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSiteBackupsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListSiteExtensionsPager mocks base method.
func (m *MockWebAppsClient) NewListSiteExtensionsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListSiteExtensionsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSiteExtensionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSiteExtensionsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSiteExtensionsResponse)
	return ret0
}

// NewListSiteExtensionsPager indicates an expected call of NewListSiteExtensionsPager.
func (mr *MockWebAppsClientMockRecorder) NewListSiteExtensionsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSiteExtensionsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSiteExtensionsPager), arg0, arg1, arg2)
}

// NewListSiteExtensionsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListSiteExtensionsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSiteExtensionsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSiteExtensionsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSiteExtensionsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSiteExtensionsSlotResponse)
	return ret0
}

// NewListSiteExtensionsSlotPager indicates an expected call of NewListSiteExtensionsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListSiteExtensionsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSiteExtensionsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSiteExtensionsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListSlotDifferencesFromProductionPager mocks base method.
func (m *MockWebAppsClient) NewListSlotDifferencesFromProductionPager(arg0, arg1 string, arg2 armappservice.CsmSlotEntity, arg3 *armappservice.WebAppsClientListSlotDifferencesFromProductionOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSlotDifferencesFromProductionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSlotDifferencesFromProductionPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSlotDifferencesFromProductionResponse)
	return ret0
}

// NewListSlotDifferencesFromProductionPager indicates an expected call of NewListSlotDifferencesFromProductionPager.
func (mr *MockWebAppsClientMockRecorder) NewListSlotDifferencesFromProductionPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSlotDifferencesFromProductionPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSlotDifferencesFromProductionPager), arg0, arg1, arg2, arg3)
}

// NewListSlotDifferencesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListSlotDifferencesSlotPager(arg0, arg1, arg2 string, arg3 armappservice.CsmSlotEntity, arg4 *armappservice.WebAppsClientListSlotDifferencesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSlotDifferencesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSlotDifferencesSlotPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSlotDifferencesSlotResponse)
	return ret0
}

// NewListSlotDifferencesSlotPager indicates an expected call of NewListSlotDifferencesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListSlotDifferencesSlotPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSlotDifferencesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSlotDifferencesSlotPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListSlotSiteDeploymentStatusesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListSlotSiteDeploymentStatusesSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSlotSiteDeploymentStatusesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSlotSiteDeploymentStatusesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSlotSiteDeploymentStatusesSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSlotSiteDeploymentStatusesSlotResponse)
	return ret0
}

// NewListSlotSiteDeploymentStatusesSlotPager indicates an expected call of NewListSlotSiteDeploymentStatusesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListSlotSiteDeploymentStatusesSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSlotSiteDeploymentStatusesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSlotSiteDeploymentStatusesSlotPager), arg0, arg1, arg2, arg3)
}

// NewListSlotsPager mocks base method.
func (m *MockWebAppsClient) NewListSlotsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListSlotsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSlotsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSlotsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSlotsResponse)
	return ret0
}

// NewListSlotsPager indicates an expected call of NewListSlotsPager.
func (mr *MockWebAppsClientMockRecorder) NewListSlotsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSlotsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSlotsPager), arg0, arg1, arg2)
}

// NewListSnapshotsFromDRSecondaryPager mocks base method.
func (m *MockWebAppsClient) NewListSnapshotsFromDRSecondaryPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListSnapshotsFromDRSecondaryOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsFromDRSecondaryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSnapshotsFromDRSecondaryPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsFromDRSecondaryResponse)
	return ret0
}

// NewListSnapshotsFromDRSecondaryPager indicates an expected call of NewListSnapshotsFromDRSecondaryPager.
func (mr *MockWebAppsClientMockRecorder) NewListSnapshotsFromDRSecondaryPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSnapshotsFromDRSecondaryPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSnapshotsFromDRSecondaryPager), arg0, arg1, arg2)
}

// NewListSnapshotsFromDRSecondarySlotPager mocks base method.
func (m *MockWebAppsClient) NewListSnapshotsFromDRSecondarySlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSnapshotsFromDRSecondarySlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsFromDRSecondarySlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSnapshotsFromDRSecondarySlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsFromDRSecondarySlotResponse)
	return ret0
}

// NewListSnapshotsFromDRSecondarySlotPager indicates an expected call of NewListSnapshotsFromDRSecondarySlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListSnapshotsFromDRSecondarySlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSnapshotsFromDRSecondarySlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSnapshotsFromDRSecondarySlotPager), arg0, arg1, arg2, arg3)
}

// NewListSnapshotsPager mocks base method.
func (m *MockWebAppsClient) NewListSnapshotsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListSnapshotsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSnapshotsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsResponse)
	return ret0
}

// NewListSnapshotsPager indicates an expected call of NewListSnapshotsPager.
func (mr *MockWebAppsClientMockRecorder) NewListSnapshotsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSnapshotsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSnapshotsPager), arg0, arg1, arg2)
}

// NewListSnapshotsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListSnapshotsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListSnapshotsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSnapshotsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListSnapshotsSlotResponse)
	return ret0
}

// NewListSnapshotsSlotPager indicates an expected call of NewListSnapshotsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListSnapshotsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSnapshotsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListSnapshotsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListTriggeredWebJobHistoryPager mocks base method.
func (m *MockWebAppsClient) NewListTriggeredWebJobHistoryPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListTriggeredWebJobHistoryOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobHistoryResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTriggeredWebJobHistoryPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobHistoryResponse)
	return ret0
}

// NewListTriggeredWebJobHistoryPager indicates an expected call of NewListTriggeredWebJobHistoryPager.
func (mr *MockWebAppsClientMockRecorder) NewListTriggeredWebJobHistoryPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTriggeredWebJobHistoryPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListTriggeredWebJobHistoryPager), arg0, arg1, arg2, arg3)
}

// NewListTriggeredWebJobHistorySlotPager mocks base method.
func (m *MockWebAppsClient) NewListTriggeredWebJobHistorySlotPager(arg0, arg1, arg2, arg3 string, arg4 *armappservice.WebAppsClientListTriggeredWebJobHistorySlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobHistorySlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTriggeredWebJobHistorySlotPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobHistorySlotResponse)
	return ret0
}

// NewListTriggeredWebJobHistorySlotPager indicates an expected call of NewListTriggeredWebJobHistorySlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListTriggeredWebJobHistorySlotPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTriggeredWebJobHistorySlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListTriggeredWebJobHistorySlotPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListTriggeredWebJobsPager mocks base method.
func (m *MockWebAppsClient) NewListTriggeredWebJobsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListTriggeredWebJobsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTriggeredWebJobsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobsResponse)
	return ret0
}

// NewListTriggeredWebJobsPager indicates an expected call of NewListTriggeredWebJobsPager.
func (mr *MockWebAppsClientMockRecorder) NewListTriggeredWebJobsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTriggeredWebJobsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListTriggeredWebJobsPager), arg0, arg1, arg2)
}

// NewListTriggeredWebJobsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListTriggeredWebJobsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListTriggeredWebJobsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListTriggeredWebJobsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListTriggeredWebJobsSlotResponse)
	return ret0
}

// NewListTriggeredWebJobsSlotPager indicates an expected call of NewListTriggeredWebJobsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListTriggeredWebJobsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListTriggeredWebJobsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListTriggeredWebJobsSlotPager), arg0, arg1, arg2, arg3)
}

// NewListUsagesPager mocks base method.
func (m *MockWebAppsClient) NewListUsagesPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListUsagesOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListUsagesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListUsagesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListUsagesResponse)
	return ret0
}

// NewListUsagesPager indicates an expected call of NewListUsagesPager.
func (mr *MockWebAppsClientMockRecorder) NewListUsagesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListUsagesPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListUsagesPager), arg0, arg1, arg2)
}

// NewListUsagesSlotPager mocks base method.
func (m *MockWebAppsClient) NewListUsagesSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListUsagesSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListUsagesSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListUsagesSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListUsagesSlotResponse)
	return ret0
}

// NewListUsagesSlotPager indicates an expected call of NewListUsagesSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListUsagesSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListUsagesSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListUsagesSlotPager), arg0, arg1, arg2, arg3)
}

// NewListWebJobsPager mocks base method.
func (m *MockWebAppsClient) NewListWebJobsPager(arg0, arg1 string, arg2 *armappservice.WebAppsClientListWebJobsOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListWebJobsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListWebJobsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListWebJobsResponse)
	return ret0
}

// NewListWebJobsPager indicates an expected call of NewListWebJobsPager.
func (mr *MockWebAppsClientMockRecorder) NewListWebJobsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListWebJobsPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListWebJobsPager), arg0, arg1, arg2)
}

// NewListWebJobsSlotPager mocks base method.
func (m *MockWebAppsClient) NewListWebJobsSlotPager(arg0, arg1, arg2 string, arg3 *armappservice.WebAppsClientListWebJobsSlotOptions) *appservice.RuntimePagerArmappserviceWebAppsClientListWebJobsSlotResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListWebJobsSlotPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*appservice.RuntimePagerArmappserviceWebAppsClientListWebJobsSlotResponse)
	return ret0
}

// NewListWebJobsSlotPager indicates an expected call of NewListWebJobsSlotPager.
func (mr *MockWebAppsClientMockRecorder) NewListWebJobsSlotPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListWebJobsSlotPager", reflect.TypeOf((*MockWebAppsClient)(nil).NewListWebJobsSlotPager), arg0, arg1, arg2, arg3)
}
