// Code generated by MockGen. DO NOT EDIT.
// Source: role_assignments.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armauthorization "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v2"
	authorization "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/authorization"
	gomock "github.com/golang/mock/gomock"
)

// MockRoleAssignmentsClient is a mock of RoleAssignmentsClient interface.
type MockRoleAssignmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleAssignmentsClientMockRecorder
}

// MockRoleAssignmentsClientMockRecorder is the mock recorder for MockRoleAssignmentsClient.
type MockRoleAssignmentsClientMockRecorder struct {
	mock *MockRoleAssignmentsClient
}

// NewMockRoleAssignmentsClient creates a new mock instance.
func NewMockRoleAssignmentsClient(ctrl *gomock.Controller) *MockRoleAssignmentsClient {
	mock := &MockRoleAssignmentsClient{ctrl: ctrl}
	mock.recorder = &MockRoleAssignmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleAssignmentsClient) EXPECT() *MockRoleAssignmentsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRoleAssignmentsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armauthorization.RoleAssignmentsClientGetOptions) (armauthorization.RoleAssignmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armauthorization.RoleAssignmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleAssignmentsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetByID mocks base method.
func (m *MockRoleAssignmentsClient) GetByID(arg0 context.Context, arg1 string, arg2 *armauthorization.RoleAssignmentsClientGetByIDOptions) (armauthorization.RoleAssignmentsClientGetByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(armauthorization.RoleAssignmentsClientGetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRoleAssignmentsClientMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).GetByID), arg0, arg1, arg2)
}

// NewListForResourceGroupPager mocks base method.
func (m *MockRoleAssignmentsClient) NewListForResourceGroupPager(arg0 string, arg1 *armauthorization.RoleAssignmentsClientListForResourceGroupOptions) *authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForResourceGroupResponse)
	return ret0
}

// NewListForResourceGroupPager indicates an expected call of NewListForResourceGroupPager.
func (mr *MockRoleAssignmentsClientMockRecorder) NewListForResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForResourceGroupPager", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).NewListForResourceGroupPager), arg0, arg1)
}

// NewListForResourcePager mocks base method.
func (m *MockRoleAssignmentsClient) NewListForResourcePager(arg0, arg1, arg2, arg3 string, arg4 *armauthorization.RoleAssignmentsClientListForResourceOptions) *authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForResourceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForResourcePager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForResourceResponse)
	return ret0
}

// NewListForResourcePager indicates an expected call of NewListForResourcePager.
func (mr *MockRoleAssignmentsClientMockRecorder) NewListForResourcePager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForResourcePager", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).NewListForResourcePager), arg0, arg1, arg2, arg3, arg4)
}

// NewListForScopePager mocks base method.
func (m *MockRoleAssignmentsClient) NewListForScopePager(arg0 string, arg1 *armauthorization.RoleAssignmentsClientListForScopeOptions) *authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForScopeResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForScopePager", arg0, arg1)
	ret0, _ := ret[0].(*authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForScopeResponse)
	return ret0
}

// NewListForScopePager indicates an expected call of NewListForScopePager.
func (mr *MockRoleAssignmentsClientMockRecorder) NewListForScopePager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForScopePager", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).NewListForScopePager), arg0, arg1)
}

// NewListForSubscriptionPager mocks base method.
func (m *MockRoleAssignmentsClient) NewListForSubscriptionPager(arg0 *armauthorization.RoleAssignmentsClientListForSubscriptionOptions) *authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForSubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListForSubscriptionPager", arg0)
	ret0, _ := ret[0].(*authorization.RuntimePagerArmauthorizationRoleAssignmentsClientListForSubscriptionResponse)
	return ret0
}

// NewListForSubscriptionPager indicates an expected call of NewListForSubscriptionPager.
func (mr *MockRoleAssignmentsClientMockRecorder) NewListForSubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListForSubscriptionPager", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).NewListForSubscriptionPager), arg0)
}
