// Code generated by MockGen. DO NOT EDIT.
// Source: jit_network_access_policies.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsecurity "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity"
	security "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/security"
	gomock "github.com/golang/mock/gomock"
)

// MockJitNetworkAccessPoliciesClient is a mock of JitNetworkAccessPoliciesClient interface.
type MockJitNetworkAccessPoliciesClient struct {
	ctrl     *gomock.Controller
	recorder *MockJitNetworkAccessPoliciesClientMockRecorder
}

// MockJitNetworkAccessPoliciesClientMockRecorder is the mock recorder for MockJitNetworkAccessPoliciesClient.
type MockJitNetworkAccessPoliciesClientMockRecorder struct {
	mock *MockJitNetworkAccessPoliciesClient
}

// NewMockJitNetworkAccessPoliciesClient creates a new mock instance.
func NewMockJitNetworkAccessPoliciesClient(ctrl *gomock.Controller) *MockJitNetworkAccessPoliciesClient {
	mock := &MockJitNetworkAccessPoliciesClient{ctrl: ctrl}
	mock.recorder = &MockJitNetworkAccessPoliciesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJitNetworkAccessPoliciesClient) EXPECT() *MockJitNetworkAccessPoliciesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockJitNetworkAccessPoliciesClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armsecurity.JitNetworkAccessPoliciesClientGetOptions) (armsecurity.JitNetworkAccessPoliciesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsecurity.JitNetworkAccessPoliciesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJitNetworkAccessPoliciesClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJitNetworkAccessPoliciesClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByRegionPager mocks base method.
func (m *MockJitNetworkAccessPoliciesClient) NewListByRegionPager(arg0 string, arg1 *armsecurity.JitNetworkAccessPoliciesClientListByRegionOptions) *security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListByRegionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByRegionPager", arg0, arg1)
	ret0, _ := ret[0].(*security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListByRegionResponse)
	return ret0
}

// NewListByRegionPager indicates an expected call of NewListByRegionPager.
func (mr *MockJitNetworkAccessPoliciesClientMockRecorder) NewListByRegionPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByRegionPager", reflect.TypeOf((*MockJitNetworkAccessPoliciesClient)(nil).NewListByRegionPager), arg0, arg1)
}

// NewListByResourceGroupAndRegionPager mocks base method.
func (m *MockJitNetworkAccessPoliciesClient) NewListByResourceGroupAndRegionPager(arg0, arg1 string, arg2 *armsecurity.JitNetworkAccessPoliciesClientListByResourceGroupAndRegionOptions) *security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListByResourceGroupAndRegionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupAndRegionPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListByResourceGroupAndRegionResponse)
	return ret0
}

// NewListByResourceGroupAndRegionPager indicates an expected call of NewListByResourceGroupAndRegionPager.
func (mr *MockJitNetworkAccessPoliciesClientMockRecorder) NewListByResourceGroupAndRegionPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupAndRegionPager", reflect.TypeOf((*MockJitNetworkAccessPoliciesClient)(nil).NewListByResourceGroupAndRegionPager), arg0, arg1, arg2)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockJitNetworkAccessPoliciesClient) NewListByResourceGroupPager(arg0 string, arg1 *armsecurity.JitNetworkAccessPoliciesClientListByResourceGroupOptions) *security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockJitNetworkAccessPoliciesClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockJitNetworkAccessPoliciesClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListPager mocks base method.
func (m *MockJitNetworkAccessPoliciesClient) NewListPager(arg0 *armsecurity.JitNetworkAccessPoliciesClientListOptions) *security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*security.RuntimePagerArmsecurityJitNetworkAccessPoliciesClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockJitNetworkAccessPoliciesClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockJitNetworkAccessPoliciesClient)(nil).NewListPager), arg0)
}
