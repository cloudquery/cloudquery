// Code generated by MockGen. DO NOT EDIT.
// Source: database_vulnerability_assessment_scans.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseVulnerabilityAssessmentScansClient is a mock of DatabaseVulnerabilityAssessmentScansClient interface.
type MockDatabaseVulnerabilityAssessmentScansClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseVulnerabilityAssessmentScansClientMockRecorder
}

// MockDatabaseVulnerabilityAssessmentScansClientMockRecorder is the mock recorder for MockDatabaseVulnerabilityAssessmentScansClient.
type MockDatabaseVulnerabilityAssessmentScansClientMockRecorder struct {
	mock *MockDatabaseVulnerabilityAssessmentScansClient
}

// NewMockDatabaseVulnerabilityAssessmentScansClient creates a new mock instance.
func NewMockDatabaseVulnerabilityAssessmentScansClient(ctrl *gomock.Controller) *MockDatabaseVulnerabilityAssessmentScansClient {
	mock := &MockDatabaseVulnerabilityAssessmentScansClient{ctrl: ctrl}
	mock.recorder = &MockDatabaseVulnerabilityAssessmentScansClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseVulnerabilityAssessmentScansClient) EXPECT() *MockDatabaseVulnerabilityAssessmentScansClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDatabaseVulnerabilityAssessmentScansClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 armsql.VulnerabilityAssessmentName, arg5 string, arg6 *armsql.DatabaseVulnerabilityAssessmentScansClientGetOptions) (armsql.DatabaseVulnerabilityAssessmentScansClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armsql.DatabaseVulnerabilityAssessmentScansClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseVulnerabilityAssessmentScansClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabaseVulnerabilityAssessmentScansClient)(nil).Get), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// NewListByDatabasePager mocks base method.
func (m *MockDatabaseVulnerabilityAssessmentScansClient) NewListByDatabasePager(arg0, arg1, arg2 string, arg3 armsql.VulnerabilityAssessmentName, arg4 *armsql.DatabaseVulnerabilityAssessmentScansClientListByDatabaseOptions) *sql.RuntimePagerArmsqlDatabaseVulnerabilityAssessmentScansClientListByDatabaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByDatabasePager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabaseVulnerabilityAssessmentScansClientListByDatabaseResponse)
	return ret0
}

// NewListByDatabasePager indicates an expected call of NewListByDatabasePager.
func (mr *MockDatabaseVulnerabilityAssessmentScansClientMockRecorder) NewListByDatabasePager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByDatabasePager", reflect.TypeOf((*MockDatabaseVulnerabilityAssessmentScansClient)(nil).NewListByDatabasePager), arg0, arg1, arg2, arg3, arg4)
}
