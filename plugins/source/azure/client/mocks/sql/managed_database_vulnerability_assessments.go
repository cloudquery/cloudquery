// Code generated by MockGen. DO NOT EDIT.
// Source: managed_database_vulnerability_assessments.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedDatabaseVulnerabilityAssessmentsClient is a mock of ManagedDatabaseVulnerabilityAssessmentsClient interface.
type MockManagedDatabaseVulnerabilityAssessmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder
}

// MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder is the mock recorder for MockManagedDatabaseVulnerabilityAssessmentsClient.
type MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder struct {
	mock *MockManagedDatabaseVulnerabilityAssessmentsClient
}

// NewMockManagedDatabaseVulnerabilityAssessmentsClient creates a new mock instance.
func NewMockManagedDatabaseVulnerabilityAssessmentsClient(ctrl *gomock.Controller) *MockManagedDatabaseVulnerabilityAssessmentsClient {
	mock := &MockManagedDatabaseVulnerabilityAssessmentsClient{ctrl: ctrl}
	mock.recorder = &MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedDatabaseVulnerabilityAssessmentsClient) EXPECT() *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockManagedDatabaseVulnerabilityAssessmentsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 armsql.VulnerabilityAssessmentName, arg5 *armsql.ManagedDatabaseVulnerabilityAssessmentsClientGetOptions) (armsql.ManagedDatabaseVulnerabilityAssessmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armsql.ManagedDatabaseVulnerabilityAssessmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagedDatabaseVulnerabilityAssessmentsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListByDatabasePager mocks base method.
func (m *MockManagedDatabaseVulnerabilityAssessmentsClient) NewListByDatabasePager(arg0, arg1, arg2 string, arg3 *armsql.ManagedDatabaseVulnerabilityAssessmentsClientListByDatabaseOptions) *sql.RuntimePagerArmsqlManagedDatabaseVulnerabilityAssessmentsClientListByDatabaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByDatabasePager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlManagedDatabaseVulnerabilityAssessmentsClientListByDatabaseResponse)
	return ret0
}

// NewListByDatabasePager indicates an expected call of NewListByDatabasePager.
func (mr *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder) NewListByDatabasePager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByDatabasePager", reflect.TypeOf((*MockManagedDatabaseVulnerabilityAssessmentsClient)(nil).NewListByDatabasePager), arg0, arg1, arg2, arg3)
}
