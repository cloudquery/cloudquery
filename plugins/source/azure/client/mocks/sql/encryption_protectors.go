// Code generated by MockGen. DO NOT EDIT.
// Source: encryption_protectors.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockEncryptionProtectorsClient is a mock of EncryptionProtectorsClient interface.
type MockEncryptionProtectorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionProtectorsClientMockRecorder
}

// MockEncryptionProtectorsClientMockRecorder is the mock recorder for MockEncryptionProtectorsClient.
type MockEncryptionProtectorsClientMockRecorder struct {
	mock *MockEncryptionProtectorsClient
}

// NewMockEncryptionProtectorsClient creates a new mock instance.
func NewMockEncryptionProtectorsClient(ctrl *gomock.Controller) *MockEncryptionProtectorsClient {
	mock := &MockEncryptionProtectorsClient{ctrl: ctrl}
	mock.recorder = &MockEncryptionProtectorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionProtectorsClient) EXPECT() *MockEncryptionProtectorsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEncryptionProtectorsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 armsql.EncryptionProtectorName, arg4 *armsql.EncryptionProtectorsClientGetOptions) (armsql.EncryptionProtectorsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsql.EncryptionProtectorsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEncryptionProtectorsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEncryptionProtectorsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByServerPager mocks base method.
func (m *MockEncryptionProtectorsClient) NewListByServerPager(arg0, arg1 string, arg2 *armsql.EncryptionProtectorsClientListByServerOptions) *sql.RuntimePagerArmsqlEncryptionProtectorsClientListByServerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByServerPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlEncryptionProtectorsClientListByServerResponse)
	return ret0
}

// NewListByServerPager indicates an expected call of NewListByServerPager.
func (mr *MockEncryptionProtectorsClientMockRecorder) NewListByServerPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByServerPager", reflect.TypeOf((*MockEncryptionProtectorsClient)(nil).NewListByServerPager), arg0, arg1, arg2)
}
