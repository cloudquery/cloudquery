// Code generated by MockGen. DO NOT EDIT.
// Source: server_azure_ad_administrators.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockServerAzureADAdministratorsClient is a mock of ServerAzureADAdministratorsClient interface.
type MockServerAzureADAdministratorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerAzureADAdministratorsClientMockRecorder
}

// MockServerAzureADAdministratorsClientMockRecorder is the mock recorder for MockServerAzureADAdministratorsClient.
type MockServerAzureADAdministratorsClientMockRecorder struct {
	mock *MockServerAzureADAdministratorsClient
}

// NewMockServerAzureADAdministratorsClient creates a new mock instance.
func NewMockServerAzureADAdministratorsClient(ctrl *gomock.Controller) *MockServerAzureADAdministratorsClient {
	mock := &MockServerAzureADAdministratorsClient{ctrl: ctrl}
	mock.recorder = &MockServerAzureADAdministratorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerAzureADAdministratorsClient) EXPECT() *MockServerAzureADAdministratorsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServerAzureADAdministratorsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 armsql.AdministratorName, arg4 *armsql.ServerAzureADAdministratorsClientGetOptions) (armsql.ServerAzureADAdministratorsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsql.ServerAzureADAdministratorsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerAzureADAdministratorsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerAzureADAdministratorsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByServerPager mocks base method.
func (m *MockServerAzureADAdministratorsClient) NewListByServerPager(arg0, arg1 string, arg2 *armsql.ServerAzureADAdministratorsClientListByServerOptions) *sql.RuntimePagerArmsqlServerAzureADAdministratorsClientListByServerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByServerPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlServerAzureADAdministratorsClientListByServerResponse)
	return ret0
}

// NewListByServerPager indicates an expected call of NewListByServerPager.
func (mr *MockServerAzureADAdministratorsClientMockRecorder) NewListByServerPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByServerPager", reflect.TypeOf((*MockServerAzureADAdministratorsClient)(nil).NewListByServerPager), arg0, arg1, arg2)
}
