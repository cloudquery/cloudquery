// Code generated by MockGen. DO NOT EDIT.
// Source: database_vulnerability_assessments.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseVulnerabilityAssessmentsClient is a mock of DatabaseVulnerabilityAssessmentsClient interface.
type MockDatabaseVulnerabilityAssessmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseVulnerabilityAssessmentsClientMockRecorder
}

// MockDatabaseVulnerabilityAssessmentsClientMockRecorder is the mock recorder for MockDatabaseVulnerabilityAssessmentsClient.
type MockDatabaseVulnerabilityAssessmentsClientMockRecorder struct {
	mock *MockDatabaseVulnerabilityAssessmentsClient
}

// NewMockDatabaseVulnerabilityAssessmentsClient creates a new mock instance.
func NewMockDatabaseVulnerabilityAssessmentsClient(ctrl *gomock.Controller) *MockDatabaseVulnerabilityAssessmentsClient {
	mock := &MockDatabaseVulnerabilityAssessmentsClient{ctrl: ctrl}
	mock.recorder = &MockDatabaseVulnerabilityAssessmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseVulnerabilityAssessmentsClient) EXPECT() *MockDatabaseVulnerabilityAssessmentsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDatabaseVulnerabilityAssessmentsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 armsql.VulnerabilityAssessmentName, arg5 *armsql.DatabaseVulnerabilityAssessmentsClientGetOptions) (armsql.DatabaseVulnerabilityAssessmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armsql.DatabaseVulnerabilityAssessmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseVulnerabilityAssessmentsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabaseVulnerabilityAssessmentsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListByDatabasePager mocks base method.
func (m *MockDatabaseVulnerabilityAssessmentsClient) NewListByDatabasePager(arg0, arg1, arg2 string, arg3 *armsql.DatabaseVulnerabilityAssessmentsClientListByDatabaseOptions) *sql.RuntimePagerArmsqlDatabaseVulnerabilityAssessmentsClientListByDatabaseResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByDatabasePager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabaseVulnerabilityAssessmentsClientListByDatabaseResponse)
	return ret0
}

// NewListByDatabasePager indicates an expected call of NewListByDatabasePager.
func (mr *MockDatabaseVulnerabilityAssessmentsClientMockRecorder) NewListByDatabasePager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByDatabasePager", reflect.TypeOf((*MockDatabaseVulnerabilityAssessmentsClient)(nil).NewListByDatabasePager), arg0, arg1, arg2, arg3)
}
