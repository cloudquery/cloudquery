// Code generated by MockGen. DO NOT EDIT.
// Source: managed_instance_vulnerability_assessments.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedInstanceVulnerabilityAssessmentsClient is a mock of ManagedInstanceVulnerabilityAssessmentsClient interface.
type MockManagedInstanceVulnerabilityAssessmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder
}

// MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder is the mock recorder for MockManagedInstanceVulnerabilityAssessmentsClient.
type MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder struct {
	mock *MockManagedInstanceVulnerabilityAssessmentsClient
}

// NewMockManagedInstanceVulnerabilityAssessmentsClient creates a new mock instance.
func NewMockManagedInstanceVulnerabilityAssessmentsClient(ctrl *gomock.Controller) *MockManagedInstanceVulnerabilityAssessmentsClient {
	mock := &MockManagedInstanceVulnerabilityAssessmentsClient{ctrl: ctrl}
	mock.recorder = &MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedInstanceVulnerabilityAssessmentsClient) EXPECT() *MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockManagedInstanceVulnerabilityAssessmentsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 armsql.VulnerabilityAssessmentName, arg4 *armsql.ManagedInstanceVulnerabilityAssessmentsClientGetOptions) (armsql.ManagedInstanceVulnerabilityAssessmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsql.ManagedInstanceVulnerabilityAssessmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagedInstanceVulnerabilityAssessmentsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByInstancePager mocks base method.
func (m *MockManagedInstanceVulnerabilityAssessmentsClient) NewListByInstancePager(arg0, arg1 string, arg2 *armsql.ManagedInstanceVulnerabilityAssessmentsClientListByInstanceOptions) *sql.RuntimePagerArmsqlManagedInstanceVulnerabilityAssessmentsClientListByInstanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByInstancePager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlManagedInstanceVulnerabilityAssessmentsClientListByInstanceResponse)
	return ret0
}

// NewListByInstancePager indicates an expected call of NewListByInstancePager.
func (mr *MockManagedInstanceVulnerabilityAssessmentsClientMockRecorder) NewListByInstancePager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByInstancePager", reflect.TypeOf((*MockManagedInstanceVulnerabilityAssessmentsClient)(nil).NewListByInstancePager), arg0, arg1, arg2)
}
