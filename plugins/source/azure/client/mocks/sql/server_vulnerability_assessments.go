// Code generated by MockGen. DO NOT EDIT.
// Source: server_vulnerability_assessments.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockServerVulnerabilityAssessmentsClient is a mock of ServerVulnerabilityAssessmentsClient interface.
type MockServerVulnerabilityAssessmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerVulnerabilityAssessmentsClientMockRecorder
}

// MockServerVulnerabilityAssessmentsClientMockRecorder is the mock recorder for MockServerVulnerabilityAssessmentsClient.
type MockServerVulnerabilityAssessmentsClientMockRecorder struct {
	mock *MockServerVulnerabilityAssessmentsClient
}

// NewMockServerVulnerabilityAssessmentsClient creates a new mock instance.
func NewMockServerVulnerabilityAssessmentsClient(ctrl *gomock.Controller) *MockServerVulnerabilityAssessmentsClient {
	mock := &MockServerVulnerabilityAssessmentsClient{ctrl: ctrl}
	mock.recorder = &MockServerVulnerabilityAssessmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerVulnerabilityAssessmentsClient) EXPECT() *MockServerVulnerabilityAssessmentsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServerVulnerabilityAssessmentsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 armsql.VulnerabilityAssessmentName, arg4 *armsql.ServerVulnerabilityAssessmentsClientGetOptions) (armsql.ServerVulnerabilityAssessmentsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsql.ServerVulnerabilityAssessmentsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerVulnerabilityAssessmentsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerVulnerabilityAssessmentsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByServerPager mocks base method.
func (m *MockServerVulnerabilityAssessmentsClient) NewListByServerPager(arg0, arg1 string, arg2 *armsql.ServerVulnerabilityAssessmentsClientListByServerOptions) *sql.RuntimePagerArmsqlServerVulnerabilityAssessmentsClientListByServerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByServerPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlServerVulnerabilityAssessmentsClientListByServerResponse)
	return ret0
}

// NewListByServerPager indicates an expected call of NewListByServerPager.
func (mr *MockServerVulnerabilityAssessmentsClientMockRecorder) NewListByServerPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByServerPager", reflect.TypeOf((*MockServerVulnerabilityAssessmentsClient)(nil).NewListByServerPager), arg0, arg1, arg2)
}
