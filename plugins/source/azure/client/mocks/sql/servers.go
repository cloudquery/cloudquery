// Code generated by MockGen. DO NOT EDIT.
// Source: servers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockServersClient is a mock of ServersClient interface.
type MockServersClient struct {
	ctrl     *gomock.Controller
	recorder *MockServersClientMockRecorder
}

// MockServersClientMockRecorder is the mock recorder for MockServersClient.
type MockServersClientMockRecorder struct {
	mock *MockServersClient
}

// NewMockServersClient creates a new mock instance.
func NewMockServersClient(ctrl *gomock.Controller) *MockServersClient {
	mock := &MockServersClient{ctrl: ctrl}
	mock.recorder = &MockServersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServersClient) EXPECT() *MockServersClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServersClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armsql.ServersClientGetOptions) (armsql.ServersClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armsql.ServersClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServersClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServersClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockServersClient) NewListByResourceGroupPager(arg0 string, arg1 *armsql.ServersClientListByResourceGroupOptions) *sql.RuntimePagerArmsqlServersClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlServersClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockServersClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockServersClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListPager mocks base method.
func (m *MockServersClient) NewListPager(arg0 *armsql.ServersClientListOptions) *sql.RuntimePagerArmsqlServersClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlServersClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockServersClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockServersClient)(nil).NewListPager), arg0)
}
