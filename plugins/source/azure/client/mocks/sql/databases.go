// Code generated by MockGen. DO NOT EDIT.
// Source: databases.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabasesClient is a mock of DatabasesClient interface.
type MockDatabasesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDatabasesClientMockRecorder
}

// MockDatabasesClientMockRecorder is the mock recorder for MockDatabasesClient.
type MockDatabasesClientMockRecorder struct {
	mock *MockDatabasesClient
}

// NewMockDatabasesClient creates a new mock instance.
func NewMockDatabasesClient(ctrl *gomock.Controller) *MockDatabasesClient {
	mock := &MockDatabasesClient{ctrl: ctrl}
	mock.recorder = &MockDatabasesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabasesClient) EXPECT() *MockDatabasesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDatabasesClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armsql.DatabasesClientGetOptions) (armsql.DatabasesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsql.DatabasesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabasesClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabasesClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByElasticPoolPager mocks base method.
func (m *MockDatabasesClient) NewListByElasticPoolPager(arg0, arg1, arg2 string, arg3 *armsql.DatabasesClientListByElasticPoolOptions) *sql.RuntimePagerArmsqlDatabasesClientListByElasticPoolResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByElasticPoolPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabasesClientListByElasticPoolResponse)
	return ret0
}

// NewListByElasticPoolPager indicates an expected call of NewListByElasticPoolPager.
func (mr *MockDatabasesClientMockRecorder) NewListByElasticPoolPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByElasticPoolPager", reflect.TypeOf((*MockDatabasesClient)(nil).NewListByElasticPoolPager), arg0, arg1, arg2, arg3)
}

// NewListByServerPager mocks base method.
func (m *MockDatabasesClient) NewListByServerPager(arg0, arg1 string, arg2 *armsql.DatabasesClientListByServerOptions) *sql.RuntimePagerArmsqlDatabasesClientListByServerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByServerPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabasesClientListByServerResponse)
	return ret0
}

// NewListByServerPager indicates an expected call of NewListByServerPager.
func (mr *MockDatabasesClientMockRecorder) NewListByServerPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByServerPager", reflect.TypeOf((*MockDatabasesClient)(nil).NewListByServerPager), arg0, arg1, arg2)
}

// NewListInaccessibleByServerPager mocks base method.
func (m *MockDatabasesClient) NewListInaccessibleByServerPager(arg0, arg1 string, arg2 *armsql.DatabasesClientListInaccessibleByServerOptions) *sql.RuntimePagerArmsqlDatabasesClientListInaccessibleByServerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInaccessibleByServerPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabasesClientListInaccessibleByServerResponse)
	return ret0
}

// NewListInaccessibleByServerPager indicates an expected call of NewListInaccessibleByServerPager.
func (mr *MockDatabasesClientMockRecorder) NewListInaccessibleByServerPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInaccessibleByServerPager", reflect.TypeOf((*MockDatabasesClient)(nil).NewListInaccessibleByServerPager), arg0, arg1, arg2)
}

// NewListMetricDefinitionsPager mocks base method.
func (m *MockDatabasesClient) NewListMetricDefinitionsPager(arg0, arg1, arg2 string, arg3 *armsql.DatabasesClientListMetricDefinitionsOptions) *sql.RuntimePagerArmsqlDatabasesClientListMetricDefinitionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListMetricDefinitionsPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabasesClientListMetricDefinitionsResponse)
	return ret0
}

// NewListMetricDefinitionsPager indicates an expected call of NewListMetricDefinitionsPager.
func (mr *MockDatabasesClientMockRecorder) NewListMetricDefinitionsPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListMetricDefinitionsPager", reflect.TypeOf((*MockDatabasesClient)(nil).NewListMetricDefinitionsPager), arg0, arg1, arg2, arg3)
}

// NewListMetricsPager mocks base method.
func (m *MockDatabasesClient) NewListMetricsPager(arg0, arg1, arg2, arg3 string, arg4 *armsql.DatabasesClientListMetricsOptions) *sql.RuntimePagerArmsqlDatabasesClientListMetricsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListMetricsPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlDatabasesClientListMetricsResponse)
	return ret0
}

// NewListMetricsPager indicates an expected call of NewListMetricsPager.
func (mr *MockDatabasesClientMockRecorder) NewListMetricsPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListMetricsPager", reflect.TypeOf((*MockDatabasesClient)(nil).NewListMetricsPager), arg0, arg1, arg2, arg3, arg4)
}
