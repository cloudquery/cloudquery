// Code generated by MockGen. DO NOT EDIT.
// Source: managed_databases.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
	sql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedDatabasesClient is a mock of ManagedDatabasesClient interface.
type MockManagedDatabasesClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedDatabasesClientMockRecorder
}

// MockManagedDatabasesClientMockRecorder is the mock recorder for MockManagedDatabasesClient.
type MockManagedDatabasesClientMockRecorder struct {
	mock *MockManagedDatabasesClient
}

// NewMockManagedDatabasesClient creates a new mock instance.
func NewMockManagedDatabasesClient(ctrl *gomock.Controller) *MockManagedDatabasesClient {
	mock := &MockManagedDatabasesClient{ctrl: ctrl}
	mock.recorder = &MockManagedDatabasesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedDatabasesClient) EXPECT() *MockManagedDatabasesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockManagedDatabasesClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armsql.ManagedDatabasesClientGetOptions) (armsql.ManagedDatabasesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsql.ManagedDatabasesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagedDatabasesClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagedDatabasesClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByInstancePager mocks base method.
func (m *MockManagedDatabasesClient) NewListByInstancePager(arg0, arg1 string, arg2 *armsql.ManagedDatabasesClientListByInstanceOptions) *sql.RuntimePagerArmsqlManagedDatabasesClientListByInstanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByInstancePager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlManagedDatabasesClientListByInstanceResponse)
	return ret0
}

// NewListByInstancePager indicates an expected call of NewListByInstancePager.
func (mr *MockManagedDatabasesClientMockRecorder) NewListByInstancePager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByInstancePager", reflect.TypeOf((*MockManagedDatabasesClient)(nil).NewListByInstancePager), arg0, arg1, arg2)
}

// NewListInaccessibleByInstancePager mocks base method.
func (m *MockManagedDatabasesClient) NewListInaccessibleByInstancePager(arg0, arg1 string, arg2 *armsql.ManagedDatabasesClientListInaccessibleByInstanceOptions) *sql.RuntimePagerArmsqlManagedDatabasesClientListInaccessibleByInstanceResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListInaccessibleByInstancePager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sql.RuntimePagerArmsqlManagedDatabasesClientListInaccessibleByInstanceResponse)
	return ret0
}

// NewListInaccessibleByInstancePager indicates an expected call of NewListInaccessibleByInstancePager.
func (mr *MockManagedDatabasesClientMockRecorder) NewListInaccessibleByInstancePager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListInaccessibleByInstancePager", reflect.TypeOf((*MockManagedDatabasesClient)(nil).NewListInaccessibleByInstancePager), arg0, arg1, arg2)
}
