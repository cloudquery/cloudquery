// Code generated by MockGen. DO NOT EDIT.
// Source: workflows.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armlogic "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logic/armlogic"
	logic "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/logic"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowsClient is a mock of WorkflowsClient interface.
type MockWorkflowsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowsClientMockRecorder
}

// MockWorkflowsClientMockRecorder is the mock recorder for MockWorkflowsClient.
type MockWorkflowsClientMockRecorder struct {
	mock *MockWorkflowsClient
}

// NewMockWorkflowsClient creates a new mock instance.
func NewMockWorkflowsClient(ctrl *gomock.Controller) *MockWorkflowsClient {
	mock := &MockWorkflowsClient{ctrl: ctrl}
	mock.recorder = &MockWorkflowsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowsClient) EXPECT() *MockWorkflowsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWorkflowsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armlogic.WorkflowsClientGetOptions) (armlogic.WorkflowsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armlogic.WorkflowsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkflowsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkflowsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// ListCallbackURL mocks base method.
func (m *MockWorkflowsClient) ListCallbackURL(arg0 context.Context, arg1, arg2 string, arg3 armlogic.GetCallbackURLParameters, arg4 *armlogic.WorkflowsClientListCallbackURLOptions) (armlogic.WorkflowsClientListCallbackURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCallbackURL", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armlogic.WorkflowsClientListCallbackURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCallbackURL indicates an expected call of ListCallbackURL.
func (mr *MockWorkflowsClientMockRecorder) ListCallbackURL(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCallbackURL", reflect.TypeOf((*MockWorkflowsClient)(nil).ListCallbackURL), arg0, arg1, arg2, arg3, arg4)
}

// ListSwagger mocks base method.
func (m *MockWorkflowsClient) ListSwagger(arg0 context.Context, arg1, arg2 string, arg3 *armlogic.WorkflowsClientListSwaggerOptions) (armlogic.WorkflowsClientListSwaggerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSwagger", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armlogic.WorkflowsClientListSwaggerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSwagger indicates an expected call of ListSwagger.
func (mr *MockWorkflowsClientMockRecorder) ListSwagger(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSwagger", reflect.TypeOf((*MockWorkflowsClient)(nil).ListSwagger), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockWorkflowsClient) NewListByResourceGroupPager(arg0 string, arg1 *armlogic.WorkflowsClientListByResourceGroupOptions) *logic.RuntimePagerArmlogicWorkflowsClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*logic.RuntimePagerArmlogicWorkflowsClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockWorkflowsClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockWorkflowsClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListBySubscriptionPager mocks base method.
func (m *MockWorkflowsClient) NewListBySubscriptionPager(arg0 *armlogic.WorkflowsClientListBySubscriptionOptions) *logic.RuntimePagerArmlogicWorkflowsClientListBySubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBySubscriptionPager", arg0)
	ret0, _ := ret[0].(*logic.RuntimePagerArmlogicWorkflowsClientListBySubscriptionResponse)
	return ret0
}

// NewListBySubscriptionPager indicates an expected call of NewListBySubscriptionPager.
func (mr *MockWorkflowsClientMockRecorder) NewListBySubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBySubscriptionPager", reflect.TypeOf((*MockWorkflowsClient)(nil).NewListBySubscriptionPager), arg0)
}
