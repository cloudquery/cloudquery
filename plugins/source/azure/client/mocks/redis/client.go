// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armredis "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redis/armredis/v2"
	redis "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armredis.ClientGetOptions) (armredis.ClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armredis.ClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// ListKeys mocks base method.
func (m *MockClient) ListKeys(arg0 context.Context, arg1, arg2 string, arg3 *armredis.ClientListKeysOptions) (armredis.ClientListKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armredis.ClientListKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockClientMockRecorder) ListKeys(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockClient)(nil).ListKeys), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockClient) NewListByResourceGroupPager(arg0 string, arg1 *armredis.ClientListByResourceGroupOptions) *redis.RuntimePagerArmredisClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*redis.RuntimePagerArmredisClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListBySubscriptionPager mocks base method.
func (m *MockClient) NewListBySubscriptionPager(arg0 *armredis.ClientListBySubscriptionOptions) *redis.RuntimePagerArmredisClientListBySubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBySubscriptionPager", arg0)
	ret0, _ := ret[0].(*redis.RuntimePagerArmredisClientListBySubscriptionResponse)
	return ret0
}

// NewListBySubscriptionPager indicates an expected call of NewListBySubscriptionPager.
func (mr *MockClientMockRecorder) NewListBySubscriptionPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBySubscriptionPager", reflect.TypeOf((*MockClient)(nil).NewListBySubscriptionPager), arg0)
}

// NewListUpgradeNotificationsPager mocks base method.
func (m *MockClient) NewListUpgradeNotificationsPager(arg0, arg1 string, arg2 float64, arg3 *armredis.ClientListUpgradeNotificationsOptions) *redis.RuntimePagerArmredisClientListUpgradeNotificationsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListUpgradeNotificationsPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*redis.RuntimePagerArmredisClientListUpgradeNotificationsResponse)
	return ret0
}

// NewListUpgradeNotificationsPager indicates an expected call of NewListUpgradeNotificationsPager.
func (mr *MockClientMockRecorder) NewListUpgradeNotificationsPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListUpgradeNotificationsPager", reflect.TypeOf((*MockClient)(nil).NewListUpgradeNotificationsPager), arg0, arg1, arg2, arg3)
}
