// Code generated by MockGen. DO NOT EDIT.
// Source: mongo_db_resources.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armcosmos "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v2"
	cosmos "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/cosmos"
	gomock "github.com/golang/mock/gomock"
)

// MockMongoDBResourcesClient is a mock of MongoDBResourcesClient interface.
type MockMongoDBResourcesClient struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBResourcesClientMockRecorder
}

// MockMongoDBResourcesClientMockRecorder is the mock recorder for MockMongoDBResourcesClient.
type MockMongoDBResourcesClientMockRecorder struct {
	mock *MockMongoDBResourcesClient
}

// NewMockMongoDBResourcesClient creates a new mock instance.
func NewMockMongoDBResourcesClient(ctrl *gomock.Controller) *MockMongoDBResourcesClient {
	mock := &MockMongoDBResourcesClient{ctrl: ctrl}
	mock.recorder = &MockMongoDBResourcesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBResourcesClient) EXPECT() *MockMongoDBResourcesClientMockRecorder {
	return m.recorder
}

// GetMongoDBCollection mocks base method.
func (m *MockMongoDBResourcesClient) GetMongoDBCollection(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armcosmos.MongoDBResourcesClientGetMongoDBCollectionOptions) (armcosmos.MongoDBResourcesClientGetMongoDBCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDBCollection", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armcosmos.MongoDBResourcesClientGetMongoDBCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMongoDBCollection indicates an expected call of GetMongoDBCollection.
func (mr *MockMongoDBResourcesClientMockRecorder) GetMongoDBCollection(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDBCollection", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).GetMongoDBCollection), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetMongoDBCollectionThroughput mocks base method.
func (m *MockMongoDBResourcesClient) GetMongoDBCollectionThroughput(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armcosmos.MongoDBResourcesClientGetMongoDBCollectionThroughputOptions) (armcosmos.MongoDBResourcesClientGetMongoDBCollectionThroughputResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDBCollectionThroughput", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armcosmos.MongoDBResourcesClientGetMongoDBCollectionThroughputResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMongoDBCollectionThroughput indicates an expected call of GetMongoDBCollectionThroughput.
func (mr *MockMongoDBResourcesClientMockRecorder) GetMongoDBCollectionThroughput(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDBCollectionThroughput", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).GetMongoDBCollectionThroughput), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetMongoDBDatabase mocks base method.
func (m *MockMongoDBResourcesClient) GetMongoDBDatabase(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.MongoDBResourcesClientGetMongoDBDatabaseOptions) (armcosmos.MongoDBResourcesClientGetMongoDBDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDBDatabase", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.MongoDBResourcesClientGetMongoDBDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMongoDBDatabase indicates an expected call of GetMongoDBDatabase.
func (mr *MockMongoDBResourcesClientMockRecorder) GetMongoDBDatabase(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDBDatabase", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).GetMongoDBDatabase), arg0, arg1, arg2, arg3, arg4)
}

// GetMongoDBDatabaseThroughput mocks base method.
func (m *MockMongoDBResourcesClient) GetMongoDBDatabaseThroughput(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.MongoDBResourcesClientGetMongoDBDatabaseThroughputOptions) (armcosmos.MongoDBResourcesClientGetMongoDBDatabaseThroughputResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoDBDatabaseThroughput", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.MongoDBResourcesClientGetMongoDBDatabaseThroughputResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMongoDBDatabaseThroughput indicates an expected call of GetMongoDBDatabaseThroughput.
func (mr *MockMongoDBResourcesClientMockRecorder) GetMongoDBDatabaseThroughput(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoDBDatabaseThroughput", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).GetMongoDBDatabaseThroughput), arg0, arg1, arg2, arg3, arg4)
}

// GetMongoRoleDefinition mocks base method.
func (m *MockMongoDBResourcesClient) GetMongoRoleDefinition(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.MongoDBResourcesClientGetMongoRoleDefinitionOptions) (armcosmos.MongoDBResourcesClientGetMongoRoleDefinitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoRoleDefinition", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.MongoDBResourcesClientGetMongoRoleDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMongoRoleDefinition indicates an expected call of GetMongoRoleDefinition.
func (mr *MockMongoDBResourcesClientMockRecorder) GetMongoRoleDefinition(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoRoleDefinition", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).GetMongoRoleDefinition), arg0, arg1, arg2, arg3, arg4)
}

// GetMongoUserDefinition mocks base method.
func (m *MockMongoDBResourcesClient) GetMongoUserDefinition(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.MongoDBResourcesClientGetMongoUserDefinitionOptions) (armcosmos.MongoDBResourcesClientGetMongoUserDefinitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongoUserDefinition", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.MongoDBResourcesClientGetMongoUserDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMongoUserDefinition indicates an expected call of GetMongoUserDefinition.
func (mr *MockMongoDBResourcesClientMockRecorder) GetMongoUserDefinition(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongoUserDefinition", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).GetMongoUserDefinition), arg0, arg1, arg2, arg3, arg4)
}

// NewListMongoDBCollectionsPager mocks base method.
func (m *MockMongoDBResourcesClient) NewListMongoDBCollectionsPager(arg0, arg1, arg2 string, arg3 *armcosmos.MongoDBResourcesClientListMongoDBCollectionsOptions) *cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoDBCollectionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListMongoDBCollectionsPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoDBCollectionsResponse)
	return ret0
}

// NewListMongoDBCollectionsPager indicates an expected call of NewListMongoDBCollectionsPager.
func (mr *MockMongoDBResourcesClientMockRecorder) NewListMongoDBCollectionsPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListMongoDBCollectionsPager", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).NewListMongoDBCollectionsPager), arg0, arg1, arg2, arg3)
}

// NewListMongoDBDatabasesPager mocks base method.
func (m *MockMongoDBResourcesClient) NewListMongoDBDatabasesPager(arg0, arg1 string, arg2 *armcosmos.MongoDBResourcesClientListMongoDBDatabasesOptions) *cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoDBDatabasesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListMongoDBDatabasesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoDBDatabasesResponse)
	return ret0
}

// NewListMongoDBDatabasesPager indicates an expected call of NewListMongoDBDatabasesPager.
func (mr *MockMongoDBResourcesClientMockRecorder) NewListMongoDBDatabasesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListMongoDBDatabasesPager", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).NewListMongoDBDatabasesPager), arg0, arg1, arg2)
}

// NewListMongoRoleDefinitionsPager mocks base method.
func (m *MockMongoDBResourcesClient) NewListMongoRoleDefinitionsPager(arg0, arg1 string, arg2 *armcosmos.MongoDBResourcesClientListMongoRoleDefinitionsOptions) *cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoRoleDefinitionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListMongoRoleDefinitionsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoRoleDefinitionsResponse)
	return ret0
}

// NewListMongoRoleDefinitionsPager indicates an expected call of NewListMongoRoleDefinitionsPager.
func (mr *MockMongoDBResourcesClientMockRecorder) NewListMongoRoleDefinitionsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListMongoRoleDefinitionsPager", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).NewListMongoRoleDefinitionsPager), arg0, arg1, arg2)
}

// NewListMongoUserDefinitionsPager mocks base method.
func (m *MockMongoDBResourcesClient) NewListMongoUserDefinitionsPager(arg0, arg1 string, arg2 *armcosmos.MongoDBResourcesClientListMongoUserDefinitionsOptions) *cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoUserDefinitionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListMongoUserDefinitionsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosMongoDBResourcesClientListMongoUserDefinitionsResponse)
	return ret0
}

// NewListMongoUserDefinitionsPager indicates an expected call of NewListMongoUserDefinitionsPager.
func (mr *MockMongoDBResourcesClientMockRecorder) NewListMongoUserDefinitionsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListMongoUserDefinitionsPager", reflect.TypeOf((*MockMongoDBResourcesClient)(nil).NewListMongoUserDefinitionsPager), arg0, arg1, arg2)
}
