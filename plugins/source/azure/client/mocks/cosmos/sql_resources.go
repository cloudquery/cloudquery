// Code generated by MockGen. DO NOT EDIT.
// Source: sql_resources.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armcosmos "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v2"
	cosmos "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/cosmos"
	gomock "github.com/golang/mock/gomock"
)

// MockSQLResourcesClient is a mock of SQLResourcesClient interface.
type MockSQLResourcesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLResourcesClientMockRecorder
}

// MockSQLResourcesClientMockRecorder is the mock recorder for MockSQLResourcesClient.
type MockSQLResourcesClientMockRecorder struct {
	mock *MockSQLResourcesClient
}

// NewMockSQLResourcesClient creates a new mock instance.
func NewMockSQLResourcesClient(ctrl *gomock.Controller) *MockSQLResourcesClient {
	mock := &MockSQLResourcesClient{ctrl: ctrl}
	mock.recorder = &MockSQLResourcesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLResourcesClient) EXPECT() *MockSQLResourcesClientMockRecorder {
	return m.recorder
}

// GetSQLContainer mocks base method.
func (m *MockSQLResourcesClient) GetSQLContainer(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armcosmos.SQLResourcesClientGetSQLContainerOptions) (armcosmos.SQLResourcesClientGetSQLContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLContainer", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLContainer indicates an expected call of GetSQLContainer.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLContainer(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLContainer", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLContainer), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSQLContainerThroughput mocks base method.
func (m *MockSQLResourcesClient) GetSQLContainerThroughput(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armcosmos.SQLResourcesClientGetSQLContainerThroughputOptions) (armcosmos.SQLResourcesClientGetSQLContainerThroughputResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLContainerThroughput", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLContainerThroughputResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLContainerThroughput indicates an expected call of GetSQLContainerThroughput.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLContainerThroughput(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLContainerThroughput", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLContainerThroughput), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetSQLDatabase mocks base method.
func (m *MockSQLResourcesClient) GetSQLDatabase(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientGetSQLDatabaseOptions) (armcosmos.SQLResourcesClientGetSQLDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLDatabase", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLDatabase indicates an expected call of GetSQLDatabase.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLDatabase(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLDatabase", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLDatabase), arg0, arg1, arg2, arg3, arg4)
}

// GetSQLDatabaseThroughput mocks base method.
func (m *MockSQLResourcesClient) GetSQLDatabaseThroughput(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientGetSQLDatabaseThroughputOptions) (armcosmos.SQLResourcesClientGetSQLDatabaseThroughputResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLDatabaseThroughput", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLDatabaseThroughputResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLDatabaseThroughput indicates an expected call of GetSQLDatabaseThroughput.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLDatabaseThroughput(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLDatabaseThroughput", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLDatabaseThroughput), arg0, arg1, arg2, arg3, arg4)
}

// GetSQLRoleAssignment mocks base method.
func (m *MockSQLResourcesClient) GetSQLRoleAssignment(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientGetSQLRoleAssignmentOptions) (armcosmos.SQLResourcesClientGetSQLRoleAssignmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLRoleAssignment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLRoleAssignmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLRoleAssignment indicates an expected call of GetSQLRoleAssignment.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLRoleAssignment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLRoleAssignment", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLRoleAssignment), arg0, arg1, arg2, arg3, arg4)
}

// GetSQLRoleDefinition mocks base method.
func (m *MockSQLResourcesClient) GetSQLRoleDefinition(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientGetSQLRoleDefinitionOptions) (armcosmos.SQLResourcesClientGetSQLRoleDefinitionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLRoleDefinition", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLRoleDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLRoleDefinition indicates an expected call of GetSQLRoleDefinition.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLRoleDefinition(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLRoleDefinition", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLRoleDefinition), arg0, arg1, arg2, arg3, arg4)
}

// GetSQLStoredProcedure mocks base method.
func (m *MockSQLResourcesClient) GetSQLStoredProcedure(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armcosmos.SQLResourcesClientGetSQLStoredProcedureOptions) (armcosmos.SQLResourcesClientGetSQLStoredProcedureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLStoredProcedure", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLStoredProcedureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLStoredProcedure indicates an expected call of GetSQLStoredProcedure.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLStoredProcedure(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLStoredProcedure", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLStoredProcedure), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetSQLTrigger mocks base method.
func (m *MockSQLResourcesClient) GetSQLTrigger(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armcosmos.SQLResourcesClientGetSQLTriggerOptions) (armcosmos.SQLResourcesClientGetSQLTriggerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLTrigger", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLTriggerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLTrigger indicates an expected call of GetSQLTrigger.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLTrigger(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLTrigger", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLTrigger), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetSQLUserDefinedFunction mocks base method.
func (m *MockSQLResourcesClient) GetSQLUserDefinedFunction(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armcosmos.SQLResourcesClientGetSQLUserDefinedFunctionOptions) (armcosmos.SQLResourcesClientGetSQLUserDefinedFunctionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLUserDefinedFunction", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armcosmos.SQLResourcesClientGetSQLUserDefinedFunctionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSQLUserDefinedFunction indicates an expected call of GetSQLUserDefinedFunction.
func (mr *MockSQLResourcesClientMockRecorder) GetSQLUserDefinedFunction(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLUserDefinedFunction", reflect.TypeOf((*MockSQLResourcesClient)(nil).GetSQLUserDefinedFunction), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// NewListSQLContainersPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLContainersPager(arg0, arg1, arg2 string, arg3 *armcosmos.SQLResourcesClientListSQLContainersOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLContainersResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLContainersPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLContainersResponse)
	return ret0
}

// NewListSQLContainersPager indicates an expected call of NewListSQLContainersPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLContainersPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLContainersPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLContainersPager), arg0, arg1, arg2, arg3)
}

// NewListSQLDatabasesPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLDatabasesPager(arg0, arg1 string, arg2 *armcosmos.SQLResourcesClientListSQLDatabasesOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLDatabasesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLDatabasesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLDatabasesResponse)
	return ret0
}

// NewListSQLDatabasesPager indicates an expected call of NewListSQLDatabasesPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLDatabasesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLDatabasesPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLDatabasesPager), arg0, arg1, arg2)
}

// NewListSQLRoleAssignmentsPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLRoleAssignmentsPager(arg0, arg1 string, arg2 *armcosmos.SQLResourcesClientListSQLRoleAssignmentsOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLRoleAssignmentsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLRoleAssignmentsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLRoleAssignmentsResponse)
	return ret0
}

// NewListSQLRoleAssignmentsPager indicates an expected call of NewListSQLRoleAssignmentsPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLRoleAssignmentsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLRoleAssignmentsPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLRoleAssignmentsPager), arg0, arg1, arg2)
}

// NewListSQLRoleDefinitionsPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLRoleDefinitionsPager(arg0, arg1 string, arg2 *armcosmos.SQLResourcesClientListSQLRoleDefinitionsOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLRoleDefinitionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLRoleDefinitionsPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLRoleDefinitionsResponse)
	return ret0
}

// NewListSQLRoleDefinitionsPager indicates an expected call of NewListSQLRoleDefinitionsPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLRoleDefinitionsPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLRoleDefinitionsPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLRoleDefinitionsPager), arg0, arg1, arg2)
}

// NewListSQLStoredProceduresPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLStoredProceduresPager(arg0, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientListSQLStoredProceduresOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLStoredProceduresResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLStoredProceduresPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLStoredProceduresResponse)
	return ret0
}

// NewListSQLStoredProceduresPager indicates an expected call of NewListSQLStoredProceduresPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLStoredProceduresPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLStoredProceduresPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLStoredProceduresPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListSQLTriggersPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLTriggersPager(arg0, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientListSQLTriggersOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLTriggersResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLTriggersPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLTriggersResponse)
	return ret0
}

// NewListSQLTriggersPager indicates an expected call of NewListSQLTriggersPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLTriggersPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLTriggersPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLTriggersPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListSQLUserDefinedFunctionsPager mocks base method.
func (m *MockSQLResourcesClient) NewListSQLUserDefinedFunctionsPager(arg0, arg1, arg2, arg3 string, arg4 *armcosmos.SQLResourcesClientListSQLUserDefinedFunctionsOptions) *cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLUserDefinedFunctionsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSQLUserDefinedFunctionsPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*cosmos.RuntimePagerArmcosmosSQLResourcesClientListSQLUserDefinedFunctionsResponse)
	return ret0
}

// NewListSQLUserDefinedFunctionsPager indicates an expected call of NewListSQLUserDefinedFunctionsPager.
func (mr *MockSQLResourcesClientMockRecorder) NewListSQLUserDefinedFunctionsPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSQLUserDefinedFunctionsPager", reflect.TypeOf((*MockSQLResourcesClient)(nil).NewListSQLUserDefinedFunctionsPager), arg0, arg1, arg2, arg3, arg4)
}
