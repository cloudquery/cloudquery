// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armsearch "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/search/armsearch"
	search "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/search"
	gomock "github.com/golang/mock/gomock"
)

// MockServicesClient is a mock of ServicesClient interface.
type MockServicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicesClientMockRecorder
}

// MockServicesClientMockRecorder is the mock recorder for MockServicesClient.
type MockServicesClientMockRecorder struct {
	mock *MockServicesClient
}

// NewMockServicesClient creates a new mock instance.
func NewMockServicesClient(ctrl *gomock.Controller) *MockServicesClient {
	mock := &MockServicesClient{ctrl: ctrl}
	mock.recorder = &MockServicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesClient) EXPECT() *MockServicesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServicesClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armsearch.SearchManagementRequestOptions, arg4 *armsearch.ServicesClientGetOptions) (armsearch.ServicesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armsearch.ServicesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServicesClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServicesClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockServicesClient) NewListByResourceGroupPager(arg0 string, arg1 *armsearch.SearchManagementRequestOptions, arg2 *armsearch.ServicesClientListByResourceGroupOptions) *search.RuntimePagerArmsearchServicesClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*search.RuntimePagerArmsearchServicesClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockServicesClientMockRecorder) NewListByResourceGroupPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockServicesClient)(nil).NewListByResourceGroupPager), arg0, arg1, arg2)
}

// NewListBySubscriptionPager mocks base method.
func (m *MockServicesClient) NewListBySubscriptionPager(arg0 *armsearch.SearchManagementRequestOptions, arg1 *armsearch.ServicesClientListBySubscriptionOptions) *search.RuntimePagerArmsearchServicesClientListBySubscriptionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBySubscriptionPager", arg0, arg1)
	ret0, _ := ret[0].(*search.RuntimePagerArmsearchServicesClientListBySubscriptionResponse)
	return ret0
}

// NewListBySubscriptionPager indicates an expected call of NewListBySubscriptionPager.
func (mr *MockServicesClientMockRecorder) NewListBySubscriptionPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBySubscriptionPager", reflect.TypeOf((*MockServicesClient)(nil).NewListBySubscriptionPager), arg0, arg1)
}
