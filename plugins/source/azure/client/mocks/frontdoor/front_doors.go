// Code generated by MockGen. DO NOT EDIT.
// Source: front_doors.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armfrontdoor "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/frontdoor/armfrontdoor"
	frontdoor "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/frontdoor"
	gomock "github.com/golang/mock/gomock"
)

// MockFrontDoorsClient is a mock of FrontDoorsClient interface.
type MockFrontDoorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFrontDoorsClientMockRecorder
}

// MockFrontDoorsClientMockRecorder is the mock recorder for MockFrontDoorsClient.
type MockFrontDoorsClientMockRecorder struct {
	mock *MockFrontDoorsClient
}

// NewMockFrontDoorsClient creates a new mock instance.
func NewMockFrontDoorsClient(ctrl *gomock.Controller) *MockFrontDoorsClient {
	mock := &MockFrontDoorsClient{ctrl: ctrl}
	mock.recorder = &MockFrontDoorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFrontDoorsClient) EXPECT() *MockFrontDoorsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFrontDoorsClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armfrontdoor.FrontDoorsClientGetOptions) (armfrontdoor.FrontDoorsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armfrontdoor.FrontDoorsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFrontDoorsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFrontDoorsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// NewListByResourceGroupPager mocks base method.
func (m *MockFrontDoorsClient) NewListByResourceGroupPager(arg0 string, arg1 *armfrontdoor.FrontDoorsClientListByResourceGroupOptions) *frontdoor.RuntimePagerArmfrontdoorFrontDoorsClientListByResourceGroupResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", arg0, arg1)
	ret0, _ := ret[0].(*frontdoor.RuntimePagerArmfrontdoorFrontDoorsClientListByResourceGroupResponse)
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockFrontDoorsClientMockRecorder) NewListByResourceGroupPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockFrontDoorsClient)(nil).NewListByResourceGroupPager), arg0, arg1)
}

// NewListPager mocks base method.
func (m *MockFrontDoorsClient) NewListPager(arg0 *armfrontdoor.FrontDoorsClientListOptions) *frontdoor.RuntimePagerArmfrontdoorFrontDoorsClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0)
	ret0, _ := ret[0].(*frontdoor.RuntimePagerArmfrontdoorFrontDoorsClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockFrontDoorsClientMockRecorder) NewListPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockFrontDoorsClient)(nil).NewListPager), arg0)
}
