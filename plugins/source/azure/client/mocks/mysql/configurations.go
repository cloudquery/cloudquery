// Code generated by MockGen. DO NOT EDIT.
// Source: configurations.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armmysql "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mysql/armmysql"
	mysql "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/mysql"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigurationsClient is a mock of ConfigurationsClient interface.
type MockConfigurationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationsClientMockRecorder
}

// MockConfigurationsClientMockRecorder is the mock recorder for MockConfigurationsClient.
type MockConfigurationsClientMockRecorder struct {
	mock *MockConfigurationsClient
}

// NewMockConfigurationsClient creates a new mock instance.
func NewMockConfigurationsClient(ctrl *gomock.Controller) *MockConfigurationsClient {
	mock := &MockConfigurationsClient{ctrl: ctrl}
	mock.recorder = &MockConfigurationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationsClient) EXPECT() *MockConfigurationsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigurationsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armmysql.ConfigurationsClientGetOptions) (armmysql.ConfigurationsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armmysql.ConfigurationsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigurationsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigurationsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListByServerPager mocks base method.
func (m *MockConfigurationsClient) NewListByServerPager(arg0, arg1 string, arg2 *armmysql.ConfigurationsClientListByServerOptions) *mysql.RuntimePagerArmmysqlConfigurationsClientListByServerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByServerPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mysql.RuntimePagerArmmysqlConfigurationsClientListByServerResponse)
	return ret0
}

// NewListByServerPager indicates an expected call of NewListByServerPager.
func (mr *MockConfigurationsClientMockRecorder) NewListByServerPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByServerPager", reflect.TypeOf((*MockConfigurationsClient)(nil).NewListByServerPager), arg0, arg1, arg2)
}
