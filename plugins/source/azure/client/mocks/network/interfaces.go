// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	network "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/network"
	gomock "github.com/golang/mock/gomock"
)

// MockInterfacesClient is a mock of InterfacesClient interface.
type MockInterfacesClient struct {
	ctrl     *gomock.Controller
	recorder *MockInterfacesClientMockRecorder
}

// MockInterfacesClientMockRecorder is the mock recorder for MockInterfacesClient.
type MockInterfacesClientMockRecorder struct {
	mock *MockInterfacesClient
}

// NewMockInterfacesClient creates a new mock instance.
func NewMockInterfacesClient(ctrl *gomock.Controller) *MockInterfacesClient {
	mock := &MockInterfacesClient{ctrl: ctrl}
	mock.recorder = &MockInterfacesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfacesClient) EXPECT() *MockInterfacesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInterfacesClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armnetwork.InterfacesClientGetOptions) (armnetwork.InterfacesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armnetwork.InterfacesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfacesClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfacesClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetCloudServiceNetworkInterface mocks base method.
func (m *MockInterfacesClient) GetCloudServiceNetworkInterface(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armnetwork.InterfacesClientGetCloudServiceNetworkInterfaceOptions) (armnetwork.InterfacesClientGetCloudServiceNetworkInterfaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudServiceNetworkInterface", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armnetwork.InterfacesClientGetCloudServiceNetworkInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudServiceNetworkInterface indicates an expected call of GetCloudServiceNetworkInterface.
func (mr *MockInterfacesClientMockRecorder) GetCloudServiceNetworkInterface(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudServiceNetworkInterface", reflect.TypeOf((*MockInterfacesClient)(nil).GetCloudServiceNetworkInterface), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetVirtualMachineScaleSetIPConfiguration mocks base method.
func (m *MockInterfacesClient) GetVirtualMachineScaleSetIPConfiguration(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 *armnetwork.InterfacesClientGetVirtualMachineScaleSetIPConfigurationOptions) (armnetwork.InterfacesClientGetVirtualMachineScaleSetIPConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineScaleSetIPConfiguration", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armnetwork.InterfacesClientGetVirtualMachineScaleSetIPConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineScaleSetIPConfiguration indicates an expected call of GetVirtualMachineScaleSetIPConfiguration.
func (mr *MockInterfacesClientMockRecorder) GetVirtualMachineScaleSetIPConfiguration(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineScaleSetIPConfiguration", reflect.TypeOf((*MockInterfacesClient)(nil).GetVirtualMachineScaleSetIPConfiguration), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetVirtualMachineScaleSetNetworkInterface mocks base method.
func (m *MockInterfacesClient) GetVirtualMachineScaleSetNetworkInterface(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *armnetwork.InterfacesClientGetVirtualMachineScaleSetNetworkInterfaceOptions) (armnetwork.InterfacesClientGetVirtualMachineScaleSetNetworkInterfaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineScaleSetNetworkInterface", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armnetwork.InterfacesClientGetVirtualMachineScaleSetNetworkInterfaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineScaleSetNetworkInterface indicates an expected call of GetVirtualMachineScaleSetNetworkInterface.
func (mr *MockInterfacesClientMockRecorder) GetVirtualMachineScaleSetNetworkInterface(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineScaleSetNetworkInterface", reflect.TypeOf((*MockInterfacesClient)(nil).GetVirtualMachineScaleSetNetworkInterface), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NewListAllPager mocks base method.
func (m *MockInterfacesClient) NewListAllPager(arg0 *armnetwork.InterfacesClientListAllOptions) *network.RuntimePagerArmnetworkInterfacesClientListAllResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAllPager", arg0)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListAllResponse)
	return ret0
}

// NewListAllPager indicates an expected call of NewListAllPager.
func (mr *MockInterfacesClientMockRecorder) NewListAllPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAllPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListAllPager), arg0)
}

// NewListCloudServiceNetworkInterfacesPager mocks base method.
func (m *MockInterfacesClient) NewListCloudServiceNetworkInterfacesPager(arg0, arg1 string, arg2 *armnetwork.InterfacesClientListCloudServiceNetworkInterfacesOptions) *network.RuntimePagerArmnetworkInterfacesClientListCloudServiceNetworkInterfacesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListCloudServiceNetworkInterfacesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListCloudServiceNetworkInterfacesResponse)
	return ret0
}

// NewListCloudServiceNetworkInterfacesPager indicates an expected call of NewListCloudServiceNetworkInterfacesPager.
func (mr *MockInterfacesClientMockRecorder) NewListCloudServiceNetworkInterfacesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListCloudServiceNetworkInterfacesPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListCloudServiceNetworkInterfacesPager), arg0, arg1, arg2)
}

// NewListCloudServiceRoleInstanceNetworkInterfacesPager mocks base method.
func (m *MockInterfacesClient) NewListCloudServiceRoleInstanceNetworkInterfacesPager(arg0, arg1, arg2 string, arg3 *armnetwork.InterfacesClientListCloudServiceRoleInstanceNetworkInterfacesOptions) *network.RuntimePagerArmnetworkInterfacesClientListCloudServiceRoleInstanceNetworkInterfacesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListCloudServiceRoleInstanceNetworkInterfacesPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListCloudServiceRoleInstanceNetworkInterfacesResponse)
	return ret0
}

// NewListCloudServiceRoleInstanceNetworkInterfacesPager indicates an expected call of NewListCloudServiceRoleInstanceNetworkInterfacesPager.
func (mr *MockInterfacesClientMockRecorder) NewListCloudServiceRoleInstanceNetworkInterfacesPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListCloudServiceRoleInstanceNetworkInterfacesPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListCloudServiceRoleInstanceNetworkInterfacesPager), arg0, arg1, arg2, arg3)
}

// NewListPager mocks base method.
func (m *MockInterfacesClient) NewListPager(arg0 string, arg1 *armnetwork.InterfacesClientListOptions) *network.RuntimePagerArmnetworkInterfacesClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0, arg1)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockInterfacesClientMockRecorder) NewListPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListPager), arg0, arg1)
}

// NewListVirtualMachineScaleSetIPConfigurationsPager mocks base method.
func (m *MockInterfacesClient) NewListVirtualMachineScaleSetIPConfigurationsPager(arg0, arg1, arg2, arg3 string, arg4 *armnetwork.InterfacesClientListVirtualMachineScaleSetIPConfigurationsOptions) *network.RuntimePagerArmnetworkInterfacesClientListVirtualMachineScaleSetIPConfigurationsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVirtualMachineScaleSetIPConfigurationsPager", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListVirtualMachineScaleSetIPConfigurationsResponse)
	return ret0
}

// NewListVirtualMachineScaleSetIPConfigurationsPager indicates an expected call of NewListVirtualMachineScaleSetIPConfigurationsPager.
func (mr *MockInterfacesClientMockRecorder) NewListVirtualMachineScaleSetIPConfigurationsPager(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVirtualMachineScaleSetIPConfigurationsPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListVirtualMachineScaleSetIPConfigurationsPager), arg0, arg1, arg2, arg3, arg4)
}

// NewListVirtualMachineScaleSetNetworkInterfacesPager mocks base method.
func (m *MockInterfacesClient) NewListVirtualMachineScaleSetNetworkInterfacesPager(arg0, arg1 string, arg2 *armnetwork.InterfacesClientListVirtualMachineScaleSetNetworkInterfacesOptions) *network.RuntimePagerArmnetworkInterfacesClientListVirtualMachineScaleSetNetworkInterfacesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVirtualMachineScaleSetNetworkInterfacesPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListVirtualMachineScaleSetNetworkInterfacesResponse)
	return ret0
}

// NewListVirtualMachineScaleSetNetworkInterfacesPager indicates an expected call of NewListVirtualMachineScaleSetNetworkInterfacesPager.
func (mr *MockInterfacesClientMockRecorder) NewListVirtualMachineScaleSetNetworkInterfacesPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVirtualMachineScaleSetNetworkInterfacesPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListVirtualMachineScaleSetNetworkInterfacesPager), arg0, arg1, arg2)
}

// NewListVirtualMachineScaleSetVMNetworkInterfacesPager mocks base method.
func (m *MockInterfacesClient) NewListVirtualMachineScaleSetVMNetworkInterfacesPager(arg0, arg1, arg2 string, arg3 *armnetwork.InterfacesClientListVirtualMachineScaleSetVMNetworkInterfacesOptions) *network.RuntimePagerArmnetworkInterfacesClientListVirtualMachineScaleSetVMNetworkInterfacesResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListVirtualMachineScaleSetVMNetworkInterfacesPager", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkInterfacesClientListVirtualMachineScaleSetVMNetworkInterfacesResponse)
	return ret0
}

// NewListVirtualMachineScaleSetVMNetworkInterfacesPager indicates an expected call of NewListVirtualMachineScaleSetVMNetworkInterfacesPager.
func (mr *MockInterfacesClientMockRecorder) NewListVirtualMachineScaleSetVMNetworkInterfacesPager(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListVirtualMachineScaleSetVMNetworkInterfacesPager", reflect.TypeOf((*MockInterfacesClient)(nil).NewListVirtualMachineScaleSetVMNetworkInterfacesPager), arg0, arg1, arg2, arg3)
}
