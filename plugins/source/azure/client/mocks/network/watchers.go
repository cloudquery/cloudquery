// Code generated by MockGen. DO NOT EDIT.
// Source: watchers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	network "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/network"
	gomock "github.com/golang/mock/gomock"
)

// MockWatchersClient is a mock of WatchersClient interface.
type MockWatchersClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatchersClientMockRecorder
}

// MockWatchersClientMockRecorder is the mock recorder for MockWatchersClient.
type MockWatchersClientMockRecorder struct {
	mock *MockWatchersClient
}

// NewMockWatchersClient creates a new mock instance.
func NewMockWatchersClient(ctrl *gomock.Controller) *MockWatchersClient {
	mock := &MockWatchersClient{ctrl: ctrl}
	mock.recorder = &MockWatchersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchersClient) EXPECT() *MockWatchersClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWatchersClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armnetwork.WatchersClientGetOptions) (armnetwork.WatchersClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armnetwork.WatchersClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWatchersClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWatchersClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetTopology mocks base method.
func (m *MockWatchersClient) GetTopology(arg0 context.Context, arg1, arg2 string, arg3 armnetwork.TopologyParameters, arg4 *armnetwork.WatchersClientGetTopologyOptions) (armnetwork.WatchersClientGetTopologyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopology", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armnetwork.WatchersClientGetTopologyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopology indicates an expected call of GetTopology.
func (mr *MockWatchersClientMockRecorder) GetTopology(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopology", reflect.TypeOf((*MockWatchersClient)(nil).GetTopology), arg0, arg1, arg2, arg3, arg4)
}

// NewListAllPager mocks base method.
func (m *MockWatchersClient) NewListAllPager(arg0 *armnetwork.WatchersClientListAllOptions) *network.RuntimePagerArmnetworkWatchersClientListAllResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAllPager", arg0)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkWatchersClientListAllResponse)
	return ret0
}

// NewListAllPager indicates an expected call of NewListAllPager.
func (mr *MockWatchersClientMockRecorder) NewListAllPager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAllPager", reflect.TypeOf((*MockWatchersClient)(nil).NewListAllPager), arg0)
}

// NewListPager mocks base method.
func (m *MockWatchersClient) NewListPager(arg0 string, arg1 *armnetwork.WatchersClientListOptions) *network.RuntimePagerArmnetworkWatchersClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0, arg1)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkWatchersClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockWatchersClientMockRecorder) NewListPager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockWatchersClient)(nil).NewListPager), arg0, arg1)
}
