// Code generated by MockGen. DO NOT EDIT.
// Source: express_route_gateways.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockExpressRouteGatewaysClient is a mock of ExpressRouteGatewaysClient interface.
type MockExpressRouteGatewaysClient struct {
	ctrl     *gomock.Controller
	recorder *MockExpressRouteGatewaysClientMockRecorder
}

// MockExpressRouteGatewaysClientMockRecorder is the mock recorder for MockExpressRouteGatewaysClient.
type MockExpressRouteGatewaysClientMockRecorder struct {
	mock *MockExpressRouteGatewaysClient
}

// NewMockExpressRouteGatewaysClient creates a new mock instance.
func NewMockExpressRouteGatewaysClient(ctrl *gomock.Controller) *MockExpressRouteGatewaysClient {
	mock := &MockExpressRouteGatewaysClient{ctrl: ctrl}
	mock.recorder = &MockExpressRouteGatewaysClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpressRouteGatewaysClient) EXPECT() *MockExpressRouteGatewaysClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExpressRouteGatewaysClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armnetwork.ExpressRouteGatewaysClientGetOptions) (armnetwork.ExpressRouteGatewaysClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armnetwork.ExpressRouteGatewaysClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpressRouteGatewaysClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpressRouteGatewaysClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// ListByResourceGroup mocks base method.
func (m *MockExpressRouteGatewaysClient) ListByResourceGroup(arg0 context.Context, arg1 string, arg2 *armnetwork.ExpressRouteGatewaysClientListByResourceGroupOptions) (armnetwork.ExpressRouteGatewaysClientListByResourceGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(armnetwork.ExpressRouteGatewaysClientListByResourceGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockExpressRouteGatewaysClientMockRecorder) ListByResourceGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockExpressRouteGatewaysClient)(nil).ListByResourceGroup), arg0, arg1, arg2)
}

// ListBySubscription mocks base method.
func (m *MockExpressRouteGatewaysClient) ListBySubscription(arg0 context.Context, arg1 *armnetwork.ExpressRouteGatewaysClientListBySubscriptionOptions) (armnetwork.ExpressRouteGatewaysClientListBySubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0, arg1)
	ret0, _ := ret[0].(armnetwork.ExpressRouteGatewaysClientListBySubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockExpressRouteGatewaysClientMockRecorder) ListBySubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockExpressRouteGatewaysClient)(nil).ListBySubscription), arg0, arg1)
}
