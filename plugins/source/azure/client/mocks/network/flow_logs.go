// Code generated by MockGen. DO NOT EDIT.
// Source: flow_logs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	network "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/network"
	gomock "github.com/golang/mock/gomock"
)

// MockFlowLogsClient is a mock of FlowLogsClient interface.
type MockFlowLogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlowLogsClientMockRecorder
}

// MockFlowLogsClientMockRecorder is the mock recorder for MockFlowLogsClient.
type MockFlowLogsClientMockRecorder struct {
	mock *MockFlowLogsClient
}

// NewMockFlowLogsClient creates a new mock instance.
func NewMockFlowLogsClient(ctrl *gomock.Controller) *MockFlowLogsClient {
	mock := &MockFlowLogsClient{ctrl: ctrl}
	mock.recorder = &MockFlowLogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowLogsClient) EXPECT() *MockFlowLogsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFlowLogsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *armnetwork.FlowLogsClientGetOptions) (armnetwork.FlowLogsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(armnetwork.FlowLogsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFlowLogsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlowLogsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// NewListPager mocks base method.
func (m *MockFlowLogsClient) NewListPager(arg0, arg1 string, arg2 *armnetwork.FlowLogsClientListOptions) *network.RuntimePagerArmnetworkFlowLogsClientListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListPager", arg0, arg1, arg2)
	ret0, _ := ret[0].(*network.RuntimePagerArmnetworkFlowLogsClientListResponse)
	return ret0
}

// NewListPager indicates an expected call of NewListPager.
func (mr *MockFlowLogsClientMockRecorder) NewListPager(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListPager", reflect.TypeOf((*MockFlowLogsClient)(nil).NewListPager), arg0, arg1, arg2)
}
