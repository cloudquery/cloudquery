// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: SQLServerClient,SQLFirewallClient,SQLServerAdminClient,SQLServerBlobAuditingPolicies,SQLServerDevOpsAuditSettingsClient,SQLServerVulnerabilityAssessmentsClient,EncryptionProtectorsClient,SQLVirtualNetworkRulesClient,ServerSecurityAlertPoliciesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sql "github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v4.0/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockSQLServerClient is a mock of SQLServerClient interface.
type MockSQLServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerClientMockRecorder
}

// MockSQLServerClientMockRecorder is the mock recorder for MockSQLServerClient.
type MockSQLServerClientMockRecorder struct {
	mock *MockSQLServerClient
}

// NewMockSQLServerClient creates a new mock instance.
func NewMockSQLServerClient(ctrl *gomock.Controller) *MockSQLServerClient {
	mock := &MockSQLServerClient{ctrl: ctrl}
	mock.recorder = &MockSQLServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServerClient) EXPECT() *MockSQLServerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSQLServerClient) List(arg0 context.Context) (sql.ServerListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(sql.ServerListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSQLServerClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSQLServerClient)(nil).List), arg0)
}

// MockSQLFirewallClient is a mock of SQLFirewallClient interface.
type MockSQLFirewallClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLFirewallClientMockRecorder
}

// MockSQLFirewallClientMockRecorder is the mock recorder for MockSQLFirewallClient.
type MockSQLFirewallClientMockRecorder struct {
	mock *MockSQLFirewallClient
}

// NewMockSQLFirewallClient creates a new mock instance.
func NewMockSQLFirewallClient(ctrl *gomock.Controller) *MockSQLFirewallClient {
	mock := &MockSQLFirewallClient{ctrl: ctrl}
	mock.recorder = &MockSQLFirewallClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLFirewallClient) EXPECT() *MockSQLFirewallClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLFirewallClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.FirewallRuleListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.FirewallRuleListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLFirewallClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLFirewallClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSQLServerAdminClient is a mock of SQLServerAdminClient interface.
type MockSQLServerAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerAdminClientMockRecorder
}

// MockSQLServerAdminClientMockRecorder is the mock recorder for MockSQLServerAdminClient.
type MockSQLServerAdminClientMockRecorder struct {
	mock *MockSQLServerAdminClient
}

// NewMockSQLServerAdminClient creates a new mock instance.
func NewMockSQLServerAdminClient(ctrl *gomock.Controller) *MockSQLServerAdminClient {
	mock := &MockSQLServerAdminClient{ctrl: ctrl}
	mock.recorder = &MockSQLServerAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServerAdminClient) EXPECT() *MockSQLServerAdminClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLServerAdminClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.AdministratorListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.AdministratorListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLServerAdminClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLServerAdminClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSQLServerBlobAuditingPolicies is a mock of SQLServerBlobAuditingPolicies interface.
type MockSQLServerBlobAuditingPolicies struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerBlobAuditingPoliciesMockRecorder
}

// MockSQLServerBlobAuditingPoliciesMockRecorder is the mock recorder for MockSQLServerBlobAuditingPolicies.
type MockSQLServerBlobAuditingPoliciesMockRecorder struct {
	mock *MockSQLServerBlobAuditingPolicies
}

// NewMockSQLServerBlobAuditingPolicies creates a new mock instance.
func NewMockSQLServerBlobAuditingPolicies(ctrl *gomock.Controller) *MockSQLServerBlobAuditingPolicies {
	mock := &MockSQLServerBlobAuditingPolicies{ctrl: ctrl}
	mock.recorder = &MockSQLServerBlobAuditingPoliciesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServerBlobAuditingPolicies) EXPECT() *MockSQLServerBlobAuditingPoliciesMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLServerBlobAuditingPolicies) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.ServerBlobAuditingPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.ServerBlobAuditingPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLServerBlobAuditingPoliciesMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLServerBlobAuditingPolicies)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSQLServerDevOpsAuditSettingsClient is a mock of SQLServerDevOpsAuditSettingsClient interface.
type MockSQLServerDevOpsAuditSettingsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerDevOpsAuditSettingsClientMockRecorder
}

// MockSQLServerDevOpsAuditSettingsClientMockRecorder is the mock recorder for MockSQLServerDevOpsAuditSettingsClient.
type MockSQLServerDevOpsAuditSettingsClientMockRecorder struct {
	mock *MockSQLServerDevOpsAuditSettingsClient
}

// NewMockSQLServerDevOpsAuditSettingsClient creates a new mock instance.
func NewMockSQLServerDevOpsAuditSettingsClient(ctrl *gomock.Controller) *MockSQLServerDevOpsAuditSettingsClient {
	mock := &MockSQLServerDevOpsAuditSettingsClient{ctrl: ctrl}
	mock.recorder = &MockSQLServerDevOpsAuditSettingsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServerDevOpsAuditSettingsClient) EXPECT() *MockSQLServerDevOpsAuditSettingsClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLServerDevOpsAuditSettingsClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.ServerDevOpsAuditSettingsListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.ServerDevOpsAuditSettingsListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLServerDevOpsAuditSettingsClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLServerDevOpsAuditSettingsClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSQLServerVulnerabilityAssessmentsClient is a mock of SQLServerVulnerabilityAssessmentsClient interface.
type MockSQLServerVulnerabilityAssessmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerVulnerabilityAssessmentsClientMockRecorder
}

// MockSQLServerVulnerabilityAssessmentsClientMockRecorder is the mock recorder for MockSQLServerVulnerabilityAssessmentsClient.
type MockSQLServerVulnerabilityAssessmentsClientMockRecorder struct {
	mock *MockSQLServerVulnerabilityAssessmentsClient
}

// NewMockSQLServerVulnerabilityAssessmentsClient creates a new mock instance.
func NewMockSQLServerVulnerabilityAssessmentsClient(ctrl *gomock.Controller) *MockSQLServerVulnerabilityAssessmentsClient {
	mock := &MockSQLServerVulnerabilityAssessmentsClient{ctrl: ctrl}
	mock.recorder = &MockSQLServerVulnerabilityAssessmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServerVulnerabilityAssessmentsClient) EXPECT() *MockSQLServerVulnerabilityAssessmentsClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLServerVulnerabilityAssessmentsClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.ServerVulnerabilityAssessmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.ServerVulnerabilityAssessmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLServerVulnerabilityAssessmentsClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLServerVulnerabilityAssessmentsClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockEncryptionProtectorsClient is a mock of EncryptionProtectorsClient interface.
type MockEncryptionProtectorsClient struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionProtectorsClientMockRecorder
}

// MockEncryptionProtectorsClientMockRecorder is the mock recorder for MockEncryptionProtectorsClient.
type MockEncryptionProtectorsClientMockRecorder struct {
	mock *MockEncryptionProtectorsClient
}

// NewMockEncryptionProtectorsClient creates a new mock instance.
func NewMockEncryptionProtectorsClient(ctrl *gomock.Controller) *MockEncryptionProtectorsClient {
	mock := &MockEncryptionProtectorsClient{ctrl: ctrl}
	mock.recorder = &MockEncryptionProtectorsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionProtectorsClient) EXPECT() *MockEncryptionProtectorsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEncryptionProtectorsClient) Get(arg0 context.Context, arg1, arg2 string) (sql.EncryptionProtector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.EncryptionProtector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEncryptionProtectorsClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEncryptionProtectorsClient)(nil).Get), arg0, arg1, arg2)
}

// MockSQLVirtualNetworkRulesClient is a mock of SQLVirtualNetworkRulesClient interface.
type MockSQLVirtualNetworkRulesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLVirtualNetworkRulesClientMockRecorder
}

// MockSQLVirtualNetworkRulesClientMockRecorder is the mock recorder for MockSQLVirtualNetworkRulesClient.
type MockSQLVirtualNetworkRulesClientMockRecorder struct {
	mock *MockSQLVirtualNetworkRulesClient
}

// NewMockSQLVirtualNetworkRulesClient creates a new mock instance.
func NewMockSQLVirtualNetworkRulesClient(ctrl *gomock.Controller) *MockSQLVirtualNetworkRulesClient {
	mock := &MockSQLVirtualNetworkRulesClient{ctrl: ctrl}
	mock.recorder = &MockSQLVirtualNetworkRulesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLVirtualNetworkRulesClient) EXPECT() *MockSQLVirtualNetworkRulesClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLVirtualNetworkRulesClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.VirtualNetworkRuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.VirtualNetworkRuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLVirtualNetworkRulesClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLVirtualNetworkRulesClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockServerSecurityAlertPoliciesClient is a mock of ServerSecurityAlertPoliciesClient interface.
type MockServerSecurityAlertPoliciesClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerSecurityAlertPoliciesClientMockRecorder
}

// MockServerSecurityAlertPoliciesClientMockRecorder is the mock recorder for MockServerSecurityAlertPoliciesClient.
type MockServerSecurityAlertPoliciesClientMockRecorder struct {
	mock *MockServerSecurityAlertPoliciesClient
}

// NewMockServerSecurityAlertPoliciesClient creates a new mock instance.
func NewMockServerSecurityAlertPoliciesClient(ctrl *gomock.Controller) *MockServerSecurityAlertPoliciesClient {
	mock := &MockServerSecurityAlertPoliciesClient{ctrl: ctrl}
	mock.recorder = &MockServerSecurityAlertPoliciesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerSecurityAlertPoliciesClient) EXPECT() *MockServerSecurityAlertPoliciesClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockServerSecurityAlertPoliciesClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.LogicalServerSecurityAlertPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.LogicalServerSecurityAlertPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockServerSecurityAlertPoliciesClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockServerSecurityAlertPoliciesClient)(nil).ListByServer), arg0, arg1, arg2)
}
