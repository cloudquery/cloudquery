// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/azure/client/services (interfaces: StreamAnalyticsJobsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	streamanalytics "github.com/Azure/azure-sdk-for-go/services/streamanalytics/mgmt/2020-03-01/streamanalytics"
	gomock "github.com/golang/mock/gomock"
)

// MockStreamAnalyticsJobsClient is a mock of StreamAnalyticsJobsClient interface.
type MockStreamAnalyticsJobsClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAnalyticsJobsClientMockRecorder
}

// MockStreamAnalyticsJobsClientMockRecorder is the mock recorder for MockStreamAnalyticsJobsClient.
type MockStreamAnalyticsJobsClientMockRecorder struct {
	mock *MockStreamAnalyticsJobsClient
}

// NewMockStreamAnalyticsJobsClient creates a new mock instance.
func NewMockStreamAnalyticsJobsClient(ctrl *gomock.Controller) *MockStreamAnalyticsJobsClient {
	mock := &MockStreamAnalyticsJobsClient{ctrl: ctrl}
	mock.recorder = &MockStreamAnalyticsJobsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAnalyticsJobsClient) EXPECT() *MockStreamAnalyticsJobsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockStreamAnalyticsJobsClient) List(arg0 context.Context, arg1 string) (streamanalytics.StreamingJobListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(streamanalytics.StreamingJobListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStreamAnalyticsJobsClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStreamAnalyticsJobsClient)(nil).List), arg0, arg1)
}
