// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: ResClient,GroupsClient,AssignmentsClient,LinksClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	policy "github.com/Azure/azure-sdk-for-go/services/preview/resources/mgmt/2020-03-01-preview/policy"
	links "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2016-09-01/links"
	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-10-01/resources"
	gomock "github.com/golang/mock/gomock"
)

// MockResClient is a mock of ResClient interface.
type MockResClient struct {
	ctrl     *gomock.Controller
	recorder *MockResClientMockRecorder
}

// MockResClientMockRecorder is the mock recorder for MockResClient.
type MockResClientMockRecorder struct {
	mock *MockResClient
}

// NewMockResClient creates a new mock instance.
func NewMockResClient(ctrl *gomock.Controller) *MockResClient {
	mock := &MockResClient{ctrl: ctrl}
	mock.recorder = &MockResClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResClient) EXPECT() *MockResClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockResClient) List(arg0 context.Context, arg1, arg2 string, arg3 *int32) (resources.ListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(resources.ListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResClientMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResClient)(nil).List), arg0, arg1, arg2, arg3)
}

// MockGroupsClient is a mock of GroupsClient interface.
type MockGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsClientMockRecorder
}

// MockGroupsClientMockRecorder is the mock recorder for MockGroupsClient.
type MockGroupsClientMockRecorder struct {
	mock *MockGroupsClient
}

// NewMockGroupsClient creates a new mock instance.
func NewMockGroupsClient(ctrl *gomock.Controller) *MockGroupsClient {
	mock := &MockGroupsClient{ctrl: ctrl}
	mock.recorder = &MockGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupsClient) EXPECT() *MockGroupsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockGroupsClient) List(arg0 context.Context, arg1 string, arg2 *int32) (resources.GroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.GroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGroupsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGroupsClient)(nil).List), arg0, arg1, arg2)
}

// MockAssignmentsClient is a mock of AssignmentsClient interface.
type MockAssignmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssignmentsClientMockRecorder
}

// MockAssignmentsClientMockRecorder is the mock recorder for MockAssignmentsClient.
type MockAssignmentsClientMockRecorder struct {
	mock *MockAssignmentsClient
}

// NewMockAssignmentsClient creates a new mock instance.
func NewMockAssignmentsClient(ctrl *gomock.Controller) *MockAssignmentsClient {
	mock := &MockAssignmentsClient{ctrl: ctrl}
	mock.recorder = &MockAssignmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssignmentsClient) EXPECT() *MockAssignmentsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockAssignmentsClient) List(arg0 context.Context, arg1, arg2 string, arg3 *int32) (policy.AssignmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(policy.AssignmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAssignmentsClientMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAssignmentsClient)(nil).List), arg0, arg1, arg2, arg3)
}

// MockLinksClient is a mock of LinksClient interface.
type MockLinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinksClientMockRecorder
}

// MockLinksClientMockRecorder is the mock recorder for MockLinksClient.
type MockLinksClientMockRecorder struct {
	mock *MockLinksClient
}

// NewMockLinksClient creates a new mock instance.
func NewMockLinksClient(ctrl *gomock.Controller) *MockLinksClient {
	mock := &MockLinksClient{ctrl: ctrl}
	mock.recorder = &MockLinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinksClient) EXPECT() *MockLinksClientMockRecorder {
	return m.recorder
}

// ListAtSubscription mocks base method.
func (m *MockLinksClient) ListAtSubscription(arg0 context.Context, arg1 string) (links.ResourceLinkResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAtSubscription", arg0, arg1)
	ret0, _ := ret[0].(links.ResourceLinkResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAtSubscription indicates an expected call of ListAtSubscription.
func (mr *MockLinksClientMockRecorder) ListAtSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAtSubscription", reflect.TypeOf((*MockLinksClient)(nil).ListAtSubscription), arg0, arg1)
}
