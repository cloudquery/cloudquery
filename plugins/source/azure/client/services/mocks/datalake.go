// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/azure/client/services (interfaces: DataLakeDataLakeStoreAccountsClient,DataLakeDataLakeAnalyticsAccountsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	account "github.com/Azure/azure-sdk-for-go/services/datalake/analytics/mgmt/2016-11-01/account"
	account0 "github.com/Azure/azure-sdk-for-go/services/datalake/store/mgmt/2016-11-01/account"
	gomock "github.com/golang/mock/gomock"
)

// MockDataLakeDataLakeStoreAccountsClient is a mock of DataLakeDataLakeStoreAccountsClient interface.
type MockDataLakeDataLakeStoreAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataLakeDataLakeStoreAccountsClientMockRecorder
}

// MockDataLakeDataLakeStoreAccountsClientMockRecorder is the mock recorder for MockDataLakeDataLakeStoreAccountsClient.
type MockDataLakeDataLakeStoreAccountsClientMockRecorder struct {
	mock *MockDataLakeDataLakeStoreAccountsClient
}

// NewMockDataLakeDataLakeStoreAccountsClient creates a new mock instance.
func NewMockDataLakeDataLakeStoreAccountsClient(ctrl *gomock.Controller) *MockDataLakeDataLakeStoreAccountsClient {
	mock := &MockDataLakeDataLakeStoreAccountsClient{ctrl: ctrl}
	mock.recorder = &MockDataLakeDataLakeStoreAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataLakeDataLakeStoreAccountsClient) EXPECT() *MockDataLakeDataLakeStoreAccountsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDataLakeDataLakeStoreAccountsClient) Get(arg0 context.Context, arg1, arg2 string) (account0.DataLakeStoreAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(account0.DataLakeStoreAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataLakeDataLakeStoreAccountsClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataLakeDataLakeStoreAccountsClient)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockDataLakeDataLakeStoreAccountsClient) List(arg0 context.Context, arg1 string, arg2, arg3 *int32, arg4, arg5 string, arg6 *bool) (account0.DataLakeStoreAccountListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(account0.DataLakeStoreAccountListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDataLakeDataLakeStoreAccountsClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDataLakeDataLakeStoreAccountsClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// MockDataLakeDataLakeAnalyticsAccountsClient is a mock of DataLakeDataLakeAnalyticsAccountsClient interface.
type MockDataLakeDataLakeAnalyticsAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder
}

// MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder is the mock recorder for MockDataLakeDataLakeAnalyticsAccountsClient.
type MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder struct {
	mock *MockDataLakeDataLakeAnalyticsAccountsClient
}

// NewMockDataLakeDataLakeAnalyticsAccountsClient creates a new mock instance.
func NewMockDataLakeDataLakeAnalyticsAccountsClient(ctrl *gomock.Controller) *MockDataLakeDataLakeAnalyticsAccountsClient {
	mock := &MockDataLakeDataLakeAnalyticsAccountsClient{ctrl: ctrl}
	mock.recorder = &MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataLakeDataLakeAnalyticsAccountsClient) EXPECT() *MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDataLakeDataLakeAnalyticsAccountsClient) Get(arg0 context.Context, arg1, arg2 string) (account.DataLakeAnalyticsAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(account.DataLakeAnalyticsAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataLakeDataLakeAnalyticsAccountsClient)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockDataLakeDataLakeAnalyticsAccountsClient) List(arg0 context.Context, arg1 string, arg2, arg3 *int32, arg4, arg5 string, arg6 *bool) (account.DataLakeAnalyticsAccountListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(account.DataLakeAnalyticsAccountListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDataLakeDataLakeAnalyticsAccountsClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDataLakeDataLakeAnalyticsAccountsClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
