// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: PostgresqlConfigurationClient,PostgresqlServerClient,PostgresqlFirewallRuleClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	postgresql "github.com/Azure/azure-sdk-for-go/services/postgresql/mgmt/2020-01-01/postgresql"
	gomock "github.com/golang/mock/gomock"
)

// MockPostgresqlConfigurationClient is a mock of PostgresqlConfigurationClient interface.
type MockPostgresqlConfigurationClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlConfigurationClientMockRecorder
}

// MockPostgresqlConfigurationClientMockRecorder is the mock recorder for MockPostgresqlConfigurationClient.
type MockPostgresqlConfigurationClientMockRecorder struct {
	mock *MockPostgresqlConfigurationClient
}

// NewMockPostgresqlConfigurationClient creates a new mock instance.
func NewMockPostgresqlConfigurationClient(ctrl *gomock.Controller) *MockPostgresqlConfigurationClient {
	mock := &MockPostgresqlConfigurationClient{ctrl: ctrl}
	mock.recorder = &MockPostgresqlConfigurationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlConfigurationClient) EXPECT() *MockPostgresqlConfigurationClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockPostgresqlConfigurationClient) ListByServer(arg0 context.Context, arg1, arg2 string) (postgresql.ConfigurationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(postgresql.ConfigurationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockPostgresqlConfigurationClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockPostgresqlConfigurationClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockPostgresqlServerClient is a mock of PostgresqlServerClient interface.
type MockPostgresqlServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlServerClientMockRecorder
}

// MockPostgresqlServerClientMockRecorder is the mock recorder for MockPostgresqlServerClient.
type MockPostgresqlServerClientMockRecorder struct {
	mock *MockPostgresqlServerClient
}

// NewMockPostgresqlServerClient creates a new mock instance.
func NewMockPostgresqlServerClient(ctrl *gomock.Controller) *MockPostgresqlServerClient {
	mock := &MockPostgresqlServerClient{ctrl: ctrl}
	mock.recorder = &MockPostgresqlServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlServerClient) EXPECT() *MockPostgresqlServerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPostgresqlServerClient) List(arg0 context.Context) (postgresql.ServerListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(postgresql.ServerListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPostgresqlServerClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPostgresqlServerClient)(nil).List), arg0)
}

// MockPostgresqlFirewallRuleClient is a mock of PostgresqlFirewallRuleClient interface.
type MockPostgresqlFirewallRuleClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlFirewallRuleClientMockRecorder
}

// MockPostgresqlFirewallRuleClientMockRecorder is the mock recorder for MockPostgresqlFirewallRuleClient.
type MockPostgresqlFirewallRuleClientMockRecorder struct {
	mock *MockPostgresqlFirewallRuleClient
}

// NewMockPostgresqlFirewallRuleClient creates a new mock instance.
func NewMockPostgresqlFirewallRuleClient(ctrl *gomock.Controller) *MockPostgresqlFirewallRuleClient {
	mock := &MockPostgresqlFirewallRuleClient{ctrl: ctrl}
	mock.recorder = &MockPostgresqlFirewallRuleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlFirewallRuleClient) EXPECT() *MockPostgresqlFirewallRuleClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockPostgresqlFirewallRuleClient) ListByServer(arg0 context.Context, arg1, arg2 string) (postgresql.FirewallRuleListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(postgresql.FirewallRuleListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockPostgresqlFirewallRuleClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockPostgresqlFirewallRuleClient)(nil).ListByServer), arg0, arg1, arg2)
}
