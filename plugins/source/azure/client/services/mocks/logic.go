// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/azure/client/services (interfaces: LogicMonitorDiagnosticSettingsClient,LogicWorkflowsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	logic "github.com/Azure/azure-sdk-for-go/services/logic/mgmt/2019-05-01/logic"
	insights "github.com/Azure/azure-sdk-for-go/services/preview/monitor/mgmt/2019-06-01/insights"
	gomock "github.com/golang/mock/gomock"
)

// MockLogicMonitorDiagnosticSettingsClient is a mock of LogicMonitorDiagnosticSettingsClient interface.
type MockLogicMonitorDiagnosticSettingsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogicMonitorDiagnosticSettingsClientMockRecorder
}

// MockLogicMonitorDiagnosticSettingsClientMockRecorder is the mock recorder for MockLogicMonitorDiagnosticSettingsClient.
type MockLogicMonitorDiagnosticSettingsClientMockRecorder struct {
	mock *MockLogicMonitorDiagnosticSettingsClient
}

// NewMockLogicMonitorDiagnosticSettingsClient creates a new mock instance.
func NewMockLogicMonitorDiagnosticSettingsClient(ctrl *gomock.Controller) *MockLogicMonitorDiagnosticSettingsClient {
	mock := &MockLogicMonitorDiagnosticSettingsClient{ctrl: ctrl}
	mock.recorder = &MockLogicMonitorDiagnosticSettingsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicMonitorDiagnosticSettingsClient) EXPECT() *MockLogicMonitorDiagnosticSettingsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockLogicMonitorDiagnosticSettingsClient) List(arg0 context.Context, arg1 string) (insights.DiagnosticSettingsResourceCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(insights.DiagnosticSettingsResourceCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLogicMonitorDiagnosticSettingsClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLogicMonitorDiagnosticSettingsClient)(nil).List), arg0, arg1)
}

// MockLogicWorkflowsClient is a mock of LogicWorkflowsClient interface.
type MockLogicWorkflowsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogicWorkflowsClientMockRecorder
}

// MockLogicWorkflowsClientMockRecorder is the mock recorder for MockLogicWorkflowsClient.
type MockLogicWorkflowsClientMockRecorder struct {
	mock *MockLogicWorkflowsClient
}

// NewMockLogicWorkflowsClient creates a new mock instance.
func NewMockLogicWorkflowsClient(ctrl *gomock.Controller) *MockLogicWorkflowsClient {
	mock := &MockLogicWorkflowsClient{ctrl: ctrl}
	mock.recorder = &MockLogicWorkflowsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicWorkflowsClient) EXPECT() *MockLogicWorkflowsClientMockRecorder {
	return m.recorder
}

// ListBySubscription mocks base method.
func (m *MockLogicWorkflowsClient) ListBySubscription(arg0 context.Context, arg1 *int32, arg2 string) (logic.WorkflowListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(logic.WorkflowListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockLogicWorkflowsClientMockRecorder) ListBySubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockLogicWorkflowsClient)(nil).ListBySubscription), arg0, arg1, arg2)
}
