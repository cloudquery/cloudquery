// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: MonitorDiagnosticSettingsClient,WorkflowsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	logic "github.com/Azure/azure-sdk-for-go/services/logic/mgmt/2019-05-01/logic"
	insights "github.com/Azure/azure-sdk-for-go/services/preview/monitor/mgmt/2019-06-01/insights"
	gomock "github.com/golang/mock/gomock"
)

// MockMonitorDiagnosticSettingsClient is a mock of MonitorDiagnosticSettingsClient interface.
type MockMonitorDiagnosticSettingsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorDiagnosticSettingsClientMockRecorder
}

// MockMonitorDiagnosticSettingsClientMockRecorder is the mock recorder for MockMonitorDiagnosticSettingsClient.
type MockMonitorDiagnosticSettingsClientMockRecorder struct {
	mock *MockMonitorDiagnosticSettingsClient
}

// NewMockMonitorDiagnosticSettingsClient creates a new mock instance.
func NewMockMonitorDiagnosticSettingsClient(ctrl *gomock.Controller) *MockMonitorDiagnosticSettingsClient {
	mock := &MockMonitorDiagnosticSettingsClient{ctrl: ctrl}
	mock.recorder = &MockMonitorDiagnosticSettingsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitorDiagnosticSettingsClient) EXPECT() *MockMonitorDiagnosticSettingsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMonitorDiagnosticSettingsClient) List(arg0 context.Context, arg1 string) (insights.DiagnosticSettingsResourceCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(insights.DiagnosticSettingsResourceCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMonitorDiagnosticSettingsClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitorDiagnosticSettingsClient)(nil).List), arg0, arg1)
}

// MockWorkflowsClient is a mock of WorkflowsClient interface.
type MockWorkflowsClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowsClientMockRecorder
}

// MockWorkflowsClientMockRecorder is the mock recorder for MockWorkflowsClient.
type MockWorkflowsClientMockRecorder struct {
	mock *MockWorkflowsClient
}

// NewMockWorkflowsClient creates a new mock instance.
func NewMockWorkflowsClient(ctrl *gomock.Controller) *MockWorkflowsClient {
	mock := &MockWorkflowsClient{ctrl: ctrl}
	mock.recorder = &MockWorkflowsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowsClient) EXPECT() *MockWorkflowsClientMockRecorder {
	return m.recorder
}

// ListBySubscription mocks base method.
func (m *MockWorkflowsClient) ListBySubscription(arg0 context.Context, arg1 *int32, arg2 string) (logic.WorkflowListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(logic.WorkflowListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockWorkflowsClientMockRecorder) ListBySubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockWorkflowsClient)(nil).ListBySubscription), arg0, arg1, arg2)
}
