// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/azure/client/services (interfaces: ManagedDatabasesClient,ManagedDatabaseVulnerabilityAssessmentsClient,ManagedDatabaseVulnerabilityAssessmentScansClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sql "github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v4.0/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedDatabasesClient is a mock of ManagedDatabasesClient interface.
type MockManagedDatabasesClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedDatabasesClientMockRecorder
}

// MockManagedDatabasesClientMockRecorder is the mock recorder for MockManagedDatabasesClient.
type MockManagedDatabasesClientMockRecorder struct {
	mock *MockManagedDatabasesClient
}

// NewMockManagedDatabasesClient creates a new mock instance.
func NewMockManagedDatabasesClient(ctrl *gomock.Controller) *MockManagedDatabasesClient {
	mock := &MockManagedDatabasesClient{ctrl: ctrl}
	mock.recorder = &MockManagedDatabasesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedDatabasesClient) EXPECT() *MockManagedDatabasesClientMockRecorder {
	return m.recorder
}

// ListByInstance mocks base method.
func (m *MockManagedDatabasesClient) ListByInstance(arg0 context.Context, arg1, arg2 string) (sql.ManagedDatabaseListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByInstance", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.ManagedDatabaseListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByInstance indicates an expected call of ListByInstance.
func (mr *MockManagedDatabasesClientMockRecorder) ListByInstance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByInstance", reflect.TypeOf((*MockManagedDatabasesClient)(nil).ListByInstance), arg0, arg1, arg2)
}

// MockManagedDatabaseVulnerabilityAssessmentsClient is a mock of ManagedDatabaseVulnerabilityAssessmentsClient interface.
type MockManagedDatabaseVulnerabilityAssessmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder
}

// MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder is the mock recorder for MockManagedDatabaseVulnerabilityAssessmentsClient.
type MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder struct {
	mock *MockManagedDatabaseVulnerabilityAssessmentsClient
}

// NewMockManagedDatabaseVulnerabilityAssessmentsClient creates a new mock instance.
func NewMockManagedDatabaseVulnerabilityAssessmentsClient(ctrl *gomock.Controller) *MockManagedDatabaseVulnerabilityAssessmentsClient {
	mock := &MockManagedDatabaseVulnerabilityAssessmentsClient{ctrl: ctrl}
	mock.recorder = &MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedDatabaseVulnerabilityAssessmentsClient) EXPECT() *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder {
	return m.recorder
}

// ListByDatabase mocks base method.
func (m *MockManagedDatabaseVulnerabilityAssessmentsClient) ListByDatabase(arg0 context.Context, arg1, arg2, arg3 string) (sql.DatabaseVulnerabilityAssessmentListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDatabase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sql.DatabaseVulnerabilityAssessmentListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDatabase indicates an expected call of ListByDatabase.
func (mr *MockManagedDatabaseVulnerabilityAssessmentsClientMockRecorder) ListByDatabase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDatabase", reflect.TypeOf((*MockManagedDatabaseVulnerabilityAssessmentsClient)(nil).ListByDatabase), arg0, arg1, arg2, arg3)
}

// MockManagedDatabaseVulnerabilityAssessmentScansClient is a mock of ManagedDatabaseVulnerabilityAssessmentScansClient interface.
type MockManagedDatabaseVulnerabilityAssessmentScansClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagedDatabaseVulnerabilityAssessmentScansClientMockRecorder
}

// MockManagedDatabaseVulnerabilityAssessmentScansClientMockRecorder is the mock recorder for MockManagedDatabaseVulnerabilityAssessmentScansClient.
type MockManagedDatabaseVulnerabilityAssessmentScansClientMockRecorder struct {
	mock *MockManagedDatabaseVulnerabilityAssessmentScansClient
}

// NewMockManagedDatabaseVulnerabilityAssessmentScansClient creates a new mock instance.
func NewMockManagedDatabaseVulnerabilityAssessmentScansClient(ctrl *gomock.Controller) *MockManagedDatabaseVulnerabilityAssessmentScansClient {
	mock := &MockManagedDatabaseVulnerabilityAssessmentScansClient{ctrl: ctrl}
	mock.recorder = &MockManagedDatabaseVulnerabilityAssessmentScansClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedDatabaseVulnerabilityAssessmentScansClient) EXPECT() *MockManagedDatabaseVulnerabilityAssessmentScansClientMockRecorder {
	return m.recorder
}

// ListByDatabase mocks base method.
func (m *MockManagedDatabaseVulnerabilityAssessmentScansClient) ListByDatabase(arg0 context.Context, arg1, arg2, arg3 string) (sql.VulnerabilityAssessmentScanRecordListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDatabase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sql.VulnerabilityAssessmentScanRecordListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDatabase indicates an expected call of ListByDatabase.
func (mr *MockManagedDatabaseVulnerabilityAssessmentScansClientMockRecorder) ListByDatabase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDatabase", reflect.TypeOf((*MockManagedDatabaseVulnerabilityAssessmentScansClient)(nil).ListByDatabase), arg0, arg1, arg2, arg3)
}
