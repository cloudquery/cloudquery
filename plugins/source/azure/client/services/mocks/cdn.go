// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/azure/client/services (interfaces: CDNProfilesClient,CDNEndpointsClient,CDNCustomDomainsClient,CDNOriginsClient,CDNOriginGroupsClient,CDNRoutesClient,CDNRuleSetsClient,CDNRulesClient,CDNSecurityPoliciesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cdn "github.com/Azure/azure-sdk-for-go/services/cdn/mgmt/2020-09-01/cdn"
	gomock "github.com/golang/mock/gomock"
)

// MockCDNProfilesClient is a mock of CDNProfilesClient interface.
type MockCDNProfilesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNProfilesClientMockRecorder
}

// MockCDNProfilesClientMockRecorder is the mock recorder for MockCDNProfilesClient.
type MockCDNProfilesClientMockRecorder struct {
	mock *MockCDNProfilesClient
}

// NewMockCDNProfilesClient creates a new mock instance.
func NewMockCDNProfilesClient(ctrl *gomock.Controller) *MockCDNProfilesClient {
	mock := &MockCDNProfilesClient{ctrl: ctrl}
	mock.recorder = &MockCDNProfilesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNProfilesClient) EXPECT() *MockCDNProfilesClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCDNProfilesClient) List(arg0 context.Context) (cdn.ProfileListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(cdn.ProfileListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCDNProfilesClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCDNProfilesClient)(nil).List), arg0)
}

// MockCDNEndpointsClient is a mock of CDNEndpointsClient interface.
type MockCDNEndpointsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNEndpointsClientMockRecorder
}

// MockCDNEndpointsClientMockRecorder is the mock recorder for MockCDNEndpointsClient.
type MockCDNEndpointsClientMockRecorder struct {
	mock *MockCDNEndpointsClient
}

// NewMockCDNEndpointsClient creates a new mock instance.
func NewMockCDNEndpointsClient(ctrl *gomock.Controller) *MockCDNEndpointsClient {
	mock := &MockCDNEndpointsClient{ctrl: ctrl}
	mock.recorder = &MockCDNEndpointsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNEndpointsClient) EXPECT() *MockCDNEndpointsClientMockRecorder {
	return m.recorder
}

// ListByProfile mocks base method.
func (m *MockCDNEndpointsClient) ListByProfile(arg0 context.Context, arg1, arg2 string) (cdn.EndpointListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(cdn.EndpointListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProfile indicates an expected call of ListByProfile.
func (mr *MockCDNEndpointsClientMockRecorder) ListByProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProfile", reflect.TypeOf((*MockCDNEndpointsClient)(nil).ListByProfile), arg0, arg1, arg2)
}

// MockCDNCustomDomainsClient is a mock of CDNCustomDomainsClient interface.
type MockCDNCustomDomainsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNCustomDomainsClientMockRecorder
}

// MockCDNCustomDomainsClientMockRecorder is the mock recorder for MockCDNCustomDomainsClient.
type MockCDNCustomDomainsClientMockRecorder struct {
	mock *MockCDNCustomDomainsClient
}

// NewMockCDNCustomDomainsClient creates a new mock instance.
func NewMockCDNCustomDomainsClient(ctrl *gomock.Controller) *MockCDNCustomDomainsClient {
	mock := &MockCDNCustomDomainsClient{ctrl: ctrl}
	mock.recorder = &MockCDNCustomDomainsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNCustomDomainsClient) EXPECT() *MockCDNCustomDomainsClientMockRecorder {
	return m.recorder
}

// ListByEndpoint mocks base method.
func (m *MockCDNCustomDomainsClient) ListByEndpoint(arg0 context.Context, arg1, arg2, arg3 string) (cdn.CustomDomainListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cdn.CustomDomainListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEndpoint indicates an expected call of ListByEndpoint.
func (mr *MockCDNCustomDomainsClientMockRecorder) ListByEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEndpoint", reflect.TypeOf((*MockCDNCustomDomainsClient)(nil).ListByEndpoint), arg0, arg1, arg2, arg3)
}

// MockCDNOriginsClient is a mock of CDNOriginsClient interface.
type MockCDNOriginsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNOriginsClientMockRecorder
}

// MockCDNOriginsClientMockRecorder is the mock recorder for MockCDNOriginsClient.
type MockCDNOriginsClientMockRecorder struct {
	mock *MockCDNOriginsClient
}

// NewMockCDNOriginsClient creates a new mock instance.
func NewMockCDNOriginsClient(ctrl *gomock.Controller) *MockCDNOriginsClient {
	mock := &MockCDNOriginsClient{ctrl: ctrl}
	mock.recorder = &MockCDNOriginsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNOriginsClient) EXPECT() *MockCDNOriginsClientMockRecorder {
	return m.recorder
}

// ListByEndpoint mocks base method.
func (m *MockCDNOriginsClient) ListByEndpoint(arg0 context.Context, arg1, arg2, arg3 string) (cdn.OriginListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cdn.OriginListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEndpoint indicates an expected call of ListByEndpoint.
func (mr *MockCDNOriginsClientMockRecorder) ListByEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEndpoint", reflect.TypeOf((*MockCDNOriginsClient)(nil).ListByEndpoint), arg0, arg1, arg2, arg3)
}

// MockCDNOriginGroupsClient is a mock of CDNOriginGroupsClient interface.
type MockCDNOriginGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNOriginGroupsClientMockRecorder
}

// MockCDNOriginGroupsClientMockRecorder is the mock recorder for MockCDNOriginGroupsClient.
type MockCDNOriginGroupsClientMockRecorder struct {
	mock *MockCDNOriginGroupsClient
}

// NewMockCDNOriginGroupsClient creates a new mock instance.
func NewMockCDNOriginGroupsClient(ctrl *gomock.Controller) *MockCDNOriginGroupsClient {
	mock := &MockCDNOriginGroupsClient{ctrl: ctrl}
	mock.recorder = &MockCDNOriginGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNOriginGroupsClient) EXPECT() *MockCDNOriginGroupsClientMockRecorder {
	return m.recorder
}

// ListByEndpoint mocks base method.
func (m *MockCDNOriginGroupsClient) ListByEndpoint(arg0 context.Context, arg1, arg2, arg3 string) (cdn.OriginGroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cdn.OriginGroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEndpoint indicates an expected call of ListByEndpoint.
func (mr *MockCDNOriginGroupsClientMockRecorder) ListByEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEndpoint", reflect.TypeOf((*MockCDNOriginGroupsClient)(nil).ListByEndpoint), arg0, arg1, arg2, arg3)
}

// MockCDNRoutesClient is a mock of CDNRoutesClient interface.
type MockCDNRoutesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNRoutesClientMockRecorder
}

// MockCDNRoutesClientMockRecorder is the mock recorder for MockCDNRoutesClient.
type MockCDNRoutesClientMockRecorder struct {
	mock *MockCDNRoutesClient
}

// NewMockCDNRoutesClient creates a new mock instance.
func NewMockCDNRoutesClient(ctrl *gomock.Controller) *MockCDNRoutesClient {
	mock := &MockCDNRoutesClient{ctrl: ctrl}
	mock.recorder = &MockCDNRoutesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNRoutesClient) EXPECT() *MockCDNRoutesClientMockRecorder {
	return m.recorder
}

// ListByEndpoint mocks base method.
func (m *MockCDNRoutesClient) ListByEndpoint(arg0 context.Context, arg1, arg2, arg3 string) (cdn.RouteListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEndpoint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cdn.RouteListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEndpoint indicates an expected call of ListByEndpoint.
func (mr *MockCDNRoutesClientMockRecorder) ListByEndpoint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEndpoint", reflect.TypeOf((*MockCDNRoutesClient)(nil).ListByEndpoint), arg0, arg1, arg2, arg3)
}

// MockCDNRuleSetsClient is a mock of CDNRuleSetsClient interface.
type MockCDNRuleSetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNRuleSetsClientMockRecorder
}

// MockCDNRuleSetsClientMockRecorder is the mock recorder for MockCDNRuleSetsClient.
type MockCDNRuleSetsClientMockRecorder struct {
	mock *MockCDNRuleSetsClient
}

// NewMockCDNRuleSetsClient creates a new mock instance.
func NewMockCDNRuleSetsClient(ctrl *gomock.Controller) *MockCDNRuleSetsClient {
	mock := &MockCDNRuleSetsClient{ctrl: ctrl}
	mock.recorder = &MockCDNRuleSetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNRuleSetsClient) EXPECT() *MockCDNRuleSetsClientMockRecorder {
	return m.recorder
}

// ListByProfile mocks base method.
func (m *MockCDNRuleSetsClient) ListByProfile(arg0 context.Context, arg1, arg2 string) (cdn.RuleSetListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(cdn.RuleSetListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProfile indicates an expected call of ListByProfile.
func (mr *MockCDNRuleSetsClientMockRecorder) ListByProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProfile", reflect.TypeOf((*MockCDNRuleSetsClient)(nil).ListByProfile), arg0, arg1, arg2)
}

// MockCDNRulesClient is a mock of CDNRulesClient interface.
type MockCDNRulesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNRulesClientMockRecorder
}

// MockCDNRulesClientMockRecorder is the mock recorder for MockCDNRulesClient.
type MockCDNRulesClientMockRecorder struct {
	mock *MockCDNRulesClient
}

// NewMockCDNRulesClient creates a new mock instance.
func NewMockCDNRulesClient(ctrl *gomock.Controller) *MockCDNRulesClient {
	mock := &MockCDNRulesClient{ctrl: ctrl}
	mock.recorder = &MockCDNRulesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNRulesClient) EXPECT() *MockCDNRulesClientMockRecorder {
	return m.recorder
}

// ListByRuleSet mocks base method.
func (m *MockCDNRulesClient) ListByRuleSet(arg0 context.Context, arg1, arg2, arg3 string) (cdn.RuleListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRuleSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cdn.RuleListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRuleSet indicates an expected call of ListByRuleSet.
func (mr *MockCDNRulesClientMockRecorder) ListByRuleSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRuleSet", reflect.TypeOf((*MockCDNRulesClient)(nil).ListByRuleSet), arg0, arg1, arg2, arg3)
}

// MockCDNSecurityPoliciesClient is a mock of CDNSecurityPoliciesClient interface.
type MockCDNSecurityPoliciesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCDNSecurityPoliciesClientMockRecorder
}

// MockCDNSecurityPoliciesClientMockRecorder is the mock recorder for MockCDNSecurityPoliciesClient.
type MockCDNSecurityPoliciesClientMockRecorder struct {
	mock *MockCDNSecurityPoliciesClient
}

// NewMockCDNSecurityPoliciesClient creates a new mock instance.
func NewMockCDNSecurityPoliciesClient(ctrl *gomock.Controller) *MockCDNSecurityPoliciesClient {
	mock := &MockCDNSecurityPoliciesClient{ctrl: ctrl}
	mock.recorder = &MockCDNSecurityPoliciesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDNSecurityPoliciesClient) EXPECT() *MockCDNSecurityPoliciesClientMockRecorder {
	return m.recorder
}

// ListByProfile mocks base method.
func (m *MockCDNSecurityPoliciesClient) ListByProfile(arg0 context.Context, arg1, arg2 string) (cdn.SecurityPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(cdn.SecurityPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByProfile indicates an expected call of ListByProfile.
func (mr *MockCDNSecurityPoliciesClientMockRecorder) ListByProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByProfile", reflect.TypeOf((*MockCDNSecurityPoliciesClient)(nil).ListByProfile), arg0, arg1, arg2)
}
