// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/azure/client/services (interfaces: RedisResourceTypesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	redis "github.com/Azure/azure-sdk-for-go/services/redis/mgmt/2020-12-01/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisResourceTypesClient is a mock of RedisResourceTypesClient interface.
type MockRedisResourceTypesClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisResourceTypesClientMockRecorder
}

// MockRedisResourceTypesClientMockRecorder is the mock recorder for MockRedisResourceTypesClient.
type MockRedisResourceTypesClientMockRecorder struct {
	mock *MockRedisResourceTypesClient
}

// NewMockRedisResourceTypesClient creates a new mock instance.
func NewMockRedisResourceTypesClient(ctrl *gomock.Controller) *MockRedisResourceTypesClient {
	mock := &MockRedisResourceTypesClient{ctrl: ctrl}
	mock.recorder = &MockRedisResourceTypesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisResourceTypesClient) EXPECT() *MockRedisResourceTypesClientMockRecorder {
	return m.recorder
}

// ListBySubscription mocks base method.
func (m *MockRedisResourceTypesClient) ListBySubscription(arg0 context.Context) (redis.ListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0)
	ret0, _ := ret[0].(redis.ListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockRedisResourceTypesClientMockRecorder) ListBySubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockRedisResourceTypesClient)(nil).ListBySubscription), arg0)
}
