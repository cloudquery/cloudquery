// Code generated by codegen; DO NOT EDIT.
package client

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/appservice"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/authorization"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/batch"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/cdn"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/compute"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/containerregistry"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/containerservice"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/cosmos"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/datalakeanalytics"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/datalakestore"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/eventhub"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/frontdoor"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/iothub"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/keyvault"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/links"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/logic"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/mariadb"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/monitor"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/mysql"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/network"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/policy"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/postgresql"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/redis"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/resources"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/search"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/security"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/servicebus"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/sql"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/storage"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/streamanalytics"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client/services/subscription"
)

func initServices(subscriptionID string, credentials azcore.TokenCredential, options *arm.ClientOptions) (*Services, error) {
	var services Services
	var err error

	services.Appservice, err = appservice.NewAppserviceClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Authorization, err = authorization.NewAuthorizationClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Batch, err = batch.NewBatchClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Cdn, err = cdn.NewCdnClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Compute, err = compute.NewComputeClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Containerregistry, err = containerregistry.NewContainerregistryClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Containerservice, err = containerservice.NewContainerserviceClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Cosmos, err = cosmos.NewCosmosClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Datalakeanalytics, err = datalakeanalytics.NewDatalakeanalyticsClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Datalakestore, err = datalakestore.NewDatalakestoreClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Eventhub, err = eventhub.NewEventhubClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Frontdoor, err = frontdoor.NewFrontdoorClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Iothub, err = iothub.NewIothubClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Keyvault, err = keyvault.NewKeyvaultClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Links, err = links.NewLinksClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Logic, err = logic.NewLogicClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Mariadb, err = mariadb.NewMariadbClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Monitor, err = monitor.NewMonitorClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Mysql, err = mysql.NewMysqlClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Network, err = network.NewNetworkClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Policy, err = policy.NewPolicyClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Postgresql, err = postgresql.NewPostgresqlClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Redis, err = redis.NewRedisClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Resources, err = resources.NewResourcesClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Search, err = search.NewSearchClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Security, err = security.NewSecurityClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Servicebus, err = servicebus.NewServicebusClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Sql, err = sql.NewSqlClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Storage, err = storage.NewStorageClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Streamanalytics, err = streamanalytics.NewStreamanalyticsClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	services.Subscription, err = subscription.NewSubscriptionClient(subscriptionID, credentials, options)
	if err != nil {
		return nil, err
	}

	return &services, nil
}

type Services struct {
	Appservice        *appservice.AppserviceClient
	Authorization     *authorization.AuthorizationClient
	Batch             *batch.BatchClient
	Cdn               *cdn.CdnClient
	Compute           *compute.ComputeClient
	Containerregistry *containerregistry.ContainerregistryClient
	Containerservice  *containerservice.ContainerserviceClient
	Cosmos            *cosmos.CosmosClient
	Datalakeanalytics *datalakeanalytics.DatalakeanalyticsClient
	Datalakestore     *datalakestore.DatalakestoreClient
	Eventhub          *eventhub.EventhubClient
	Frontdoor         *frontdoor.FrontdoorClient
	Iothub            *iothub.IothubClient
	Keyvault          *keyvault.KeyvaultClient
	Links             *links.LinksClient
	Logic             *logic.LogicClient
	Mariadb           *mariadb.MariadbClient
	Monitor           *monitor.MonitorClient
	Mysql             *mysql.MysqlClient
	Network           *network.NetworkClient
	Policy            *policy.PolicyClient
	Postgresql        *postgresql.PostgresqlClient
	Redis             *redis.RedisClient
	Resources         *resources.ResourcesClient
	Search            *search.SearchClient
	Security          *security.SecurityClient
	Servicebus        *servicebus.ServicebusClient
	Sql               *sql.SqlClient
	Storage           *storage.StorageClient
	Streamanalytics   *streamanalytics.StreamanalyticsClient
	Subscription      *subscription.SubscriptionClient
}
