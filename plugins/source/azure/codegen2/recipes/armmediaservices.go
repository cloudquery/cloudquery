// Code generated by codegen; DO NOT EDIT.
package recipes

import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices"

func Armmediaservices() []Table {
	tables := []Table{
		{
      Name: "account_filter",
      Struct: &armmediaservices.AccountFilter{},
      ResponseStruct: &armmediaservices.AccountFiltersClientListResponse{},
      Client: &armmediaservices.AccountFiltersClient{},
      ListFunc: (&armmediaservices.AccountFiltersClient{}).NewListPager,
			NewFunc: armmediaservices.NewAccountFiltersClient,
		},
		{
      Name: "asset",
      Struct: &armmediaservices.Asset{},
      ResponseStruct: &armmediaservices.AssetsClientListResponse{},
      Client: &armmediaservices.AssetsClient{},
      ListFunc: (&armmediaservices.AssetsClient{}).NewListPager,
			NewFunc: armmediaservices.NewAssetsClient,
		},
		{
      Name: "media_service",
      Struct: &armmediaservices.MediaService{},
      ResponseStruct: &armmediaservices.ClientListResponse{},
      Client: &armmediaservices.Client{},
      ListFunc: (&armmediaservices.Client{}).NewListPager,
			NewFunc: armmediaservices.NewClient,
		},
		{
      Name: "live_event",
      Struct: &armmediaservices.LiveEvent{},
      ResponseStruct: &armmediaservices.LiveEventsClientListResponse{},
      Client: &armmediaservices.LiveEventsClient{},
      ListFunc: (&armmediaservices.LiveEventsClient{}).NewListPager,
			NewFunc: armmediaservices.NewLiveEventsClient,
		},
		{
      Name: "asset_track",
      Struct: &armmediaservices.AssetTrack{},
      ResponseStruct: &armmediaservices.TracksClientListResponse{},
      Client: &armmediaservices.TracksClient{},
      ListFunc: (&armmediaservices.TracksClient{}).NewListPager,
			NewFunc: armmediaservices.NewTracksClient,
		},
		{
      Name: "asset_filter",
      Struct: &armmediaservices.AssetFilter{},
      ResponseStruct: &armmediaservices.AssetFiltersClientListResponse{},
      Client: &armmediaservices.AssetFiltersClient{},
      ListFunc: (&armmediaservices.AssetFiltersClient{}).NewListPager,
			NewFunc: armmediaservices.NewAssetFiltersClient,
		},
		{
      Name: "job",
      Struct: &armmediaservices.Job{},
      ResponseStruct: &armmediaservices.JobsClientListResponse{},
      Client: &armmediaservices.JobsClient{},
      ListFunc: (&armmediaservices.JobsClient{}).NewListPager,
			NewFunc: armmediaservices.NewJobsClient,
		},
		{
      Name: "live_output",
      Struct: &armmediaservices.LiveOutput{},
      ResponseStruct: &armmediaservices.LiveOutputsClientListResponse{},
      Client: &armmediaservices.LiveOutputsClient{},
      ListFunc: (&armmediaservices.LiveOutputsClient{}).NewListPager,
			NewFunc: armmediaservices.NewLiveOutputsClient,
		},
		{
      Name: "streaming_endpoint",
      Struct: &armmediaservices.StreamingEndpoint{},
      ResponseStruct: &armmediaservices.StreamingEndpointsClientListResponse{},
      Client: &armmediaservices.StreamingEndpointsClient{},
      ListFunc: (&armmediaservices.StreamingEndpointsClient{}).NewListPager,
			NewFunc: armmediaservices.NewStreamingEndpointsClient,
		},
		{
      Name: "transform",
      Struct: &armmediaservices.Transform{},
      ResponseStruct: &armmediaservices.TransformsClientListResponse{},
      Client: &armmediaservices.TransformsClient{},
      ListFunc: (&armmediaservices.TransformsClient{}).NewListPager,
			NewFunc: armmediaservices.NewTransformsClient,
		},
		{
      Name: "streaming_locator",
      Struct: &armmediaservices.StreamingLocator{},
      ResponseStruct: &armmediaservices.StreamingLocatorsClientListResponse{},
      Client: &armmediaservices.StreamingLocatorsClient{},
      ListFunc: (&armmediaservices.StreamingLocatorsClient{}).NewListPager,
			NewFunc: armmediaservices.NewStreamingLocatorsClient,
		},
		{
      Name: "streaming_policy",
      Struct: &armmediaservices.StreamingPolicy{},
      ResponseStruct: &armmediaservices.StreamingPoliciesClientListResponse{},
      Client: &armmediaservices.StreamingPoliciesClient{},
      ListFunc: (&armmediaservices.StreamingPoliciesClient{}).NewListPager,
			NewFunc: armmediaservices.NewStreamingPoliciesClient,
		},
		{
      Name: "content_key_policy",
      Struct: &armmediaservices.ContentKeyPolicy{},
      ResponseStruct: &armmediaservices.ContentKeyPoliciesClientListResponse{},
      Client: &armmediaservices.ContentKeyPoliciesClient{},
      ListFunc: (&armmediaservices.ContentKeyPoliciesClient{}).NewListPager,
			NewFunc: armmediaservices.NewContentKeyPoliciesClient,
		},
	}

	for i := range tables {
		tables[i].Service = "armmediaservices"
		tables[i].Template = "list"
	}
	return tables
}

func init() {
  Tables = append(Tables, Armmediaservices()...)
}