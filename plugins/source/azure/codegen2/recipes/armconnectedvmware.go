// Code generated by codegen; DO NOT EDIT.
package recipes

import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/connectedvmware/armconnectedvmware"

func Armconnectedvmware() []Table {
	tables := []Table{
		{
      Name: "operation",
      Struct: &armconnectedvmware.Operation{},
      ResponseStruct: &armconnectedvmware.OperationsClientListResponse{},
      Client: &armconnectedvmware.OperationsClient{},
      ListFunc: (&armconnectedvmware.OperationsClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewOperationsClient,
		},
		{
      Name: "host",
      Struct: &armconnectedvmware.Host{},
      ResponseStruct: &armconnectedvmware.HostsClientListResponse{},
      Client: &armconnectedvmware.HostsClient{},
      ListFunc: (&armconnectedvmware.HostsClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewHostsClient,
		},
		{
      Name: "resource_pool",
      Struct: &armconnectedvmware.ResourcePool{},
      ResponseStruct: &armconnectedvmware.ResourcePoolsClientListResponse{},
      Client: &armconnectedvmware.ResourcePoolsClient{},
      ListFunc: (&armconnectedvmware.ResourcePoolsClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewResourcePoolsClient,
		},
		{
      Name: "virtual_machine",
      Struct: &armconnectedvmware.VirtualMachine{},
      ResponseStruct: &armconnectedvmware.VirtualMachinesClientListResponse{},
      Client: &armconnectedvmware.VirtualMachinesClient{},
      ListFunc: (&armconnectedvmware.VirtualMachinesClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewVirtualMachinesClient,
		},
		{
      Name: "virtual_machine_template",
      Struct: &armconnectedvmware.VirtualMachineTemplate{},
      ResponseStruct: &armconnectedvmware.VirtualMachineTemplatesClientListResponse{},
      Client: &armconnectedvmware.VirtualMachineTemplatesClient{},
      ListFunc: (&armconnectedvmware.VirtualMachineTemplatesClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewVirtualMachineTemplatesClient,
		},
		{
      Name: "virtual_network",
      Struct: &armconnectedvmware.VirtualNetwork{},
      ResponseStruct: &armconnectedvmware.VirtualNetworksClientListResponse{},
      Client: &armconnectedvmware.VirtualNetworksClient{},
      ListFunc: (&armconnectedvmware.VirtualNetworksClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewVirtualNetworksClient,
		},
		{
      Name: "cluster",
      Struct: &armconnectedvmware.Cluster{},
      ResponseStruct: &armconnectedvmware.ClustersClientListResponse{},
      Client: &armconnectedvmware.ClustersClient{},
      ListFunc: (&armconnectedvmware.ClustersClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewClustersClient,
		},
		{
      Name: "machine_extension",
      Struct: &armconnectedvmware.MachineExtension{},
      ResponseStruct: &armconnectedvmware.MachineExtensionsClientListResponse{},
      Client: &armconnectedvmware.MachineExtensionsClient{},
      ListFunc: (&armconnectedvmware.MachineExtensionsClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewMachineExtensionsClient,
		},
		{
      Name: "datastore",
      Struct: &armconnectedvmware.Datastore{},
      ResponseStruct: &armconnectedvmware.DatastoresClientListResponse{},
      Client: &armconnectedvmware.DatastoresClient{},
      ListFunc: (&armconnectedvmware.DatastoresClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewDatastoresClient,
		},
		{
      Name: "v_center",
      Struct: &armconnectedvmware.VCenter{},
      ResponseStruct: &armconnectedvmware.VCentersClientListResponse{},
      Client: &armconnectedvmware.VCentersClient{},
      ListFunc: (&armconnectedvmware.VCentersClient{}).NewListPager,
			NewFunc: armconnectedvmware.NewVCentersClient,
		},
	}

	for i := range tables {
		tables[i].Service = "armconnectedvmware"
		tables[i].Template = "list"
	}
	return tables
}

func init() {
  Tables = append(Tables, Armconnectedvmware()...)
}