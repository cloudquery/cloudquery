// Code generated by codegen; DO NOT EDIT.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func MetricDefinition() *schema.Table {
	return &schema.Table{
		Name:      "azure_armmonitor_metric_definition",
		Resolver:  fetchMetricDefinition,
		Multiplex: client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:     "category",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Category"),
			},
			{
				Name:     "dimensions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Dimensions"),
			},
			{
				Name:     "display_description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DisplayDescription"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
			},
			{
				Name:     "is_dimension_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsDimensionRequired"),
			},
			{
				Name:     "metric_availabilities",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MetricAvailabilities"),
			},
			{
				Name:     "metric_class",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MetricClass"),
			},
			{
				Name:     "name",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "namespace",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Namespace"),
			},
			{
				Name:     "primary_aggregation_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PrimaryAggregationType"),
			},
			{
				Name:     "resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ResourceID"),
			},
			{
				Name:     "supported_aggregation_types",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SupportedAggregationTypes"),
			},
			{
				Name:     "unit",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Unit"),
			},
		},
	}
}

func fetchMetricDefinition(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	cl := meta.(*client.Client)
	svc, err := armmonitor.NewMetricDefinitionsClient(cl.Creds, cl.Options)
	if err != nil {
		return err
	}
	pager := svc.NewListPager(nil)
	for pager.More() {
		p, err := pager.NextPage(ctx)
		if err != nil {
			return err
		}
		res <- p.Value
	}
	return nil
}
