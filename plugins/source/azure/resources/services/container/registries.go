// Code generated by codegen; DO NOT EDIT.

package container

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Registries() *schema.Table {
	return &schema.Table{
		Name:        "azure_container_registries",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry#Registry`,
		Resolver:    fetchRegistries,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "admin_user_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.AdminUserEnabled"),
			},
			{
				Name:     "anonymous_pull_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.AnonymousPullEnabled"),
			},
			{
				Name:     "data_endpoint_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DataEndpointEnabled"),
			},
			{
				Name:     "encryption",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Encryption"),
			},
			{
				Name:     "network_rule_bypass_options",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NetworkRuleBypassOptions"),
			},
			{
				Name:     "network_rule_set",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.NetworkRuleSet"),
			},
			{
				Name:     "policies",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Policies"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "zone_redundancy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ZoneRedundancy"),
			},
			{
				Name:     "creation_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreationDate"),
			},
			{
				Name:     "data_endpoint_host_names",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.DataEndpointHostNames"),
			},
			{
				Name:     "login_server",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LoginServer"),
			},
			{
				Name:     "private_endpoint_connections",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpointConnections"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "status",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Status"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "system_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SystemData"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},

		Relations: []*schema.Table{
			replications(),
		},
	}
}
