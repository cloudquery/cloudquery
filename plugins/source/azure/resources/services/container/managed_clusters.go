// Code generated by codegen; DO NOT EDIT.

package container

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ManagedClusters() *schema.Table {
	return &schema.Table{
		Name:        "azure_container_managed_clusters",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v2#ManagedCluster`,
		Resolver:    fetchManagedClusters,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "extended_location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExtendedLocation"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "aad_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AADProfile"),
			},
			{
				Name:     "api_server_access_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.APIServerAccessProfile"),
			},
			{
				Name:     "addon_profiles",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AddonProfiles"),
			},
			{
				Name:     "agent_pool_profiles",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AgentPoolProfiles"),
			},
			{
				Name:     "auto_scaler_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AutoScalerProfile"),
			},
			{
				Name:     "auto_upgrade_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AutoUpgradeProfile"),
			},
			{
				Name:     "dns_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DNSPrefix"),
			},
			{
				Name:     "disable_local_accounts",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DisableLocalAccounts"),
			},
			{
				Name:     "disk_encryption_set_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DiskEncryptionSetID"),
			},
			{
				Name:     "enable_pod_security_policy",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnablePodSecurityPolicy"),
			},
			{
				Name:     "enable_rbac",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableRBAC"),
			},
			{
				Name:     "fqdn_subdomain",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FqdnSubdomain"),
			},
			{
				Name:     "http_proxy_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.HTTPProxyConfig"),
			},
			{
				Name:     "identity_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.IdentityProfile"),
			},
			{
				Name:     "kubernetes_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.KubernetesVersion"),
			},
			{
				Name:     "linux_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.LinuxProfile"),
			},
			{
				Name:     "network_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.NetworkProfile"),
			},
			{
				Name:     "node_resource_group",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NodeResourceGroup"),
			},
			{
				Name:     "oidc_issuer_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.OidcIssuerProfile"),
			},
			{
				Name:     "pod_identity_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PodIdentityProfile"),
			},
			{
				Name:     "private_link_resources",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateLinkResources"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "security_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SecurityProfile"),
			},
			{
				Name:     "service_principal_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ServicePrincipalProfile"),
			},
			{
				Name:     "storage_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.StorageProfile"),
			},
			{
				Name:     "windows_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.WindowsProfile"),
			},
			{
				Name:     "azure_portal_fqdn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AzurePortalFQDN"),
			},
			{
				Name:     "current_kubernetes_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CurrentKubernetesVersion"),
			},
			{
				Name:     "fqdn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Fqdn"),
			},
			{
				Name:     "max_agent_pools",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxAgentPools"),
			},
			{
				Name:     "power_state",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PowerState"),
			},
			{
				Name:     "private_fqdn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PrivateFQDN"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "system_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SystemData"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
