// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func virtualMachineScaleSets() *schema.Table {
	return &schema.Table{
		Name:        "azure_compute_virtual_machine_scale_sets",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4#VirtualMachineScaleSet`,
		Resolver:    fetchVirtualMachineScaleSets,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "extended_location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExtendedLocation"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "plan",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Plan"),
			},
			{
				Name:     "additional_capabilities",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AdditionalCapabilities"),
			},
			{
				Name:     "automatic_repairs_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AutomaticRepairsPolicy"),
			},
			{
				Name:     "do_not_run_extensions_on_overprovisioned_vms",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DoNotRunExtensionsOnOverprovisionedVMs"),
			},
			{
				Name:     "host_group",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.HostGroup"),
			},
			{
				Name:     "orchestration_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OrchestrationMode"),
			},
			{
				Name:     "overprovision",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.Overprovision"),
			},
			{
				Name:     "platform_fault_domain_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.PlatformFaultDomainCount"),
			},
			{
				Name:     "priority_mix_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PriorityMixPolicy"),
			},
			{
				Name:     "proximity_placement_group",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ProximityPlacementGroup"),
			},
			{
				Name:     "scale_in_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ScaleInPolicy"),
			},
			{
				Name:     "single_placement_group",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.SinglePlacementGroup"),
			},
			{
				Name:     "spot_restore_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SpotRestorePolicy"),
			},
			{
				Name:     "upgrade_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.UpgradePolicy"),
			},
			{
				Name:     "virtual_machine_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.VirtualMachineProfile"),
			},
			{
				Name:     "zone_balance",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.ZoneBalance"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "time_created",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.TimeCreated"),
			},
			{
				Name:     "unique_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.UniqueID"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "zones",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Zones"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "virtual_machine_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
		},
	}
}
