// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Disks() *schema.Table {
	return &schema.Table{
		Name:        "azure_compute_disks",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4#Disk`,
		Resolver:    fetchDisks,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "extended_location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExtendedLocation"),
			},
			{
				Name:     "creation_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.CreationData"),
			},
			{
				Name:     "bursting_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.BurstingEnabled"),
			},
			{
				Name:     "completion_percent",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Properties.CompletionPercent"),
			},
			{
				Name:     "data_access_auth_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DataAccessAuthMode"),
			},
			{
				Name:     "disk_access_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DiskAccessID"),
			},
			{
				Name:     "disk_iops_read_only",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DiskIOPSReadOnly"),
			},
			{
				Name:     "disk_iops_read_write",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DiskIOPSReadWrite"),
			},
			{
				Name:     "disk_m_bps_read_only",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DiskMBpsReadOnly"),
			},
			{
				Name:     "disk_m_bps_read_write",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DiskMBpsReadWrite"),
			},
			{
				Name:     "disk_size_gb",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DiskSizeGB"),
			},
			{
				Name:     "encryption",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Encryption"),
			},
			{
				Name:     "encryption_settings_collection",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.EncryptionSettingsCollection"),
			},
			{
				Name:     "hyper_v_generation",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.HyperVGeneration"),
			},
			{
				Name:     "max_shares",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxShares"),
			},
			{
				Name:     "network_access_policy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NetworkAccessPolicy"),
			},
			{
				Name:     "os_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OSType"),
			},
			{
				Name:     "optimized_for_frequent_attach",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.OptimizedForFrequentAttach"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "purchase_plan",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PurchasePlan"),
			},
			{
				Name:     "security_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SecurityProfile"),
			},
			{
				Name:     "supported_capabilities",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SupportedCapabilities"),
			},
			{
				Name:     "supports_hibernation",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.SupportsHibernation"),
			},
			{
				Name:     "tier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Tier"),
			},
			{
				Name:     "bursting_enabled_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.BurstingEnabledTime"),
			},
			{
				Name:     "disk_size_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DiskSizeBytes"),
			},
			{
				Name:     "disk_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DiskState"),
			},
			{
				Name:     "property_updates_in_progress",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PropertyUpdatesInProgress"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "share_info",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ShareInfo"),
			},
			{
				Name:     "time_created",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.TimeCreated"),
			},
			{
				Name:     "unique_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.UniqueID"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "zones",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Zones"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "managed_by",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ManagedBy"),
			},
			{
				Name:     "managed_by_extended",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("ManagedByExtended"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
