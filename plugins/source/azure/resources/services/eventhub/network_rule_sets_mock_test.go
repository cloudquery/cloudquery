// Code generated by codegen; DO NOT EDIT.

package eventhub

import (
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	api "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventhub/armeventhub"
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	mocks "github.com/cloudquery/cloudquery/plugins/source/azure/client/mocks/eventhub"
	service "github.com/cloudquery/cloudquery/plugins/source/azure/client/services/eventhub"
	"github.com/cloudquery/plugin-sdk/faker"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/require"
)

func buildNetworkRuleSets(t *testing.T, ctrl *gomock.Controller, c *client.Services) {
	if c.Eventhub == nil {
		c.Eventhub = new(service.EventhubClient)
	}
	eventhubClient := c.Eventhub
	if eventhubClient.NamespacesClient == nil {
		eventhubClient.NamespacesClient = mocks.NewMockNamespacesClient(ctrl)
	}

	mockNamespacesClient := eventhubClient.NamespacesClient.(*mocks.MockNamespacesClient)

	var response api.NamespacesClientListNetworkRuleSetResponse
	require.NoError(t, faker.FakeObject(&response))
	// Use correct Azure ID format
	const id = "/subscriptions/test/resourceGroups/test/providers/test/test/test"
	response.Value[0].ID = to.Ptr(id)

	mockNamespacesClient.EXPECT().ListNetworkRuleSet(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		Return(response, nil).MinTimes(1)
}
