// Code generated by codegen; DO NOT EDIT.

package cosmosdb

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Accounts() *schema.Table {
	return &schema.Table{
		Name:        "azure_cosmosdb_accounts",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v2#DatabaseAccountGetResults`,
		Resolver:    fetchAccounts,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "api_properties",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.APIProperties"),
			},
			{
				Name:     "analytical_storage_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AnalyticalStorageConfiguration"),
			},
			{
				Name:     "capabilities",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Capabilities"),
			},
			{
				Name:     "capacity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Capacity"),
			},
			{
				Name:     "connector_offer",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ConnectorOffer"),
			},
			{
				Name:     "consistency_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ConsistencyPolicy"),
			},
			{
				Name:     "cors",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Cors"),
			},
			{
				Name:     "create_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CreateMode"),
			},
			{
				Name:     "default_identity",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultIdentity"),
			},
			{
				Name:     "disable_key_based_metadata_write_access",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DisableKeyBasedMetadataWriteAccess"),
			},
			{
				Name:     "disable_local_auth",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DisableLocalAuth"),
			},
			{
				Name:     "enable_analytical_storage",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableAnalyticalStorage"),
			},
			{
				Name:     "enable_automatic_failover",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableAutomaticFailover"),
			},
			{
				Name:     "enable_cassandra_connector",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableCassandraConnector"),
			},
			{
				Name:     "enable_free_tier",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableFreeTier"),
			},
			{
				Name:     "enable_multiple_write_locations",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableMultipleWriteLocations"),
			},
			{
				Name:     "enable_partition_merge",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnablePartitionMerge"),
			},
			{
				Name:     "ip_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.IPRules"),
			},
			{
				Name:     "is_virtual_network_filter_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsVirtualNetworkFilterEnabled"),
			},
			{
				Name:     "key_vault_key_uri",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.KeyVaultKeyURI"),
			},
			{
				Name:     "network_acl_bypass",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NetworkACLBypass"),
			},
			{
				Name:     "network_acl_bypass_resource_ids",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.NetworkACLBypassResourceIDs"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "restore_parameters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.RestoreParameters"),
			},
			{
				Name:     "virtual_network_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.VirtualNetworkRules"),
			},
			{
				Name:     "database_account_offer_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DatabaseAccountOfferType"),
			},
			{
				Name:     "document_endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DocumentEndpoint"),
			},
			{
				Name:     "failover_policies",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.FailoverPolicies"),
			},
			{
				Name:     "instance_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.InstanceID"),
			},
			{
				Name:     "keys_metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.KeysMetadata"),
			},
			{
				Name:     "locations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Locations"),
			},
			{
				Name:     "private_endpoint_connections",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpointConnections"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "read_locations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ReadLocations"),
			},
			{
				Name:     "write_locations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.WriteLocations"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "system_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SystemData"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},

		Relations: []*schema.Table{
			mongoDbDatabases(),
			sqlDatabases(),
		},
	}
}
