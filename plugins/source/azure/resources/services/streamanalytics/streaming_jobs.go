// Code generated by codegen; DO NOT EDIT.

package streamanalytics

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func StreamingJobs() *schema.Table {
	return &schema.Table{
		Name:        "azure_streamanalytics_streaming_jobs",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/streamanalytics/armstreamanalytics#StreamingJob`,
		Resolver:    fetchStreamingJobs,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "cluster",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Cluster"),
			},
			{
				Name:     "compatibility_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CompatibilityLevel"),
			},
			{
				Name:     "content_storage_policy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ContentStoragePolicy"),
			},
			{
				Name:     "data_locale",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DataLocale"),
			},
			{
				Name:     "events_late_arrival_max_delay_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.EventsLateArrivalMaxDelayInSeconds"),
			},
			{
				Name:     "events_out_of_order_max_delay_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.EventsOutOfOrderMaxDelayInSeconds"),
			},
			{
				Name:     "events_out_of_order_policy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.EventsOutOfOrderPolicy"),
			},
			{
				Name:     "functions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Functions"),
			},
			{
				Name:     "inputs",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Inputs"),
			},
			{
				Name:     "job_storage_account",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.JobStorageAccount"),
			},
			{
				Name:     "job_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.JobType"),
			},
			{
				Name:     "output_error_policy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OutputErrorPolicy"),
			},
			{
				Name:     "output_start_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OutputStartMode"),
			},
			{
				Name:     "output_start_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.OutputStartTime"),
			},
			{
				Name:     "outputs",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Outputs"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SKU"),
			},
			{
				Name:     "transformation",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Transformation"),
			},
			{
				Name:     "created_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreatedDate"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Etag"),
			},
			{
				Name:     "job_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.JobID"),
			},
			{
				Name:     "job_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.JobState"),
			},
			{
				Name:     "last_output_event_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.LastOutputEventTime"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
