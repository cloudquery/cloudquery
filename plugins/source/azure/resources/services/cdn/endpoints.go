// Code generated by codegen; DO NOT EDIT.

package cdn

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func endpoints() *schema.Table {
	return &schema.Table{
		Name:        "azure_cdn_endpoints",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn#Endpoint`,
		Resolver:    fetchEndpoints,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "origins",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Origins"),
			},
			{
				Name:     "content_types_to_compress",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.ContentTypesToCompress"),
			},
			{
				Name:     "default_origin_group",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.DefaultOriginGroup"),
			},
			{
				Name:     "delivery_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.DeliveryPolicy"),
			},
			{
				Name:     "geo_filters",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.GeoFilters"),
			},
			{
				Name:     "is_compression_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsCompressionEnabled"),
			},
			{
				Name:     "is_http_allowed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsHTTPAllowed"),
			},
			{
				Name:     "is_https_allowed",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsHTTPSAllowed"),
			},
			{
				Name:     "optimization_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OptimizationType"),
			},
			{
				Name:     "origin_groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.OriginGroups"),
			},
			{
				Name:     "origin_host_header",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OriginHostHeader"),
			},
			{
				Name:     "origin_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OriginPath"),
			},
			{
				Name:     "probe_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProbePath"),
			},
			{
				Name:     "query_string_caching_behavior",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.QueryStringCachingBehavior"),
			},
			{
				Name:     "url_signing_keys",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.URLSigningKeys"),
			},
			{
				Name:     "web_application_firewall_policy_link",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.WebApplicationFirewallPolicyLink"),
			},
			{
				Name:     "custom_domains",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.CustomDomains"),
			},
			{
				Name:     "host_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.HostName"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "resource_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ResourceState"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "system_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SystemData"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "profile_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
		},

		Relations: []*schema.Table{
			customDomains(),
			routes(),
		},
	}
}
