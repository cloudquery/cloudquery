// Code generated by codegen; DO NOT EDIT.

package batch

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Accounts() *schema.Table {
	return &schema.Table{
		Name:        "azure_batch_accounts",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/batch/armbatch#Account`,
		Resolver:    fetchAccounts,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "network_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.NetworkProfile"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "account_endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AccountEndpoint"),
			},
			{
				Name:     "active_job_and_job_schedule_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.ActiveJobAndJobScheduleQuota"),
			},
			{
				Name:     "allowed_authentication_modes",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.AllowedAuthenticationModes"),
			},
			{
				Name:     "auto_storage",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AutoStorage"),
			},
			{
				Name:     "dedicated_core_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DedicatedCoreQuota"),
			},
			{
				Name:     "dedicated_core_quota_per_vm_family",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.DedicatedCoreQuotaPerVMFamily"),
			},
			{
				Name:     "dedicated_core_quota_per_vm_family_enforced",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DedicatedCoreQuotaPerVMFamilyEnforced"),
			},
			{
				Name:     "encryption",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Encryption"),
			},
			{
				Name:     "key_vault_reference",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.KeyVaultReference"),
			},
			{
				Name:     "low_priority_core_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.LowPriorityCoreQuota"),
			},
			{
				Name:     "node_management_endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NodeManagementEndpoint"),
			},
			{
				Name:     "pool_allocation_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PoolAllocationMode"),
			},
			{
				Name:     "pool_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.PoolQuota"),
			},
			{
				Name:     "private_endpoint_connections",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpointConnections"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
