// Code generated by codegen; DO NOT EDIT.

package redis

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Caches() *schema.Table {
	return &schema.Table{
		Name:        "azure_redis_caches",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redis/armredis/v2#ResourceInfo`,
		Resolver:    fetchCaches,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SKU"),
			},
			{
				Name:     "enable_non_ssl_port",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableNonSSLPort"),
			},
			{
				Name:     "minimum_tls_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MinimumTLSVersion"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "redis_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.RedisConfiguration"),
			},
			{
				Name:     "redis_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RedisVersion"),
			},
			{
				Name:     "replicas_per_master",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.ReplicasPerMaster"),
			},
			{
				Name:     "replicas_per_primary",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.ReplicasPerPrimary"),
			},
			{
				Name:     "shard_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.ShardCount"),
			},
			{
				Name:     "static_ip",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.StaticIP"),
			},
			{
				Name:     "subnet_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SubnetID"),
			},
			{
				Name:     "tenant_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.TenantSettings"),
			},
			{
				Name:     "access_keys",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AccessKeys"),
			},
			{
				Name:     "host_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.HostName"),
			},
			{
				Name:     "instances",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Instances"),
			},
			{
				Name:     "linked_servers",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.LinkedServers"),
			},
			{
				Name:     "port",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.Port"),
			},
			{
				Name:     "private_endpoint_connections",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpointConnections"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "ssl_port",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.SSLPort"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "zones",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Zones"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
