// Code generated by codegen; DO NOT EDIT.

package sql

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func databases() *schema.Table {
	return &schema.Table{
		Name:        "azure_sql_databases",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql#Database`,
		Resolver:    fetchDatabases,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "auto_pause_delay",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.AutoPauseDelay"),
			},
			{
				Name:     "catalog_collation",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CatalogCollation"),
			},
			{
				Name:     "collation",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Collation"),
			},
			{
				Name:     "create_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CreateMode"),
			},
			{
				Name:     "elastic_pool_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ElasticPoolID"),
			},
			{
				Name:     "federated_client_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FederatedClientID"),
			},
			{
				Name:     "high_availability_replica_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.HighAvailabilityReplicaCount"),
			},
			{
				Name:     "is_ledger_on",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsLedgerOn"),
			},
			{
				Name:     "license_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LicenseType"),
			},
			{
				Name:     "long_term_retention_backup_resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LongTermRetentionBackupResourceID"),
			},
			{
				Name:     "maintenance_configuration_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MaintenanceConfigurationID"),
			},
			{
				Name:     "max_size_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxSizeBytes"),
			},
			{
				Name:     "min_capacity",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Properties.MinCapacity"),
			},
			{
				Name:     "read_scale",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ReadScale"),
			},
			{
				Name:     "recoverable_database_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RecoverableDatabaseID"),
			},
			{
				Name:     "recovery_services_recovery_point_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RecoveryServicesRecoveryPointID"),
			},
			{
				Name:     "requested_backup_storage_redundancy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RequestedBackupStorageRedundancy"),
			},
			{
				Name:     "restorable_dropped_database_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RestorableDroppedDatabaseID"),
			},
			{
				Name:     "restore_point_in_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.RestorePointInTime"),
			},
			{
				Name:     "sample_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SampleName"),
			},
			{
				Name:     "secondary_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SecondaryType"),
			},
			{
				Name:     "source_database_deletion_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.SourceDatabaseDeletionDate"),
			},
			{
				Name:     "source_database_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SourceDatabaseID"),
			},
			{
				Name:     "source_resource_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SourceResourceID"),
			},
			{
				Name:     "zone_redundant",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.ZoneRedundant"),
			},
			{
				Name:     "creation_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreationDate"),
			},
			{
				Name:     "current_backup_storage_redundancy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CurrentBackupStorageRedundancy"),
			},
			{
				Name:     "current_sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.CurrentSKU"),
			},
			{
				Name:     "current_service_objective_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CurrentServiceObjectiveName"),
			},
			{
				Name:     "database_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DatabaseID"),
			},
			{
				Name:     "default_secondary_location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultSecondaryLocation"),
			},
			{
				Name:     "earliest_restore_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.EarliestRestoreDate"),
			},
			{
				Name:     "failover_group_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FailoverGroupID"),
			},
			{
				Name:     "is_infra_encryption_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsInfraEncryptionEnabled"),
			},
			{
				Name:     "max_log_size_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxLogSizeBytes"),
			},
			{
				Name:     "paused_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.PausedDate"),
			},
			{
				Name:     "requested_service_objective_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RequestedServiceObjectiveName"),
			},
			{
				Name:     "resumed_date",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.ResumedDate"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Status"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "managed_by",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ManagedBy"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "server_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
		},

		Relations: []*schema.Table{
			backupLongTermRetentionPolicies(),
			databaseBlobAuditingPolicies(),
			databaseThreatDetectionPolicies(),
			databaseVulnerabilityAssessmentScans(),
			databaseVulnerabilityAssessments(),
			transparentDataEncryptions(),
		},
	}
}
