// Code generated by codegen; DO NOT EDIT.

package sql

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ManagedInstances() *schema.Table {
	return &schema.Table{
		Name:        "azure_sql_managed_instances",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql#ManagedInstance`,
		Resolver:    fetchManagedInstances,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "administrator_login",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AdministratorLogin"),
			},
			{
				Name:     "administrator_login_password",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AdministratorLoginPassword"),
			},
			{
				Name:     "administrators",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Administrators"),
			},
			{
				Name:     "collation",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Collation"),
			},
			{
				Name:     "dns_zone_partner",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DNSZonePartner"),
			},
			{
				Name:     "instance_pool_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.InstancePoolID"),
			},
			{
				Name:     "key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.KeyID"),
			},
			{
				Name:     "license_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LicenseType"),
			},
			{
				Name:     "maintenance_configuration_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MaintenanceConfigurationID"),
			},
			{
				Name:     "managed_instance_create_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ManagedInstanceCreateMode"),
			},
			{
				Name:     "minimal_tls_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MinimalTLSVersion"),
			},
			{
				Name:     "primary_user_assigned_identity_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PrimaryUserAssignedIdentityID"),
			},
			{
				Name:     "proxy_override",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProxyOverride"),
			},
			{
				Name:     "public_data_endpoint_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.PublicDataEndpointEnabled"),
			},
			{
				Name:     "requested_backup_storage_redundancy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RequestedBackupStorageRedundancy"),
			},
			{
				Name:     "restore_point_in_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.RestorePointInTime"),
			},
			{
				Name:     "service_principal",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ServicePrincipal"),
			},
			{
				Name:     "source_managed_instance_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SourceManagedInstanceID"),
			},
			{
				Name:     "storage_size_in_gb",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.StorageSizeInGB"),
			},
			{
				Name:     "subnet_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SubnetID"),
			},
			{
				Name:     "timezone_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.TimezoneID"),
			},
			{
				Name:     "v_cores",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.VCores"),
			},
			{
				Name:     "zone_redundant",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.ZoneRedundant"),
			},
			{
				Name:     "current_backup_storage_redundancy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CurrentBackupStorageRedundancy"),
			},
			{
				Name:     "dns_zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DNSZone"),
			},
			{
				Name:     "fully_qualified_domain_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FullyQualifiedDomainName"),
			},
			{
				Name:     "private_endpoint_connections",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpointConnections"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.State"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},

		Relations: []*schema.Table{
			managedDatabases(),
			managedInstanceEncryptionProtectors(),
			managedInstanceVulnerabilityAssessments(),
		},
	}
}
