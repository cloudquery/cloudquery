// Code generated by codegen; DO NOT EDIT.

package network

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Interfaces() *schema.Table {
	return &schema.Table{
		Name:        "azure_network_interfaces",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2#Interface`,
		Resolver:    fetchInterfaces,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "extended_location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExtendedLocation"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "auxiliary_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AuxiliaryMode"),
			},
			{
				Name:     "dns_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.DNSSettings"),
			},
			{
				Name:     "disable_tcp_state_tracking",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DisableTCPStateTracking"),
			},
			{
				Name:     "enable_accelerated_networking",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableAcceleratedNetworking"),
			},
			{
				Name:     "enable_ip_forwarding",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableIPForwarding"),
			},
			{
				Name:     "ip_configurations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.IPConfigurations"),
			},
			{
				Name:     "migration_phase",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MigrationPhase"),
			},
			{
				Name:     "network_security_group",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.NetworkSecurityGroup"),
			},
			{
				Name:     "nic_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NicType"),
			},
			{
				Name:     "private_link_service",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateLinkService"),
			},
			{
				Name:     "workload_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.WorkloadType"),
			},
			{
				Name:     "dscp_configuration",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.DscpConfiguration"),
			},
			{
				Name:     "hosted_workloads",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.HostedWorkloads"),
			},
			{
				Name:     "mac_address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MacAddress"),
			},
			{
				Name:     "primary",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.Primary"),
			},
			{
				Name:     "private_endpoint",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpoint"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "resource_guid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ResourceGUID"),
			},
			{
				Name:     "tap_configurations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.TapConfigurations"),
			},
			{
				Name:     "virtual_machine",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.VirtualMachine"),
			},
			{
				Name:     "vnet_encryption_supported",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.VnetEncryptionSupported"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Etag"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
