// Code generated by codegen; DO NOT EDIT.

package network

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ExpressRoutePorts() *schema.Table {
	return &schema.Table{
		Name:        "azure_network_express_route_ports",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2#ExpressRoutePort`,
		Resolver:    fetchExpressRoutePorts,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "bandwidth_in_gbps",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.BandwidthInGbps"),
			},
			{
				Name:     "billing_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.BillingType"),
			},
			{
				Name:     "encapsulation",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Encapsulation"),
			},
			{
				Name:     "links",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Links"),
			},
			{
				Name:     "peering_location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PeeringLocation"),
			},
			{
				Name:     "allocation_date",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AllocationDate"),
			},
			{
				Name:     "circuits",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Circuits"),
			},
			{
				Name:     "ether_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.EtherType"),
			},
			{
				Name:     "mtu",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Mtu"),
			},
			{
				Name:     "provisioned_bandwidth_in_gbps",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Properties.ProvisionedBandwidthInGbps"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "resource_guid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ResourceGUID"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Etag"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
