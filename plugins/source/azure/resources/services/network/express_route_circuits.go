// Code generated by codegen; DO NOT EDIT.

package network

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func ExpressRouteCircuits() *schema.Table {
	return &schema.Table{
		Name:        "azure_network_express_route_circuits",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2#ExpressRouteCircuit`,
		Resolver:    fetchExpressRouteCircuits,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "allow_classic_operations",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.AllowClassicOperations"),
			},
			{
				Name:     "authorization_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AuthorizationKey"),
			},
			{
				Name:     "authorizations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Authorizations"),
			},
			{
				Name:     "bandwidth_in_gbps",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Properties.BandwidthInGbps"),
			},
			{
				Name:     "circuit_provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CircuitProvisioningState"),
			},
			{
				Name:     "express_route_port",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ExpressRoutePort"),
			},
			{
				Name:     "gateway_manager_etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.GatewayManagerEtag"),
			},
			{
				Name:     "global_reach_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.GlobalReachEnabled"),
			},
			{
				Name:     "peerings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Peerings"),
			},
			{
				Name:     "service_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ServiceKey"),
			},
			{
				Name:     "service_provider_notes",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ServiceProviderNotes"),
			},
			{
				Name:     "service_provider_properties",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ServiceProviderProperties"),
			},
			{
				Name:     "service_provider_provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ServiceProviderProvisioningState"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "stag",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.Stag"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Etag"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
