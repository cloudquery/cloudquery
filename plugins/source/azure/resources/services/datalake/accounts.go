// Code generated by codegen; DO NOT EDIT.

package datalake

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Accounts() *schema.Table {
	return &schema.Table{
		Name:                "azure_datalake_accounts",
		Description:         `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-analytics/armdatalakeanalytics#Account`,
		Resolver:            fetchAccounts,
		PreResourceResolver: getAccounts,
		Multiplex:           client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "firewall_allow_azure_ips",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FirewallAllowAzureIPs"),
			},
			{
				Name:     "firewall_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FirewallState"),
			},
			{
				Name:     "max_degree_of_parallelism",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxDegreeOfParallelism"),
			},
			{
				Name:     "max_degree_of_parallelism_per_job",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxDegreeOfParallelismPerJob"),
			},
			{
				Name:     "max_job_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxJobCount"),
			},
			{
				Name:     "new_tier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NewTier"),
			},
			{
				Name:     "public_data_lake_store_accounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PublicDataLakeStoreAccounts"),
			},
			{
				Name:     "query_store_retention",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.QueryStoreRetention"),
			},
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AccountID"),
			},
			{
				Name:     "compute_policies",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ComputePolicies"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreationTime"),
			},
			{
				Name:     "current_tier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CurrentTier"),
			},
			{
				Name:     "data_lake_store_accounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.DataLakeStoreAccounts"),
			},
			{
				Name:     "debug_data_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DebugDataAccessLevel"),
			},
			{
				Name:     "default_data_lake_store_account",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultDataLakeStoreAccount"),
			},
			{
				Name:     "default_data_lake_store_account_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultDataLakeStoreAccountType"),
			},
			{
				Name:     "endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Endpoint"),
			},
			{
				Name:     "firewall_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.FirewallRules"),
			},
			{
				Name:     "hive_metastores",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.HiveMetastores"),
			},
			{
				Name:     "last_modified_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.LastModifiedTime"),
			},
			{
				Name:     "max_active_job_count_per_user",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxActiveJobCountPerUser"),
			},
			{
				Name:     "max_job_running_time_in_min",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxJobRunningTimeInMin"),
			},
			{
				Name:     "max_queued_job_count_per_user",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxQueuedJobCountPerUser"),
			},
			{
				Name:     "min_priority_per_job",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MinPriorityPerJob"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.State"),
			},
			{
				Name:     "storage_accounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.StorageAccounts"),
			},
			{
				Name:     "system_max_degree_of_parallelism",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.SystemMaxDegreeOfParallelism"),
			},
			{
				Name:     "system_max_job_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.SystemMaxJobCount"),
			},
			{
				Name:     "virtual_network_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.VirtualNetworkRules"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
