// Code generated by codegen; DO NOT EDIT.

package datalake

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func StoreAccounts() *schema.Table {
	return &schema.Table{
		Name:                "azure_datalake_store_accounts",
		Description:         `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-store/armdatalakestore#Account`,
		Resolver:            fetchStoreAccounts,
		PreResourceResolver: getStoreAccounts,
		Multiplex:           client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AccountID"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreationTime"),
			},
			{
				Name:     "current_tier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CurrentTier"),
			},
			{
				Name:     "default_group",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultGroup"),
			},
			{
				Name:     "encryption_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.EncryptionConfig"),
			},
			{
				Name:     "encryption_provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.EncryptionProvisioningState"),
			},
			{
				Name:     "encryption_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.EncryptionState"),
			},
			{
				Name:     "endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Endpoint"),
			},
			{
				Name:     "firewall_allow_azure_ips",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FirewallAllowAzureIPs"),
			},
			{
				Name:     "firewall_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.FirewallRules"),
			},
			{
				Name:     "firewall_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.FirewallState"),
			},
			{
				Name:     "last_modified_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.LastModifiedTime"),
			},
			{
				Name:     "new_tier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.NewTier"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.State"),
			},
			{
				Name:     "trusted_id_provider_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.TrustedIDProviderState"),
			},
			{
				Name:     "trusted_id_providers",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.TrustedIDProviders"),
			},
			{
				Name:     "virtual_network_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.VirtualNetworkRules"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},
	}
}
