// Code generated by codegen; DO NOT EDIT.

package servicebus

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func topics() *schema.Table {
	return &schema.Table{
		Name:        "azure_servicebus_topics",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicebus/armservicebus/v2#SBTopic`,
		Resolver:    fetchTopics,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "auto_delete_on_idle",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AutoDeleteOnIdle"),
			},
			{
				Name:     "default_message_time_to_live",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultMessageTimeToLive"),
			},
			{
				Name:     "duplicate_detection_history_time_window",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DuplicateDetectionHistoryTimeWindow"),
			},
			{
				Name:     "enable_batched_operations",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableBatchedOperations"),
			},
			{
				Name:     "enable_express",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableExpress"),
			},
			{
				Name:     "enable_partitioning",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnablePartitioning"),
			},
			{
				Name:     "max_message_size_in_kilobytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxMessageSizeInKilobytes"),
			},
			{
				Name:     "max_size_in_megabytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxSizeInMegabytes"),
			},
			{
				Name:     "requires_duplicate_detection",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.RequiresDuplicateDetection"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Status"),
			},
			{
				Name:     "support_ordering",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.SupportOrdering"),
			},
			{
				Name:     "accessed_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.AccessedAt"),
			},
			{
				Name:     "count_details",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.CountDetails"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreatedAt"),
			},
			{
				Name:     "size_in_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.SizeInBytes"),
			},
			{
				Name:     "subscription_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.SubscriptionCount"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.UpdatedAt"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "system_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SystemData"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "namespace_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
		},

		Relations: []*schema.Table{
			authorizationRules(),
		},
	}
}
