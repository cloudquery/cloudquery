// Code generated by codegen; DO NOT EDIT.

package appservice

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Sites() *schema.Table {
	return &schema.Table{
		Name:        "azure_appservice_sites",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appservice/armappservice/v2#Site`,
		Resolver:    fetchSites,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "extended_location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExtendedLocation"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "client_affinity_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.ClientAffinityEnabled"),
			},
			{
				Name:     "client_cert_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.ClientCertEnabled"),
			},
			{
				Name:     "client_cert_exclusion_paths",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ClientCertExclusionPaths"),
			},
			{
				Name:     "client_cert_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ClientCertMode"),
			},
			{
				Name:     "cloning_info",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.CloningInfo"),
			},
			{
				Name:     "container_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.ContainerSize"),
			},
			{
				Name:     "custom_domain_verification_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.CustomDomainVerificationID"),
			},
			{
				Name:     "daily_memory_time_quota",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.DailyMemoryTimeQuota"),
			},
			{
				Name:     "enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.Enabled"),
			},
			{
				Name:     "https_only",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.HTTPSOnly"),
			},
			{
				Name:     "host_name_ssl_states",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.HostNameSSLStates"),
			},
			{
				Name:     "host_names_disabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.HostNamesDisabled"),
			},
			{
				Name:     "hosting_environment_profile",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.HostingEnvironmentProfile"),
			},
			{
				Name:     "hyper_v",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.HyperV"),
			},
			{
				Name:     "is_xenon",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsXenon"),
			},
			{
				Name:     "key_vault_reference_identity",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.KeyVaultReferenceIdentity"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "redundancy_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RedundancyMode"),
			},
			{
				Name:     "reserved",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.Reserved"),
			},
			{
				Name:     "scm_site_also_stopped",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.ScmSiteAlsoStopped"),
			},
			{
				Name:     "server_farm_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ServerFarmID"),
			},
			{
				Name:     "site_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SiteConfig"),
			},
			{
				Name:     "storage_account_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.StorageAccountRequired"),
			},
			{
				Name:     "virtual_network_subnet_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.VirtualNetworkSubnetID"),
			},
			{
				Name:     "vnet_content_share_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.VnetContentShareEnabled"),
			},
			{
				Name:     "vnet_image_pull_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.VnetImagePullEnabled"),
			},
			{
				Name:     "vnet_route_all_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.VnetRouteAllEnabled"),
			},
			{
				Name:     "availability_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AvailabilityState"),
			},
			{
				Name:     "default_host_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultHostName"),
			},
			{
				Name:     "enabled_host_names",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.EnabledHostNames"),
			},
			{
				Name:     "host_names",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.HostNames"),
			},
			{
				Name:     "in_progress_operation_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.InProgressOperationID"),
			},
			{
				Name:     "is_default_container",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsDefaultContainer"),
			},
			{
				Name:     "last_modified_time_utc",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.LastModifiedTimeUTC"),
			},
			{
				Name:     "max_number_of_workers",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.MaxNumberOfWorkers"),
			},
			{
				Name:     "outbound_ip_addresses",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.OutboundIPAddresses"),
			},
			{
				Name:     "possible_outbound_ip_addresses",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PossibleOutboundIPAddresses"),
			},
			{
				Name:     "repository_site_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.RepositorySiteName"),
			},
			{
				Name:     "resource_group",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ResourceGroup"),
			},
			{
				Name:     "slot_swap_status",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SlotSwapStatus"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.State"),
			},
			{
				Name:     "suspended_till",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.SuspendedTill"),
			},
			{
				Name:     "target_swap_slot",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.TargetSwapSlot"),
			},
			{
				Name:     "traffic_manager_host_names",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Properties.TrafficManagerHostNames"),
			},
			{
				Name:     "usage_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.UsageState"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},

		Relations: []*schema.Table{
			functions(),
			siteAuthSettings(),
			siteAuthSettingsV2(),
			vnetConnections(),
		},
	}
}
