// Code generated by codegen; DO NOT EDIT.

package storage

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Accounts() *schema.Table {
	return &schema.Table{
		Name:        "azure_storage_accounts",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage#Account`,
		Resolver:    fetchAccounts,
		Multiplex:   client.SubscriptionMultiplex,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "extended_location",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExtendedLocation"),
			},
			{
				Name:     "identity",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identity"),
			},
			{
				Name:     "allow_blob_public_access",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.AllowBlobPublicAccess"),
			},
			{
				Name:     "allow_cross_tenant_replication",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.AllowCrossTenantReplication"),
			},
			{
				Name:     "allow_shared_key_access",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.AllowSharedKeyAccess"),
			},
			{
				Name:     "allowed_copy_scope",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AllowedCopyScope"),
			},
			{
				Name:     "azure_files_identity_based_authentication",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.AzureFilesIdentityBasedAuthentication"),
			},
			{
				Name:     "dns_endpoint_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DNSEndpointType"),
			},
			{
				Name:     "default_to_o_auth_authentication",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DefaultToOAuthAuthentication"),
			},
			{
				Name:     "supports_https_traffic_only",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableHTTPSTrafficOnly"),
			},
			{
				Name:     "is_nfs_v3_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableNfsV3"),
			},
			{
				Name:     "immutable_storage_with_versioning",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ImmutableStorageWithVersioning"),
			},
			{
				Name:     "is_hns_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsHnsEnabled"),
			},
			{
				Name:     "is_local_user_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsLocalUserEnabled"),
			},
			{
				Name:     "is_sftp_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.IsSftpEnabled"),
			},
			{
				Name:     "large_file_shares_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LargeFileSharesState"),
			},
			{
				Name:     "minimum_tls_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.MinimumTLSVersion"),
			},
			{
				Name:     "public_network_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicNetworkAccess"),
			},
			{
				Name:     "routing_preference",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.RoutingPreference"),
			},
			{
				Name:     "storage_account_sku_conversion_status",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.StorageAccountSKUConversionStatus"),
			},
			{
				Name:     "access_tier",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.AccessTier"),
			},
			{
				Name:     "blob_restore_status",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.BlobRestoreStatus"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.CreationTime"),
			},
			{
				Name:     "custom_domain",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.CustomDomain"),
			},
			{
				Name:     "encryption",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Encryption"),
			},
			{
				Name:     "failover_in_progress",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.FailoverInProgress"),
			},
			{
				Name:     "geo_replication_stats",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.GeoReplicationStats"),
			},
			{
				Name:     "key_creation_time",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.KeyCreationTime"),
			},
			{
				Name:     "key_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.KeyPolicy"),
			},
			{
				Name:     "last_geo_failover_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.LastGeoFailoverTime"),
			},
			{
				Name:     "network_acls",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.NetworkRuleSet"),
			},
			{
				Name:     "primary_endpoints",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrimaryEndpoints"),
			},
			{
				Name:     "primary_location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PrimaryLocation"),
			},
			{
				Name:     "private_endpoint_connections",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.PrivateEndpointConnections"),
			},
			{
				Name:     "provisioning_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.ProvisioningState"),
			},
			{
				Name:     "sas_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SasPolicy"),
			},
			{
				Name:     "secondary_endpoints",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.SecondaryEndpoints"),
			},
			{
				Name:     "secondary_location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.SecondaryLocation"),
			},
			{
				Name:     "status_of_primary",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.StatusOfPrimary"),
			},
			{
				Name:     "status_of_secondary",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.StatusOfSecondary"),
			},
			{
				Name:     "tags",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tags"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "sku",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SKU"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
		},

		Relations: []*schema.Table{
			blobServices(),
			containers(),
		},
	}
}
