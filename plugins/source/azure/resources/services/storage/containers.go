// Code generated by codegen; DO NOT EDIT.

package storage

import (
	"github.com/cloudquery/cloudquery/plugins/source/azure/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func containers() *schema.Table {
	return &schema.Table{
		Name:        "azure_storage_containers",
		Description: `https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage#ListContainerItem`,
		Resolver:    fetchContainers,
		Columns: []schema.Column{
			{
				Name:        "subscription_id",
				Type:        schema.TypeString,
				Resolver:    client.SubscriptionIDResolver,
				Description: `Azure subscription ID`,
			},
			{
				Name:     "default_encryption_scope",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.DefaultEncryptionScope"),
			},
			{
				Name:     "deny_encryption_scope_override",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.DenyEncryptionScopeOverride"),
			},
			{
				Name:     "enable_nfs_v3_all_squash",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableNfsV3AllSquash"),
			},
			{
				Name:     "enable_nfs_v3_root_squash",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.EnableNfsV3RootSquash"),
			},
			{
				Name:     "immutable_storage_with_versioning",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ImmutableStorageWithVersioning"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.Metadata"),
			},
			{
				Name:     "public_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.PublicAccess"),
			},
			{
				Name:     "deleted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.Deleted"),
			},
			{
				Name:     "deleted_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.DeletedTime"),
			},
			{
				Name:     "has_immutability_policy",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.HasImmutabilityPolicy"),
			},
			{
				Name:     "has_legal_hold",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Properties.HasLegalHold"),
			},
			{
				Name:     "immutability_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.ImmutabilityPolicy"),
			},
			{
				Name:     "last_modified_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("Properties.LastModifiedTime"),
			},
			{
				Name:     "lease_duration",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LeaseDuration"),
			},
			{
				Name:     "lease_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LeaseState"),
			},
			{
				Name:     "lease_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.LeaseStatus"),
			},
			{
				Name:     "legal_hold",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Properties.LegalHold"),
			},
			{
				Name:     "remaining_retention_days",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Properties.RemainingRetentionDays"),
			},
			{
				Name:     "version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Properties.Version"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Etag"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: schema.ParentColumnResolver("id"),
			},
		},
	}
}
