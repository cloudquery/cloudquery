// Code generated by codegen; DO NOT EDIT.

package dns_records

import (
	"github.com/cloudquery/cloudquery/plugins/source/cloudflare/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func DNSRecords() *schema.Table {
	return &schema.Table{
		Name:      "cloudflare_dns_records",
		Resolver:  fetchDNSRecords,
		Multiplex: client.ZoneMultiplex,
		Columns: []schema.Column{
			{
				Name:        "account_id",
				Type:        schema.TypeString,
				Resolver:    client.ResolveAccountID,
				Description: `The Account ID of the resource.`,
			},
			{
				Name:        "meta",
				Type:        schema.TypeJSON,
				Description: `Extra Cloudflare-specific information about the record.`,
			},
			{
				Name:        "data",
				Type:        schema.TypeJSON,
				Description: `Metadata about the record.`,
			},
			{
				Name:     "created_on",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedOn"),
			},
			{
				Name:     "modified_on",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("ModifiedOn"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "content",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Content"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "zone_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ZoneID"),
			},
			{
				Name:     "zone_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ZoneName"),
			},
			{
				Name:     "priority",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Priority"),
			},
			{
				Name:     "ttl",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TTL"),
			},
			{
				Name:     "proxied",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Proxied"),
			},
			{
				Name:     "proxiable",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Proxiable"),
			},
			{
				Name:     "locked",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Locked"),
			},
		},
	}
}
