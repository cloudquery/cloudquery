// Code generated by MockGen. DO NOT EDIT.
// Source: users_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	datadog "github.com/DataDog/datadog-api-client-go/v2/api/datadog"
	datadogV2 "github.com/DataDog/datadog-api-client-go/v2/api/datadogV2"
	gomock "github.com/golang/mock/gomock"
)

// MockUsersAPIClient is a mock of UsersAPIClient interface.
type MockUsersAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersAPIClientMockRecorder
}

// MockUsersAPIClientMockRecorder is the mock recorder for MockUsersAPIClient.
type MockUsersAPIClientMockRecorder struct {
	mock *MockUsersAPIClient
}

// NewMockUsersAPIClient creates a new mock instance.
func NewMockUsersAPIClient(ctrl *gomock.Controller) *MockUsersAPIClient {
	mock := &MockUsersAPIClient{ctrl: ctrl}
	mock.recorder = &MockUsersAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersAPIClient) EXPECT() *MockUsersAPIClientMockRecorder {
	return m.recorder
}

// ListUserOrganizations mocks base method.
func (m *MockUsersAPIClient) ListUserOrganizations(arg0 context.Context, arg1 string) (datadogV2.UserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOrganizations", arg0, arg1)
	ret0, _ := ret[0].(datadogV2.UserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserOrganizations indicates an expected call of ListUserOrganizations.
func (mr *MockUsersAPIClientMockRecorder) ListUserOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOrganizations", reflect.TypeOf((*MockUsersAPIClient)(nil).ListUserOrganizations), arg0, arg1)
}

// ListUserPermissions mocks base method.
func (m *MockUsersAPIClient) ListUserPermissions(arg0 context.Context, arg1 string) (datadogV2.PermissionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPermissions", arg0, arg1)
	ret0, _ := ret[0].(datadogV2.PermissionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserPermissions indicates an expected call of ListUserPermissions.
func (mr *MockUsersAPIClientMockRecorder) ListUserPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPermissions", reflect.TypeOf((*MockUsersAPIClient)(nil).ListUserPermissions), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockUsersAPIClient) ListUsers(arg0 context.Context, arg1 ...datadogV2.ListUsersOptionalParameters) (datadogV2.UsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(datadogV2.UsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUsersAPIClientMockRecorder) ListUsers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUsersAPIClient)(nil).ListUsers), varargs...)
}

// ListUsersWithPagination mocks base method.
func (m *MockUsersAPIClient) ListUsersWithPagination(arg0 context.Context, arg1 ...datadogV2.ListUsersOptionalParameters) (<-chan datadog.PaginationResult[datadogV2.User], func()) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithPagination", varargs...)
	ret0, _ := ret[0].(<-chan datadog.PaginationResult[datadogV2.User])
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ListUsersWithPagination indicates an expected call of ListUsersWithPagination.
func (mr *MockUsersAPIClientMockRecorder) ListUsersWithPagination(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithPagination", reflect.TypeOf((*MockUsersAPIClient)(nil).ListUsersWithPagination), varargs...)
}
