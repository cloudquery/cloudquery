// Code generated by MockGen. DO NOT EDIT.
// Source: service_level_objective_corrections_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	datadog "github.com/DataDog/datadog-api-client-go/v2/api/datadog"
	datadogV1 "github.com/DataDog/datadog-api-client-go/v2/api/datadogV1"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceLevelObjectiveCorrectionsAPIClient is a mock of ServiceLevelObjectiveCorrectionsAPIClient interface.
type MockServiceLevelObjectiveCorrectionsAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder
}

// MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder is the mock recorder for MockServiceLevelObjectiveCorrectionsAPIClient.
type MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder struct {
	mock *MockServiceLevelObjectiveCorrectionsAPIClient
}

// NewMockServiceLevelObjectiveCorrectionsAPIClient creates a new mock instance.
func NewMockServiceLevelObjectiveCorrectionsAPIClient(ctrl *gomock.Controller) *MockServiceLevelObjectiveCorrectionsAPIClient {
	mock := &MockServiceLevelObjectiveCorrectionsAPIClient{ctrl: ctrl}
	mock.recorder = &MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLevelObjectiveCorrectionsAPIClient) EXPECT() *MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder {
	return m.recorder
}

// ListSLOCorrection mocks base method.
func (m *MockServiceLevelObjectiveCorrectionsAPIClient) ListSLOCorrection(arg0 context.Context, arg1 ...datadogV1.ListSLOCorrectionOptionalParameters) (datadogV1.SLOCorrectionListResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSLOCorrection", varargs...)
	ret0, _ := ret[0].(datadogV1.SLOCorrectionListResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSLOCorrection indicates an expected call of ListSLOCorrection.
func (mr *MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder) ListSLOCorrection(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOCorrection", reflect.TypeOf((*MockServiceLevelObjectiveCorrectionsAPIClient)(nil).ListSLOCorrection), varargs...)
}

// ListSLOCorrectionWithPagination mocks base method.
func (m *MockServiceLevelObjectiveCorrectionsAPIClient) ListSLOCorrectionWithPagination(arg0 context.Context, arg1 ...datadogV1.ListSLOCorrectionOptionalParameters) (<-chan datadog.PaginationResult[datadogV1.SLOCorrection], func()) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSLOCorrectionWithPagination", varargs...)
	ret0, _ := ret[0].(<-chan datadog.PaginationResult[datadogV1.SLOCorrection])
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ListSLOCorrectionWithPagination indicates an expected call of ListSLOCorrectionWithPagination.
func (mr *MockServiceLevelObjectiveCorrectionsAPIClientMockRecorder) ListSLOCorrectionWithPagination(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOCorrectionWithPagination", reflect.TypeOf((*MockServiceLevelObjectiveCorrectionsAPIClient)(nil).ListSLOCorrectionWithPagination), varargs...)
}
