// Code generated by MockGen. DO NOT EDIT.
// Source: notebooks_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	datadog "github.com/DataDog/datadog-api-client-go/v2/api/datadog"
	datadogV1 "github.com/DataDog/datadog-api-client-go/v2/api/datadogV1"
	gomock "github.com/golang/mock/gomock"
)

// MockNotebooksAPIClient is a mock of NotebooksAPIClient interface.
type MockNotebooksAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotebooksAPIClientMockRecorder
}

// MockNotebooksAPIClientMockRecorder is the mock recorder for MockNotebooksAPIClient.
type MockNotebooksAPIClientMockRecorder struct {
	mock *MockNotebooksAPIClient
}

// NewMockNotebooksAPIClient creates a new mock instance.
func NewMockNotebooksAPIClient(ctrl *gomock.Controller) *MockNotebooksAPIClient {
	mock := &MockNotebooksAPIClient{ctrl: ctrl}
	mock.recorder = &MockNotebooksAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotebooksAPIClient) EXPECT() *MockNotebooksAPIClientMockRecorder {
	return m.recorder
}

// ListNotebooks mocks base method.
func (m *MockNotebooksAPIClient) ListNotebooks(arg0 context.Context, arg1 ...datadogV1.ListNotebooksOptionalParameters) (datadogV1.NotebooksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebooks", varargs...)
	ret0, _ := ret[0].(datadogV1.NotebooksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNotebooks indicates an expected call of ListNotebooks.
func (mr *MockNotebooksAPIClientMockRecorder) ListNotebooks(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebooks", reflect.TypeOf((*MockNotebooksAPIClient)(nil).ListNotebooks), varargs...)
}

// ListNotebooksWithPagination mocks base method.
func (m *MockNotebooksAPIClient) ListNotebooksWithPagination(arg0 context.Context, arg1 ...datadogV1.ListNotebooksOptionalParameters) (<-chan datadog.PaginationResult[datadogV1.NotebooksResponseData], func()) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotebooksWithPagination", varargs...)
	ret0, _ := ret[0].(<-chan datadog.PaginationResult[datadogV1.NotebooksResponseData])
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ListNotebooksWithPagination indicates an expected call of ListNotebooksWithPagination.
func (mr *MockNotebooksAPIClientMockRecorder) ListNotebooksWithPagination(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebooksWithPagination", reflect.TypeOf((*MockNotebooksAPIClient)(nil).ListNotebooksWithPagination), varargs...)
}
