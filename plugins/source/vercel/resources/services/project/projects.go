// Code generated by codegen; DO NOT EDIT.

package project

import (
	"github.com/cloudquery/cloudquery/plugins/source/vercel/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Projects() *schema.Table {
	return &schema.Table{
		Name:      "vercel_projects",
		Resolver:  fetchProjects,
		Multiplex: client.TeamMultiplex,
		Columns: []schema.Column{
			{
				Name:     "account_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AccountID"),
			},
			{
				Name:     "auto_expose_system_envs",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoExposeSystemEnvs"),
			},
			{
				Name:     "build_command",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BuildCommand"),
			},
			{
				Name:     "command_for_ignoring_build_step",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CommandForIgnoringBuildStep"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "dev_command",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DevCommand"),
			},
			{
				Name:     "directory_listing",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DirectoryListing"),
			},
			{
				Name:     "env",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Env"),
			},
			{
				Name:     "framework",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Framework"),
			},
			{
				Name:     "git_fork_protection",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("GitForkProtection"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "install_command",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InstallCommand"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "node_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NodeVersion"),
			},
			{
				Name:     "output_directory",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OutputDirectory"),
			},
			{
				Name:     "public_source",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PublicSource"),
			},
			{
				Name:     "root_directory",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RootDirectory"),
			},
			{
				Name:     "serverless_function_region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ServerlessFunctionRegion"),
			},
			{
				Name:     "source_files_outside_root_directory",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SourceFilesOutsideRootDirectory"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "live",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Live"),
			},
			{
				Name:     "latest_deployments",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LatestDeployments"),
			},
			{
				Name:     "transfer_started_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("TransferStartedAt"),
			},
			{
				Name:     "transfer_completed_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("TransferCompletedAt"),
			},
			{
				Name:     "transferred_from_account_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TransferredFromAccountID"),
			},
		},

		Relations: []*schema.Table{
			ProjectEnvs(),
		},
	}
}
