// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/vercel/client (interfaces: VercelServices)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	vercel "github.com/cloudquery/cloudquery/plugins/source/vercel/internal/vercel"
	gomock "github.com/golang/mock/gomock"
)

// MockVercelServices is a mock of VercelServices interface.
type MockVercelServices struct {
	ctrl     *gomock.Controller
	recorder *MockVercelServicesMockRecorder
}

// MockVercelServicesMockRecorder is the mock recorder for MockVercelServices.
type MockVercelServicesMockRecorder struct {
	mock *MockVercelServices
}

// NewMockVercelServices creates a new mock instance.
func NewMockVercelServices(ctrl *gomock.Controller) *MockVercelServices {
	mock := &MockVercelServices{ctrl: ctrl}
	mock.recorder = &MockVercelServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVercelServices) EXPECT() *MockVercelServicesMockRecorder {
	return m.recorder
}

// ListDeploymentChecks mocks base method.
func (m *MockVercelServices) ListDeploymentChecks(arg0 context.Context, arg1 string, arg2 *vercel.Paginator) ([]vercel.DeploymentCheck, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentChecks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]vercel.DeploymentCheck)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeploymentChecks indicates an expected call of ListDeploymentChecks.
func (mr *MockVercelServicesMockRecorder) ListDeploymentChecks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentChecks", reflect.TypeOf((*MockVercelServices)(nil).ListDeploymentChecks), arg0, arg1, arg2)
}

// ListDeployments mocks base method.
func (m *MockVercelServices) ListDeployments(arg0 context.Context, arg1 *vercel.Paginator) ([]vercel.Deployment, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", arg0, arg1)
	ret0, _ := ret[0].([]vercel.Deployment)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockVercelServicesMockRecorder) ListDeployments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockVercelServices)(nil).ListDeployments), arg0, arg1)
}

// ListDomainRecords mocks base method.
func (m *MockVercelServices) ListDomainRecords(arg0 context.Context, arg1 string, arg2 *vercel.Paginator) ([]vercel.DomainRecord, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainRecords", arg0, arg1, arg2)
	ret0, _ := ret[0].([]vercel.DomainRecord)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDomainRecords indicates an expected call of ListDomainRecords.
func (mr *MockVercelServicesMockRecorder) ListDomainRecords(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainRecords", reflect.TypeOf((*MockVercelServices)(nil).ListDomainRecords), arg0, arg1, arg2)
}

// ListDomains mocks base method.
func (m *MockVercelServices) ListDomains(arg0 context.Context, arg1 *vercel.Paginator) ([]vercel.Domain, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0, arg1)
	ret0, _ := ret[0].([]vercel.Domain)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockVercelServicesMockRecorder) ListDomains(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockVercelServices)(nil).ListDomains), arg0, arg1)
}

// ListProjectEnvs mocks base method.
func (m *MockVercelServices) ListProjectEnvs(arg0 context.Context, arg1 string, arg2 *vercel.Paginator) ([]vercel.ProjectEnv, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectEnvs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]vercel.ProjectEnv)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectEnvs indicates an expected call of ListProjectEnvs.
func (mr *MockVercelServicesMockRecorder) ListProjectEnvs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectEnvs", reflect.TypeOf((*MockVercelServices)(nil).ListProjectEnvs), arg0, arg1, arg2)
}

// ListProjects mocks base method.
func (m *MockVercelServices) ListProjects(arg0 context.Context, arg1 *vercel.Paginator) ([]vercel.Project, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].([]vercel.Project)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockVercelServicesMockRecorder) ListProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockVercelServices)(nil).ListProjects), arg0, arg1)
}

// ListTeamMembers mocks base method.
func (m *MockVercelServices) ListTeamMembers(arg0 context.Context, arg1 string, arg2 *vercel.Paginator) ([]vercel.TeamMember, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]vercel.TeamMember)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeamMembers indicates an expected call of ListTeamMembers.
func (mr *MockVercelServicesMockRecorder) ListTeamMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamMembers", reflect.TypeOf((*MockVercelServices)(nil).ListTeamMembers), arg0, arg1, arg2)
}

// ListTeams mocks base method.
func (m *MockVercelServices) ListTeams(arg0 context.Context, arg1 *vercel.Paginator) ([]vercel.Team, *vercel.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0, arg1)
	ret0, _ := ret[0].([]vercel.Team)
	ret1, _ := ret[1].(*vercel.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockVercelServicesMockRecorder) ListTeams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockVercelServices)(nil).ListTeams), arg0, arg1)
}
