// Code generated by codegen; DO NOT EDIT.

package products

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/stripe/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/stripe/stripe-go/v74"
)

func Products() *schema.Table {
	return &schema.Table{
		Name:     "stripe_products",
		Resolver: fetchProducts,
		Columns: []schema.Column{
			{
				Name:     "active",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Active"),
			},
			{
				Name:     "attributes",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Attributes"),
			},
			{
				Name:     "caption",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Caption"),
			},
			{
				Name:     "created",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Created"),
			},
			{
				Name:     "deactivate_on",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("DeactivateOn"),
			},
			{
				Name:     "default_price",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultPrice"),
			},
			{
				Name:     "deleted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Deleted"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "images",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Images"),
			},
			{
				Name:     "livemode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Livemode"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "object",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Object"),
			},
			{
				Name:     "package_dimensions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PackageDimensions"),
			},
			{
				Name:     "shippable",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Shippable"),
			},
			{
				Name:     "statement_descriptor",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StatementDescriptor"),
			},
			{
				Name:     "tax_code",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TaxCode"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "unit_label",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UnitLabel"),
			},
			{
				Name:     "updated",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Updated"),
			},
			{
				Name:     "url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("URL"),
			},
		},
	}
}

func fetchProducts(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	cl := meta.(*client.Client)

	it := cl.Services.Products.List(&stripe.ProductListParams{})
	for it.Next() {
		res <- it.Product()
	}
	return it.Err()
}
