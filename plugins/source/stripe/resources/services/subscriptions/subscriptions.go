// Code generated by codegen; DO NOT EDIT.

package subscriptions

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/stripe/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/stripe/stripe-go/v74"
)

func Subscriptions() *schema.Table {
	return &schema.Table{
		Name:     "stripe_subscriptions",
		Resolver: fetchSubscriptions,
		Columns: []schema.Column{
			{
				Name:     "application",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Application"),
			},
			{
				Name:     "application_fee_percent",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("ApplicationFeePercent"),
			},
			{
				Name:     "automatic_tax",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AutomaticTax"),
			},
			{
				Name:     "billing_cycle_anchor",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("BillingCycleAnchor"),
			},
			{
				Name:     "billing_thresholds",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BillingThresholds"),
			},
			{
				Name:     "cancel_at",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CancelAt"),
			},
			{
				Name:     "cancel_at_period_end",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CancelAtPeriodEnd"),
			},
			{
				Name:     "canceled_at",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CanceledAt"),
			},
			{
				Name:     "collection_method",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CollectionMethod"),
			},
			{
				Name:     "created",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Created"),
			},
			{
				Name:     "currency",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Currency"),
			},
			{
				Name:     "current_period_end",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CurrentPeriodEnd"),
			},
			{
				Name:     "current_period_start",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CurrentPeriodStart"),
			},
			{
				Name:     "customer",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Customer"),
			},
			{
				Name:     "days_until_due",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DaysUntilDue"),
			},
			{
				Name:     "default_payment_method",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultPaymentMethod"),
			},
			{
				Name:     "default_source",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultSource"),
			},
			{
				Name:     "default_tax_rates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultTaxRates"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "discount",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Discount"),
			},
			{
				Name:     "ended_at",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("EndedAt"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "items",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Items"),
			},
			{
				Name:     "latest_invoice",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LatestInvoice"),
			},
			{
				Name:     "livemode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Livemode"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "next_pending_invoice_item_invoice",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NextPendingInvoiceItemInvoice"),
			},
			{
				Name:     "object",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Object"),
			},
			{
				Name:     "on_behalf_of",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OnBehalfOf"),
			},
			{
				Name:     "pause_collection",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PauseCollection"),
			},
			{
				Name:     "payment_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PaymentSettings"),
			},
			{
				Name:     "pending_invoice_item_interval",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PendingInvoiceItemInterval"),
			},
			{
				Name:     "pending_setup_intent",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PendingSetupIntent"),
			},
			{
				Name:     "pending_update",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PendingUpdate"),
			},
			{
				Name:     "schedule",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Schedule"),
			},
			{
				Name:     "start_date",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("StartDate"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "test_clock",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TestClock"),
			},
			{
				Name:     "transfer_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TransferData"),
			},
			{
				Name:     "trial_end",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TrialEnd"),
			},
			{
				Name:     "trial_start",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TrialStart"),
			},
		},
	}
}

func fetchSubscriptions(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	cl := meta.(*client.Client)

	it := cl.Services.Subscriptions.List(&stripe.SubscriptionListParams{})
	for it.Next() {
		res <- it.Subscription()
	}
	return it.Err()
}
