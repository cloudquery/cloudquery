// Code generated by codegen; DO NOT EDIT.

package disputes

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/stripe/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/stripe/stripe-go/v74"
)

func Disputes() *schema.Table {
	return &schema.Table{
		Name:     "stripe_disputes",
		Resolver: fetchDisputes,
		Columns: []schema.Column{
			{
				Name:     "amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Amount"),
			},
			{
				Name:     "balance_transactions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BalanceTransactions"),
			},
			{
				Name:     "charge",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Charge"),
			},
			{
				Name:     "created",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Created"),
			},
			{
				Name:     "currency",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Currency"),
			},
			{
				Name:     "evidence",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Evidence"),
			},
			{
				Name:     "evidence_details",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EvidenceDetails"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "is_charge_refundable",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsChargeRefundable"),
			},
			{
				Name:     "livemode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Livemode"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "network_reason_code",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NetworkReasonCode"),
			},
			{
				Name:     "object",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Object"),
			},
			{
				Name:     "payment_intent",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PaymentIntent"),
			},
			{
				Name:     "reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Reason"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
		},
	}
}

func fetchDisputes(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	cl := meta.(*client.Client)

	it := cl.Services.Disputes.List(&stripe.DisputeListParams{})
	for it.Next() {
		res <- it.Dispute()
	}
	return it.Err()
}
