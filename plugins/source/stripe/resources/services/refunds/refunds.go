// Code generated by codegen; DO NOT EDIT.

package refunds

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/stripe/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/stripe/stripe-go/v74"
)

func Refunds() *schema.Table {
	return &schema.Table{
		Name:     "stripe_refunds",
		Resolver: fetchRefunds,
		Columns: []schema.Column{
			{
				Name:     "amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Amount"),
			},
			{
				Name:     "balance_transaction",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BalanceTransaction"),
			},
			{
				Name:     "charge",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Charge"),
			},
			{
				Name:     "created",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Created"),
			},
			{
				Name:     "currency",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Currency"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "failure_balance_transaction",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("FailureBalanceTransaction"),
			},
			{
				Name:     "failure_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FailureReason"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "instructions_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InstructionsEmail"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "next_action",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NextAction"),
			},
			{
				Name:     "object",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Object"),
			},
			{
				Name:     "payment_intent",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PaymentIntent"),
			},
			{
				Name:     "reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Reason"),
			},
			{
				Name:     "receipt_number",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ReceiptNumber"),
			},
			{
				Name:     "source_transfer_reversal",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SourceTransferReversal"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "transfer_reversal",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TransferReversal"),
			},
		},
	}
}

func fetchRefunds(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	cl := meta.(*client.Client)

	it := cl.Services.Refunds.List(&stripe.RefundListParams{})
	for it.Next() {
		res <- it.Refund()
	}
	return it.Err()
}
