// Code generated by codegen; DO NOT EDIT.

package invoices

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/stripe/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/stripe/stripe-go/v74"
)

func InvoiceItems() *schema.Table {
	return &schema.Table{
		Name:     "stripe_invoice_items",
		Resolver: fetchInvoiceItems,
		Columns: []schema.Column{
			{
				Name:     "amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Amount"),
			},
			{
				Name:     "currency",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Currency"),
			},
			{
				Name:     "customer",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Customer"),
			},
			{
				Name:     "date",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Date"),
			},
			{
				Name:     "deleted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Deleted"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "discountable",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Discountable"),
			},
			{
				Name:     "discounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Discounts"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "invoice",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Invoice"),
			},
			{
				Name:     "livemode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Livemode"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "object",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Object"),
			},
			{
				Name:     "period",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Period"),
			},
			{
				Name:     "plan",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Plan"),
			},
			{
				Name:     "price",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Price"),
			},
			{
				Name:     "proration",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Proration"),
			},
			{
				Name:     "quantity",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Quantity"),
			},
			{
				Name:     "subscription",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Subscription"),
			},
			{
				Name:     "subscription_item",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SubscriptionItem"),
			},
			{
				Name:     "tax_rates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TaxRates"),
			},
			{
				Name:     "test_clock",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TestClock"),
			},
			{
				Name:     "unit_amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UnitAmount"),
			},
			{
				Name:     "unit_amount_decimal",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("UnitAmountDecimal"),
			},
		},
	}
}

func fetchInvoiceItems(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	cl := meta.(*client.Client)

	it := cl.Services.InvoiceItems.List(&stripe.InvoiceItemListParams{})
	for it.Next() {
		res <- it.InvoiceItem()
	}
	return it.Err()
}
