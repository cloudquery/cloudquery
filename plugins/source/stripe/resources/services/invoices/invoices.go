// Code generated by codegen; DO NOT EDIT.

package invoices

import (
	"context"
	"github.com/cloudquery/cloudquery/plugins/source/stripe/client"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/stripe/stripe-go/v74"
)

func Invoices() *schema.Table {
	return &schema.Table{
		Name:     "stripe_invoices",
		Resolver: fetchInvoices,
		Columns: []schema.Column{
			{
				Name:     "account_country",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AccountCountry"),
			},
			{
				Name:     "account_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AccountName"),
			},
			{
				Name:     "account_tax_ids",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AccountTaxIDs"),
			},
			{
				Name:     "amount_due",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AmountDue"),
			},
			{
				Name:     "amount_paid",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AmountPaid"),
			},
			{
				Name:     "amount_remaining",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AmountRemaining"),
			},
			{
				Name:     "application",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Application"),
			},
			{
				Name:     "application_fee_amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ApplicationFeeAmount"),
			},
			{
				Name:     "attempt_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AttemptCount"),
			},
			{
				Name:     "attempted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Attempted"),
			},
			{
				Name:     "auto_advance",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoAdvance"),
			},
			{
				Name:     "automatic_tax",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AutomaticTax"),
			},
			{
				Name:     "billing_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BillingReason"),
			},
			{
				Name:     "charge",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Charge"),
			},
			{
				Name:     "collection_method",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CollectionMethod"),
			},
			{
				Name:     "created",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Created"),
			},
			{
				Name:     "currency",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Currency"),
			},
			{
				Name:     "customer",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Customer"),
			},
			{
				Name:     "customer_address",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomerAddress"),
			},
			{
				Name:     "customer_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CustomerEmail"),
			},
			{
				Name:     "customer_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CustomerName"),
			},
			{
				Name:     "customer_phone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CustomerPhone"),
			},
			{
				Name:     "customer_shipping",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomerShipping"),
			},
			{
				Name:     "customer_tax_exempt",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CustomerTaxExempt"),
			},
			{
				Name:     "customer_tax_ids",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomerTaxIDs"),
			},
			{
				Name:     "custom_fields",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomFields"),
			},
			{
				Name:     "default_payment_method",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultPaymentMethod"),
			},
			{
				Name:     "default_source",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultSource"),
			},
			{
				Name:     "default_tax_rates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultTaxRates"),
			},
			{
				Name:     "deleted",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Deleted"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "discount",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Discount"),
			},
			{
				Name:     "discounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Discounts"),
			},
			{
				Name:     "due_date",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DueDate"),
			},
			{
				Name:     "ending_balance",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("EndingBalance"),
			},
			{
				Name:     "footer",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Footer"),
			},
			{
				Name:     "from_invoice",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("FromInvoice"),
			},
			{
				Name:     "hosted_invoice_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HostedInvoiceURL"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "invoice_pdf",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InvoicePDF"),
			},
			{
				Name:     "last_finalization_error",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LastFinalizationError"),
			},
			{
				Name:     "latest_revision",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LatestRevision"),
			},
			{
				Name:     "lines",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Lines"),
			},
			{
				Name:     "livemode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Livemode"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "next_payment_attempt",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NextPaymentAttempt"),
			},
			{
				Name:     "number",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Number"),
			},
			{
				Name:     "object",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Object"),
			},
			{
				Name:     "on_behalf_of",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OnBehalfOf"),
			},
			{
				Name:     "paid",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Paid"),
			},
			{
				Name:     "paid_out_of_band",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PaidOutOfBand"),
			},
			{
				Name:     "payment_intent",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PaymentIntent"),
			},
			{
				Name:     "payment_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PaymentSettings"),
			},
			{
				Name:     "period_end",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PeriodEnd"),
			},
			{
				Name:     "period_start",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PeriodStart"),
			},
			{
				Name:     "post_payment_credit_notes_amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PostPaymentCreditNotesAmount"),
			},
			{
				Name:     "pre_payment_credit_notes_amount",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PrePaymentCreditNotesAmount"),
			},
			{
				Name:     "quote",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Quote"),
			},
			{
				Name:     "receipt_number",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ReceiptNumber"),
			},
			{
				Name:     "rendering_options",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RenderingOptions"),
			},
			{
				Name:     "starting_balance",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("StartingBalance"),
			},
			{
				Name:     "statement_descriptor",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StatementDescriptor"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "status_transitions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("StatusTransitions"),
			},
			{
				Name:     "subscription",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Subscription"),
			},
			{
				Name:     "subscription_proration_date",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SubscriptionProrationDate"),
			},
			{
				Name:     "subtotal",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Subtotal"),
			},
			{
				Name:     "subtotal_excluding_tax",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SubtotalExcludingTax"),
			},
			{
				Name:     "tax",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Tax"),
			},
			{
				Name:     "test_clock",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TestClock"),
			},
			{
				Name:     "threshold_reason",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ThresholdReason"),
			},
			{
				Name:     "total",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Total"),
			},
			{
				Name:     "total_discount_amounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TotalDiscountAmounts"),
			},
			{
				Name:     "total_excluding_tax",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TotalExcludingTax"),
			},
			{
				Name:     "total_tax_amounts",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TotalTaxAmounts"),
			},
			{
				Name:     "transfer_data",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TransferData"),
			},
			{
				Name:     "webhooks_delivered_at",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("WebhooksDeliveredAt"),
			},
		},
	}
}

func fetchInvoices(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	cl := meta.(*client.Client)

	it := cl.Services.Invoices.List(&stripe.InvoiceListParams{})
	for it.Next() {
		res <- it.Invoice()
	}
	return it.Err()
}
