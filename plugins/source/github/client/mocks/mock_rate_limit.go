// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/github/client (interfaces: RateLimitService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v59/github"
)

// MockRateLimitService is a mock of RateLimitService interface.
type MockRateLimitService struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServiceMockRecorder
}

// MockRateLimitServiceMockRecorder is the mock recorder for MockRateLimitService.
type MockRateLimitServiceMockRecorder struct {
	mock *MockRateLimitService
}

// NewMockRateLimitService creates a new mock instance.
func NewMockRateLimitService(ctrl *gomock.Controller) *MockRateLimitService {
	mock := &MockRateLimitService{ctrl: ctrl}
	mock.recorder = &MockRateLimitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimitService) EXPECT() *MockRateLimitServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRateLimitService) Get(arg0 context.Context) (*github.RateLimits, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*github.RateLimits)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRateLimitServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRateLimitService)(nil).Get), arg0)
}
