// Code generated by codegen; DO NOT EDIT.

package installations

import (
	"github.com/cloudquery/cloudquery/plugins/source/github/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Installations() *schema.Table {
	return &schema.Table{
		Name:      "github_installations",
		Resolver:  fetchInstallations,
		Multiplex: client.OrgMultiplex,
		Columns: []schema.Column{
			{
				Name:        "org",
				Type:        schema.TypeString,
				Resolver:    client.ResolveOrg,
				Description: `The Github Organization of the resource.`,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "node_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NodeID"),
			},
			{
				Name:     "app_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AppID"),
			},
			{
				Name:     "app_slug",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AppSlug"),
			},
			{
				Name:     "target_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TargetID"),
			},
			{
				Name:     "account",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Account"),
			},
			{
				Name:     "access_tokens_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AccessTokensURL"),
			},
			{
				Name:     "repositories_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RepositoriesURL"),
			},
			{
				Name:     "html_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HTMLURL"),
			},
			{
				Name:     "target_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TargetType"),
			},
			{
				Name:     "single_file_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SingleFileName"),
			},
			{
				Name:     "repository_selection",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RepositorySelection"),
			},
			{
				Name:     "events",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Events"),
			},
			{
				Name:     "single_file_paths",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("SingleFilePaths"),
			},
			{
				Name:     "permissions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Permissions"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "has_multiple_single_files",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HasMultipleSingleFiles"),
			},
			{
				Name:     "suspended_by",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SuspendedBy"),
			},
			{
				Name:     "suspended_at",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SuspendedAt"),
			},
		},
	}
}
