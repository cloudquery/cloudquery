// Code generated by codegen; DO NOT EDIT.

package issues

import (
	"github.com/cloudquery/cloudquery/plugins/source/github/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Issues() *schema.Table {
	return &schema.Table{
		Name:      "github_issues",
		Resolver:  fetchIssues,
		Multiplex: client.OrgMultiplex,
		Columns: []schema.Column{
			{
				Name:        "org",
				Type:        schema.TypeString,
				Resolver:    client.ResolveOrg,
				Description: `The Github Organization of the resource.`,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "number",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Number"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "locked",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Locked"),
			},
			{
				Name:     "title",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Title"),
			},
			{
				Name:     "body",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Body"),
			},
			{
				Name:     "author_association",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AuthorAssociation"),
			},
			{
				Name:     "user",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("User"),
			},
			{
				Name:     "labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Labels"),
			},
			{
				Name:     "assignee",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Assignee"),
			},
			{
				Name:     "comments",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Comments"),
			},
			{
				Name:     "closed_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("ClosedAt"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "closed_by",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ClosedBy"),
			},
			{
				Name:     "url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("URL"),
			},
			{
				Name:     "html_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HTMLURL"),
			},
			{
				Name:     "comments_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CommentsURL"),
			},
			{
				Name:     "events_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EventsURL"),
			},
			{
				Name:     "labels_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LabelsURL"),
			},
			{
				Name:     "repository_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RepositoryURL"),
			},
			{
				Name:     "milestone",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Milestone"),
			},
			{
				Name:     "pull_request",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PullRequestLinks"),
			},
			{
				Name:     "repository",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Repository"),
			},
			{
				Name:     "reactions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Reactions"),
			},
			{
				Name:     "assignees",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Assignees"),
			},
			{
				Name:     "node_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NodeID"),
			},
			{
				Name:     "text_matches",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TextMatches"),
			},
			{
				Name:     "active_lock_reason",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ActiveLockReason"),
			},
		},
	}
}
