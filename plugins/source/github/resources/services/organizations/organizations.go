// Code generated by codegen; DO NOT EDIT.

package organizations

import (
	"github.com/cloudquery/cloudquery/plugins/source/github/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Organizations() *schema.Table {
	return &schema.Table{
		Name:      "github_organizations",
		Resolver:  fetchOrganizations,
		Multiplex: client.OrgMultiplex,
		Columns: []schema.Column{
			{
				Name:        "org",
				Type:        schema.TypeString,
				Resolver:    client.ResolveOrg,
				Description: `The Github Organization of the resource.`,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "login",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Login"),
			},
			{
				Name:     "node_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NodeID"),
			},
			{
				Name:     "avatar_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvatarURL"),
			},
			{
				Name:     "html_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HTMLURL"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "company",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Company"),
			},
			{
				Name:     "blog",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Blog"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Email"),
			},
			{
				Name:     "twitter_username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TwitterUsername"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "public_repos",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PublicRepos"),
			},
			{
				Name:     "public_gists",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PublicGists"),
			},
			{
				Name:     "followers",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Followers"),
			},
			{
				Name:     "following",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Following"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "total_private_repos",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TotalPrivateRepos"),
			},
			{
				Name:     "owned_private_repos",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("OwnedPrivateRepos"),
			},
			{
				Name:     "private_gists",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PrivateGists"),
			},
			{
				Name:     "disk_usage",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DiskUsage"),
			},
			{
				Name:     "collaborators",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Collaborators"),
			},
			{
				Name:     "billing_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BillingEmail"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "plan",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Plan"),
			},
			{
				Name:     "two_factor_requirement_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("TwoFactorRequirementEnabled"),
			},
			{
				Name:     "is_verified",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsVerified"),
			},
			{
				Name:     "has_organization_projects",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HasOrganizationProjects"),
			},
			{
				Name:     "has_repository_projects",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HasRepositoryProjects"),
			},
			{
				Name:     "default_repository_permission",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultRepoPermission"),
			},
			{
				Name:     "default_repository_settings",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultRepoSettings"),
			},
			{
				Name:     "members_can_create_repositories",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreateRepos"),
			},
			{
				Name:     "members_can_create_public_repositories",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreatePublicRepos"),
			},
			{
				Name:     "members_can_create_private_repositories",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreatePrivateRepos"),
			},
			{
				Name:     "members_can_create_internal_repositories",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreateInternalRepos"),
			},
			{
				Name:     "members_can_fork_private_repositories",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanForkPrivateRepos"),
			},
			{
				Name:     "members_allowed_repository_creation_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MembersAllowedRepositoryCreationType"),
			},
			{
				Name:     "members_can_create_pages",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreatePages"),
			},
			{
				Name:     "members_can_create_public_pages",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreatePublicPages"),
			},
			{
				Name:     "members_can_create_private_pages",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembersCanCreatePrivatePages"),
			},
			{
				Name:     "url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("URL"),
			},
			{
				Name:     "events_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EventsURL"),
			},
			{
				Name:     "hooks_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HooksURL"),
			},
			{
				Name:     "issues_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IssuesURL"),
			},
			{
				Name:     "members_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MembersURL"),
			},
			{
				Name:     "public_members_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PublicMembersURL"),
			},
			{
				Name:     "repos_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ReposURL"),
			},
		},

		Relations: []*schema.Table{
			Members(),
		},
	}
}
