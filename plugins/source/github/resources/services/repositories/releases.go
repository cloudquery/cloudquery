// Code generated by codegen; DO NOT EDIT.

package repositories

import (
	"github.com/cloudquery/cloudquery/plugins/source/github/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Releases() *schema.Table {
	return &schema.Table{
		Name:      "github_releases",
		Resolver:  fetchReleases,
		Multiplex: client.OrgMultiplex,
		Columns: []schema.Column{
			{
				Name:        "org",
				Type:        schema.TypeString,
				Resolver:    client.ResolveOrg,
				Description: `The Github Organization of the resource.`,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "repository_id",
				Type:     schema.TypeInt,
				Resolver: client.ResolveParentColumn("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tag_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TagName"),
			},
			{
				Name:     "target_commitish",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TargetCommitish"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "body",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Body"),
			},
			{
				Name:     "draft",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Draft"),
			},
			{
				Name:     "prerelease",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Prerelease"),
			},
			{
				Name:     "make_latest",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MakeLatest"),
			},
			{
				Name:     "discussion_category_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DiscussionCategoryName"),
			},
			{
				Name:     "generate_release_notes",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("GenerateReleaseNotes"),
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "published_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("PublishedAt"),
			},
			{
				Name:     "url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("URL"),
			},
			{
				Name:     "html_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HTMLURL"),
			},
			{
				Name:     "assets_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AssetsURL"),
			},
			{
				Name:     "assets",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Assets"),
			},
			{
				Name:     "upload_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UploadURL"),
			},
			{
				Name:     "zipball_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ZipballURL"),
			},
			{
				Name:     "tarball_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TarballURL"),
			},
			{
				Name:     "author",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Author"),
			},
			{
				Name:     "node_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NodeID"),
			},
		},

		Relations: []*schema.Table{
			Assets(),
		},
	}
}
