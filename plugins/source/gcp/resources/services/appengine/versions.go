// Code generated by codegen; DO NOT EDIT.

package appengine

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/appengine/apiv1/appenginepb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/appengine/apiv1"
)

func Versions() *schema.Table {
	return &schema.Table{
		Name:        "gcp_appengine_versions",
		Description: `https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#Version`,
		Resolver:    fetchVersions,
		Multiplex:   client.ProjectMultiplexEnabledServices("appengine.googleapis.com"),
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "inbound_services",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("InboundServices"),
			},
			{
				Name:     "instance_class",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InstanceClass"),
			},
			{
				Name:     "network",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Network"),
			},
			{
				Name:     "zones",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Zones"),
			},
			{
				Name:     "resources",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Resources"),
			},
			{
				Name:     "runtime",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Runtime"),
			},
			{
				Name:     "runtime_channel",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RuntimeChannel"),
			},
			{
				Name:     "threadsafe",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Threadsafe"),
			},
			{
				Name:     "vm",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Vm"),
			},
			{
				Name:     "app_engine_apis",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AppEngineApis"),
			},
			{
				Name:     "beta_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BetaSettings"),
			},
			{
				Name:     "env",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Env"),
			},
			{
				Name:     "serving_status",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("ServingStatus"),
			},
			{
				Name:     "created_by",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreatedBy"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("CreateTime"),
			},
			{
				Name:     "disk_usage_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DiskUsageBytes"),
			},
			{
				Name:     "runtime_api_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RuntimeApiVersion"),
			},
			{
				Name:     "runtime_main_executable_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RuntimeMainExecutablePath"),
			},
			{
				Name:     "service_account",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ServiceAccount"),
			},
			{
				Name:     "handlers",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Handlers"),
			},
			{
				Name:     "error_handlers",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ErrorHandlers"),
			},
			{
				Name:     "libraries",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Libraries"),
			},
			{
				Name:     "api_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ApiConfig"),
			},
			{
				Name:     "env_variables",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EnvVariables"),
			},
			{
				Name:     "build_env_variables",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BuildEnvVariables"),
			},
			{
				Name:     "default_expiration",
				Type:     schema.TypeInt,
				Resolver: client.ResolveProtoDuration("DefaultExpiration"),
			},
			{
				Name:     "health_check",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("HealthCheck"),
			},
			{
				Name:     "readiness_check",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ReadinessCheck"),
			},
			{
				Name:     "liveness_check",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LivenessCheck"),
			},
			{
				Name:     "nobuild_files_regex",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NobuildFilesRegex"),
			},
			{
				Name:     "deployment",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Deployment"),
			},
			{
				Name:     "version_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VersionUrl"),
			},
			{
				Name:     "endpoints_api_service",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EndpointsApiService"),
			},
			{
				Name:     "entrypoint",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Entrypoint"),
			},
			{
				Name:     "vpc_access_connector",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("VpcAccessConnector"),
			},
		},

		Relations: []*schema.Table{
			Instances(),
		},
	}
}

func fetchVersions(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	c := meta.(*client.Client)
	req := &pb.ListVersionsRequest{
		Parent: parent.Item.(*pb.Service).Name,
	}
	gcpClient, err := appengine.NewVersionsClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListVersions(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
