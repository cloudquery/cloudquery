// Code generated by codegen; DO NOT EDIT.

package appengine

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/appengine/apiv1/appenginepb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/appengine/apiv1"
)

func Instances() *schema.Table {
	return &schema.Table{
		Name:        "gcp_appengine_instances",
		Description: `https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions.instances#Instance`,
		Resolver:    fetchInstances,
		Multiplex:   client.ProjectMultiplexEnabledServices("appengine.googleapis.com"),
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "app_engine_release",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AppEngineRelease"),
			},
			{
				Name:     "availability",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("Availability"),
			},
			{
				Name:     "vm_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VmName"),
			},
			{
				Name:     "vm_zone_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VmZoneName"),
			},
			{
				Name:     "vm_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VmId"),
			},
			{
				Name:     "start_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("StartTime"),
			},
			{
				Name:     "requests",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Requests"),
			},
			{
				Name:     "errors",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Errors"),
			},
			{
				Name:     "qps",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("Qps"),
			},
			{
				Name:     "average_latency",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("AverageLatency"),
			},
			{
				Name:     "memory_usage",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MemoryUsage"),
			},
			{
				Name:     "vm_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VmStatus"),
			},
			{
				Name:     "vm_debug_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("VmDebugEnabled"),
			},
			{
				Name:     "vm_ip",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("VmIp"),
			},
			{
				Name:     "vm_liveness",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("VmLiveness"),
			},
		},
	}
}

func fetchInstances(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	c := meta.(*client.Client)
	req := &pb.ListInstancesRequest{
		Parent: parent.Item.(*pb.Version).Name,
	}
	gcpClient, err := appengine.NewInstancesClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListInstances(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
