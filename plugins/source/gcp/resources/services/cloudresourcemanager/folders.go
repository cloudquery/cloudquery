// Code generated by codegen; DO NOT EDIT.

package cloudresourcemanager

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func Folders() *schema.Table {
	return &schema.Table{
		Name:      "gcp_cloudresourcemanager_folders",
		Resolver:  fetchFolders,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "policy",
				Type:     schema.TypeJSON,
				Resolver: resolveFolderPolicy,
			},
			{
				Name:     "create_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreateTime"),
			},
			{
				Name:     "delete_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DeleteTime"),
			},
			{
				Name:     "display_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DisplayName"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Etag"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "parent",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Parent"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "update_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UpdateTime"),
			},
		},
	}
}

func fetchFolders(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	output, err := c.Services.Cloudresourcemanager.Folders.List().Do()
	if err != nil {
		return errors.WithStack(err)
	}

	res <- output.Folders

	return nil
}
