// Code generated by codegen; DO NOT EDIT.

package bigquery

import (
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
)

func Tables() *schema.Table {
	return &schema.Table{
		Name:                "gcp_bigquery_tables",
		Resolver:            fetchTables,
		PreResourceResolver: tableGet,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "schema",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Schema"),
			},
			{
				Name:     "materialized_view",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MaterializedView"),
			},
			{
				Name:     "view_query",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ViewQuery"),
			},
			{
				Name:     "use_legacy_sql",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UseLegacySQL"),
			},
			{
				Name:     "use_standard_sql",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UseStandardSQL"),
			},
			{
				Name:     "time_partitioning",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("TimePartitioning"),
			},
			{
				Name:     "range_partitioning",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RangePartitioning"),
			},
			{
				Name:     "require_partition_filter",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequirePartitionFilter"),
			},
			{
				Name:     "clustering",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Clustering"),
			},
			{
				Name:     "expiration_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("ExpirationTime"),
			},
			{
				Name:     "labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Labels"),
			},
			{
				Name:     "external_data_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ExternalDataConfig"),
			},
			{
				Name:     "encryption_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EncryptionConfig"),
			},
			{
				Name:     "full_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FullID"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Type"),
			},
			{
				Name:     "creation_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreationTime"),
			},
			{
				Name:     "last_modified_time",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastModifiedTime"),
			},
			{
				Name:     "num_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NumBytes"),
			},
			{
				Name:     "num_long_term_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NumLongTermBytes"),
			},
			{
				Name:     "num_rows",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NumRows"),
			},
			{
				Name:     "snapshot_definition",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SnapshotDefinition"),
			},
			{
				Name:     "clone_definition",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CloneDefinition"),
			},
			{
				Name:     "streaming_buffer",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("StreamingBuffer"),
			},
			{
				Name:     "e_tag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ETag"),
			},
		},
	}
}
