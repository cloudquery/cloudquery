// Code generated by codegen; DO NOT EDIT.

package cloudiot

import (
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
)

func DeviceRegistries() *schema.Table {
	return &schema.Table{
		Name:        "gcp_cloudiot_device_registries",
		Description: `https://cloud.google.com/iot/docs/reference/cloudiot/rest/v1/projects.locations.registries#DeviceRegistry`,
		Resolver:    fetchDeviceRegistries,
		Multiplex:   client.ProjectMultiplexEnabledServices("cloudiot.googleapis.com"),
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "event_notification_configs",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("EventNotificationConfigs"),
			},
			{
				Name:     "state_notification_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("StateNotificationConfig"),
			},
			{
				Name:     "mqtt_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MqttConfig"),
			},
			{
				Name:     "http_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("HttpConfig"),
			},
			{
				Name:     "log_level",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("LogLevel"),
			},
			{
				Name:     "credentials",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Credentials"),
			},
		},

		Relations: []*schema.Table{
			Devices(),
		},
	}
}
