// Code generated by codegen; DO NOT EDIT.

package cloudiot

import (
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
)

func Devices() *schema.Table {
	return &schema.Table{
		Name:        "gcp_cloudiot_devices",
		Description: `https://cloud.google.com/iot/docs/reference/cloudiot/rest/v1/projects.locations.registries.devices#Device`,
		Resolver:    fetchDevices,
		Multiplex:   client.ProjectMultiplexEnabledServices("cloudiot.googleapis.com"),
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "num_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NumId"),
			},
			{
				Name:     "credentials",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Credentials"),
			},
			{
				Name:     "last_heartbeat_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("LastHeartbeatTime"),
			},
			{
				Name:     "last_event_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("LastEventTime"),
			},
			{
				Name:     "last_state_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("LastStateTime"),
			},
			{
				Name:     "last_config_ack_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("LastConfigAckTime"),
			},
			{
				Name:     "last_config_send_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("LastConfigSendTime"),
			},
			{
				Name:     "blocked",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Blocked"),
			},
			{
				Name:     "last_error_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("LastErrorTime"),
			},
			{
				Name:     "last_error_status",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LastErrorStatus"),
			},
			{
				Name:     "config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Config"),
			},
			{
				Name:     "state",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "log_level",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("LogLevel"),
			},
			{
				Name:     "metadata",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Metadata"),
			},
			{
				Name:     "gateway_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("GatewayConfig"),
			},
		},

		Relations: []*schema.Table{
			DeviceConfigs(), DeviceStates(),
		},
	}
}
