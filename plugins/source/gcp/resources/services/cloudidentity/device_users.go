// Code generated by codegen; DO NOT EDIT.

package cloudidentity

import (
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
)

func DeviceUsers() *schema.Table {
	return &schema.Table{
		Name:        "gcp_cloudidentity_device_users",
		Description: `https://cloud.google.com/identity/docs/reference/rest/v1/devices.deviceUsers#DeviceUser`,
		Resolver:    fetchDeviceUsers,
		Multiplex:   client.ProjectMultiplexEnabledServices("cloudidentity.googleapis.com"),
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "compromised_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CompromisedState"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreateTime"),
			},
			{
				Name:     "first_sync_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FirstSyncTime"),
			},
			{
				Name:     "language_code",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LanguageCode"),
			},
			{
				Name:     "last_sync_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LastSyncTime"),
			},
			{
				Name:     "management_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ManagementState"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "password_state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PasswordState"),
			},
			{
				Name:     "user_agent",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UserAgent"),
			},
			{
				Name:     "user_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UserEmail"),
			},
		},
	}
}
