// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"

	"google.golang.org/api/compute/v1"
)

func Subnetworks() *schema.Table {
	return &schema.Table{
		Name:      "gcp_compute_subnetworks",
		Resolver:  fetchSubnetworks,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "creation_timestamp",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreationTimestamp"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "enable_flow_logs",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnableFlowLogs"),
			},
			{
				Name:     "external_ipv_6_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalIpv6Prefix"),
			},
			{
				Name:     "fingerprint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Fingerprint"),
			},
			{
				Name:     "gateway_address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("GatewayAddress"),
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "internal_ipv_6_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InternalIpv6Prefix"),
			},
			{
				Name:     "ip_cidr_range",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IpCidrRange"),
			},
			{
				Name:     "ipv_6_access_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Ipv6AccessType"),
			},
			{
				Name:     "ipv_6_cidr_range",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Ipv6CidrRange"),
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "log_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LogConfig"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "network",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Network"),
			},
			{
				Name:     "private_ip_google_access",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PrivateIpGoogleAccess"),
			},
			{
				Name:     "private_ipv_6_google_access",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PrivateIpv6GoogleAccess"),
			},
			{
				Name:     "purpose",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Purpose"),
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Region"),
			},
			{
				Name:     "role",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Role"),
			},
			{
				Name:     "secondary_ip_ranges",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SecondaryIpRanges"),
			},
			{
				Name: "self_link",
				Type: schema.TypeString,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "stack_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StackType"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("State"),
			},
		},
	}
}

func fetchSubnetworks(ctx context.Context, meta schema.ClientMeta, r *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	nextPageToken := ""
	for {
		output, err := c.Services.Compute.Subnetworks.AggregatedList(c.ProjectId).PageToken(nextPageToken).Do()
		if err != nil {
			return errors.WithStack(err)
		}

		var allItems []*compute.Subnetwork
		for _, items := range output.Items {
			allItems = append(allItems, items.Subnetworks...)
		}
		res <- allItems

		if output.NextPageToken == "" {
			break
		}
		nextPageToken = output.NextPageToken
	}
	return nil
}
