// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"

	"google.golang.org/api/compute/v1"
)

func UrlMaps() *schema.Table {
	return &schema.Table{
		Name:      "gcp_compute_url_maps",
		Resolver:  fetchUrlMaps,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "creation_timestamp",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreationTimestamp"),
			},
			{
				Name:     "default_route_action",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultRouteAction"),
			},
			{
				Name:     "default_service",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultService"),
			},
			{
				Name:     "default_url_redirect",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultUrlRedirect"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "fingerprint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Fingerprint"),
			},
			{
				Name:     "header_action",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("HeaderAction"),
			},
			{
				Name:     "host_rules",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("HostRules"),
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "path_matchers",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PathMatchers"),
			},
			{
				Name:     "region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Region"),
			},
			{
				Name: "self_link",
				Type: schema.TypeString,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "tests",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Tests"),
			},
		},
	}
}

func fetchUrlMaps(ctx context.Context, meta schema.ClientMeta, r *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	nextPageToken := ""
	for {
		output, err := c.Services.Compute.UrlMaps.AggregatedList(c.ProjectId).PageToken(nextPageToken).Do()
		if err != nil {
			return errors.WithStack(err)
		}

		var allItems []*compute.UrlMap
		for _, items := range output.Items {
			allItems = append(allItems, items.UrlMaps...)
		}
		res <- allItems

		if output.NextPageToken == "" {
			break
		}
		nextPageToken = output.NextPageToken
	}
	return nil
}
