// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"context"
	"google.golang.org/api/iterator"

	pb "google.golang.org/genproto/googleapis/cloud/compute/v1"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/compute/apiv1"
)

func Firewalls() *schema.Table {
	return &schema.Table{
		Name:      "gcp_compute_firewalls",
		Resolver:  fetchFirewalls,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "allowed",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Allowed"),
			},
			{
				Name:     "creation_timestamp",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreationTimestamp"),
			},
			{
				Name:     "denied",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Denied"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "destination_ranges",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("DestinationRanges"),
			},
			{
				Name:     "direction",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Direction"),
			},
			{
				Name:     "disabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Disabled"),
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "kind",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Kind"),
			},
			{
				Name:     "log_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LogConfig"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "network",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Network"),
			},
			{
				Name:     "priority",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Priority"),
			},
			{
				Name:     "self_link",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SelfLink"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "source_ranges",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("SourceRanges"),
			},
			{
				Name:     "source_service_accounts",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("SourceServiceAccounts"),
			},
			{
				Name:     "source_tags",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("SourceTags"),
			},
			{
				Name:     "target_service_accounts",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("TargetServiceAccounts"),
			},
			{
				Name:     "target_tags",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("TargetTags"),
			},
		},
	}
}

func fetchFirewalls(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- any) error {
	c := meta.(*client.Client)
	req := &pb.ListFirewallsRequest{
		Project: c.ProjectId,
	}
	gcpClient, err := compute.NewFirewallsRESTClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.List(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
