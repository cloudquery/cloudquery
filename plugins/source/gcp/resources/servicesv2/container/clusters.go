// Code generated by codegen; DO NOT EDIT.

package container

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func Clusters() *schema.Table {
	return &schema.Table{
		Name:      "gcp_container_clusters",
		Resolver:  fetchClusters,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "addons_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AddonsConfig"),
			},
			{
				Name:     "authenticator_groups_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AuthenticatorGroupsConfig"),
			},
			{
				Name:     "autopilot",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Autopilot"),
			},
			{
				Name:     "autoscaling",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Autoscaling"),
			},
			{
				Name:     "binary_authorization",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BinaryAuthorization"),
			},
			{
				Name:     "cluster_ipv_4_cidr",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClusterIpv4Cidr"),
			},
			{
				Name:     "conditions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Conditions"),
			},
			{
				Name:     "confidential_nodes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ConfidentialNodes"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreateTime"),
			},
			{
				Name:     "current_master_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CurrentMasterVersion"),
			},
			{
				Name:     "current_node_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CurrentNodeCount"),
			},
			{
				Name:     "current_node_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CurrentNodeVersion"),
			},
			{
				Name:     "database_encryption",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DatabaseEncryption"),
			},
			{
				Name:     "default_max_pods_constraint",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DefaultMaxPodsConstraint"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "enable_kubernetes_alpha",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnableKubernetesAlpha"),
			},
			{
				Name:     "enable_tpu",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnableTpu"),
			},
			{
				Name:     "endpoint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Endpoint"),
			},
			{
				Name:     "expire_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExpireTime"),
			},
			{
				Name:     "id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Id"),
			},
			{
				Name:     "identity_service_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("IdentityServiceConfig"),
			},
			{
				Name:     "initial_cluster_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InitialClusterVersion"),
			},
			{
				Name:     "initial_node_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("InitialNodeCount"),
			},
			{
				Name:     "instance_group_urls",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("InstanceGroupUrls"),
			},
			{
				Name:     "ip_allocation_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("IpAllocationPolicy"),
			},
			{
				Name:     "label_fingerprint",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LabelFingerprint"),
			},
			{
				Name:     "legacy_abac",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LegacyAbac"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "locations",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Locations"),
			},
			{
				Name:     "logging_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LoggingConfig"),
			},
			{
				Name:     "logging_service",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LoggingService"),
			},
			{
				Name:     "maintenance_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MaintenancePolicy"),
			},
			{
				Name:     "master_auth",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MasterAuth"),
			},
			{
				Name:     "master_authorized_networks_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MasterAuthorizedNetworksConfig"),
			},
			{
				Name:     "mesh_certificates",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MeshCertificates"),
			},
			{
				Name:     "monitoring_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MonitoringConfig"),
			},
			{
				Name:     "monitoring_service",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MonitoringService"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "network",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Network"),
			},
			{
				Name:     "network_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NetworkConfig"),
			},
			{
				Name:     "network_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NetworkPolicy"),
			},
			{
				Name:     "node_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodeConfig"),
			},
			{
				Name:     "node_ipv_4_cidr_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NodeIpv4CidrSize"),
			},
			{
				Name:     "node_pool_auto_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodePoolAutoConfig"),
			},
			{
				Name:     "node_pool_defaults",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodePoolDefaults"),
			},
			{
				Name:     "node_pools",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodePools"),
			},
			{
				Name:     "notification_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NotificationConfig"),
			},
			{
				Name:     "private_cluster_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("PrivateClusterConfig"),
			},
			{
				Name:     "release_channel",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ReleaseChannel"),
			},
			{
				Name:     "resource_labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResourceLabels"),
			},
			{
				Name:     "resource_usage_export_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResourceUsageExportConfig"),
			},
			{
				Name:     "self_link",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SelfLink"),
			},
			{
				Name:     "services_ipv_4_cidr",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ServicesIpv4Cidr"),
			},
			{
				Name:     "shielded_nodes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ShieldedNodes"),
			},
			{
				Name:     "status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "status_message",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("StatusMessage"),
			},
			{
				Name:     "subnetwork",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Subnetwork"),
			},
			{
				Name:     "tpu_ipv_4_cidr_block",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("TpuIpv4CidrBlock"),
			},
			{
				Name:     "vertical_pod_autoscaling",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("VerticalPodAutoscaling"),
			},
			{
				Name:     "workload_identity_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("WorkloadIdentityConfig"),
			},
			{
				Name:     "zone",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Zone"),
			},
		},
	}
}

func fetchClusters(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	output, err := c.Services.Container.Projects.Locations.Clusters.List("projects/" + c.ProjectId + "/locations/-").Do()
	if err != nil {
		return errors.WithStack(err)
	}

	res <- output
	return nil
}
