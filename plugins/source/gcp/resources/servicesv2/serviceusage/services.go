// Code generated by codegen; DO NOT EDIT.

package serviceusage

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func Services() *schema.Table {
	return &schema.Table{
		Name:      "gcp_serviceusage_services",
		Resolver:  fetchServices,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "client",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("client"),
			},
			{
				Name:     "base_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BasePath"),
			},
			{
				Name:     "user_agent",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UserAgent"),
			},
			{
				Name:     "operations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Operations"),
			},
			{
				Name:     "services",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Services"),
			},
		},
	}
}

func fetchServices(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	nextPageToken := ""
	for {
		output, err := c.Services.ServiceUsage.Services.List("projects/" + c.ProjectId).PageToken(nextPageToken).Do()
		if err != nil {
			return errors.WithStack(err)
		}
		res <- output.Services

		if output.NextPageToken == "" {
			break
		}
		nextPageToken = output.NextPageToken
	}
	return nil
}
