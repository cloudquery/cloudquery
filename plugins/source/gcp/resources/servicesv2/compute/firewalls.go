// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func ComputeFirewalls() *schema.Table {
	return &schema.Table{
		Name:      "gcp_compute_firewalls",
		Resolver:  fetchComputeFirewalls,
		Multiplex: client.ProjectMultiplex,
		Options: schema.TableCreationOptions{
			PrimaryKeys: []string{
				"project_id",
				"id",
			},
		},
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name: "allowed",
				Type: schema.TypeJSON,
			},
			{
				Name: "creation_timestamp",
				Type: schema.TypeString,
			},
			{
				Name: "denied",
				Type: schema.TypeJSON,
			},
			{
				Name: "description",
				Type: schema.TypeString,
			},
			{
				Name: "destination_ranges",
				Type: schema.TypeStringArray,
			},
			{
				Name: "direction",
				Type: schema.TypeString,
			},
			{
				Name: "disabled",
				Type: schema.TypeBool,
			},
			{
				Name: "id",
				Type: schema.TypeInt,
			},
			{
				Name: "kind",
				Type: schema.TypeString,
			},
			{
				Name: "log_config",
				Type: schema.TypeJSON,
			},
			{
				Name: "name",
				Type: schema.TypeString,
			},
			{
				Name: "network",
				Type: schema.TypeString,
			},
			{
				Name: "priority",
				Type: schema.TypeInt,
			},
			{
				Name: "self_link",
				Type: schema.TypeString,
			},
			{
				Name: "source_ranges",
				Type: schema.TypeStringArray,
			},
			{
				Name: "source_service_accounts",
				Type: schema.TypeStringArray,
			},
			{
				Name: "source_tags",
				Type: schema.TypeStringArray,
			},
			{
				Name: "target_service_accounts",
				Type: schema.TypeStringArray,
			},
			{
				Name: "target_tags",
				Type: schema.TypeStringArray,
			},
		},
	}
}

func fetchComputeFirewalls(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	nextPageToken := ""
	for {
		output, err := c.Services.Compute.Firewalls.List(c.ProjectId).PageToken(nextPageToken).Do()
		if err != nil {
			return errors.WithStack(err)
		}
		res <- output.Items

		if output.NextPageToken == "" {
			break
		}
		nextPageToken = output.NextPageToken
	}
	return nil
}
