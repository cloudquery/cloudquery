// Code generated by codegen; DO NOT EDIT.

package compute

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func ComputeInterconnects() *schema.Table {
	return &schema.Table{
		Name:      "gcp_compute_interconnects",
		Resolver:  fetchComputeInterconnects,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name: "admin_enabled",
				Type: schema.TypeBool,
			},
			{
				Name: "circuit_infos",
				Type: schema.TypeJSON,
			},
			{
				Name: "creation_timestamp",
				Type: schema.TypeString,
			},
			{
				Name: "customer_name",
				Type: schema.TypeString,
			},
			{
				Name: "description",
				Type: schema.TypeString,
			},
			{
				Name: "expected_outages",
				Type: schema.TypeJSON,
			},
			{
				Name: "google_ip_address",
				Type: schema.TypeString,
			},
			{
				Name: "google_reference_id",
				Type: schema.TypeString,
			},
			{
				Name: "id",
				Type: schema.TypeInt,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name: "interconnect_attachments",
				Type: schema.TypeStringArray,
			},
			{
				Name: "interconnect_type",
				Type: schema.TypeString,
			},
			{
				Name: "kind",
				Type: schema.TypeString,
			},
			{
				Name: "link_type",
				Type: schema.TypeString,
			},
			{
				Name: "location",
				Type: schema.TypeString,
			},
			{
				Name: "name",
				Type: schema.TypeString,
			},
			{
				Name: "noc_contact_email",
				Type: schema.TypeString,
			},
			{
				Name: "operational_status",
				Type: schema.TypeString,
			},
			{
				Name: "peer_ip_address",
				Type: schema.TypeString,
			},
			{
				Name: "provisioned_link_count",
				Type: schema.TypeInt,
			},
			{
				Name: "requested_link_count",
				Type: schema.TypeInt,
			},
			{
				Name: "satisfies_pzs",
				Type: schema.TypeBool,
			},
			{
				Name: "self_link",
				Type: schema.TypeString,
			},
			{
				Name: "state",
				Type: schema.TypeString,
			},
		},
	}
}

func fetchComputeInterconnects(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	nextPageToken := ""
	for {
		output, err := c.Services.Compute.Interconnects.List(c.ProjectId).PageToken(nextPageToken).Do()
		if err != nil {
			return errors.WithStack(err)
		}
		res <- output.Items

		if output.NextPageToken == "" {
			break
		}
		nextPageToken = output.NextPageToken
	}
	return nil
}
