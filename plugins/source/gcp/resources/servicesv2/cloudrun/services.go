// Code generated by codegen; DO NOT EDIT.

package cloudrun

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func Services() *schema.Table {
	return &schema.Table{
		Name:      "gcp_cloudfunctions_functions",
		Resolver:  fetchServices,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name: "api_version",
				Type: schema.TypeString,
			},
			{
				Name: "kind",
				Type: schema.TypeString,
			},
			{
				Name: "metadata",
				Type: schema.TypeJSON,
			},
			{
				Name: "spec",
				Type: schema.TypeJSON,
			},
			{
				Name: "status",
				Type: schema.TypeJSON,
			},
			{
				Name: "server_response",
				Type: schema.TypeJSON,
			},
			{
				Name: "force_send_fields",
				Type: schema.TypeStringArray,
			},
			{
				Name: "null_fields",
				Type: schema.TypeStringArray,
			},
		},
	}
}

func fetchServices(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	var nextPageToken string
	for {
		call := c.Services.CloudRun.Projects.Locations.Services.List("projects/" + c.ProjectId + "/locations/-").Continue(nextPageToken)
		output, err := call.Do()
		if err != nil {
			return errors.WithStack(err)
		}
		if output.Items == nil {
			return nil
		}

		res <- output.Items
		if output.Metadata == nil || output.Metadata.Continue == "" {
			break
		}
		nextPageToken = output.Metadata.Continue
	}
	return nil
}
