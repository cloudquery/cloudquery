// Code generated by codegen; DO NOT EDIT.

package cloudfunctions

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func CloudFunctions() *schema.Table {
	return &schema.Table{
		Name:      "gcp_cloudfunctions_functions",
		Resolver:  fetchCloudFunctions,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name: "available_memory_mb",
				Type: schema.TypeInt,
			},
			{
				Name: "build_environment_variables",
				Type: schema.TypeJSON,
			},
			{
				Name: "build_id",
				Type: schema.TypeString,
			},
			{
				Name: "build_name",
				Type: schema.TypeString,
			},
			{
				Name: "build_worker_pool",
				Type: schema.TypeString,
			},
			{
				Name: "description",
				Type: schema.TypeString,
			},
			{
				Name: "docker_registry",
				Type: schema.TypeString,
			},
			{
				Name: "docker_repository",
				Type: schema.TypeString,
			},
			{
				Name: "entry_point",
				Type: schema.TypeString,
			},
			{
				Name: "environment_variables",
				Type: schema.TypeJSON,
			},
			{
				Name: "event_trigger",
				Type: schema.TypeJSON,
			},
			{
				Name: "https_trigger",
				Type: schema.TypeJSON,
			},
			{
				Name: "ingress_settings",
				Type: schema.TypeString,
			},
			{
				Name: "kms_key_name",
				Type: schema.TypeString,
			},
			{
				Name: "labels",
				Type: schema.TypeJSON,
			},
			{
				Name: "max_instances",
				Type: schema.TypeInt,
			},
			{
				Name: "min_instances",
				Type: schema.TypeInt,
			},
			{
				Name: "name",
				Type: schema.TypeString,
			},
			{
				Name: "network",
				Type: schema.TypeString,
			},
			{
				Name: "runtime",
				Type: schema.TypeString,
			},
			{
				Name: "secret_environment_variables",
				Type: schema.TypeJSON,
			},
			{
				Name: "secret_volumes",
				Type: schema.TypeJSON,
			},
			{
				Name: "service_account_email",
				Type: schema.TypeString,
			},
			{
				Name: "source_archive_url",
				Type: schema.TypeString,
			},
			{
				Name: "source_repository",
				Type: schema.TypeJSON,
			},
			{
				Name: "source_token",
				Type: schema.TypeString,
			},
			{
				Name: "source_upload_url",
				Type: schema.TypeString,
			},
			{
				Name: "status",
				Type: schema.TypeString,
			},
			{
				Name: "timeout",
				Type: schema.TypeString,
			},
			{
				Name: "update_time",
				Type: schema.TypeString,
			},
			{
				Name: "version_id",
				Type: schema.TypeInt,
			},
			{
				Name: "vpc_connector",
				Type: schema.TypeString,
			},
			{
				Name: "vpc_connector_egress_settings",
				Type: schema.TypeString,
			},
			{
				Name: "server_response",
				Type: schema.TypeJSON,
			},
			{
				Name: "force_send_fields",
				Type: schema.TypeStringArray,
			},
			{
				Name: "null_fields",
				Type: schema.TypeStringArray,
			},
		},
	}
}

func fetchCloudFunctions(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	var nextPageToken string
	for {
		call := c.Services.ListFunction("projects/" + c.ProjectId + "/locations/-").Continue(nextPageToken)
		output, err := call.Do()
		if err != nil {
			return errors.WithStack(err)
		}
		if output.Items == nil {
			return nil
		}

		res <- output.Items
		if output.Metadata == nil || output.Metadata.Continue == "" {
			break
		}
		nextPageToken = output.Metadata.Continue
	}
	return nil
}
