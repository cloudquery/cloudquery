// Code generated by codegen; DO NOT EDIT.

package logging

import (
	"context"
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"
	"github.com/pkg/errors"
)

func Sinks() *schema.Table {
	return &schema.Table{
		Name:      "gcp_logging_sinks",
		Resolver:  fetchSinks,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "bigquery_options",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("BigqueryOptions"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CreateTime"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "destination",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Destination"),
			},
			{
				Name:     "disabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Disabled"),
			},
			{
				Name:     "exclusions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Exclusions"),
			},
			{
				Name:     "filter",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Filter"),
			},
			{
				Name:     "include_children",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IncludeChildren"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "output_version_format",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OutputVersionFormat"),
			},
			{
				Name:     "update_time",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UpdateTime"),
			},
			{
				Name:     "writer_identity",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WriterIdentity"),
			},
		},
	}
}

func fetchSinks(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	nextPageToken := ""
	for {
		output, err := c.Services.Logging.Sinks.List("projects/" + c.ProjectId).PageToken(nextPageToken).Do()
		if err != nil {
			return errors.WithStack(err)
		}
		res <- output.Sinks

		if output.NextPageToken == "" {
			break
		}
		nextPageToken = output.NextPageToken
	}
	return nil
}
