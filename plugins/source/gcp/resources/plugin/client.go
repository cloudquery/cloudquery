package plugin

import (
	"context"
	"encoding/json"

	"github.com/cloudquery/plugin-sdk/v4/message"
	"github.com/cloudquery/plugin-sdk/v4/plugin"
	"github.com/cloudquery/plugin-sdk/v4/scheduler"
	"github.com/cloudquery/plugin-sdk/v4/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"github.com/rs/zerolog"
)

type Client struct {
	plugin.UnimplementedDestination
	schduler *scheduler.Scheduler
}

func NewClient(ctx context.Context, logger zerolog.Logger, specBytes []byte) (plugin.Client, error) {
	c := &Client{}
	spec := client.Spec{}
	if err := json.Unmarshal(specBytes, &spec); err != nil {
		return nil, err
	}
	schdulerClient, err := client.New(ctx, logger, spec)
	if err != nil {
		return nil, err
	}
	c.schduler = scheduler.NewScheduler(schdulerClient, scheduler.WithLogger(logger))
	return c, nil
}

func (c *Client) Close(ctx context.Context) error {
	return nil
}

func (c *Client) Tables(ctx context.Context) (schema.Tables, error) {
	allTables := PluginAutoGeneratedTables()
	return allTables, nil
}

func (c *Client) Sync(ctx context.Context, options plugin.SyncOptions, res chan<- message.Message) error {
	tables := PluginAutoGeneratedTables()
	tables, err := tables.FilterDfs(options.Tables, options.SkipTables, false)
	if err != nil {
		return err
	}
	return c.schduler.Sync(ctx, tables, res)
}
