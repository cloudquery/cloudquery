// Code generated by codegen; DO NOT EDIT.

package settings

import (
	"github.com/cloudquery/cloudquery/plugins/source/gitlab/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Settings() *schema.Table {
	return &schema.Table{
		Name:     "gitlab_settings",
		Resolver: fetchSettings,
		Columns: []schema.Column{
			{
				Name:     "base_url",
				Type:     schema.TypeString,
				Resolver: client.ResolveURL,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "abuse_notification_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AbuseNotificationEmail"),
			},
			{
				Name:     "admin_mode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AdminMode"),
			},
			{
				Name:     "admin_notification_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AdminNotificationEmail"),
			},
			{
				Name:     "after_sign_out_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AfterSignOutPath"),
			},
			{
				Name:     "after_sign_up_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AfterSignUpText"),
			},
			{
				Name:     "akismet_api_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AkismetAPIKey"),
			},
			{
				Name:     "akismet_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AkismetEnabled"),
			},
			{
				Name:     "allow_group_owners_to_manage_ldap",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AllowGroupOwnersToManageLDAP"),
			},
			{
				Name:     "allow_local_requests_from_hooks_and_services",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AllowLocalRequestsFromHooksAndServices"),
			},
			{
				Name:     "allow_local_requests_from_system_hooks",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AllowLocalRequestsFromSystemHooks"),
			},
			{
				Name:     "allow_local_requests_from_web_hooks_and_services",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AllowLocalRequestsFromWebHooksAndServices"),
			},
			{
				Name:     "archive_builds_in_human_readable",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ArchiveBuildsInHumanReadable"),
			},
			{
				Name:     "asset_proxy_allowlist",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AssetProxyAllowlist"),
			},
			{
				Name:     "asset_proxy_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AssetProxyEnabled"),
			},
			{
				Name:     "asset_proxy_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AssetProxyURL"),
			},
			{
				Name:     "asset_proxy_secret_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AssetProxySecretKey"),
			},
			{
				Name:     "asset_proxy_whitelist",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AssetProxyWhitelist"),
			},
			{
				Name:     "authorized_keys_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AuthorizedKeysEnabled"),
			},
			{
				Name:     "auto_devops_domain",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AutoDevOpsDomain"),
			},
			{
				Name:     "auto_devops_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoDevOpsEnabled"),
			},
			{
				Name:     "automatic_purchased_storage_allocation",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutomaticPurchasedStorageAllocation"),
			},
			{
				Name:     "check_namespace_plan",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CheckNamespacePlan"),
			},
			{
				Name:     "commit_email_hostname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CommitEmailHostname"),
			},
			{
				Name:     "container_expiration_policies_enable_historic_entries",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ContainerExpirationPoliciesEnableHistoricEntries"),
			},
			{
				Name:     "container_registry_cleanup_tags_service_max_list_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryCleanupTagsServiceMaxListSize"),
			},
			{
				Name:     "container_registry_delete_tags_service_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryDeleteTagsServiceTimeout"),
			},
			{
				Name:     "container_registry_expiration_policies_caching",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ContainerRegistryExpirationPoliciesCaching"),
			},
			{
				Name:     "container_registry_expiration_policies_worker_capacity",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryExpirationPoliciesWorkerCapacity"),
			},
			{
				Name:     "container_registry_import_created_before",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("ContainerRegistryImportCreatedBefore"),
			},
			{
				Name:     "container_registry_import_max_retries",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryImportMaxRetries"),
			},
			{
				Name:     "container_registry_import_max_step_duration",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryImportMaxStepDuration"),
			},
			{
				Name:     "container_registry_import_max_tags_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryImportMaxTagsCount"),
			},
			{
				Name:     "container_registry_import_start_max_retries",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryImportStartMaxRetries"),
			},
			{
				Name:     "container_registry_import_target_plan",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ContainerRegistryImportTargetPlan"),
			},
			{
				Name:     "container_registry_token_expire_delay",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ContainerRegistryTokenExpireDelay"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "custom_http_clone_url_root",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CustomHTTPCloneURLRoot"),
			},
			{
				Name:     "dns_rebinding_protection_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DNSRebindingProtectionEnabled"),
			},
			{
				Name:     "dsa_key_restriction",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DSAKeyRestriction"),
			},
			{
				Name:     "deactivate_dormant_users",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DeactivateDormantUsers"),
			},
			{
				Name:     "default_artifacts_expire_in",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultArtifactsExpireIn"),
			},
			{
				Name:     "default_branch_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultBranchName"),
			},
			{
				Name:     "default_branch_protection",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DefaultBranchProtection"),
			},
			{
				Name:     "default_ci_config_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultCiConfigPath"),
			},
			{
				Name:     "default_group_visibility",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultGroupVisibility"),
			},
			{
				Name:     "default_project_creation",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DefaultProjectCreation"),
			},
			{
				Name:     "default_project_deletion_protection",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DefaultProjectDeletionProtection"),
			},
			{
				Name:     "default_project_visibility",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultProjectVisibility"),
			},
			{
				Name:     "default_projects_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DefaultProjectsLimit"),
			},
			{
				Name:     "default_snippet_visibility",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultSnippetVisibility"),
			},
			{
				Name:     "delayed_group_deletion",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DelayedGroupDeletion"),
			},
			{
				Name:     "delayed_project_deletion",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DelayedProjectDeletion"),
			},
			{
				Name:     "delete_inactive_projects",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DeleteInactiveProjects"),
			},
			{
				Name:     "deletion_adjourned_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DeletionAdjournedPeriod"),
			},
			{
				Name:     "diff_max_files",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DiffMaxFiles"),
			},
			{
				Name:     "diff_max_lines",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DiffMaxLines"),
			},
			{
				Name:     "diff_max_patch_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DiffMaxPatchBytes"),
			},
			{
				Name:     "disable_feed_token",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DisableFeedToken"),
			},
			{
				Name:     "disable_overriding_approvers_per_merge_request",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DisableOverridingApproversPerMergeRequest"),
			},
			{
				Name:     "disabled_oauth_sign_in_sources",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("DisabledOauthSignInSources"),
			},
			{
				Name:     "domain_allowlist",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("DomainAllowlist"),
			},
			{
				Name:     "domain_denylist",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("DomainDenylist"),
			},
			{
				Name:     "domain_denylist_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("DomainDenylistEnabled"),
			},
			{
				Name:     "ecdsa_key_restriction",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ECDSAKeyRestriction"),
			},
			{
				Name:     "ecdsa_sk_key_restriction",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ECDSASKKeyRestriction"),
			},
			{
				Name:     "eks_access_key_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EKSAccessKeyID"),
			},
			{
				Name:     "eks_account_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EKSAccountID"),
			},
			{
				Name:     "eks_integration_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EKSIntegrationEnabled"),
			},
			{
				Name:     "eks_secret_access_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EKSSecretAccessKey"),
			},
			{
				Name:     "ed25519_key_restriction",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Ed25519KeyRestriction"),
			},
			{
				Name:     "ed25519_sk_key_restriction",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Ed25519SKKeyRestriction"),
			},
			{
				Name:     "elasticsearch_aws",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchAWS"),
			},
			{
				Name:     "elasticsearch_aws_access_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ElasticsearchAWSAccessKey"),
			},
			{
				Name:     "elasticsearch_aws_region",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ElasticsearchAWSRegion"),
			},
			{
				Name:     "elasticsearch_aws_secret_access_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ElasticsearchAWSSecretAccessKey"),
			},
			{
				Name:     "elasticsearch_analyzers_kuromoji_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchAnalyzersKuromojiEnabled"),
			},
			{
				Name:     "elasticsearch_analyzers_kuromoji_search",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchAnalyzersKuromojiSearch"),
			},
			{
				Name:     "elasticsearch_analyzers_smartcn_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchAnalyzersSmartCNEnabled"),
			},
			{
				Name:     "elasticsearch_analyzers_smartcn_search",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchAnalyzersSmartCNSearch"),
			},
			{
				Name:     "elasticsearch_client_request_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchClientRequestTimeout"),
			},
			{
				Name:     "elasticsearch_indexed_field_length_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchIndexedFieldLengthLimit"),
			},
			{
				Name:     "elasticsearch_indexed_file_size_limit_kb",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchIndexedFileSizeLimitKB"),
			},
			{
				Name:     "elasticsearch_indexing",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchIndexing"),
			},
			{
				Name:     "elasticsearch_limit_indexing",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchLimitIndexing"),
			},
			{
				Name:     "elasticsearch_max_bulk_concurrency",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchMaxBulkConcurrency"),
			},
			{
				Name:     "elasticsearch_max_bulk_size_mb",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchMaxBulkSizeMB"),
			},
			{
				Name:     "elasticsearch_namespace_ids",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("ElasticsearchNamespaceIDs"),
			},
			{
				Name:     "elasticsearch_password",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ElasticsearchPassword"),
			},
			{
				Name:     "elasticsearch_pause_indexing",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchPauseIndexing"),
			},
			{
				Name:     "elasticsearch_project_ids",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("ElasticsearchProjectIDs"),
			},
			{
				Name:     "elasticsearch_replicas",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchReplicas"),
			},
			{
				Name:     "elasticsearch_search",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ElasticsearchSearch"),
			},
			{
				Name:     "elasticsearch_shards",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ElasticsearchShards"),
			},
			{
				Name:     "elasticsearch_url",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("ElasticsearchURL"),
			},
			{
				Name:     "elasticsearch_username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ElasticsearchUsername"),
			},
			{
				Name:     "email_additional_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EmailAdditionalText"),
			},
			{
				Name:     "email_author_in_body",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EmailAuthorInBody"),
			},
			{
				Name:     "email_restrictions",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EmailRestrictions"),
			},
			{
				Name:     "email_restrictions_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EmailRestrictionsEnabled"),
			},
			{
				Name:     "enabled_git_access_protocol",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("EnabledGitAccessProtocol"),
			},
			{
				Name:     "enforce_namespace_storage_limit",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnforceNamespaceStorageLimit"),
			},
			{
				Name:     "enforce_pat_expiration",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnforcePATExpiration"),
			},
			{
				Name:     "enforce_ssh_key_expiration",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnforceSSHKeyExpiration"),
			},
			{
				Name:     "enforce_terms",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnforceTerms"),
			},
			{
				Name:     "external_auth_client_cert",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalAuthClientCert"),
			},
			{
				Name:     "external_auth_client_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalAuthClientKey"),
			},
			{
				Name:     "external_auth_client_key_pass",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalAuthClientKeyPass"),
			},
			{
				Name:     "external_authorization_service_default_label",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalAuthorizationServiceDefaultLabel"),
			},
			{
				Name:     "external_authorization_service_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ExternalAuthorizationServiceEnabled"),
			},
			{
				Name:     "external_authorization_service_timeout",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("ExternalAuthorizationServiceTimeout"),
			},
			{
				Name:     "external_authorization_service_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalAuthorizationServiceURL"),
			},
			{
				Name:     "external_pipeline_validation_service_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ExternalPipelineValidationServiceTimeout"),
			},
			{
				Name:     "external_pipeline_validation_service_token",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalPipelineValidationServiceToken"),
			},
			{
				Name:     "external_pipeline_validation_service_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalPipelineValidationServiceURL"),
			},
			{
				Name:     "file_template_project_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("FileTemplateProjectID"),
			},
			{
				Name:     "first_day_of_week",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("FirstDayOfWeek"),
			},
			{
				Name:     "floc_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("FlocEnabled"),
			},
			{
				Name:     "geo_node_allowed_ips",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("GeoNodeAllowedIPs"),
			},
			{
				Name:     "geo_status_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GeoStatusTimeout"),
			},
			{
				Name:     "git_two_factor_session_expiry",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GitTwoFactorSessionExpiry"),
			},
			{
				Name:     "gitaly_timeout_default",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GitalyTimeoutDefault"),
			},
			{
				Name:     "gitaly_timeout_fast",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GitalyTimeoutFast"),
			},
			{
				Name:     "gitaly_timeout_medium",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GitalyTimeoutMedium"),
			},
			{
				Name:     "gitpod_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("GitpodEnabled"),
			},
			{
				Name:     "gitpod_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("GitpodURL"),
			},
			{
				Name:     "git_rate_limit_users_allowlist",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("GitRateLimitUsersAllowlist"),
			},
			{
				Name:     "grafana_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("GrafanaEnabled"),
			},
			{
				Name:     "grafana_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("GrafanaURL"),
			},
			{
				Name:     "gravatar_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("GravatarEnabled"),
			},
			{
				Name:     "group_download_export_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupDownloadExportLimit"),
			},
			{
				Name:     "group_export_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupExportLimit"),
			},
			{
				Name:     "group_import_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupImportLimit"),
			},
			{
				Name:     "group_owners_can_manage_default_branch_protection",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("GroupOwnersCanManageDefaultBranchProtection"),
			},
			{
				Name:     "group_runner_token_expiration_interval",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("GroupRunnerTokenExpirationInterval"),
			},
			{
				Name:     "html_emails_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HTMLEmailsEnabled"),
			},
			{
				Name:     "hashed_storage_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HashedStorageEnabled"),
			},
			{
				Name:     "help_page_documentation_base_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HelpPageDocumentationBaseURL"),
			},
			{
				Name:     "help_page_hide_commercial_content",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HelpPageHideCommercialContent"),
			},
			{
				Name:     "help_page_support_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HelpPageSupportURL"),
			},
			{
				Name:     "help_page_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HelpPageText"),
			},
			{
				Name:     "help_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HelpText"),
			},
			{
				Name:     "hide_third_party_offers",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HideThirdPartyOffers"),
			},
			{
				Name:     "home_page_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HomePageURL"),
			},
			{
				Name:     "housekeeping_bitmaps_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HousekeepingBitmapsEnabled"),
			},
			{
				Name:     "housekeeping_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("HousekeepingEnabled"),
			},
			{
				Name:     "housekeeping_full_repack_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("HousekeepingFullRepackPeriod"),
			},
			{
				Name:     "housekeeping_gc_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("HousekeepingGcPeriod"),
			},
			{
				Name:     "housekeeping_incremental_repack_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("HousekeepingIncrementalRepackPeriod"),
			},
			{
				Name:     "import_sources",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("ImportSources"),
			},
			{
				Name:     "inactive_projects_delete_after_months",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("InactiveProjectsDeleteAfterMonths"),
			},
			{
				Name:     "inactive_projects_min_size_mb",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("InactiveProjectsMinSizeMB"),
			},
			{
				Name:     "inactive_projects_send_warning_email_after_months",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("InactiveProjectsSendWarningEmailAfterMonths"),
			},
			{
				Name:     "in_product_marketing_emails_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("InProductMarketingEmailsEnabled"),
			},
			{
				Name:     "invisible_captcha_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("InvisibleCaptchaEnabled"),
			},
			{
				Name:     "issues_create_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("IssuesCreateLimit"),
			},
			{
				Name:     "keep_latest_artifact",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("KeepLatestArtifact"),
			},
			{
				Name:     "kroki_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("KrokiEnabled"),
			},
			{
				Name:     "kroki_formats",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("KrokiFormats"),
			},
			{
				Name:     "kroki_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("KrokiURL"),
			},
			{
				Name:     "local_markdown_version",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("LocalMarkdownVersion"),
			},
			{
				Name:     "lock_memberships_to_ldap",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("LockMembershipsToLDAP"),
			},
			{
				Name:     "login_recaptcha_protection_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("LoginRecaptchaProtectionEnabled"),
			},
			{
				Name:     "mailgun_events_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MailgunEventsEnabled"),
			},
			{
				Name:     "mailgun_signing_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MailgunSigningKey"),
			},
			{
				Name:     "maintenance_mode",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MaintenanceMode"),
			},
			{
				Name:     "maintenance_mode_message",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MaintenanceModeMessage"),
			},
			{
				Name:     "max_artifacts_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxArtifactsSize"),
			},
			{
				Name:     "max_attachment_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxAttachmentSize"),
			},
			{
				Name:     "max_export_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxExportSize"),
			},
			{
				Name:     "max_import_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxImportSize"),
			},
			{
				Name:     "max_number_of_repository_downloads",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxNumberOfRepositoryDownloads"),
			},
			{
				Name:     "max_number_of_repository_downloads_within_time_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxNumberOfRepositoryDownloadsWithinTimePeriod"),
			},
			{
				Name:     "max_pages_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxPagesSize"),
			},
			{
				Name:     "max_personal_access_token_lifetime",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxPersonalAccessTokenLifetime"),
			},
			{
				Name:     "max_ssh_key_lifetime",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxSSHKeyLifetime"),
			},
			{
				Name:     "max_yaml_depth",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxYAMLDepth"),
			},
			{
				Name:     "max_yaml_size_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MaxYAMLSizeBytes"),
			},
			{
				Name:     "metrics_method_call_threshold",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MetricsMethodCallThreshold"),
			},
			{
				Name:     "minimum_password_length",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MinimumPasswordLength"),
			},
			{
				Name:     "mirror_available",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MirrorAvailable"),
			},
			{
				Name:     "mirror_capacity_threshold",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MirrorCapacityThreshold"),
			},
			{
				Name:     "mirror_max_capacity",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MirrorMaxCapacity"),
			},
			{
				Name:     "mirror_max_delay",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MirrorMaxDelay"),
			},
			{
				Name:     "npm_package_requests_forwarding",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("NPMPackageRequestsForwarding"),
			},
			{
				Name:     "notes_create_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NotesCreateLimit"),
			},
			{
				Name:     "notify_on_unknown_sign_in",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("NotifyOnUnknownSignIn"),
			},
			{
				Name:     "outbound_local_requests_allowlist_raw",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OutboundLocalRequestsAllowlistRaw"),
			},
			{
				Name:     "outbound_local_requests_whitelist",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("OutboundLocalRequestsWhitelist"),
			},
			{
				Name:     "package_registry_cleanup_policies_worker_capacity",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PackageRegistryCleanupPoliciesWorkerCapacity"),
			},
			{
				Name:     "pages_domain_verification_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PagesDomainVerificationEnabled"),
			},
			{
				Name:     "password_authentication_enabled_for_git",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PasswordAuthenticationEnabledForGit"),
			},
			{
				Name:     "password_authentication_enabled_for_web",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PasswordAuthenticationEnabledForWeb"),
			},
			{
				Name:     "password_number_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PasswordNumberRequired"),
			},
			{
				Name:     "password_symbol_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PasswordSymbolRequired"),
			},
			{
				Name:     "password_uppercase_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PasswordUppercaseRequired"),
			},
			{
				Name:     "password_lowercase_required",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PasswordLowercaseRequired"),
			},
			{
				Name:     "performance_bar_allowed_group_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PerformanceBarAllowedGroupID"),
			},
			{
				Name:     "performance_bar_allowed_group_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PerformanceBarAllowedGroupPath"),
			},
			{
				Name:     "performance_bar_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PerformanceBarEnabled"),
			},
			{
				Name:     "personal_access_token_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PersonalAccessTokenPrefix"),
			},
			{
				Name:     "pipeline_limit_per_project_user_sha",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PipelineLimitPerProjectUserSha"),
			},
			{
				Name:     "plantuml_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PlantumlEnabled"),
			},
			{
				Name:     "plantuml_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PlantumlURL"),
			},
			{
				Name:     "polling_interval_multiplier",
				Type:     schema.TypeFloat,
				Resolver: schema.PathResolver("PollingIntervalMultiplier"),
			},
			{
				Name:     "prevent_merge_request_author_approval",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PreventMergeRequestsAuthorApproval"),
			},
			{
				Name:     "prevent_merge_request_committers_approval",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PreventMergeRequestsCommittersApproval"),
			},
			{
				Name:     "project_download_export_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ProjectDownloadExportLimit"),
			},
			{
				Name:     "project_export_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ProjectExportEnabled"),
			},
			{
				Name:     "project_export_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ProjectExportLimit"),
			},
			{
				Name:     "project_import_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ProjectImportLimit"),
			},
			{
				Name:     "project_runner_token_expiration_interval",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ProjectRunnerTokenExpirationInterval"),
			},
			{
				Name:     "prometheus_metrics_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PrometheusMetricsEnabled"),
			},
			{
				Name:     "protected_ci_variables",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ProtectedCIVariables"),
			},
			{
				Name:     "pseudonymizer_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PseudonymizerEnabled"),
			},
			{
				Name:     "push_event_activities_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PushEventActivitiesLimit"),
			},
			{
				Name:     "push_event_hooks_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("PushEventHooksLimit"),
			},
			{
				Name:     "pypi_package_requests_forwarding",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PyPIPackageRequestsForwarding"),
			},
			{
				Name:     "rsa_key_restriction",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RSAKeyRestriction"),
			},
			{
				Name:     "rate_limiting_response_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RateLimitingResponseText"),
			},
			{
				Name:     "raw_blob_request_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RawBlobRequestLimit"),
			},
			{
				Name:     "recaptcha_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RecaptchaEnabled"),
			},
			{
				Name:     "recaptcha_private_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RecaptchaPrivateKey"),
			},
			{
				Name:     "recaptcha_site_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RecaptchaSiteKey"),
			},
			{
				Name:     "receive_max_input_size",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ReceiveMaxInputSize"),
			},
			{
				Name:     "repository_checks_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RepositoryChecksEnabled"),
			},
			{
				Name:     "repository_size_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RepositorySizeLimit"),
			},
			{
				Name:     "repository_storages",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("RepositoryStorages"),
			},
			{
				Name:     "repository_storages_weighted",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RepositoryStoragesWeighted"),
			},
			{
				Name:     "require_admin_approval_after_user_signup",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequireAdminApprovalAfterUserSignup"),
			},
			{
				Name:     "require_two_factor_authentication",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequireTwoFactorAuthentication"),
			},
			{
				Name:     "restricted_visibility_levels",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("RestrictedVisibilityLevels"),
			},
			{
				Name:     "runner_token_expiration_interval",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("RunnerTokenExpirationInterval"),
			},
			{
				Name:     "search_rate_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SearchRateLimit"),
			},
			{
				Name:     "search_rate_limit_unauthenticated",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SearchRateLimitUnauthenticated"),
			},
			{
				Name:     "secret_detection_revocation_token_types_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SecretDetectionRevocationTokenTypesURL"),
			},
			{
				Name:     "secret_detection_token_revocation_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SecretDetectionTokenRevocationEnabled"),
			},
			{
				Name:     "secret_detection_token_revocation_token",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SecretDetectionTokenRevocationToken"),
			},
			{
				Name:     "secret_detection_token_revocation_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SecretDetectionTokenRevocationURL"),
			},
			{
				Name:     "send_user_confirmation_email",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SendUserConfirmationEmail"),
			},
			{
				Name:     "sentry_clientside_dsn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SentryClientsideDSN"),
			},
			{
				Name:     "sentry_dsn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SentryDSN"),
			},
			{
				Name:     "sentry_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SentryEnabled"),
			},
			{
				Name:     "sentry_environment",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SentryEnvironment"),
			},
			{
				Name:     "session_expire_delay",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SessionExpireDelay"),
			},
			{
				Name:     "shared_runners_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SharedRunnersEnabled"),
			},
			{
				Name:     "shared_runners_minutes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SharedRunnersMinutes"),
			},
			{
				Name:     "shared_runners_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SharedRunnersText"),
			},
			{
				Name:     "sidekiq_job_limiter_compression_threshold_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SidekiqJobLimiterCompressionThresholdBytes"),
			},
			{
				Name:     "sidekiq_job_limiter_limit_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SidekiqJobLimiterLimitBytes"),
			},
			{
				Name:     "sidekiq_job_limiter_mode",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SidekiqJobLimiterMode"),
			},
			{
				Name:     "sign_in_text",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SignInText"),
			},
			{
				Name:     "signup_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SignupEnabled"),
			},
			{
				Name:     "slack_app_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SlackAppEnabled"),
			},
			{
				Name:     "slack_app_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SlackAppID"),
			},
			{
				Name:     "slack_app_secret",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SlackAppSecret"),
			},
			{
				Name:     "slack_app_signing_secret",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SlackAppSigningSecret"),
			},
			{
				Name:     "slack_app_verification_token",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SlackAppVerificationToken"),
			},
			{
				Name:     "snippet_size_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SnippetSizeLimit"),
			},
			{
				Name:     "snowplow_app_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SnowplowAppID"),
			},
			{
				Name:     "snowplow_collector_hostname",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SnowplowCollectorHostname"),
			},
			{
				Name:     "snowplow_cookie_domain",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SnowplowCookieDomain"),
			},
			{
				Name:     "snowplow_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SnowplowEnabled"),
			},
			{
				Name:     "sourcegraph_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SourcegraphEnabled"),
			},
			{
				Name:     "sourcegraph_public_only",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SourcegraphPublicOnly"),
			},
			{
				Name:     "sourcegraph_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SourcegraphURL"),
			},
			{
				Name:     "spam_check_api_key",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SpamCheckAPIKey"),
			},
			{
				Name:     "spam_check_endpoint_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SpamCheckEndpointEnabled"),
			},
			{
				Name:     "spam_check_endpoint_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SpamCheckEndpointURL"),
			},
			{
				Name:     "suggest_pipeline_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SuggestPipelineEnabled"),
			},
			{
				Name:     "terminal_max_session_time",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TerminalMaxSessionTime"),
			},
			{
				Name:     "terms",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Terms"),
			},
			{
				Name:     "throttle_authenticated_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleAuthenticatedAPIEnabled"),
			},
			{
				Name:     "throttle_authenticated_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_authenticated_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_authenticated_deprecated_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleAuthenticatedDeprecatedAPIEnabled"),
			},
			{
				Name:     "throttle_authenticated_deprecated_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedDeprecatedAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_authenticated_deprecated_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedDeprecatedAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_authenticated_files_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleAuthenticatedFilesAPIEnabled"),
			},
			{
				Name:     "throttle_authenticated_files_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedFilesAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_authenticated_files_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedFilesAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_authenticated_git_lfs_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleAuthenticatedGitLFSEnabled"),
			},
			{
				Name:     "throttle_authenticated_git_lfs_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedGitLFSPeriodInSeconds"),
			},
			{
				Name:     "throttle_authenticated_git_lfs_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedGitLFSRequestsPerPeriod"),
			},
			{
				Name:     "throttle_authenticated_packages_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleAuthenticatedPackagesAPIEnabled"),
			},
			{
				Name:     "throttle_authenticated_packages_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedPackagesAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_authenticated_packages_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedPackagesAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_authenticated_web_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleAuthenticatedWebEnabled"),
			},
			{
				Name:     "throttle_authenticated_web_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedWebPeriodInSeconds"),
			},
			{
				Name:     "throttle_authenticated_web_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleAuthenticatedWebRequestsPerPeriod"),
			},
			{
				Name:     "throttle_incident_management_notification_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleIncidentManagementNotificationEnabled"),
			},
			{
				Name:     "throttle_incident_management_notification_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleIncidentManagementNotificationPerPeriod"),
			},
			{
				Name:     "throttle_incident_management_notification_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleIncidentManagementNotificationPeriodInSeconds"),
			},
			{
				Name:     "throttle_protected_paths_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleProtectedPathsEnabled"),
			},
			{
				Name:     "throttle_protected_paths_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleProtectedPathsPeriodInSeconds"),
			},
			{
				Name:     "throttle_protected_paths_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleProtectedPathsRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedAPIEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_deprecated_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedDeprecatedAPIEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_deprecated_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedDeprecatedAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_deprecated_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedDeprecatedAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_files_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedFilesAPIEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_files_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedFilesAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_files_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedFilesAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_git_lfs_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedGitLFSEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_git_lfs_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedGitLFSPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_git_lfs_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedGitLFSRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_packages_api_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedPackagesAPIEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_packages_api_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedPackagesAPIPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_packages_api_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedPackagesAPIRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedRequestsPerPeriod"),
			},
			{
				Name:     "throttle_unauthenticated_web_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedWebEnabled"),
			},
			{
				Name:     "throttle_unauthenticated_web_period_in_seconds",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedWebPeriodInSeconds"),
			},
			{
				Name:     "throttle_unauthenticated_web_requests_per_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThrottleUnauthenticatedWebRequestsPerPeriod"),
			},
			{
				Name:     "time_tracking_limit_to_hours",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("TimeTrackingLimitToHours"),
			},
			{
				Name:     "two_factor_grace_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TwoFactorGracePeriod"),
			},
			{
				Name:     "unique_ips_limit_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UniqueIPsLimitEnabled"),
			},
			{
				Name:     "unique_ips_limit_per_user",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UniqueIPsLimitPerUser"),
			},
			{
				Name:     "unique_ips_limit_time_window",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UniqueIPsLimitTimeWindow"),
			},
			{
				Name:     "updated_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("UpdatedAt"),
			},
			{
				Name:     "updating_name_disabled_for_users",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UpdatingNameDisabledForUsers"),
			},
			{
				Name:     "usage_ping_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UsagePingEnabled"),
			},
			{
				Name:     "usage_ping_features_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UsagePingFeaturesEnabled"),
			},
			{
				Name:     "user_deactivation_emails_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UserDeactivationEmailsEnabled"),
			},
			{
				Name:     "user_default_external",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UserDefaultExternal"),
			},
			{
				Name:     "user_default_internal_regex",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UserDefaultInternalRegex"),
			},
			{
				Name:     "user_email_lookup_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UserEmailLookupLimit"),
			},
			{
				Name:     "user_oauth_applications",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UserOauthApplications"),
			},
			{
				Name:     "user_show_add_ssh_key_message",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UserShowAddSSHKeyMessage"),
			},
			{
				Name:     "users_get_by_id_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("UsersGetByIDLimit"),
			},
			{
				Name:     "users_get_by_id_limit_allowlist_raw",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("UsersGetByIDLimitAllowlistRaw"),
			},
			{
				Name:     "version_check_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("VersionCheckEnabled"),
			},
			{
				Name:     "web_ide_clientside_preview_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("WebIDEClientsidePreviewEnabled"),
			},
			{
				Name:     "whats_new_variant",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WhatsNewVariant"),
			},
			{
				Name:     "wiki_page_max_content_bytes",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("WikiPageMaxContentBytes"),
			},
		},
	}
}
