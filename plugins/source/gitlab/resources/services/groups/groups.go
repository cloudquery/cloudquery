// Code generated by codegen; DO NOT EDIT.

package groups

import (
	"github.com/cloudquery/cloudquery/plugins/source/gitlab/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Groups() *schema.Table {
	return &schema.Table{
		Name:     "gitlab_groups",
		Resolver: fetchGroups,
		Columns: []schema.Column{
			{
				Name:     "base_url",
				Type:     schema.TypeString,
				Resolver: client.ResolveURL,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Path"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "membership_lock",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MembershipLock"),
			},
			{
				Name:     "visibility",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Visibility"),
			},
			{
				Name:     "lfs_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("LFSEnabled"),
			},
			{
				Name:     "default_branch_protection",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("DefaultBranchProtection"),
			},
			{
				Name:     "avatar_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvatarURL"),
			},
			{
				Name:     "web_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WebURL"),
			},
			{
				Name:     "request_access_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequestAccessEnabled"),
			},
			{
				Name:     "full_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FullName"),
			},
			{
				Name:     "full_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("FullPath"),
			},
			{
				Name:     "file_template_project_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("FileTemplateProjectID"),
			},
			{
				Name:     "parent_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ParentID"),
			},
			{
				Name:     "projects",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Projects"),
			},
			{
				Name:     "statistics",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Statistics"),
			},
			{
				Name:     "custom_attributes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomAttributes"),
			},
			{
				Name:     "share_with_group_lock",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ShareWithGroupLock"),
			},
			{
				Name:     "require_two_factor_authentication",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequireTwoFactorAuth"),
			},
			{
				Name:     "two_factor_grace_period",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("TwoFactorGracePeriod"),
			},
			{
				Name:     "project_creation_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ProjectCreationLevel"),
			},
			{
				Name:     "auto_devops_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoDevopsEnabled"),
			},
			{
				Name:     "subgroup_creation_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SubGroupCreationLevel"),
			},
			{
				Name:     "emails_disabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EmailsDisabled"),
			},
			{
				Name:     "mentions_disabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MentionsDisabled"),
			},
			{
				Name:     "runners_token",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RunnersToken"),
			},
			{
				Name:     "shared_projects",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SharedProjects"),
			},
			{
				Name:     "shared_runners_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SharedRunnersEnabled"),
			},
			{
				Name:     "shared_with_groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SharedWithGroups"),
			},
			{
				Name:     "ldap_cn",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LDAPCN"),
			},
			{
				Name:     "ldap_access",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("LDAPAccess"),
			},
			{
				Name:     "ldap_group_links",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("LDAPGroupLinks"),
			},
			{
				Name:     "saml_group_links",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SAMLGroupLinks"),
			},
			{
				Name:     "shared_runners_minutes_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SharedRunnersMinutesLimit"),
			},
			{
				Name:     "extra_shared_runners_minutes_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ExtraSharedRunnersMinutesLimit"),
			},
			{
				Name:     "prevent_forking_outside_group",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PreventForkingOutsideGroup"),
			},
			{
				Name:     "marked_for_deletion_on",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("MarkedForDeletionOn"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
		},

		Relations: []*schema.Table{
			GroupMembers(),
		},
	}
}
