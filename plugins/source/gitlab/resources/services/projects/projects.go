// Code generated by codegen; DO NOT EDIT.

package projects

import (
	"github.com/cloudquery/cloudquery/plugins/source/gitlab/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Projects() *schema.Table {
	return &schema.Table{
		Name:     "gitlab_projects",
		Resolver: fetchProjects,
		Columns: []schema.Column{
			{
				Name:     "base_url",
				Type:     schema.TypeString,
				Resolver: client.ResolveURL,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "default_branch",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DefaultBranch"),
			},
			{
				Name:     "public",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Public"),
			},
			{
				Name:     "visibility",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Visibility"),
			},
			{
				Name:     "ssh_url_to_repo",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SSHURLToRepo"),
			},
			{
				Name:     "http_url_to_repo",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("HTTPURLToRepo"),
			},
			{
				Name:     "web_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WebURL"),
			},
			{
				Name:     "readme_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ReadmeURL"),
			},
			{
				Name:     "tag_list",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("TagList"),
			},
			{
				Name:     "topics",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Topics"),
			},
			{
				Name:     "owner",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Owner"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "name_with_namespace",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NameWithNamespace"),
			},
			{
				Name:     "path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Path"),
			},
			{
				Name:     "path_with_namespace",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PathWithNamespace"),
			},
			{
				Name:     "issues_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IssuesEnabled"),
			},
			{
				Name:     "open_issues_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("OpenIssuesCount"),
			},
			{
				Name:     "merge_requests_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MergeRequestsEnabled"),
			},
			{
				Name:     "approvals_before_merge",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ApprovalsBeforeMerge"),
			},
			{
				Name:     "jobs_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("JobsEnabled"),
			},
			{
				Name:     "wiki_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("WikiEnabled"),
			},
			{
				Name:     "snippets_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SnippetsEnabled"),
			},
			{
				Name:     "resolve_outdated_diff_discussions",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ResolveOutdatedDiffDiscussions"),
			},
			{
				Name:     "container_expiration_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ContainerExpirationPolicy"),
			},
			{
				Name:     "container_registry_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ContainerRegistryEnabled"),
			},
			{
				Name:     "container_registry_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ContainerRegistryAccessLevel"),
			},
			{
				Name:     "container_registry_image_prefix",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ContainerRegistryImagePrefix"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "last_activity_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastActivityAt"),
			},
			{
				Name:     "creator_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CreatorID"),
			},
			{
				Name:     "namespace",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Namespace"),
			},
			{
				Name:     "import_status",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ImportStatus"),
			},
			{
				Name:     "import_error",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ImportError"),
			},
			{
				Name:     "permissions",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Permissions"),
			},
			{
				Name:     "marked_for_deletion_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("MarkedForDeletionAt"),
			},
			{
				Name:     "empty_repo",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EmptyRepo"),
			},
			{
				Name:     "archived",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Archived"),
			},
			{
				Name:     "avatar_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvatarURL"),
			},
			{
				Name:     "license_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("LicenseURL"),
			},
			{
				Name:     "license",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("License"),
			},
			{
				Name:     "shared_runners_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("SharedRunnersEnabled"),
			},
			{
				Name:     "forks_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ForksCount"),
			},
			{
				Name:     "star_count",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("StarCount"),
			},
			{
				Name:     "runners_token",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RunnersToken"),
			},
			{
				Name:     "public_jobs",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PublicJobs"),
			},
			{
				Name:     "allow_merge_on_skipped_pipeline",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AllowMergeOnSkippedPipeline"),
			},
			{
				Name:     "only_allow_merge_if_pipeline_succeeds",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("OnlyAllowMergeIfPipelineSucceeds"),
			},
			{
				Name:     "only_allow_merge_if_all_discussions_are_resolved",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("OnlyAllowMergeIfAllDiscussionsAreResolved"),
			},
			{
				Name:     "remove_source_branch_after_merge",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RemoveSourceBranchAfterMerge"),
			},
			{
				Name:     "printing_merge_request_link_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PrintingMergeRequestLinkEnabled"),
			},
			{
				Name:     "lfs_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("LFSEnabled"),
			},
			{
				Name:     "repository_storage",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RepositoryStorage"),
			},
			{
				Name:     "request_access_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RequestAccessEnabled"),
			},
			{
				Name:     "merge_method",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MergeMethod"),
			},
			{
				Name:     "forked_from_project",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ForkedFromProject"),
			},
			{
				Name:     "mirror",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Mirror"),
			},
			{
				Name:     "mirror_user_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("MirrorUserID"),
			},
			{
				Name:     "mirror_trigger_builds",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MirrorTriggerBuilds"),
			},
			{
				Name:     "only_mirror_protected_branches",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("OnlyMirrorProtectedBranches"),
			},
			{
				Name:     "mirror_overwrites_diverged_branches",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MirrorOverwritesDivergedBranches"),
			},
			{
				Name:     "packages_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PackagesEnabled"),
			},
			{
				Name:     "service_desk_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("ServiceDeskEnabled"),
			},
			{
				Name:     "service_desk_address",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ServiceDeskAddress"),
			},
			{
				Name:     "issues_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IssuesAccessLevel"),
			},
			{
				Name:     "repository_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RepositoryAccessLevel"),
			},
			{
				Name:     "merge_requests_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MergeRequestsAccessLevel"),
			},
			{
				Name:     "forking_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ForkingAccessLevel"),
			},
			{
				Name:     "wiki_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WikiAccessLevel"),
			},
			{
				Name:     "builds_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BuildsAccessLevel"),
			},
			{
				Name:     "snippets_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SnippetsAccessLevel"),
			},
			{
				Name:     "pages_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PagesAccessLevel"),
			},
			{
				Name:     "operations_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("OperationsAccessLevel"),
			},
			{
				Name:     "analytics_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AnalyticsAccessLevel"),
			},
			{
				Name:     "autoclose_referenced_issues",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutocloseReferencedIssues"),
			},
			{
				Name:     "suggestion_commit_message",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SuggestionCommitMessage"),
			},
			{
				Name:     "auto_cancel_pending_pipelines",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AutoCancelPendingPipelines"),
			},
			{
				Name:     "ci_forward_deployment_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CIForwardDeploymentEnabled"),
			},
			{
				Name:     "squash_option",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SquashOption"),
			},
			{
				Name:     "enforce_auth_checks_on_uploads",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnforceAuthChecksOnUploads"),
			},
			{
				Name:     "shared_with_groups",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SharedWithGroups"),
			},
			{
				Name:     "statistics",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Statistics"),
			},
			{
				Name:     "_links",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Links"),
			},
			{
				Name:     "ci_config_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("CIConfigPath"),
			},
			{
				Name:     "ci_default_git_depth",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("CIDefaultGitDepth"),
			},
			{
				Name:     "ci_separated_caches",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CISeperateCache"),
			},
			{
				Name:     "custom_attributes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomAttributes"),
			},
			{
				Name:     "compliance_frameworks",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("ComplianceFrameworks"),
			},
			{
				Name:     "build_coverage_regex",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BuildCoverageRegex"),
			},
			{
				Name:     "build_timeout",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("BuildTimeout"),
			},
			{
				Name:     "issues_template",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("IssuesTemplate"),
			},
			{
				Name:     "merge_requests_template",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MergeRequestsTemplate"),
			},
			{
				Name:     "keep_latest_artifact",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("KeepLatestArtifact"),
			},
			{
				Name:     "merge_pipelines_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MergePipelinesEnabled"),
			},
			{
				Name:     "merge_trains_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("MergeTrainsEnabled"),
			},
			{
				Name:     "restrict_user_defined_variables",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("RestrictUserDefinedVariables"),
			},
			{
				Name:     "merge_commit_template",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("MergeCommitTemplate"),
			},
			{
				Name:     "squash_commit_template",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SquashCommitTemplate"),
			},
			{
				Name:     "auto_devops_deploy_strategy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AutoDevopsDeployStrategy"),
			},
			{
				Name:     "auto_devops_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("AutoDevopsEnabled"),
			},
			{
				Name:     "build_git_strategy",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BuildGitStrategy"),
			},
			{
				Name:     "emails_disabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EmailsDisabled"),
			},
			{
				Name:     "external_authorization_classification_label",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternalAuthorizationClassificationLabel"),
			},
			{
				Name:     "requirements_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RequirementsAccessLevel"),
			},
			{
				Name:     "security_and_compliance_access_level",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("SecurityAndComplianceAccessLevel"),
			},
			{
				Name:     "public_builds",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PublicBuilds"),
			},
		},

		Relations: []*schema.Table{
			ProjectsReleases(),
		},
	}
}
