// Code generated by codegen; DO NOT EDIT.

package users

import (
	"github.com/cloudquery/cloudquery/plugins/source/gitlab/client"
	"github.com/cloudquery/plugin-sdk/schema"
)

func Users() *schema.Table {
	return &schema.Table{
		Name:     "gitlab_users",
		Resolver: fetchUsers,
		Columns: []schema.Column{
			{
				Name:     "base_url",
				Type:     schema.TypeString,
				Resolver: client.ResolveURL,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:          "last_activity_on",
				Type:          schema.TypeJSON,
				Resolver:      schema.PathResolver("LastActivityOn"),
				IgnoreInTests: true,
			},
			{
				Name:     "id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ID"),
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "username",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Username"),
			},
			{
				Name:     "email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Email"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("State"),
			},
			{
				Name:     "web_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WebURL"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CreatedAt"),
			},
			{
				Name:     "bio",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Bio"),
			},
			{
				Name:     "bot",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("Bot"),
			},
			{
				Name:     "location",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Location"),
			},
			{
				Name:     "public_email",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("PublicEmail"),
			},
			{
				Name:     "skype",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Skype"),
			},
			{
				Name:     "linkedin",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Linkedin"),
			},
			{
				Name:     "twitter",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Twitter"),
			},
			{
				Name:     "website_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("WebsiteURL"),
			},
			{
				Name:     "organization",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Organization"),
			},
			{
				Name:     "job_title",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("JobTitle"),
			},
			{
				Name:     "extern_uid",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ExternUID"),
			},
			{
				Name:     "provider",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Provider"),
			},
			{
				Name:     "theme_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ThemeID"),
			},
			{
				Name:     "color_scheme_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ColorSchemeID"),
			},
			{
				Name:     "is_admin",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("IsAdmin"),
			},
			{
				Name:     "avatar_url",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AvatarURL"),
			},
			{
				Name:     "can_create_group",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CanCreateGroup"),
			},
			{
				Name:     "can_create_project",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("CanCreateProject"),
			},
			{
				Name:     "projects_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ProjectsLimit"),
			},
			{
				Name:     "current_sign_in_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("CurrentSignInAt"),
			},
			{
				Name:     "current_sign_in_ip",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("CurrentSignInIP"),
			},
			{
				Name:     "last_sign_in_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("LastSignInAt"),
			},
			{
				Name:     "last_sign_in_ip",
				Type:     schema.TypeIntArray,
				Resolver: schema.PathResolver("LastSignInIP"),
			},
			{
				Name:     "confirmed_at",
				Type:     schema.TypeTimestamp,
				Resolver: schema.PathResolver("ConfirmedAt"),
			},
			{
				Name:     "two_factor_enabled",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("TwoFactorEnabled"),
			},
			{
				Name:     "note",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Note"),
			},
			{
				Name:     "identities",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Identities"),
			},
			{
				Name:     "external",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("External"),
			},
			{
				Name:     "private_profile",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("PrivateProfile"),
			},
			{
				Name:     "shared_runners_minutes_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("SharedRunnersMinutesLimit"),
			},
			{
				Name:     "extra_shared_runners_minutes_limit",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("ExtraSharedRunnersMinutesLimit"),
			},
			{
				Name:     "using_license_seat",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("UsingLicenseSeat"),
			},
			{
				Name:     "custom_attributes",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("CustomAttributes"),
			},
			{
				Name:     "namespace_id",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("NamespaceID"),
			},
		},
	}
}
