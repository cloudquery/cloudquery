// Code generated by MockGen. DO NOT EDIT.
// Source: releases.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gitlab "github.com/xanzy/go-gitlab"
)

// MockReleasesClient is a mock of ReleasesClient interface.
type MockReleasesClient struct {
	ctrl     *gomock.Controller
	recorder *MockReleasesClientMockRecorder
}

// MockReleasesClientMockRecorder is the mock recorder for MockReleasesClient.
type MockReleasesClientMockRecorder struct {
	mock *MockReleasesClient
}

// NewMockReleasesClient creates a new mock instance.
func NewMockReleasesClient(ctrl *gomock.Controller) *MockReleasesClient {
	mock := &MockReleasesClient{ctrl: ctrl}
	mock.recorder = &MockReleasesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleasesClient) EXPECT() *MockReleasesClientMockRecorder {
	return m.recorder
}

// ListReleases mocks base method.
func (m *MockReleasesClient) ListReleases(pid interface{}, opt *gitlab.ListReleasesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReleases", varargs...)
	ret0, _ := ret[0].([]*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockReleasesClientMockRecorder) ListReleases(pid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockReleasesClient)(nil).ListReleases), varargs...)
}
