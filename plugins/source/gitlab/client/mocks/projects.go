// Code generated by MockGen. DO NOT EDIT.
// Source: projects.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gitlab "github.com/xanzy/go-gitlab"
)

// MockProjectsClient is a mock of ProjectsClient interface.
type MockProjectsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsClientMockRecorder
}

// MockProjectsClientMockRecorder is the mock recorder for MockProjectsClient.
type MockProjectsClientMockRecorder struct {
	mock *MockProjectsClient
}

// NewMockProjectsClient creates a new mock instance.
func NewMockProjectsClient(ctrl *gomock.Controller) *MockProjectsClient {
	mock := &MockProjectsClient{ctrl: ctrl}
	mock.recorder = &MockProjectsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectsClient) EXPECT() *MockProjectsClientMockRecorder {
	return m.recorder
}

// GetProject mocks base method.
func (m *MockProjectsClient) GetProject(pid interface{}, opt *gitlab.GetProjectOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProject", varargs...)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectsClientMockRecorder) GetProject(pid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectsClient)(nil).GetProject), varargs...)
}

// ListProjects mocks base method.
func (m *MockProjectsClient) ListProjects(opt *gitlab.ListProjectsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectsClientMockRecorder) ListProjects(opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectsClient)(nil).ListProjects), varargs...)
}
